Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WordIntervalTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WordIntervalTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WordIntervalTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.WordIntervalTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.594s cpu time, 0.056s GC time
Loading theory "Draft.WordInterval" (required by "Draft.WordIntervalTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.867s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WordIntervalTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.354s elapsed time, 1.410s cpu time, 0.162s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WordIntervalTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.991s elapsed time, 3.749s cpu time, 0.963s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 3.896s cpu time, 0.902s GC time
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
consts
  interval_of :: "'a word * 'a word => 'a word set"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.074s elapsed time, 6.707s cpu time, 1.265s GC time
Loading theory "Draft.Templates" (required by "Draft.WordIntervalTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WordIntervalTemplates")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
wordinterval_eq ?r1.1 ?r2.1 ==>
wordinterval_to_set ?r1.1 = wordinterval_to_set ?r2.1
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.786s elapsed time, 1.959s cpu time, 0.888s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.WordInterval"
### 2.888s elapsed time, 8.314s cpu time, 2.097s GC time
Loading theory "Draft.WordIntervalTemplates"
val templateLemmas =
   [("WordInterval.Ex_wordinterval_nonempty",
     "EX x. ?y : wordinterval_to_set x",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("WordInterval.wordinterval_size_length",
     "wordinterval_size ?r = length (wi2l ?r)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("WordInterval.wordinterval_compress",
     "wordinterval_to_set (wordinterval_compress ?r) =
      wordinterval_to_set ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("WordInterval.wordinterval_optimize_empty_set_eq",
     "wordinterval_to_set (wordinterval_optimize_empty ?r) =
      wordinterval_to_set ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("WordInterval.wordinterval_optimize_empty_double",
     "wordinterval_optimize_empty (wordinterval_optimize_empty ?r) =
      wordinterval_optimize_empty ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("WordInterval.wordinterval_card",
     "card (wordinterval_to_set ?r) <= wordinterval_card ?r",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("WordInterval.l2wi_wi2l",
     "wordinterval_to_set (l2wi (wi2l ?r)) = wordinterval_to_set ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("WordInterval.wordinterval_empty_set_eq",
     "wordinterval_empty ?r = (wordinterval_to_set ?r = {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("WordInterval.helper_optimize_shallow",
     "??.WordInterval.wordinterval_empty_shallow
       (wordinterval_optimize_empty ?r) =
      wordinterval_empty (wordinterval_optimize_empty ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("WordInterval.wordinterval_eq_comm",
     "wordinterval_eq ?r1.0 ?r2.0 = wordinterval_eq ?r2.0 ?r1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("WordInterval.wordinterval_lowest_none_empty",
     "(wordinterval_lowest_element ?r = None) = wordinterval_empty ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("WordInterval.wordinterval_to_set_alt",
     "wordinterval_to_set ?r = {x. wordinterval_element x ?r}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("WordInterval.wordinterval_invert_set_eq",
     "wordinterval_to_set (wordinterval_invert ?r) =
      UNIV - wordinterval_to_set ?r",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 0)))),
    ("WordInterval.l2wi_remdups",
     "wordinterval_to_set (l2wi (remdups ?ls)) =
      wordinterval_to_set (l2wi ?ls)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("WordInterval.wordinterval_element_set_eq",
     "wordinterval_element ?el ?rg = (?el : wordinterval_to_set ?rg)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("WordInterval.wordinterval_eq_set_eq",
     "wordinterval_eq ?r1.0 ?r2.0 =
      (wordinterval_to_set ?r1.0 = wordinterval_to_set ?r2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("WordInterval.wordinterval_subset_set_eq",
     "wordinterval_subset ?r1.0 ?r2.0 =
      (wordinterval_to_set ?r1.0 <= wordinterval_to_set ?r2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("WordInterval.wordinterval_un_empty",
     "wordinterval_empty ?r1.0 ==>
      wordinterval_eq (wordinterval_union ?r1.0 ?r2.0) ?r2.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("WordInterval.wordinterval_setminus'_empty_struct",
     "wordinterval_empty ?r2.0 ==>
      ??.WordInterval.wordinterval_setminus' ?r1.0 ?r2.0 = ?r1.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("WordInterval.wordinterval_un_emty_b",
     "wordinterval_empty ?r2.0 ==>
      wordinterval_eq (wordinterval_union ?r1.0 ?r2.0) ?r1.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("WordInterval.wordinterval_intersection_set_eq",
     "wordinterval_to_set (wordinterval_intersection ?r1.0 ?r2.0) =
      wordinterval_to_set ?r1.0 Int wordinterval_to_set ?r2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("WordInterval.wordinterval_intersection'_set_eq",
     "wordinterval_to_set
       (??.WordInterval.wordinterval_intersection' ?r1.0 ?r2.0) =
      wordinterval_to_set ?r1.0 Int wordinterval_to_set ?r2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("WordInterval.wordinterval_setminus_set_eq",
     "wordinterval_to_set (wordinterval_setminus ?r1.0 ?r2.0) =
      wordinterval_to_set ?r1.0 - wordinterval_to_set ?r2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("WordInterval.wordinterval_setminus'_set_eq",
     "wordinterval_to_set
       (??.WordInterval.wordinterval_setminus' ?r1.0 ?r2.0) =
      wordinterval_to_set ?r1.0 - wordinterval_to_set ?r2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("WordInterval.wordinterval_union_set_eq",
     "wordinterval_to_set (wordinterval_union ?r1.0 ?r2.0) =
      wordinterval_to_set ?r1.0 Un wordinterval_to_set ?r2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("WordInterval.card_atLeastAtMost_word",
     "card {?s..?e} = Suc (unat ?e) - unat ?s",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("WordInterval.wordinterval_Union",
     "wordinterval_to_set (wordinterval_Union ?ws) =
      \<Union> (wordinterval_to_set ` set ?ws)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("WordInterval.wordinterval_Diff_triv",
     "wordinterval_empty (wordinterval_intersection ?a ?b) ==>
      wordinterval_eq (wordinterval_setminus ?a ?b) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("WordInterval.wordinterval_lowest_element_correct_A",
     "wordinterval_lowest_element ?r = Some ?x ==>
      is_lowest_element ?x (wordinterval_to_set ?r)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("WordInterval.l2wi_append",
     "wordinterval_to_set (l2wi (?l1.0 @ ?l2.0)) =
      wordinterval_to_set (l2wi ?l1.0) Un wordinterval_to_set (l2wi ?l2.0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("WordInterval.l2wi",
     "wordinterval_to_set (l2wi ?l) = (UN (i, j):set ?l. {i..j})",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_app (template_hole 0, template_var 0))))),
    ("WordInterval.wi2l",
     "(UN (i, j):set (wi2l ?r). {i..j}) = wordinterval_to_set ?r",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app (template_hole 0, template_var 0))),
    ("WordInterval.wordinterval_lowest_element_set_eq",
     "~ wordinterval_empty ?r ==>
      (wordinterval_lowest_element ?r = Some ?x) =
      is_lowest_element ?x (wordinterval_to_set ?r)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("WordInterval.disjoint_subset",
     "[| ??.WordInterval.disjoint ?A ?B; ?A <= ?B Un ?C |] ==> ?A <= ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("WordInterval.listwordinterval_adjacent",
     "\<Union>
       (??.WordInterval.interval_of `
        set (??.WordInterval.listwordinterval_adjacent ?ss)) =
      \<Union> (??.WordInterval.interval_of ` set ?ss)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_var 0))))),
    ("WordInterval.listwordinterval_compress",
     "\<Union>
       (??.WordInterval.interval_of `
        set (??.WordInterval.listwordinterval_compress ?ss)) =
      \<Union> (??.WordInterval.interval_of ` set ?ss)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_var 0))))),
    ("WordInterval.A_in_listwordinterval_compress",
     "?A : set (??.WordInterval.listwordinterval_compress ?ss) ==>
      ??.WordInterval.interval_of ?A
      <= \<Union> (??.WordInterval.interval_of ` set ?ss)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty),
             template_app (template_hole 5, template_var 0)))))),
    ("WordInterval.wordinterval_setminus'_rr_set_eq",
     "wordinterval_to_set
       (??.WordInterval.wordinterval_setminus' (WordInterval ?s ?e)
         (WordInterval ?ms ?me)) =
      wordinterval_to_set (WordInterval ?s ?e) -
      wordinterval_to_set (WordInterval ?ms ?me)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("WordInterval.merge_overlap_length",
     "EX s':set ?ss.
         ~ ??.WordInterval.disjoint (??.WordInterval.interval_of ?A)
            (??.WordInterval.interval_of s') ==>
      length (??.WordInterval.merge_overlap ?A ?ss) = length ?ss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("WordInterval.merge_adjacent_helper",
     "??.WordInterval.interval_of ?A Un
      \<Union> (??.WordInterval.interval_of ` set ?ss) =
      \<Union>
       (??.WordInterval.interval_of `
        set (??.WordInterval.merge_adjacent ?A ?ss))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("WordInterval.not_disjoint_union",
     "~ ??.WordInterval.disjoint {?s..?e} {?s'..?e'} ==>
      {?s..?e} Un {?s'..?e'} = {min ?s ?s'..max ?e ?e'}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("WordInterval.listwordinterval_compress_disjoint",
     "[| ?A : set (??.WordInterval.listwordinterval_compress ?ss);
         ?B : set (??.WordInterval.listwordinterval_compress ?ss);
         ?A ~= ?B |]
      ==> ??.WordInterval.disjoint (??.WordInterval.interval_of ?A)
           (??.WordInterval.interval_of ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("WordInterval.merge_overlap_helper1",
     "??.WordInterval.interval_of ?A
      <= \<Union> (??.WordInterval.interval_of ` set ?ss) ==>
      \<Union>
       (??.WordInterval.interval_of `
        set (??.WordInterval.merge_overlap ?A ?ss)) =
      \<Union> (??.WordInterval.interval_of ` set ?ss)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, t_empty),
              template_app (template_hole 2, template_var 0))))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, template_var 0)))))),
    ("WordInterval.merge_overlap_helper2",
     "EX s':set ?ss.
         ~ ??.WordInterval.disjoint (??.WordInterval.interval_of ?A)
            (??.WordInterval.interval_of s') ==>
      ??.WordInterval.interval_of ?A Un
      \<Union> (??.WordInterval.interval_of ` set ?ss) =
      \<Union>
       (??.WordInterval.interval_of `
        set (??.WordInterval.merge_overlap ?A ?ss))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 8, template_var 1)))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))))))),
    ("WordInterval.merge_adjacent_length",
     "EX (s', e'):set ?ss.
         ?s <= ?e & s' <= e' & (word_next ?e = s' | word_next e' = ?s) ==>
      length (??.WordInterval.merge_adjacent (?s, ?e) ?ss) = length ?ss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 9, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_app (template_hole 2, template_var 2))))]:
   (string * thm * template) list
### theory "Draft.WordIntervalTemplates"
### 0.530s elapsed time, 0.687s cpu time, 0.068s GC time
val it = (): unit
