   [("Lib_Word_toString.dec_string_of_word0",
     "dec_string_of_word0 ?w128.0 = string_of_nat (unat ?w128.0)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Lib_Word_toString.dec_string_of_word0",
     "dec_string_of_word0 ?w64.0 = string_of_nat (unat ?w64.0)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Lib_Word_toString.dec_string_of_word0",
     "dec_string_of_word0 ?w32.0 = string_of_nat (unat ?w32.0)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Lib_Word_toString.dec_string_of_word0",
     "dec_string_of_word0 ?w16.0 = string_of_nat (unat ?w16.0)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Lib_Word_toString.dec_string_of_word0",
     "dec_string_of_word0 ?w8.0 = string_of_nat (unat ?w8.0)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Lib_Word_toString.bintrunc_pos_eq",
     "0 <= ?x ==> (take_bit ?n ?x = ?x) = (?x < 2 ^ ?n)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Lib_Word_toString.string_of_word_single_atoi",
     "?n < 10 ==> string_of_word_single True ?n = [char_of (48 + unat ?n)]",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 12,
            template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app (template_hole 11, template_hole 9)))))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 11,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))))))),
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)))),
    ("Lib_Word_toString.string_of_word_base_ten_zeropad",
     "[| 5 <= LENGTH(?'a); ?base = 10; ?zero = 0 |]
      ==> string_of_word True ?base ?zero ?w = string_of_nat (unat ?w)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 14,
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11))),
          template_app (template_hole 10, template_hole 9)),
        template_equation
         (template_var 2,
          template_app
           (template_hole 7,
            template_app
             (template_hole 12,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11))))),
        template_equation (template_var 1, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0)))))]
