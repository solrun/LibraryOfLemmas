Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.MuchAdoAboutTwo" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.MuchAdoAboutTwo" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.MuchAdoAboutTwo" via "HOL-Combinatorics.Permutations" via "HOL-Library.Disjoint_Sets")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.534s cpu time, 0.033s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Combinatorics.Transposition"
### 0.139s elapsed time, 0.569s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.772s cpu time, 0.066s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.386s elapsed time, 1.552s cpu time, 0.100s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.MuchAdoAboutTwo" via "HOL-Combinatorics.Permutations")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.426s elapsed time, 1.697s cpu time, 0.169s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.MuchAdoAboutTwo" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Nat_Bijection"
### 0.303s elapsed time, 1.191s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.236s elapsed time, 0.934s cpu time, 0.109s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.933s elapsed time, 3.587s cpu time, 0.806s GC time
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### theory "HOL-Library.BigO"
### 0.855s elapsed time, 3.159s cpu time, 0.765s GC time
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 1.849s elapsed time, 5.847s cpu time, 1.137s GC time
Loading theory "Draft.Templates" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.ExtrEqs")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MuchAdoAboutTwoMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.157s cpu time, 0.137s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 2.964s elapsed time, 7.369s cpu time, 1.313s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.MuchAdoAboutTwoMoreTemplates" via "Draft.MuchAdoAboutTwo")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 0.946s elapsed time, 1.635s cpu time, 0.884s GC time
Loading theory "Draft.MuchAdoAboutTwo" (required by "Draft.MuchAdoAboutTwoMoreTemplates")
### Missing patterns in function definition:
### !!a. foldl1 a [] = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Introduced fixed type variable(s): 'a, 'b in "f" or "g" or "h" or "zs"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### l2n [] = undefined
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.MuchAdoAboutTwo"
### 1.142s elapsed time, 1.392s cpu time, 0.329s GC time
Loading theory "Draft.MuchAdoAboutTwoMoreTemplates"
val templateLemmas =
   [("MuchAdoAboutTwo.non_empty_n2l", "n2l ?xs ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("MuchAdoAboutTwo.L2", "length (map ?f ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MuchAdoAboutTwo.L4", "map ?f o wrap = wrap o ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("MuchAdoAboutTwo.L1", "map ?g (map ?f ?xs) = map (?g o ?f) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("MuchAdoAboutTwo.L3", "take ?k (map ?f ?xs) = map ?f (take ?k ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("MuchAdoAboutTwo.n2l_l2n_id", "?x ~= [] ==> n2l (l2n ?x) = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("MuchAdoAboutTwo.L5", "map ?f (?xs @ ?ys) = map ?f ?xs @ map ?f ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("MuchAdoAboutTwo.L6",
     "?k < length ?xs ==> map ?f ?xs ! ?k = ?f (?xs ! ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("MuchAdoAboutTwo.Figure_3",
     "?i < ?k ==> foldl1 f2 (map (h2 ?i) [0..<?k + 1]) = Two",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("MuchAdoAboutTwo.upt_map_Suc",
     "0 < ?k ==> [0..<?k + 1] = 0 # map Suc [0..<?k]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 7),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3)),
         template_app
          (template_app (template_hole 2, template_hole 7),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 5, template_hole 7),
               template_var 0)))))),
    ("MuchAdoAboutTwo.Figure_2",
     "?i <= ?k ==> foldl1 f1 (map (h1 ?k ?i) [0..<?k + 1]) = One",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("MuchAdoAboutTwo.foldl1_append",
     "?xs ~= [] ==>
      foldl1 ?f (?xs @ ?ys) = foldl1 ?f (foldl1 ?f ?xs # ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("MuchAdoAboutTwo.L7",
     "?k < length ?xs ==> map ((!) ?xs) [0..<?k + 1] = take (?k + 1) ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_var 0)))),
    ("MuchAdoAboutTwo.n2l_l2n_map_id",
     "(!!x. x : set ?zs ==> x ~= []) ==> map (n2l o l2n) ?zs = ?zs",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0),
         template_var 0))),
    ("MuchAdoAboutTwo.Figure_4",
     "[| foldl1 f1 (map (h1 ?k ?i) ?js) = One; ?js ~= [] |]
      ==> ?i : set ?js",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)),
          template_hole 5),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MuchAdoAboutTwo.all_set_inter_empty_distinct",
     "(!!xs ys. ?js = xs @ ys ==> set xs Int set ys = {}) ==> distinct ?js",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("MuchAdoAboutTwo.candidate_free_theorem",
     "?h (?f ?x ?y) = ?g (?h ?x) (?h ?y) ==>
      map ?h (candidate ?f ?zs) = candidate ?g (map ?h ?zs)",
     template_implication
      ([template_equation
         (template_app
           (template_var 5,
            template_app
             (template_app (template_var 4, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_var 1,
              template_app (template_var 5, template_var 3)),
            template_app (template_var 5, template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 5),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 0))))),
    ("MuchAdoAboutTwo.Lemma_2",
     "[| length ?xs = length ?ys;
         !!k. k < length ?xs ==> ?xs ! k = ?ys ! k |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("MuchAdoAboutTwo.Figure_5",
     "[| foldl1 f1 (map (h1 ?k ?i) ?js) = One; ?js = ?xs @ ?ys |]
      ==> ~ (?i : set ?xs & ?i : set ?ys)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_hole 9),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_var 2)),
          template_hole 6),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app (template_hole 0, template_var 1))),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("MuchAdoAboutTwo.Figure_6",
     "[| !!i. i <= ?k ==> foldl1 f1 (map (h1 ?k i) ?js) = One; ?k < ?i |]
      ==> ?i ~: set ?js",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation (less_than, template_var 2, template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("MuchAdoAboutTwo.Lemma_3",
     "associative ?f ==>
      map (foldl1 ?f o map ?h) (candidate (@) (map wrap [0..<?n + 1])) =
      candidate ?f (map ?h [0..<?n + 1])",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 2)),
               template_app (template_hole 9, template_var 1))),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))))))),
    ("MuchAdoAboutTwo.L8",
     "[| associative ?f; ?xs ~= []; ?ys ~= [] |]
      ==> foldl1 ?f (?xs @ ?ys) = ?f (foldl1 ?f ?xs) (foldl1 ?f ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("MuchAdoAboutTwo.Prop_2_step_L7",
     "map (%k. foldl1 ?g (map ((!) ?xs) [0..<k + 1])) [0..<length ?xs] =
      map (%k. foldl1 ?g (take (k + 1) ?xs)) [0..<length ?xs]",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 1, template_var 0))))),
    ("MuchAdoAboutTwo.Proposition_2",
     "[| !!n. candidate (@) (map wrap [0..<n + 1]) = ups n; associative ?g;
         ?xs ~= [] |]
      ==> candidate ?g ?xs = scanl1 ?g ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("MuchAdoAboutTwo.Proposition_1",
     "(!!f xs.
          [| associative f; xs ~= [] |]
          ==> candidate f xs = scanl1 f xs) ==>
      candidate (@) (map wrap [0..<?n + 1]) = ups ?n",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("MuchAdoAboutTwo.partitions_sorted",
     "(!!xs ys x y.
          [| ?js = xs @ ys; x : set xs; y : set ys |] ==> x <= y) ==>
      sorted ?js",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("MuchAdoAboutTwo.foldl1_map",
     "[| associative ?f; ?xs ~= []; ?ys ~= [] |]
      ==> foldl1 ?f (map ?h (?xs @ ?ys)) =
          ?f (foldl1 ?f (map ?h ?xs)) (foldl1 ?f (map ?h ?ys))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("MuchAdoAboutTwo.Figure_7",
     "[| foldl1 f2 (map (h2 ?i) ?js) = Two; ?js = ?xs @ ?ys; ?xs ~= [];
         ?i = last ?xs |]
      ==> ?i + 1 : set ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_hole 13),
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 3)),
              template_var 2)),
          template_hole 10),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_equation
         (template_var 3, template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MuchAdoAboutTwo.L10",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?i < ?k |]
      ==> foldl1 f2 (map (h2 ?i) ?js) = Two",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 2),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 1, template_var 0)),
             template_var 2)),
         template_hole 0))),
    ("MuchAdoAboutTwo.Lemma_4",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?js ~= [] |]
      ==> ?js = [0..<?k + 1]",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))))),
    ("MuchAdoAboutTwo.L9",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?i <= ?k |]
      ==> foldl1 f1 (map (h1 ?k ?i) ?js) = One",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 2),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_hole 0))),
    ("MuchAdoAboutTwo.js_is_a_permutation",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?js ~= [] |]
      ==> mset ?js = mset [0..<?k + 1]",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5)))))),
    ("MuchAdoAboutTwo.The_0_1_2_Principle",
     "[| !!f xs.
            [| associative f; xs ~= [] |] ==> candidate f xs = scanl1 f xs;
         associative ?g; ?ys ~= [] |]
      ==> candidate ?g ?ys = scanl1 ?g ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("MuchAdoAboutTwo.non_empty_candidate_results",
     "[| !!f xs.
            [| associative f; xs ~= [] |] ==> candidate f xs = scanl1 f xs;
         ?js : set (candidate (@) (map wrap [0..<?n + 1])) |]
      ==> ?js ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_app
                       (template_app (template_hole 3, template_var 0),
                        template_hole 2))))))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("MuchAdoAboutTwo.divide_and_conquer",
     "[| ?P []; !!x. ?P [x];
         !!xs ys. [| xs ~= []; ys ~= []; ?P xs; ?P ys |] ==> ?P (xs @ ys) |]
      ==> ?P ?zs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("MuchAdoAboutTwo.Lemma_5",
     "[| !!f h.
            associative f ==>
            map (foldl1 f o map h) ?jss = scanl1 f (map h [0..<?n + 1]);
         !!js. js : set ?jss ==> js ~= [] |]
      ==> ?jss = ups ?n",
     template_implication
      ([template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("MuchAdoAboutTwo.js_equals_upt_k",
     "[| mset ?js = mset [0..<?k + 1];
         !!i xs ys.
            [| i < ?k; ?js = xs @ ys; xs ~= []; i = last xs |]
            ==> i + 1 : set ys |]
      ==> ?js = [0..<?k + 1]",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 1),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_app
               (template_app (template_hole 12, template_var 0),
                template_hole 11)))),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 14, template_hole 13),
           template_app
            (template_app (template_hole 12, template_var 0),
             template_hole 11))))),
    ("MuchAdoAboutTwo.foldl1_induct",
     "[| !!f x. ?P f [x]; !!f x y. ?P f [x, y];
         !!f x y z zs. ?P f (f x y # z # zs) ==> ?P f (x # y # z # zs);
         !!f. ?P f [] |]
      ==> ?P ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("MuchAdoAboutTwo.js_partition_order",
     "[| mset ?js = mset [0..<?k + 1];
         !!i xs ys.
            [| i < ?k; ?js = xs @ ys; xs ~= []; i = last xs |]
            ==> i + 1 : set ys;
         ?js = ?xs @ ?ys; ?i : set ?xs; ?j : set ?ys |]
      ==> ?i <= ?j",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 5),
          template_app
           (template_hole 16,
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_app
               (template_app (template_hole 13, template_var 4),
                template_hole 12)))),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("MuchAdoAboutTwo.Figure_7_trans",
     "[| !!i xs ys.
            [| i < ?k; ?js = xs @ ys; xs ~= []; i = last xs |]
            ==> i + 1 : set ys;
         0 < ?r; ?i + ?r <= ?k; ?js = ?xs @ ?ys; ?xs ~= []; ?i = last ?xs |]
      ==> ?i + ?r : set ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation (less_than, template_hole 1, template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 3),
          template_var 5),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_equation
         (template_var 2, template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 3)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("MuchAdoAboutTwo.Lemma_1",
     "[| !!x y. [| x ~= []; y ~= [] |] ==> ?h (?f x y) = ?g (?h x) (?h y);
         !!x y. [| x ~= []; y ~= [] |] ==> ?f x y ~= [];
         !!x. x : set ?zs ==> x ~= [] |]
      ==> map ?h (candidate ?f ?zs) = candidate ?g (map ?h ?zs)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.MuchAdoAboutTwoMoreTemplates"
### 0.682s elapsed time, 1.652s cpu time, 1.103s GC time
val it = (): unit
