   [("MuchAdoAboutTwo.non_empty_n2l", "n2l ?xs ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("MuchAdoAboutTwo.L2", "length (map ?f ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MuchAdoAboutTwo.L4", "map ?f o wrap = wrap o ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("MuchAdoAboutTwo.L1", "map ?g (map ?f ?xs) = map (?g o ?f) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("MuchAdoAboutTwo.L3", "take ?k (map ?f ?xs) = map ?f (take ?k ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("MuchAdoAboutTwo.n2l_l2n_id", "?x ~= [] ==> n2l (l2n ?x) = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("MuchAdoAboutTwo.L5", "map ?f (?xs @ ?ys) = map ?f ?xs @ map ?f ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("MuchAdoAboutTwo.L6",
     "?k < length ?xs ==> map ?f ?xs ! ?k = ?f (?xs ! ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_var 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("MuchAdoAboutTwo.Figure_3",
     "?i < ?k ==> foldl1 f2 (map (h2 ?i) [0..<?k + 1]) = Two",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("MuchAdoAboutTwo.upt_map_Suc",
     "0 < ?k ==> [0..<?k + 1] = 0 # map Suc [0..<?k]",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 7),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3)),
         template_app
          (template_app (template_hole 2, template_hole 7),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 5, template_hole 7),
               template_var 0)))))),
    ("MuchAdoAboutTwo.Figure_2",
     "?i <= ?k ==> foldl1 f1 (map (h1 ?k ?i) [0..<?k + 1]) = One",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_hole 0))),
    ("MuchAdoAboutTwo.foldl1_append",
     "?xs ~= [] ==>
      foldl1 ?f (?xs @ ?ys) = foldl1 ?f (foldl1 ?f ?xs # ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 0))))),
    ("MuchAdoAboutTwo.L7",
     "?k < length ?xs ==> map ((!) ?xs) [0..<?k + 1] = take (?k + 1) ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_var 0)))),
    ("MuchAdoAboutTwo.n2l_l2n_map_id",
     "(!!x. x : set ?zs ==> x ~= []) ==> map (n2l o l2n) ?zs = ?zs",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0),
         template_var 0))),
    ("MuchAdoAboutTwo.Figure_4",
     "[| foldl1 f1 (map (h1 ?k ?i) ?js) = One; ?js ~= [] |]
      ==> ?i : set ?js",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)),
          template_hole 5),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MuchAdoAboutTwo.all_set_inter_empty_distinct",
     "(!!xs ys. ?js = xs @ ys ==> set xs Int set ys = {}) ==> distinct ?js",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("MuchAdoAboutTwo.candidate_free_theorem",
     "?h (?f ?x ?y) = ?g (?h ?x) (?h ?y) ==>
      map ?h (candidate ?f ?zs) = candidate ?g (map ?h ?zs)",
     template_implication
      ([template_equation
         (template_app
           (template_var 5,
            template_app
             (template_app (template_var 4, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_var 1,
              template_app (template_var 5, template_var 3)),
            template_app (template_var 5, template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 5),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 0))))),
    ("MuchAdoAboutTwo.Lemma_2",
     "[| length ?xs = length ?ys;
         !!k. k < length ?xs ==> ?xs ! k = ?ys ! k |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("MuchAdoAboutTwo.Figure_5",
     "[| foldl1 f1 (map (h1 ?k ?i) ?js) = One; ?js = ?xs @ ?ys |]
      ==> ~ (?i : set ?xs & ?i : set ?ys)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_hole 9),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_var 2)),
          template_hole 6),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app (template_hole 0, template_var 1))),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("MuchAdoAboutTwo.Figure_6",
     "[| !!i. i <= ?k ==> foldl1 f1 (map (h1 ?k i) ?js) = One; ?k < ?i |]
      ==> ?i ~: set ?js",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation (less_than, template_var 2, template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("MuchAdoAboutTwo.Lemma_3",
     "associative ?f ==>
      map (foldl1 ?f o map ?h) (candidate (@) (map wrap [0..<?n + 1])) =
      candidate ?f (map ?h [0..<?n + 1])",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 2)),
               template_app (template_hole 9, template_var 1))),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))))))),
    ("MuchAdoAboutTwo.L8",
     "[| associative ?f; ?xs ~= []; ?ys ~= [] |]
      ==> foldl1 ?f (?xs @ ?ys) = ?f (foldl1 ?f ?xs) (foldl1 ?f ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_var 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("MuchAdoAboutTwo.Prop_2_step_L7",
     "map (%k. foldl1 ?g (map ((!) ?xs) [0..<k + 1])) [0..<length ?xs] =
      map (%k. foldl1 ?g (take (k + 1) ?xs)) [0..<length ?xs]",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 1, template_var 0))))),
    ("MuchAdoAboutTwo.Proposition_2",
     "[| !!n. candidate (@) (map wrap [0..<n + 1]) = ups n; associative ?g;
         ?xs ~= [] |]
      ==> candidate ?g ?xs = scanl1 ?g ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("MuchAdoAboutTwo.Proposition_1",
     "(!!f xs.
          [| associative f; xs ~= [] |]
          ==> candidate f xs = scanl1 f xs) ==>
      candidate (@) (map wrap [0..<?n + 1]) = ups ?n",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))),
         template_app (template_hole 0, template_var 0)))),
    ("MuchAdoAboutTwo.partitions_sorted",
     "(!!xs ys x y.
          [| ?js = xs @ ys; x : set xs; y : set ys |] ==> x <= y) ==>
      sorted ?js",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("MuchAdoAboutTwo.foldl1_map",
     "[| associative ?f; ?xs ~= []; ?ys ~= [] |]
      ==> foldl1 ?f (map ?h (?xs @ ?ys)) =
          ?f (foldl1 ?f (map ?h ?xs)) (foldl1 ?f (map ?h ?ys))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("MuchAdoAboutTwo.Figure_7",
     "[| foldl1 f2 (map (h2 ?i) ?js) = Two; ?js = ?xs @ ?ys; ?xs ~= [];
         ?i = last ?xs |]
      ==> ?i + 1 : set ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_hole 13),
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 3)),
              template_var 2)),
          template_hole 10),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_equation
         (template_var 3, template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MuchAdoAboutTwo.L10",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?i < ?k |]
      ==> foldl1 f2 (map (h2 ?i) ?js) = Two",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 2),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 1, template_var 0)),
             template_var 2)),
         template_hole 0))),
    ("MuchAdoAboutTwo.Lemma_4",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?js ~= [] |]
      ==> ?js = [0..<?k + 1]",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))))),
    ("MuchAdoAboutTwo.L9",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?i <= ?k |]
      ==> foldl1 f1 (map (h1 ?k ?i) ?js) = One",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 2),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_hole 0))),
    ("MuchAdoAboutTwo.js_is_a_permutation",
     "[| !!f h.
            associative f ==>
            foldl1 f (map h ?js) = foldl1 f (map h [0..<?k + 1]);
         ?js ~= [] |]
      ==> mset ?js = mset [0..<?k + 1]",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 5)))))),
    ("MuchAdoAboutTwo.The_0_1_2_Principle",
     "[| !!f xs.
            [| associative f; xs ~= [] |] ==> candidate f xs = scanl1 f xs;
         associative ?g; ?ys ~= [] |]
      ==> candidate ?g ?ys = scanl1 ?g ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("MuchAdoAboutTwo.non_empty_candidate_results",
     "[| !!f xs.
            [| associative f; xs ~= [] |] ==> candidate f xs = scanl1 f xs;
         ?js : set (candidate (@) (map wrap [0..<?n + 1])) |]
      ==> ?js ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_app
                       (template_app (template_hole 3, template_var 0),
                        template_hole 2))))))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("MuchAdoAboutTwo.divide_and_conquer",
     "[| ?P []; !!x. ?P [x];
         !!xs ys. [| xs ~= []; ys ~= []; ?P xs; ?P ys |] ==> ?P (xs @ ys) |]
      ==> ?P ?zs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("MuchAdoAboutTwo.Lemma_5",
     "[| !!f h.
            associative f ==>
            map (foldl1 f o map h) ?jss = scanl1 f (map h [0..<?n + 1]);
         !!js. js : set ?jss ==> js ~= [] |]
      ==> ?jss = ups ?n",
     template_implication
      ([template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("MuchAdoAboutTwo.js_equals_upt_k",
     "[| mset ?js = mset [0..<?k + 1];
         !!i xs ys.
            [| i < ?k; ?js = xs @ ys; xs ~= []; i = last xs |]
            ==> i + 1 : set ys |]
      ==> ?js = [0..<?k + 1]",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 1),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_app
               (template_app (template_hole 12, template_var 0),
                template_hole 11)))),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 14, template_hole 13),
           template_app
            (template_app (template_hole 12, template_var 0),
             template_hole 11))))),
    ("MuchAdoAboutTwo.foldl1_induct",
     "[| !!f x. ?P f [x]; !!f x y. ?P f [x, y];
         !!f x y z zs. ?P f (f x y # z # zs) ==> ?P f (x # y # z # zs);
         !!f. ?P f [] |]
      ==> ?P ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("MuchAdoAboutTwo.js_partition_order",
     "[| mset ?js = mset [0..<?k + 1];
         !!i xs ys.
            [| i < ?k; ?js = xs @ ys; xs ~= []; i = last xs |]
            ==> i + 1 : set ys;
         ?js = ?xs @ ?ys; ?i : set ?xs; ?j : set ?ys |]
      ==> ?i <= ?j",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 5),
          template_app
           (template_hole 16,
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_app
               (template_app (template_hole 13, template_var 4),
                template_hole 12)))),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("MuchAdoAboutTwo.Figure_7_trans",
     "[| !!i xs ys.
            [| i < ?k; ?js = xs @ ys; xs ~= []; i = last xs |]
            ==> i + 1 : set ys;
         0 < ?r; ?i + ?r <= ?k; ?js = ?xs @ ?ys; ?xs ~= []; ?i = last ?xs |]
      ==> ?i + ?r : set ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation (less_than, template_hole 1, template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 3),
          template_var 5),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_equation
         (template_var 2, template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 3)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("MuchAdoAboutTwo.Lemma_1",
     "[| !!x y. [| x ~= []; y ~= [] |] ==> ?h (?f x y) = ?g (?h x) (?h y);
         !!x y. [| x ~= []; y ~= [] |] ==> ?f x y ~= [];
         !!x. x : set ?zs ==> x ~= [] |]
      ==> map ?h (candidate ?f ?zs) = candidate ?g (map ?h ?zs)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0)))))]
