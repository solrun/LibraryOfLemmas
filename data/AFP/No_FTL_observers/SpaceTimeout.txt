Loading theory "Draft.SpaceTime" (required by "Draft.SpaceTimeMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SpaceTimeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SpaceTimeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SpaceTimeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.602s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SpaceTimeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.246s elapsed time, 1.007s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SpaceTimeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.265s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SpaceTimeMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.842s elapsed time, 3.210s cpu time, 0.760s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.889s elapsed time, 3.304s cpu time, 0.671s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.700s elapsed time, 5.331s cpu time, 0.908s GC time
Loading theory "Draft.Templates" (required by "Draft.SpaceTimeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.094s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SpaceTimeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.475s elapsed time, 0.987s cpu time, 0.086s GC time
### Ambiguous input (line 81 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^const>Groups.zero_class.zero")
###           ("_position_sort" 'a)))
###       ("_fields" ("_field" ("_constify" xdir) ("\<^fixed>vecZero"))
###         ("_fields" ("_field" ("_constify" ydir) ("\<^fixed>vecZero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^fixed>vecZero") ("_position_sort" 'a)))
###       ("_fields" ("_field" ("_constify" xdir) ("\<^fixed>vecZero"))
###         ("_fields" ("_field" ("_constify" ydir) ("\<^fixed>vecZero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^const>Groups.zero_class.zero")
###           ("_position_sort" 'a)))
###       ("_fields"
###         ("_field" ("_constify" xdir) ("\<^const>Groups.zero_class.zero"))
###         ("_fields" ("_field" ("_constify" ydir) ("\<^fixed>vecZero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^fixed>vecZero") ("_position_sort" 'a)))
###       ("_fields"
###         ("_field" ("_constify" xdir) ("\<^const>Groups.zero_class.zero"))
###         ("_fields" ("_field" ("_constify" ydir) ("\<^fixed>vecZero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^const>Groups.zero_class.zero")
###           ("_position_sort" 'a)))
###       ("_fields" ("_field" ("_constify" xdir) ("\<^fixed>vecZero"))
###         ("_fields"
###           ("_field" ("_constify" ydir) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^fixed>vecZero") ("_position_sort" 'a)))
###       ("_fields" ("_field" ("_constify" xdir) ("\<^fixed>vecZero"))
###         ("_fields"
###           ("_field" ("_constify" ydir) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^const>Groups.zero_class.zero")
###           ("_position_sort" 'a)))
###       ("_fields"
###         ("_field" ("_constify" xdir) ("\<^const>Groups.zero_class.zero"))
###         ("_fields"
###           ("_field" ("_constify" ydir) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^fixed>vecZero") ("_position_sort" 'a)))
###       ("_fields"
###         ("_field" ("_constify" xdir) ("\<^const>Groups.zero_class.zero"))
###         ("_fields"
###           ("_field" ("_constify" ydir) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zdir) ("\<^fixed>vecZero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^const>Groups.zero_class.zero")
###           ("_position_sort" 'a)))
###       ("_fields" ("_field" ("_constify" xdir) ("\<^fixed>vecZero"))
###         ("_fields" ("_field" ("_constify" ydir) ("\<^fixed>vecZero"))
###           ("_field" ("_constify" zdir)
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>Pure.eq" ("_position" vecZero)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tdir)
###         ("_constrain" ("\<^fixed>vecZero") ("_position_sort" 'a)))
###       ("_fields" ("_field" ("_constify" xdir) ("\<^fixed>vecZero"))
###         ("_fields" ("_field" ("_constify" ydir) ("\<^fixed>vecZero"))
###           ("_field" ("_constify" zdir)
###             ("\<^const>Groups.zero_class.zero")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 111 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" orthogonal)
###       ("_cargs" ("_position" u) ("_position" v)))
###     ("\<^const>HOL.eq"
###       ("\<^const>SpaceTime.Vectors_class.innerProd" ("_position" u)
###         ("_position" v))
###       ("\<^const>SpaceTime.Vectors_class.vecZero"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" orthogonal)
###       ("_cargs" ("_position" u) ("_position" v)))
###     ("\<^const>HOL.eq"
###       ("\<^const>SpaceTime.Vectors_class.innerProd" ("_position" u)
###         ("_position" v))
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 118 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecMinus"
###       ("\<^const>Groups.zero_class.zero") ("_position" u))
###     ("\<^const>SpaceTime.Vectors_class.vecNegate" ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecMinus"
###       ("\<^const>SpaceTime.Vectors_class.vecZero") ("_position" u))
###     ("\<^const>SpaceTime.Vectors_class.vecNegate" ("_position" u))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecMinus" ("_position" u)
###       ("_position" u))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecMinus" ("_position" u)
###       ("_position" u))
###     ("\<^const>SpaceTime.Vectors_class.vecZero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecPlus" ("_position" u)
###       ("\<^const>HOL.Not" ("_position" v)))
###     ("\<^const>SpaceTime.Vectors_class.vecMinus" ("_position" u)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecPlus" ("_position" u)
###       ("\<^const>SpaceTime.Vectors_class.vecNegate" ("_position" v)))
###     ("\<^const>SpaceTime.Vectors_class.vecMinus" ("_position" u)
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale"
###       ("\<^const>Groups.zero_class.zero") ("_position" u))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale"
###       ("\<^const>SpaceTime.Vectors_class.vecZero") ("_position" u))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale"
###       ("\<^const>Groups.zero_class.zero") ("_position" u))
###     ("\<^const>SpaceTime.Vectors_class.vecZero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale"
###       ("\<^const>SpaceTime.Vectors_class.vecZero") ("_position" u))
###     ("\<^const>SpaceTime.Vectors_class.vecZero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale" ("_position" k)
###       ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale" ("_position" k)
###       ("\<^const>SpaceTime.Vectors_class.vecZero"))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale" ("_position" k)
###       ("\<^const>Groups.zero_class.zero"))
###     ("\<^const>SpaceTime.Vectors_class.vecZero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Vectors_class.vecScale" ("_position" k)
###       ("\<^const>SpaceTime.Vectors_class.vecZero"))
###     ("\<^const>SpaceTime.Vectors_class.vecZero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 201 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal" ("_position" k)
###     ("_constrain" ("\<^const>SpaceTime.Vectors_class.vecZero")
###       ("_position_sort" 'a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal" ("_position" k)
###     ("_constrain" ("\<^const>Groups.zero_class.zero")
###       ("_position_sort" 'a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 229 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval)
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("_fields"
###         ("_field" ("_constify" xval)
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("_fields"
###           ("_field" ("_constify" yval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval) ("\<^const>Groups.zero_class.zero"))
###       ("_fields"
###         ("_field" ("_constify" xval)
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("_fields"
###           ("_field" ("_constify" yval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval)
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("_fields"
###         ("_field" ("_constify" xval) ("\<^const>Groups.zero_class.zero"))
###         ("_fields"
###           ("_field" ("_constify" yval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval) ("\<^const>Groups.zero_class.zero"))
###       ("_fields"
###         ("_field" ("_constify" xval) ("\<^const>Groups.zero_class.zero"))
###         ("_fields"
###           ("_field" ("_constify" yval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval)
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("_fields"
###         ("_field" ("_constify" xval)
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("_fields"
###           ("_field" ("_constify" yval) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval) ("\<^const>Groups.zero_class.zero"))
###       ("_fields"
###         ("_field" ("_constify" xval)
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("_fields"
###           ("_field" ("_constify" yval) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval)
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("_fields"
###         ("_field" ("_constify" xval) ("\<^const>Groups.zero_class.zero"))
###         ("_fields"
###           ("_field" ("_constify" yval) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval) ("\<^const>Groups.zero_class.zero"))
###       ("_fields"
###         ("_field" ("_constify" xval) ("\<^const>Groups.zero_class.zero"))
###         ("_fields"
###           ("_field" ("_constify" yval) ("\<^const>Groups.zero_class.zero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval)
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("_fields"
###         ("_field" ("_constify" xval)
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("_fields"
###           ("_field" ("_constify" yval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>Pure.eq" ("_position" origin)
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" tval) ("\<^const>Groups.zero_class.zero"))
###       ("_fields"
###         ("_field" ("_constify" xval)
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("_fields"
###           ("_field" ("_constify" yval)
###             ("\<^const>SpaceTime.Vectors_class.vecZero"))
###           ("_field" ("_constify" zval)
###             ("\<^const>Groups.zero_class.zero")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 280 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" onAxisT) ("_position" u))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" xval) ("_position" u))
###         ("\<^const>SpaceTime.Vectors_class.vecZero"))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" yval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))
###         ("\<^const>HOL.eq" ("_applC" ("_position" zval) ("_position" u))
###           ("\<^const>SpaceTime.Vectors_class.vecZero"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 301 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" parallel)
###       ("_cargs" ("_position" lineA) ("_position" lineB)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" direction) ("_position" lineA))
###         ("_position" vecZero))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" direction) ("_position" lineB))
###           ("_position" vecZero))
###         ("\<^const>HOL.Ex_binder" ("_position" k)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" k)
###               ("_constrain" ("\<^const>Groups.zero_class.zero")
###                 ("_position_sort" 'a)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" direction) ("_position" lineB))
###               ("\<^const>SpaceTime.Vectors_class.vecScale" ("_position" k)
###                 ("_applC" ("_position" direction)
###                   ("_position" lineA))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" parallel)
###       ("_cargs" ("_position" lineA) ("_position" lineB)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" direction) ("_position" lineA))
###         ("_position" vecZero))
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" direction) ("_position" lineB))
###           ("_position" vecZero))
###         ("\<^const>HOL.Ex_binder" ("_position" k)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" k)
###               ("_constrain" ("\<^const>SpaceTime.Vectors_class.vecZero")
###                 ("_position_sort" 'a)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" direction) ("_position" lineB))
###               ("\<^const>SpaceTime.Vectors_class.vecScale" ("_position" k)
###                 ("_applC" ("_position" direction)
###                   ("_position" lineA))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 472 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" q)
###       ("_position" p))
###     ("_applC" ("_position" vecNegate)
###       ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" p)
###         ("_position" q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" q)
###     ("\<^const>HOL.eq" ("_position" p)
###       ("_applC" ("_position" vecNegate)
###         ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" q)
###       ("\<^const>HOL.eq" ("_position" p) ("_position" vecNegate)))
###     ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" p)
###       ("_position" q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 477 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###       ("\<^const>SpaceTime.Lines_class.parallel" ("_position" q)))
###     ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" q)
###       ("_position" r))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###     ("_applC" ("\<^const>SpaceTime.Lines_class.parallel" ("_position" q))
###       ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" q)
###         ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>SpaceTime.Lines_class.parallel"
###       ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###         ("_position" q)))
###     ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" q)
###       ("_position" r))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 478 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###       ("\<^const>SpaceTime.Lines_class.parallel" ("_position" q)))
###     ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###       ("_position" r))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###     ("_applC" ("\<^const>SpaceTime.Lines_class.parallel" ("_position" q))
###       ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###         ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>SpaceTime.Lines_class.parallel"
###       ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###         ("_position" q)))
###     ("\<^const>SpaceTime.Lines_class.lineJoining" ("_position" p)
###       ("_position" r))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 546 of "$AFP/No_FTL_observers/SpaceTime.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" collinear)
###       ("_cargs" ("_position" u)
###         ("_cargs" ("_position" v)
###           ("\<^const>SpaceTime.Points_class.moveBy" ("_position" v)
###             ("_position" d)))))
###     ("\<^const>HOL.Ex_binder" ("_position" \<beta>)
###       ("\<^const>HOL.eq"
###         ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" u)
###           ("_position" v))
###         ("\<^const>SpaceTime.Vectors_class.vecScale"
###           ("\<^const>Groups.uminus_class.uminus" ("_position" \<beta>))
###           ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" collinear)
###       ("_cargs" ("_position" u)
###         ("_cargs" ("_position" v)
###           ("\<^const>SpaceTime.Points_class.moveBy" ("_position" v)
###             ("_position" d)))))
###     ("\<^const>HOL.Ex_binder" ("_position" \<beta>)
###       ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" u)
###         ("\<^const>HOL.eq" ("_position" v)
###           ("\<^const>SpaceTime.Vectors_class.vecScale"
###             ("\<^const>Groups.uminus_class.uminus" ("_position" \<beta>))
###             ("_position" d)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" collinear)
###       ("_cargs" ("_position" u)
###         ("_cargs" ("_position" v)
###           ("\<^const>SpaceTime.Points_class.moveBy" ("_position" v)
###             ("_position" d)))))
###     ("\<^const>HOL.Ex_binder" ("_position" \<beta>)
###       ("\<^const>SpaceTime.Vectors_class.vecScale"
###         ("\<^const>SpaceTime.Points_class.vectorJoining" ("_position" u)
###           ("\<^const>HOL.eq" ("_position" v)
###             ("\<^const>Groups.uminus_class.uminus" ("_position" \<beta>))))
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
class Cones = Planes +
  fixes tangentPlane :: "'a Point => 'a Cone => 'a Plane"
  assumes "AxTangentBase": "!!e cone. pbasepoint (tangentPlane e cone) = e"
    and
    "AxTangentVertex":
      "!!cone e. inPlane (vertex cone) (tangentPlane e cone)"
    and
    "AxConeTangent":
      "!!onCone e cone pt.
          onCone e cone -->
          (inPlane pt (tangentPlane e cone) & onCone pt cone) =
          collinear (vertex cone) e pt"
    and
    "AxParallelCones":
      "!!onCone e econe f fcone.
          onCone e econe &
          e ~= vertex econe &
          onCone f fcone &
          f ~= vertex fcone & inPlane f (tangentPlane e econe) -->
          samePlane (tangentPlane e econe) (tangentPlane f fcone) &
          line joining vertex econe to e \<parallel> 
           line joining vertex fcone to f"
    and
    "AxParallelConesE":
      "!!outsideCone f cone onCone.
          outsideCone f cone -->
          (EX e. onCone e cone &
                 e ~= vertex cone & inPlane f (tangentPlane e cone))"
    and
    "AxSlopedLineInVerticalPlane":
      "!!e f g.
          [| onAxisT e; onAxisT f; e ~= f; ~ onAxisT g |]
          ==> ALL s. EX p. collinear e g p & space2 p f = s * s * time2 p f"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SpaceTime"
### 54.098s elapsed time, 61.671s cpu time, 5.326s GC time
Loading theory "Draft.SpaceTimeMoreTemplates"
val templateLemmas =
   [("SpaceTime.lemLineIdentity",
     "?lineA =
      (| basepoint = basepoint ?lineB, direction = direction ?lineB |) ==>
      ?lineA = ?lineB",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 1, template_var 0)),
            template_hole 0))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.SpaceTimeMoreTemplates"
### 0.448s elapsed time, 0.829s cpu time, 0.071s GC time
val it = (): unit
