Loading theory "Draft.Operations" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.SpecialPseudoHoops" via "Draft.PseudoHoopFilters" via "Draft.PseudoHoops" via "Draft.RightComplementedMonoid" via "Draft.LeftComplementedMonoid")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class left_imp = type +
  fixes imp_l :: "'a => 'a => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class right_imp = type +
  fixes imp_r :: "'a => 'a => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.561s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class left_uminus = type +
  fixes uminus_l :: "'a => 'a"
class right_uminus = type +
  fixes uminus_r :: "'a => 'a"
### theory "Draft.Operations"
### 0.187s elapsed time, 0.765s cpu time, 0.043s GC time
Loading theory "Draft.PseudoWaisbergAlgebra" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.SpecialPseudoHoops")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.882s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.351s elapsed time, 1.404s cpu time, 0.160s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
class impl_lr_algebra = one + left_imp + right_imp +
  assumes "W1a": "!!a. (1::'a) l\<rightarrow> a = a"
    and "W1b": "!!a. (1::'a) r\<rightarrow> a = a"
    and
    "W2a":
      "!!a b.
          (a l\<rightarrow> b) r\<rightarrow> b =
          (b l\<rightarrow> a) r\<rightarrow> a"
    and
    "W2b":
      "!!b a.
          (b l\<rightarrow> a) r\<rightarrow> a =
          (b r\<rightarrow> a) l\<rightarrow> a"
    and
    "W2c":
      "!!b a.
          (b r\<rightarrow> a) l\<rightarrow> a =
          (a r\<rightarrow> b) l\<rightarrow> b"
    and
    "W3a":
      "!!a b c.
          (a l\<rightarrow> b) l\<rightarrow>
          (b l\<rightarrow> c) r\<rightarrow> a l\<rightarrow> c =
          (1::'a)"
    and
    "W3b":
      "!!a b c.
          (a r\<rightarrow> b) r\<rightarrow>
          (b r\<rightarrow> c) l\<rightarrow> a r\<rightarrow> c =
          (1::'a)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Partially applied constant "PseudoWaisbergAlgebra.impl_lr_algebra_class.sup_a" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin sup_a (set (?x # ?xs)) == fold sup_a ?xs ?x
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.027s elapsed time, 3.891s cpu time, 1.027s GC time
Loading theory "LatticeProperties.Lattice_Prop" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.SpecialPseudoHoops" via "Draft.PseudoHoopFilters" via "Draft.PseudoHoops" via "Draft.RightComplementedMonoid" via "Draft.LeftComplementedMonoid")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
class impl_lr_algebra = one + left_imp + right_imp +
  assumes "W1a": "!!a. (1::'a) l\<rightarrow> a = a"
    and "W1b": "!!a. (1::'a) r\<rightarrow> a = a"
    and
    "W2a":
      "!!a b.
          (a l\<rightarrow> b) r\<rightarrow> b =
          (b l\<rightarrow> a) r\<rightarrow> a"
    and
    "W2b":
      "!!b a.
          (b l\<rightarrow> a) r\<rightarrow> a =
          (b r\<rightarrow> a) l\<rightarrow> a"
    and
    "W2c":
      "!!b a.
          (b r\<rightarrow> a) l\<rightarrow> a =
          (a r\<rightarrow> b) l\<rightarrow> b"
    and
    "W3a":
      "!!a b c.
          (a l\<rightarrow> b) l\<rightarrow>
          (b l\<rightarrow> c) r\<rightarrow> a l\<rightarrow> c =
          (1::'a)"
    and
    "W3b":
      "!!a b c.
          (a r\<rightarrow> b) r\<rightarrow>
          (b r\<rightarrow> c) l\<rightarrow> a r\<rightarrow> c =
          (1::'a)"
### theory "HOL-Library.Stream"
### 1.130s elapsed time, 4.288s cpu time, 1.039s GC time
Found termination order: "size <*mlex*> {}"
### theory "LatticeProperties.Lattice_Prop"
### 0.281s elapsed time, 1.058s cpu time, 0.129s GC time
Loading theory "Draft.LeftComplementedMonoid" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.SpecialPseudoHoops" via "Draft.PseudoHoopFilters" via "Draft.PseudoHoops" via "Draft.RightComplementedMonoid")
Loading theory "LatticeProperties.Modular_Distrib_Lattice" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "LatticeProperties.Lattice_Ordered_Group")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class modular_lattice = lattice +
  assumes
    "modular":
      "!!x y z.
          x <= y ==>
          x \<squnion> y \<sqinter> z = y \<sqinter> (x \<squnion> z)"
class distrib_lattice = lattice +
  assumes
    "sup_inf_distrib1":
      "!!x y z.
          x \<squnion> y \<sqinter> z =
          (x \<squnion> y) \<sqinter> (x \<squnion> z)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class right_pordered_monoid_mult = monoid_mult + order +
  assumes "mult_right_mono": "!!a b c. a <= b ==> a * c <= b * c"
class one_greatest = one + ord +
  assumes "one_greatest": "!!a. a <= (1::'a)"
Found termination order: "size <*mlex*> {}"
class impl_lr_ord_algebra = impl_lr_algebra + one_ord +
  assumes "order": "!!a b. (a <= b) = (a l\<rightarrow> b = (1::'a))"
    and "strict": "!!a b. (a < b) = (a <= b & ~ b <= a)"
### theory "HOL-Library.Tree"
### 2.225s elapsed time, 8.570s cpu time, 1.408s GC time
Loading theory "Draft.Templates" (required by "Draft.ExamplesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.321s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExamplesMoreTemplates")
class modular_lattice = lattice +
  assumes
    "modular":
      "!!x y z.
          x <= y ==>
          x \<squnion> y \<sqinter> z = y \<sqinter> (x \<squnion> z)"
class left_residuated = times + left_imp + ord +
  assumes
    "left_residual": "!!x a b. (x * a <= b) = (x <= a l\<rightarrow> b)"
class left_inf = times + inf + left_imp +
  assumes "inf_l_def": "!!a b. a \<sqinter> b = (a l\<rightarrow> b) * a"
class inf_sup_eq_lattice = lattice +
  assumes
    "inf_sup_eq":
      "!!x z y.
          [| x \<sqinter> z = y \<sqinter> z;
             x \<squnion> z = y \<squnion> z |]
          ==> x = y"
### theory "LatticeProperties.Modular_Distrib_Lattice"
### 1.561s elapsed time, 6.157s cpu time, 0.438s GC time
Loading theory "LatticeProperties.Lattice_Ordered_Group" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.663s elapsed time, 2.628s cpu time, 0.139s GC time
"ALL x y z.
    x \<sqinter> z = y \<sqinter> z & x \<squnion> z = y \<squnion> z ==>
 x = y"
  :: "prop"
class left_complemented_monoid = left_inf +
  left_residuated_pordered_monoid +
  assumes "right_divisibility": "!!a b. (a <= b) = (EX c. a = c * b)"
class less_def = ord +
  assumes "less_def": "!!a b. (a < b) = (a <= b & ~ b <= a)"
class lgroup = group_add + lattice +
  assumes
    "add_order_preserving": "!!a b u v. a <= b ==> u + a + v <= u + b + v"
class one_times = one + times +
  assumes "one_left": "!!a. (1::'a) * a = a"
    and "one_right": "!!a. a * (1::'a) = a"
class impl_neg_lr_algebra = impl_lr_ord_algebra + one_zero_uminus +
  assumes "W4": "-l (1::'a) = -r (1::'a)"
    and
    "W5a":
      "!!a b.
          (-l a r\<rightarrow> -l b) l\<rightarrow> b l\<rightarrow> a =
          (1::'a)"
    and
    "W5b":
      "!!a b.
          (-r a l\<rightarrow> -r b) l\<rightarrow> b r\<rightarrow> a =
          (1::'a)"
    and "zero_def": "(0::'a) = -l (1::'a)"
class left_complemented_monoid_algebra = left_inf + less_def + one_times +
  assumes "left_impl_one": "!!a. a l\<rightarrow> a = (1::'a)"
    and
    "left_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = (b l\<rightarrow> a) * b"
    and
    "left_impl_ded":
      "!!a b c.
          a * b l\<rightarrow> c = a l\<rightarrow> b l\<rightarrow> c"
    and "left_lesseq": "!!a b. (a <= b) = (a l\<rightarrow> b = (1::'a))"
### theory "LatticeProperties.Lattice_Ordered_Group"
### 0.621s elapsed time, 1.887s cpu time, 0.101s GC time
### theory "Draft.LeftComplementedMonoid"
### 2.497s elapsed time, 8.701s cpu time, 0.574s GC time
Loading theory "Draft.RightComplementedMonoid" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.SpecialPseudoHoops" via "Draft.PseudoHoopFilters" via "Draft.PseudoHoops")
class left_pordered_monoid_mult = monoid_mult + order +
  assumes "mult_left_mono": "!!a b c. a <= b ==> c * a <= c * b"
class pseudo_wajsberg_algebra = impl_neg_lr_algebra +
  assumes
    "W6": "!!a b. -r (a l\<rightarrow> -l b) = -l (b r\<rightarrow> -r a)"
class right_residuated = times + right_imp + ord +
  assumes
    "right_residual": "!!a x b. (a * x <= b) = (x <= a r\<rightarrow> b)"
### Partially applied constant "PseudoWaisbergAlgebra.pseudo_wajsberg_algebra_class.inf_a" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin inf_a (set (?x # ?xs)) == fold inf_a ?xs ?x
### Partially applied constant "PseudoWaisbergAlgebra.pseudo_wajsberg_algebra_class.inf_b" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin inf_b (set (?x # ?xs)) == fold inf_b ?xs ?x
class right_inf = times + inf + right_imp +
  assumes "inf_r_def": "!!a b. a \<sqinter> b = a * (a r\<rightarrow> b)"
class pseudo_wajsberg_algebra = impl_neg_lr_algebra +
  assumes
    "W6": "!!a b. -r (a l\<rightarrow> -l b) = -l (b r\<rightarrow> -r a)"
class right_complemented_monoid = right_inf +
  right_residuated_pordered_monoid +
  assumes "left_divisibility": "!!a b. (a <= b) = (EX c. a = b * c)"
### theory "Draft.PseudoWaisbergAlgebra"
### 4.843s elapsed time, 15.850s cpu time, 1.850s GC time
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%a b. b * a) ?xs ==
### foldr (%a b. b * a) ?xs (1::?'a)
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<sqinter>) (set (?x # ?xs)) ==
### fold (\<sqinter>) ?xs ?x
class right_complemented_monoid = right_inf +
  right_residuated_pordered_monoid +
  assumes "left_divisibility": "!!a b. (a <= b) = (EX c. a = b * c)"
### Ignoring duplicate rewrite rule:
### (1::'a) \<sqinter> ?y == ?y
### Ignoring duplicate rewrite rule:
### (1::'a) r\<rightarrow> ?y == ?y
class right_complemented_monoid_nole_algebra = less_def + one_times +
  right_inf +
  assumes "right_impl_one": "!!a. a r\<rightarrow> a = (1::'a)"
    and
    "right_impl_times":
      "!!a b. a * (a r\<rightarrow> b) = b * (b r\<rightarrow> a)"
    and
    "right_impl_ded":
      "!!a b c.
          a * b r\<rightarrow> c = b r\<rightarrow> a r\<rightarrow> c"
class right_complemented_monoid_algebra =
  right_complemented_monoid_nole_algebra +
  assumes "right_lesseq": "!!a b. (a <= b) = (a r\<rightarrow> b = (1::'a))"
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%a b. b * a) ?xs ==
### foldr (%a b. b * a) ?xs (1::?'a)
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<sqinter>) (set (?x # ?xs)) ==
### fold (\<sqinter>) ?xs ?x
class right_complemented_monoid_algebra =
  right_complemented_monoid_nole_algebra +
  assumes "right_lesseq": "!!a b. (a <= b) = (a r\<rightarrow> b = (1::'a))"
### theory "Draft.RightComplementedMonoid"
### 1.981s elapsed time, 3.252s cpu time, 0.196s GC time
Loading theory "Draft.PseudoHoops" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.SpecialPseudoHoops" via "Draft.PseudoHoopFilters")
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_nole_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_nole_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
consts
  imp_power_l :: "'a => nat => 'a => 'a"
consts
  imp_power_r :: "'a => nat => 'a => 'a"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
consts
  power_set :: "'a set => nat => 'a set"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_sup_algebra = sup + pseudo_hoop_algebra +
  assumes "sup_comute": "!!a b. a \<squnion> b = b \<squnion> a"
    and "sup_le": "!!a b. a <= a \<squnion> b"
    and "le_sup_equiv": "!!a b. (a <= b) = (a \<squnion> b = b)"
class pseudo_hoop_sup1_algebra = sup + pseudo_hoop_algebra +
  assumes
    "sup_def":
      "!!a b.
          a \<squnion> b =
          ((a l\<rightarrow> b) r\<rightarrow> b) \<sqinter>
          ((b l\<rightarrow> a) r\<rightarrow> a)"
class pseudo_hoop_sup2_algebra = sup + pseudo_hoop_algebra +
  assumes
    "sup_2_def":
      "!!a b.
          a \<squnion> b =
          ((a r\<rightarrow> b) l\<rightarrow> b) \<sqinter>
          ((b r\<rightarrow> a) l\<rightarrow> a)"
class pseudo_hoop_sup1_algebra = pseudo_hoop_sup_algebra +
  assumes
    "sup_def":
      "!!a b.
          a \<squnion> b =
          ((a l\<rightarrow> b) r\<rightarrow> b) \<sqinter>
          ((b l\<rightarrow> a) r\<rightarrow> a)"
class pseudo_hoop_sup2_algebra = sup + pseudo_hoop_algebra +
  assumes
    "sup_2_def":
      "!!a b.
          a \<squnion> b =
          ((a r\<rightarrow> b) l\<rightarrow> b) \<sqinter>
          ((b r\<rightarrow> a) l\<rightarrow> a)"
### Ignoring duplicate rewrite rule:
### ?a1 <= ?a1 \<squnion> ?b1 == True
class pseudo_hoop_lattice_a = pseudo_hoop_sup_algebra +
  assumes
    "sup_inf_le_distr":
      "!!a b c.
          a \<squnion> b \<sqinter> c
          <= (a \<squnion> b) \<sqinter> (a \<squnion> c)"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>) (set (?x # ?xs)) ==
### fold (\<squnion>) ?xs ?x
class pseudo_hoop_lattice_b = pseudo_hoop_sup_algebra +
  assumes
    "le_sup_cong": "!!a b c. a <= b ==> a \<squnion> c <= b \<squnion> c"
class pseudo_hoop_lattice_a = pseudo_hoop_sup_algebra +
  assumes
    "sup_inf_le_distr":
      "!!a b c.
          a \<squnion> b \<sqinter> c
          <= (a \<squnion> b) \<sqinter> (a \<squnion> c)"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>) (set (?x # ?xs)) ==
### fold (\<squnion>) ?xs ?x
class pseudo_hoop_lattice = pseudo_hoop_sup_algebra +
  assumes
    "sup_assoc_1":
      "!!a b c. a \<squnion> (b \<squnion> c) = a \<squnion> b \<squnion> c"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>) (set (?x # ?xs)) ==
### fold (\<squnion>) ?xs ?x
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
### theory "Draft.PseudoHoops"
### 10.413s elapsed time, 11.086s cpu time, 0.872s GC time
Loading theory "Draft.PseudoHoopFilters" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples" via "Draft.SpecialPseudoHoops")
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
### Ignoring duplicate rewrite rule:
### filterof ?X1 : filters == True
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
### Ignoring duplicate rewrite rule:
### ?a1 r\<rightarrow> (1::'a) == 1::'a
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
### theory "Draft.PseudoHoopFilters"
### 7.409s elapsed time, 8.085s cpu time, 0.761s GC time
Loading theory "Draft.SpecialPseudoHoops" (required by "Draft.ExamplesMoreTemplates" via "Draft.Examples")
class cancel_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes "mult_cancel_left": "!!a b c. a * b = a * c ==> b = c"
    and "mult_cancel_right": "!!b a c. b * a = c * a ==> b = c"
class cancel_pseudo_hoop_algebra_2 = pseudo_hoop_algebra +
  assumes "cancel_left": "!!b a. b l\<rightarrow> a * b = a"
    and "cancel_right": "!!b a. b r\<rightarrow> b * a = a"
class cancel_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes "mult_cancel_left": "!!a b c. a * b = a * c ==> b = c"
    and "mult_cancel_right": "!!b a c. b * a = c * a ==> b = c"
class wajsberg_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "wajsberg1":
      "!!a b.
          (a l\<rightarrow> b) r\<rightarrow> b =
          (b l\<rightarrow> a) r\<rightarrow> a"
    and
    "wajsberg2":
      "!!a b.
          (a r\<rightarrow> b) l\<rightarrow> b =
          (b r\<rightarrow> a) l\<rightarrow> a"
class wajsberg_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "wajsberg1":
      "!!a b.
          (a l\<rightarrow> b) r\<rightarrow> b =
          (b l\<rightarrow> a) r\<rightarrow> a"
    and
    "wajsberg2":
      "!!a b.
          (a r\<rightarrow> b) l\<rightarrow> b =
          (b r\<rightarrow> a) l\<rightarrow> a"
### Partially applied constant "PseudoHoops.pseudo_hoop_algebra_class.sup1" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>1) (set (?x # ?xs)) ==
### fold (\<squnion>1) ?xs ?x
class bounded_wajsberg_pseudo_hoop_algebra = wajsberg_pseudo_hoop_algebra +
  zero_one +
  assumes "zero_smallest": "!!a. (0::'a) <= a"
### Partially applied constant "PseudoHoops.pseudo_hoop_algebra_class.sup2" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>2) (set (?x # ?xs)) ==
### fold (\<squnion>2) ?xs ?x
class bounded_wajsberg_pseudo_hoop_algebra = wajsberg_pseudo_hoop_algebra +
  zero_one +
  assumes "zero_smallest": "!!a. (0::'a) <= a"
### Partially applied constant "PseudoWaisbergAlgebra.impl_lr_algebra.sup_a" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin
###  (impl_lr_algebra.sup_a (l\<rightarrow>) (r\<rightarrow>))
###  (set (?x # ?xs)) ==
### fold (impl_lr_algebra.sup_a (l\<rightarrow>) (r\<rightarrow>)) ?xs ?x
### Partially applied constant "PseudoWaisbergAlgebra.pseudo_wajsberg_algebra.inf_a" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin
###  (pseudo_wajsberg_algebra.inf_a (l\<rightarrow>) (r\<rightarrow>) negl negr)
###  (set (?x # ?xs)) ==
### fold
###  (pseudo_wajsberg_algebra.inf_a (l\<rightarrow>) (r\<rightarrow>) negl negr)
###  ?xs ?x
### Partially applied constant "PseudoWaisbergAlgebra.pseudo_wajsberg_algebra.inf_b" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin
###  (pseudo_wajsberg_algebra.inf_b (l\<rightarrow>) (r\<rightarrow>) negl negr)
###  (set (?x # ?xs)) ==
### fold
###  (pseudo_wajsberg_algebra.inf_b (l\<rightarrow>) (r\<rightarrow>) negl negr)
###  ?xs ?x
class pseudo_wajsberg_algebra = impl_neg_lr_algebra +
  assumes
    "W6": "!!a b. -r (a l\<rightarrow> -l b) = -l (b r\<rightarrow> -r a)"
class basic_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "B1":
      "!!a b c.
          (a l\<rightarrow> b) l\<rightarrow> c
          <= ((b l\<rightarrow> a) l\<rightarrow> c) l\<rightarrow> c"
    and
    "B2":
      "!!a b c.
          (a r\<rightarrow> b) r\<rightarrow> c
          <= ((b r\<rightarrow> a) r\<rightarrow> c) r\<rightarrow> c"
### Partially applied constant "PseudoHoops.pseudo_hoop_algebra_class.sup1" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>1) (set (?x # ?xs)) ==
### fold (\<squnion>1) ?xs ?x
class pseudo_hoop_lattice = pseudo_hoop_sup_algebra +
  assumes
    "sup_assoc_1":
      "!!a b c. a \<squnion> (b \<squnion> c) = a \<squnion> b \<squnion> c"
class sup_assoc_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "sup1_assoc":
      "!!a b c.
          a \<squnion>1 (b \<squnion>1 c) = a \<squnion>1 b \<squnion>1 c"
    and
    "sup2_assoc":
      "!!a b c.
          a \<squnion>2 (b \<squnion>2 c) = a \<squnion>2 b \<squnion>2 c"
### Partially applied constant "PseudoHoops.pseudo_hoop_algebra_class.sup1" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>1) (set (?x # ?xs)) ==
### fold (\<squnion>1) ?xs ?x
### Partially applied constant "PseudoHoops.pseudo_hoop_algebra_class.sup2" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>2) (set (?x # ?xs)) ==
### fold (\<squnion>2) ?xs ?x
class sup_assoc_pseudo_hoop_algebra_1 = sup_assoc_pseudo_hoop_algebra +
  assumes
    "union_impl":
      "!!a b.
          (a l\<rightarrow> b) \<squnion>1 (b l\<rightarrow> a) = (1::'a)"
    and
    "union_impr":
      "!!a b.
          (a r\<rightarrow> b) \<squnion>1 (b r\<rightarrow> a) = (1::'a)"
class basic_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "B1":
      "!!a b c.
          (a l\<rightarrow> b) l\<rightarrow> c
          <= ((b l\<rightarrow> a) l\<rightarrow> c) l\<rightarrow> c"
    and
    "B2":
      "!!a b c.
          (a r\<rightarrow> b) r\<rightarrow> c
          <= ((b r\<rightarrow> a) r\<rightarrow> c) r\<rightarrow> c"
class basic_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "B1":
      "!!a b c.
          (a l\<rightarrow> b) l\<rightarrow> c
          <= ((b l\<rightarrow> a) l\<rightarrow> c) l\<rightarrow> c"
    and
    "B2":
      "!!a b c.
          (a r\<rightarrow> b) r\<rightarrow> c
          <= ((b r\<rightarrow> a) r\<rightarrow> c) r\<rightarrow> c"
class wajsberg_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "wajsberg1":
      "!!a b.
          (a l\<rightarrow> b) r\<rightarrow> b =
          (b l\<rightarrow> a) r\<rightarrow> a"
    and
    "wajsberg2":
      "!!a b.
          (a r\<rightarrow> b) l\<rightarrow> b =
          (b r\<rightarrow> a) l\<rightarrow> a"
class bounded_basic_pseudo_hoop_algebra = basic_pseudo_hoop_algebra +
  zero_one +
  assumes "zero_smallest": "!!a. (0::'a) <= a"
class inf_a = type +
  fixes inf_a :: "'a => 'a => 'a"
class pseudo_bl_algebra = monoid_mult + zero + inf + sup + left_imp +
  right_imp + ord +
  assumes
    "bounded_lattice":
      "class.bounded_lattice (\<sqinter>) (<=) (<) (\<squnion>) (0::'a)
        (1::'a)"
    and
    "left_residual_bl": "!!x a b. (x * a <= b) = (x <= a l\<rightarrow> b)"
    and
    "right_residual_bl": "!!a x b. (a * x <= b) = (x <= a r\<rightarrow> b)"
    and "inf_l_bl_def": "!!a b. a \<sqinter> b = (a l\<rightarrow> b) * a"
    and "inf_r_bl_def": "!!a b. a \<sqinter> b = a * (a r\<rightarrow> b)"
    and
    "impl_sup_bl":
      "!!a b. a l\<rightarrow> b \<squnion> (b l\<rightarrow> a) = (1::'a)"
    and
    "impr_sup_bl":
      "!!a b. a r\<rightarrow> b \<squnion> (b r\<rightarrow> a) = (1::'a)"
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<sqinter>) (set (?x # ?xs)) ==
### fold (\<sqinter>) ?xs ?x
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<squnion>) (set (?x # ?xs)) ==
### fold (\<squnion>) ?xs ?x
class pseudo_bl_algebra = monoid_mult + zero + inf + sup + left_imp +
  right_imp + ord +
  assumes
    "bounded_lattice":
      "class.bounded_lattice (\<sqinter>) (<=) (<) (\<squnion>) (0::'a)
        (1::'a)"
    and
    "left_residual_bl": "!!x a b. (x * a <= b) = (x <= a l\<rightarrow> b)"
    and
    "right_residual_bl": "!!a x b. (a * x <= b) = (x <= a r\<rightarrow> b)"
    and "inf_l_bl_def": "!!a b. a \<sqinter> b = (a l\<rightarrow> b) * a"
    and "inf_r_bl_def": "!!a b. a \<sqinter> b = a * (a r\<rightarrow> b)"
    and
    "impl_sup_bl":
      "!!a b. a l\<rightarrow> b \<squnion> (b l\<rightarrow> a) = (1::'a)"
    and
    "impr_sup_bl":
      "!!a b. a r\<rightarrow> b \<squnion> (b r\<rightarrow> a) = (1::'a)"
class pseudo_bl_algebra = monoid_mult + zero + inf + sup + left_imp +
  right_imp + ord +
  assumes
    "bounded_lattice":
      "class.bounded_lattice (\<sqinter>) (<=) (<) (\<squnion>) (0::'a)
        (1::'a)"
    and
    "left_residual_bl": "!!x a b. (x * a <= b) = (x <= a l\<rightarrow> b)"
    and
    "right_residual_bl": "!!a x b. (a * x <= b) = (x <= a r\<rightarrow> b)"
    and "inf_l_bl_def": "!!a b. a \<sqinter> b = (a l\<rightarrow> b) * a"
    and "inf_r_bl_def": "!!a b. a \<sqinter> b = a * (a r\<rightarrow> b)"
    and
    "impl_sup_bl":
      "!!a b. a l\<rightarrow> b \<squnion> (b l\<rightarrow> a) = (1::'a)"
    and
    "impr_sup_bl":
      "!!a b. a r\<rightarrow> b \<squnion> (b r\<rightarrow> a) = (1::'a)"
class product_pseudo_hoop_algebra = basic_pseudo_hoop_algebra +
  assumes
    "P1":
      "!!b a.
          b l\<rightarrow> b * b
          <= a \<sqinter> (a l\<rightarrow> b) l\<rightarrow> b"
    and
    "P2":
      "!!b a.
          b r\<rightarrow> b * b
          <= a \<sqinter> (a r\<rightarrow> b) r\<rightarrow> b"
    and
    "P3":
      "!!a b c d.
          ((a l\<rightarrow> b) l\<rightarrow> b) *
          (c * a l\<rightarrow> d * a) *
          (c * b l\<rightarrow> d * b)
          <= c l\<rightarrow> d"
    and
    "P4":
      "!!a b c d.
          ((a r\<rightarrow> b) r\<rightarrow> b) *
          (a * c r\<rightarrow> a * d) *
          (b * c r\<rightarrow> b * d)
          <= c r\<rightarrow> d"
class simple_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes "simple": "normalfilters Int properfilters = {{1::'a}}"
class proper = one +
  assumes "proper": "EX a. a ~= (1::'a)"
class strong_simple_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes "strong_simple": "properfilters = {{1::'a}}"
class strong_simple_pseudo_hoop_algebra_a = pseudo_hoop_algebra + proper +
  assumes "strong_simple_a": "!!a. a ~= (1::'a) ==> filterof {a} = UNIV"
class strong_simple_pseudo_hoop_algebra = pseudo_hoop_algebra + proper +
  assumes "strong_simple": "properfilters = {{1::'a}}"
class basic_pseudo_hoop_algebra_A = basic_pseudo_hoop_algebra +
  assumes
    "left_impl_one":
      "!!b a. b l\<rightarrow> a = a ==> a = (1::'a) | b = (1::'a)"
    and
    "right_impl_one":
      "!!b a. b r\<rightarrow> a = a ==> a = (1::'a) | b = (1::'a)"
class basic_pseudo_hoop_algebra_A = linorder + basic_pseudo_hoop_algebra +
  assumes
    "left_impl_one":
      "!!b a. b l\<rightarrow> a = a ==> a = (1::'a) | b = (1::'a)"
    and
    "right_impl_one":
      "!!b a. b r\<rightarrow> a = a ==> a = (1::'a) | b = (1::'a)"
### theory "Draft.SpecialPseudoHoops"
### 23.100s elapsed time, 25.849s cpu time, 3.748s GC time
Loading theory "Draft.Examples" (required by "Draft.ExamplesMoreTemplates")
### Ignoring duplicate rewrite rule:
### ?a1 + - ?a1 == 0::?'a1
class lgroup = group_add + inf_sup_eq_lattice +
  assumes
    "add_order_preserving": "!!a b u v. a <= b ==> u + a + v <= u + b + v"
class lgroup_with_const = lgroup +
  fixes u :: "'a"
  assumes "(0::'a) <= u"
instantiation
  G :: (lgroup_with_const) bounded_wajsberg_pseudo_hoop_algebra
  zero_G == zero_class.zero :: 'a G
  imp_l_G == imp_l :: 'a G => 'a G => 'a G
  less_eq_G == less_eq :: 'a G => 'a G => bool
  less_G == less :: 'a G => 'a G => bool
  one_G == one_class.one :: 'a G
  times_G == times :: 'a G => 'a G => 'a G
  inf_G == inf :: 'a G => 'a G => 'a G
  imp_r_G == imp_r :: 'a G => 'a G => 'a G
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class lgroup = group_add + inf_sup_eq_lattice +
  assumes
    "add_order_preserving": "!!a b u v. a <= b ==> u + a + v <= u + b + v"
class lgroup = group_add + inf_sup_eq_lattice +
  assumes
    "add_order_preserving": "!!a b u v. a <= b ==> u + a + v <= u + b + v"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
instantiation
  N :: (lgroup) pseudo_hoop_algebra
  imp_l_N == imp_l :: 'a N => 'a N => 'a N
  less_eq_N == less_eq :: 'a N => 'a N => bool
  less_N == less :: 'a N => 'a N => bool
  one_N == one_class.one :: 'a N
  times_N == times :: 'a N => 'a N => 'a N
  inf_N == inf :: 'a N => 'a N => 'a N
  imp_r_N == imp_r :: 'a N => 'a N => 'a N
class lgroup = group_add + inf_sup_eq_lattice +
  assumes
    "add_order_preserving": "!!a b u v. a <= b ==> u + a + v <= u + b + v"
instantiation
  N :: (lgroup) cancel_product_pseudo_hoop_algebra
instantiation
  OrdSum :: (pseudo_hoop_algebra, pseudo_hoop_algebra) pseudo_hoop_algebra
  imp_l_OrdSum == imp_l ::
    ('a, 'b) OrdSum => ('a, 'b) OrdSum => ('a, 'b) OrdSum
  less_eq_OrdSum == less_eq :: ('a, 'b) OrdSum => ('a, 'b) OrdSum => bool
  less_OrdSum == less :: ('a, 'b) OrdSum => ('a, 'b) OrdSum => bool
  one_OrdSum == one_class.one :: ('a, 'b) OrdSum
  times_OrdSum == times ::
    ('a, 'b) OrdSum => ('a, 'b) OrdSum => ('a, 'b) OrdSum
  inf_OrdSum == inf :: ('a, 'b) OrdSum => ('a, 'b) OrdSum => ('a, 'b) OrdSum
  imp_r_OrdSum == imp_r ::
    ('a, 'b) OrdSum => ('a, 'b) OrdSum => ('a, 'b) OrdSum
instantiation
  OrdSum :: (linear_pseudo_hoop_algebra, linear_pseudo_hoop_algebra)
    linear_pseudo_hoop_algebra
instantiation
  bool :: pseudo_hoop_algebra
  imp_l_bool == imp_l :: bool => bool => bool
  one_bool == one_class.one :: bool
  times_bool == times :: bool => bool => bool
  imp_r_bool == imp_r :: bool => bool => bool
class cancel_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes "mult_cancel_left": "!!a b c. a * b = a * c ==> b = c"
    and "mult_cancel_right": "!!b a c. b * a = c * a ==> b = c"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class pseudo_hoop_algebra = left_complemented_monoid_algebra +
  right_complemented_monoid_algebra +
  assumes
    "left_right_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = a * (a r\<rightarrow> b)"
class basic_pseudo_hoop_algebra = pseudo_hoop_algebra +
  assumes
    "B1":
      "!!a b c.
          (a l\<rightarrow> b) l\<rightarrow> c
          <= ((b l\<rightarrow> a) l\<rightarrow> c) l\<rightarrow> c"
    and
    "B2":
      "!!a b c.
          (a r\<rightarrow> b) r\<rightarrow> c
          <= ((b r\<rightarrow> a) r\<rightarrow> c) r\<rightarrow> c"
### theory "Draft.Examples"
### 3.465s elapsed time, 4.313s cpu time, 0.322s GC time
Loading theory "Draft.ExamplesMoreTemplates"
val templateLemmas =
   [("Examples.OrdSum_second", "(1::?'c, ?b) : OrdSum",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Examples.OrdSum_first", "(?a, 1::?'d) : OrdSum",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Examples.diff_minus", "?a - ?b = ?a + - ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Examples.Rep_G_order", "(?a <= ?b) = (Rep_G ?a <= Rep_G ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Examples.order_Rep_N", "(?a <= ?b) = (Rep_N ?a <= Rep_N ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Examples.Rep_N_inf",
     "Rep_N (?a \<sqinter> ?b) = Rep_N ?a \<sqinter> Rep_N ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Examples.Rep_OrdSum_eq", "Rep_OrdSum ?x = Rep_OrdSum ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Examples.ded_left",
     "?a * ?b l\<rightarrow> ?c = ?a l\<rightarrow> ?b l\<rightarrow> ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Examples.lemma_W2",
     "(?a r\<rightarrow> ?b) l\<rightarrow> ?b =
      (?b r\<rightarrow> ?a) l\<rightarrow> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Examples.ded_right",
     "?a * ?b r\<rightarrow> ?c = ?b r\<rightarrow> ?a r\<rightarrow> ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Examples.lemma_W1",
     "(?a l\<rightarrow> ?b) r\<rightarrow> ?b =
      (?b l\<rightarrow> ?a) r\<rightarrow> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Examples.impr_times",
     "?a * (?a r\<rightarrow> ?b) = ?b * (?b r\<rightarrow> ?a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Examples.impr_impl_times",
     "(?a l\<rightarrow> ?b) * ?a = ?a * (?a r\<rightarrow> ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Examples.impl_times",
     "(?a l\<rightarrow> ?b) * ?a = (?b l\<rightarrow> ?a) * ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Examples.impl_ded",
     "?a * ?b l\<rightarrow> ?c = ?a l\<rightarrow> ?b l\<rightarrow> ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Examples.impr_ded",
     "?a * ?b r\<rightarrow> ?c = ?b r\<rightarrow> ?a r\<rightarrow> ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Examples.A",
     "(?a l\<rightarrow> ?b) * ?a = ?a * (?a r\<rightarrow> ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Examples.cancel_times_left", "?a * ?b = ?a * ?c ==> ?b = ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Examples.cancel_times_right", "?b * ?a = ?c * ?a ==> ?b = ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_equation (template_var 2, template_var 0))),
    ("Examples.prod_3",
     "?b l\<rightarrow> ?b * ?b
      <= ?a \<sqinter> (?a l\<rightarrow> ?b) l\<rightarrow> ?b",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_var 1))),
    ("Examples.prod_1",
     "(?a l\<rightarrow> ?b) l\<rightarrow> ?c
      <= ((?b l\<rightarrow> ?a) l\<rightarrow> ?c) l\<rightarrow> ?c",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_var 0))),
    ("Examples.prod_4",
     "?b r\<rightarrow> ?b * ?b
      <= ?a \<sqinter> (?a r\<rightarrow> ?b) r\<rightarrow> ?b",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_var 1))),
    ("Examples.prod_2",
     "(?a r\<rightarrow> ?b) r\<rightarrow> ?c
      <= ((?b r\<rightarrow> ?a) r\<rightarrow> ?c) r\<rightarrow> ?c",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_var 0))),
    ("Examples.fst_not_one_snd",
     "fst (Rep_OrdSum ?a) ~= (1::?'c) ==> snd (Rep_OrdSum ?a) = (1::?'d)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Examples.snd_not_one_fst",
     "snd (Rep_OrdSum ?a) ~= (1::?'c) ==> fst (Rep_OrdSum ?a) = (1::?'d)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Examples.impl_OrdSum_second",
     "Abs_OrdSum (1::?'a, ?x) l\<rightarrow> Abs_OrdSum (1::?'a, ?y) =
      Abs_OrdSum (1::?'a, ?x l\<rightarrow> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Examples.impl_OrdSum_first",
     "Abs_OrdSum (?x, 1::?'b) l\<rightarrow> Abs_OrdSum (?y, 1::?'b) =
      Abs_OrdSum (?x l\<rightarrow> ?y, 1::?'b)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_hole 1)))),
    ("Examples.fst_not_one_simp",
     "fst (Rep_OrdSum ?c) ~= (1::?'c) ==>
      Abs_OrdSum (fst (Rep_OrdSum ?c), 1::?'d) = ?c",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0))),
             template_hole 0)),
         template_var 0))),
    ("Examples.snd_not_one_simp",
     "snd (Rep_OrdSum ?c) ~= (1::?'c) ==>
      Abs_OrdSum (1::?'d, snd (Rep_OrdSum ?c)) = ?c",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)))),
         template_var 0))),
    ("Examples.impl_OrdSum_first_second",
     "?x ~= (1::?'a) ==>
      Abs_OrdSum (?x, 1::?'b) l\<rightarrow> Abs_OrdSum (1::?'a, ?y) = 1",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 6),
               template_var 0))),
         template_hole 0))),
    ("Examples.fst_snd_eq",
     "[| fst ?a = ?x; snd ?a = ?y |] ==> (?x, ?y) = ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_var 1),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Examples.if_unfold_right",
     "(?d = (if ?a then ?b else ?c)) =
      ((?a --> ?d = ?b) & (~ ?a --> ?d = ?c))",
     template_bimplication
      (template_equation
        (template_var 3,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 0)))
           ))),
    ("Examples.if_unfold_left",
     "((if ?a then ?b else ?c) = ?d) =
      ((?a --> ?b = ?d) & (~ ?a --> ?c = ?d))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("Examples.order_Abs_N",
     "[| ?a : N; ?b : N |] ==> (?a <= ?b) = (Abs_N ?a <= Abs_N ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Examples.Abs_OrdSum_bijective",
     "[| ?x : OrdSum; ?y : OrdSum |]
      ==> (Abs_OrdSum ?x = Abs_OrdSum ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Examples.Abs_OrdSum_eq",
     "[| ?x : OrdSum; ?y : OrdSum; Abs_OrdSum ?x = Abs_OrdSum ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Examples.prod_5",
     "((?a l\<rightarrow> ?b) l\<rightarrow> ?b) *
      (?c * ?a l\<rightarrow> ?f * ?a) *
      (?c * ?b l\<rightarrow> ?f * ?b)
      <= ?c l\<rightarrow> ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Examples.prod_6",
     "((?a r\<rightarrow> ?b) r\<rightarrow> ?b) *
      (?a * ?c r\<rightarrow> ?a * ?f) *
      (?b * ?c r\<rightarrow> ?b * ?f)
      <= ?c r\<rightarrow> ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Examples.normal_2",
     "[| ?K : normal; ?K : convex; ?K : lsubgroup; ?x : F ?K ** {?a} |]
      ==> ?x : {?a} ** F ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_app (template_hole 2, template_var 2)))
           ))),
    ("Examples.normal_1",
     "[| ?K : normal; ?K : convex; ?K : lsubgroup; ?x : {?a} ** F ?K |]
      ==> ?x : F ?K ** {?a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_hole 1)),
                template_app (template_hole 0, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.ExamplesMoreTemplates"
### 0.509s elapsed time, 0.885s cpu time, 0.089s GC time
val it = (): unit
