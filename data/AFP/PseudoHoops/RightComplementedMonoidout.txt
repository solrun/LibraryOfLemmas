Loading theory "Draft.Operations" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.RightComplementedMonoid" via "Draft.LeftComplementedMonoid")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class left_imp = type +
  fixes imp_l :: "'a => 'a => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class right_imp = type +
  fixes imp_r :: "'a => 'a => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.551s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class left_uminus = type +
  fixes uminus_l :: "'a => 'a"
class right_uminus = type +
  fixes uminus_r :: "'a => 'a"
### theory "Draft.Operations"
### 0.202s elapsed time, 0.819s cpu time, 0.049s GC time
Loading theory "LatticeProperties.Lattice_Prop" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.RightComplementedMonoid" via "Draft.LeftComplementedMonoid")
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.821s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.348s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.ExtrEqs")
### theory "LatticeProperties.Lattice_Prop"
### 0.196s elapsed time, 0.772s cpu time, 0.072s GC time
Loading theory "Draft.LeftComplementedMonoid" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.RightComplementedMonoid")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class right_pordered_monoid_mult = monoid_mult + order +
  assumes "mult_right_mono": "!!a b c. a <= b ==> a * c <= b * c"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class one_greatest = one + ord +
  assumes "one_greatest": "!!a. a <= (1::'a)"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.684s elapsed time, 2.699s cpu time, 0.246s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.886s elapsed time, 3.220s cpu time, 0.647s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class left_residuated = times + left_imp + ord +
  assumes
    "left_residual": "!!x a b. (x * a <= b) = (x <= a l\<rightarrow> b)"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class left_inf = times + inf + left_imp +
  assumes "inf_l_def": "!!a b. a \<sqinter> b = (a l\<rightarrow> b) * a"
Found termination order: "size <*mlex*> {}"
class left_complemented_monoid = left_inf +
  left_residuated_pordered_monoid +
  assumes "right_divisibility": "!!a b. (a <= b) = (EX c. a = c * b)"
### theory "HOL-Library.Tree"
### 1.736s elapsed time, 5.389s cpu time, 0.862s GC time
Loading theory "Draft.Templates" (required by "Draft.RightComplementedMonoidMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RightComplementedMonoidMoreTemplates")
class less_def = ord +
  assumes "less_def": "!!a b. (a < b) = (a <= b & ~ b <= a)"
class one_times = one + times +
  assumes "one_left": "!!a. (1::'a) * a = a"
    and "one_right": "!!a. a * (1::'a) = a"
class left_complemented_monoid_algebra = left_inf + less_def + one_times +
  assumes "left_impl_one": "!!a. a l\<rightarrow> a = (1::'a)"
    and
    "left_impl_times":
      "!!a b. (a l\<rightarrow> b) * a = (b l\<rightarrow> a) * b"
    and
    "left_impl_ded":
      "!!a b c.
          a * b l\<rightarrow> c = a l\<rightarrow> b l\<rightarrow> c"
    and "left_lesseq": "!!a b. (a <= b) = (a l\<rightarrow> b = (1::'a))"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 1.021s cpu time, 0.048s GC time
### theory "Draft.LeftComplementedMonoid"
### 2.189s elapsed time, 5.716s cpu time, 0.883s GC time
Loading theory "Draft.RightComplementedMonoid" (required by "Draft.RightComplementedMonoidMoreTemplates")
class left_pordered_monoid_mult = monoid_mult + order +
  assumes "mult_left_mono": "!!a b c. a <= b ==> c * a <= c * b"
class right_residuated = times + right_imp + ord +
  assumes
    "right_residual": "!!a x b. (a * x <= b) = (x <= a r\<rightarrow> b)"
class right_inf = times + inf + right_imp +
  assumes "inf_r_def": "!!a b. a \<sqinter> b = a * (a r\<rightarrow> b)"
class right_complemented_monoid = right_inf +
  right_residuated_pordered_monoid +
  assumes "left_divisibility": "!!a b. (a <= b) = (EX c. a = b * c)"
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%a b. b * a) ?xs ==
### foldr (%a b. b * a) ?xs (1::?'a)
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<sqinter>) (set (?x # ?xs)) ==
### fold (\<sqinter>) ?xs ?x
class right_complemented_monoid = right_inf +
  right_residuated_pordered_monoid +
  assumes "left_divisibility": "!!a b. (a <= b) = (EX c. a = b * c)"
### Ignoring duplicate rewrite rule:
### (1::'a) \<sqinter> ?y == ?y
### Ignoring duplicate rewrite rule:
### (1::'a) r\<rightarrow> ?y == ?y
class right_complemented_monoid_nole_algebra = less_def + one_times +
  right_inf +
  assumes "right_impl_one": "!!a. a r\<rightarrow> a = (1::'a)"
    and
    "right_impl_times":
      "!!a b. a * (a r\<rightarrow> b) = b * (b r\<rightarrow> a)"
    and
    "right_impl_ded":
      "!!a b c.
          a * b r\<rightarrow> c = b r\<rightarrow> a r\<rightarrow> c"
class right_complemented_monoid_algebra =
  right_complemented_monoid_nole_algebra +
  assumes "right_lesseq": "!!a b. (a <= b) = (a r\<rightarrow> b = (1::'a))"
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%a b. b * a) ?xs ==
### foldr (%a b. b * a) ?xs (1::?'a)
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<sqinter>) (set (?x # ?xs)) ==
### fold (\<sqinter>) ?xs ?x
class right_complemented_monoid_algebra =
  right_complemented_monoid_nole_algebra +
  assumes "right_lesseq": "!!a b. (a <= b) = (a r\<rightarrow> b = (1::'a))"
### theory "Draft.RightComplementedMonoid"
### 1.776s elapsed time, 1.859s cpu time, 0.105s GC time
Loading theory "Draft.RightComplementedMonoidMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.RightComplementedMonoidMoreTemplates"
### 0.326s elapsed time, 0.541s cpu time, 0.035s GC time
val it = (): unit
