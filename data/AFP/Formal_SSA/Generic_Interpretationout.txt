Loading theory "Draft.Serial_Rel" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code" via "Draft.Construct_SSA_notriv" via "Draft.Minimality")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Generic_InterpretationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Generic_InterpretationTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Generic_InterpretationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.569s cpu time, 0.051s GC time
Loading theory "Draft.FormalSSA_Misc" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code" via "Draft.SSA_CFG" via "Draft.Graph_path")
### theory "Draft.Serial_Rel"
### 0.161s elapsed time, 0.647s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Generic_InterpretationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.931s cpu time, 0.051s GC time
Loading theory "Draft.While_Combinator_Exts" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code")
### theory "Draft.While_Combinator_Exts"
### 0.081s elapsed time, 0.294s cpu time, 0.121s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Generic_InterpretationTemplates" via "Draft.ExtrEqs")
### theory "Draft.FormalSSA_Misc"
### 0.189s elapsed time, 0.726s cpu time, 0.121s GC time
Loading theory "Draft.Mapping_Exts" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code")
### theory "HOL-Library.Nat_Bijection"
### 0.371s elapsed time, 1.458s cpu time, 0.172s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Generic_InterpretationTemplates" via "Draft.ExtrEqs")
### theory "Draft.Mapping_Exts"
### 0.260s elapsed time, 1.017s cpu time, 0.102s GC time
Loading theory "Draft.RBT_Mapping_Exts" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.RBT_Mapping_Exts"
### 0.551s elapsed time, 2.051s cpu time, 0.693s GC time
Loading theory "Draft.Graph_path" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code" via "Draft.SSA_CFG")
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.955s elapsed time, 3.608s cpu time, 0.849s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.075s elapsed time, 3.951s cpu time, 0.966s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.091s elapsed time, 6.472s cpu time, 1.283s GC time
Loading theory "Draft.Templates" (required by "Draft.Generic_InterpretationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.142s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Generic_InterpretationTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.151s cpu time, 0.082s GC time
locale graph_pred_it_defs
  fixes
    pred_list_it ::
      "'G => 'V => (('V * 'W) list => bool)
                   => ('V * 'W => ('V * 'W) list => ('V * 'W) list)
                      => ('V * 'W) list => ('V * 'W) list"
locale graph_pred_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    pred_list_it ::
      "'G => 'V => (('V * 'W) list => bool)
                   => ('V * 'W => ('V * 'W) list => ('V * 'W) list)
                      => ('V * 'W) list => ('V * 'W) list"
  assumes "graph_pred_it \<alpha> invar pred_list_it"
locale Graph_path.StdGraphDefs
  fixes ops :: "('V, 'W, 'G, 'm) Graph_path.graph_ops_scheme"
locale Graph_path.StdGraph
  fixes ops :: "('a, 'b, 'c, 'd) Graph_path.graph_ops_scheme"
  assumes "Graph_path.StdGraph ops"
locale graph_path_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
locale graph_path
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
  assumes "graph_path \<alpha>e \<alpha>n invar inEdges'"
locale graph_Entry_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
locale graph_Entry
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
  assumes "graph_Entry \<alpha>e \<alpha>n invar inEdges' Entry"
Proofs for inductive predicate(s) "EntryPath"
  Proving monotonicity ...
### theory "Draft.Graph_path"
### 3.449s elapsed time, 6.520s cpu time, 1.565s GC time
Loading theory "Draft.SSA_CFG" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code")
locale CFG_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
locale CFG_SSA
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes "CFG_SSA \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_wf_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
Proofs for inductive predicate(s) "liveVal"
  Proving monotonicity ...
locale CFG_SSA_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_Transformed_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
### theory "Draft.SSA_CFG"
### 1.470s elapsed time, 1.553s cpu time, 0.128s GC time
Loading theory "Draft.Construct_SSA" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code")
Loading theory "Draft.Minimality" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code" via "Draft.Construct_SSA_notriv")
Loading theory "Draft.SSA_CFG_code" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code")
locale graph_path
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
  assumes "graph_path \<alpha>e \<alpha>n invar inEdges'"
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
locale CFG_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
instantiation
  Def :: linorder
  less_eq_Def == less_eq :: Def => Def => bool
  less_Def == less :: Def => Def => bool
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
### theory "Draft.Minimality"
### 0.747s elapsed time, 2.245s cpu time, 0.131s GC time
Loading theory "Draft.Construct_SSA_notriv" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code")
locale CFG_SSA
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes "CFG_SSA \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_ext_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_Construct
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_Construct \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
Found termination order: "(%p. length (fst (snd (snd p)))) <*mlex*> {}"
locale CFG_SSA_ext
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_ext \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
locale CFG_SSA_Transformed_notriv
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var chooseNext_all"
locale CFG_SSA_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
  assumes
    "CFG_SSA_code \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
Proofs for inductive predicate(s) "liveVal'"
  Proving monotonicity ...
locale CFG_SSA_wf_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
locale CFG_SSA_step
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
    and g :: "'g"
  assumes
    "CFG_SSA_step \<alpha>e \<alpha>n invar inEdges' Entry oldDefs oldUses
      defs uses phis var chooseNext_all g"
locale CFG_SSA_wf_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
  assumes
    "CFG_SSA_wf_code \<alpha>e \<alpha>n invar inEdges' Entry defs uses
      phis"
locale CFG_Construct
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_Construct \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_SSA_Transformed_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed_code \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var"
### theory "Draft.SSA_CFG_code"
### 2.073s elapsed time, 6.215s cpu time, 0.456s GC time
locale CFG_Construct_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes
    "CFG_Construct_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
### theory "Draft.Construct_SSA"
### 2.236s elapsed time, 6.532s cpu time, 0.456s GC time
Loading theory "Draft.Construct_SSA_code" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation")
locale CFG_SSA_Transformed_notriv
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var chooseNext_all"
### theory "Draft.Construct_SSA_notriv"
### 1.765s elapsed time, 4.850s cpu time, 0.394s GC time
Loading theory "Draft.Construct_SSA_notriv_code" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation")
locale CFG_Construct_linorder
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes
    "CFG_Construct_linorder \<alpha>e \<alpha>n invar inEdges' Entry defs
      uses"
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_SSA_Transformed_notriv_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
### theory "Draft.Construct_SSA_code"
### 1.590s elapsed time, 3.284s cpu time, 0.285s GC time
Loading theory "Draft.SSA_Transfer_Rules" (required by "Draft.Generic_InterpretationTemplates" via "Draft.Generic_Interpretation")
locale graph_path_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
locale CFG_SSA_Transformed_notriv_linorder
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder \<alpha>e \<alpha>n invar inEdges'
      Entry oldDefs oldUses defs uses phis var chooseNext_all"
locale graph_Entry_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
locale graph_Entry
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
  assumes "graph_Entry \<alpha>e \<alpha>n invar inEdges' Entry"
locale CFG_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
locale CFG_SSA_Transformed_notriv_linorder
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder \<alpha>e \<alpha>n invar inEdges'
      Entry oldDefs oldUses defs uses phis var chooseNext_all"
locale CFG_Construct
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_Construct \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
locale CFG_SSA_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
locale CFG_SSA_Transformed_notriv_linorder_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder_code \<alpha>e \<alpha>n invar
      inEdges' Entry oldDefs oldUses defs uses phis var chooseNext_all"
### theory "Draft.SSA_Transfer_Rules"
### 1.179s elapsed time, 2.423s cpu time, 0.191s GC time
locale CFG_SSA_step_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
    and g :: "'g"
  assumes
    "CFG_SSA_step_code \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var chooseNext_all g"
locale CFG_SSA_Transformed_notriv_linorder_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder_code \<alpha>e \<alpha>n invar
      inEdges' Entry oldDefs oldUses defs uses phis var chooseNext_all"
### theory "Draft.Construct_SSA_notriv_code"
### 4.579s elapsed time, 7.255s cpu time, 0.498s GC time
Loading theory "Draft.Generic_Interpretation" (required by "Draft.Generic_InterpretationTemplates")
### Generation of a parametrized correspondence relation failed.
### Reason:
###   No relator for the type "Generic_Interpretation.gen_cfg.gen_cfg_ext"
###     found.
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set (gen_wf_uses ?g n)))
###  (gen_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set
###          (CFG_Construct.uses' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs
###            gen_wf_uses ?g n)))
###  (gen_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_wf_defs'" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.allDefs ?g ?n ==
### gen_wf_defs' ?g ?n Un gen_wf.braun_ssa.phiDefs ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.phiUses ?g ?n ==
### UN n':set (gen_wf_successors ?g ?n).
###    UN v':gen_wf.braun_ssa.phiDefs ?g n'.
###       snd `
###       Set.filter (%(n'', v). n'' = ?n)
###        (set (zip (gen_wf_predecessors ?g n')
###               (the (CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges'
###                      gen_wf_defs gen_wf_uses ?g (n', v')))))
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.allUses ?g ?n ==
### CFG_Construct.uses' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs gen_wf_uses
###  ?g ?n Un
### gen_wf.braun_ssa.phiUses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.allVars ?g ==
### UN n:set (gen_wf_\<alpha>n ?g).
###    gen_wf.braun_ssa.allDefs ?g n Un gen_wf.braun_ssa.allUses ?g n
### Partially applied constant "Construct_SSA.CFG_Construct.phis'" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.phidefNodes ?g ==
### fold (%(n, v). Mapping.update v n)
###  (sorted_list_of_set
###    (dom (CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs
###           gen_wf_uses ?g)))
###  Mapping.empty
### Partially applied constant "Construct_SSA.CFG_Construct.phis'" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.phiNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (case CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges'
###               gen_wf_defs gen_wf_uses ?g n of
###         None => [] | Some x => id x))
###  (sorted_list_of_set
###    (dom (CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs
###           gen_wf_uses ?g)))
###  Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.lookupDef ?g ?n ?v ==
### if ?n ~: set (gen_wf_\<alpha>n ?g) then undefined
### else if ?v : gen_wf_defs ?g ?n then (?v, ?n, SimpleDef)
###      else case gen_wf_predecessors ?g ?n of [] => (?v, ?n, PhiDef)
###           | [m] => gen_wf.lookupDef ?g m ?v
###           | m # aa # lista => (?v, ?n, PhiDef)
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.uses' ?g ?n == gen_wf.lookupDef ?g ?n ` gen_wf_uses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.phis' ==
### %g (n, v, m, def).
###    if m = n & n : gen_wf.phiDefNodes g v & v : gen_wf_vars g & def = PhiDef
###    then Some (map (%m. gen_wf.lookupDef g m v) (gen_wf_predecessors g n))
###    else None
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.defNode ?g ?v ==
### hd (filter (%n. ?v : gen_wf.braun_ssa.allDefs ?g n) (gen_wf_\<alpha>n ?g))
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.isTrivialPhi ?g ?v ?v' ==
### ?v' ~= ?v &
### (case gen_wf.braun_ssa.phi ?g ?v of None => False
###  | Some vs => set vs = {?v, ?v'} | set vs = {?v'})
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.trivial ?g ?v ==
### EX v':gen_wf.braun_ssa.allVars ?g. gen_wf.braun_ssa.isTrivialPhi ?g ?v v'
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.redundant ?g ==
### EX v:gen_wf.braun_ssa.allVars ?g. gen_wf.braun_ssa.trivial ?g v
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.lookupDef ?g ?n ?v ==
### if ?n ~: set (gen_wf_\<alpha>n ?g) then undefined
### else if ?v : gen_wf_defs ?g ?n then (?v, ?n, SimpleDef)
###      else case gen_wf_predecessors ?g ?n of [] => (?v, ?n, PhiDef)
###           | [m] => gen_wf.lookupDef ?g m ?v
###           | m # aa # lista => (?v, ?n, PhiDef)
### Abstraction on left hand side of equation, in theorem:
### gen_wf.phiDefNodes_aux ?g ?v ?unvisited ?n ==
### if ?n ~: set ?unvisited | ?v : gen_wf_defs ?g ?n then {}
### else fold (Un)
###       (map (gen_wf.phiDefNodes_aux ?g ?v (removeAll ?n ?unvisited))
###         (gen_wf_predecessors ?g ?n))
###       (if length (gen_wf_predecessors ?g ?n) ~= 1 then {?n} else {})
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.phiDefNodes ?g ?v ==
### fold (Un)
###  (concat
###    (map (%n. if ?v : gen_wf_uses ?g n
###              then [gen_wf.phiDefNodes_aux ?g ?v (gen_wf_\<alpha>n ?g) n]
###              else [])
###      (gen_wf_\<alpha>n ?g)))
###  {}
### Code generator: dropping subsumed code equation
### gen_wf_defs' ?g ?n == (%v. (v, ?n, SimpleDef)) ` gen_wf_defs ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.uses' ?g ?n == gen_wf.lookupDef ?g ?n ` gen_wf_uses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.phis' ==
### %g (n, v, m, def).
###    if m = n & n : gen_wf.phiDefNodes g v & v : gen_wf_vars g & def = PhiDef
###    then Some (map (%m. gen_wf.lookupDef g m v) (gen_wf_predecessors g n))
###    else None
### Code generator: dropping subsumed code equation
### gen_wf_predecessors ?g ?n == map getFrom (gen_wf.inEdges ?g ?n)
### Not an equation, in theorem:
### gen_wf.readVariableRecursive_readArgs_dom (Inl (?g, ?v, ?n, ?phis)) ==>
### gen_wf_readVariableRecursive ?g ?v ?n ?phis ==
### if ?v : gen_wf_defs ?g ?n then ((?v, ?n, SimpleDef), ?phis)
### else case gen_wf_predecessors ?g ?n of
###      [] => ((?v, ?n, PhiDef), Mapping.update (?n, ?v) [] ?phis)
###      | [m] => gen_wf_readVariableRecursive ?g ?v m ?phis
###      | m # ab # lista =>
###          case Mapping.lookup ?phis (?n, ?v) of
###          None =>
###            let phis = Mapping.update (?n, ?v) [] ?phis;
###                (phis, args) = gen_wf_readArgs ?g ?v ?n phis (m # ab # lista)
###            in ((?v, ?n, PhiDef), Mapping.update (?n, ?v) args phis)
###          | Some x => ((?v, ?n, PhiDef), ?phis)
### Generation of a parametrized correspondence relation failed.
### Reason:
###   No relator for the type "Generic_Interpretation.gen_ssa_cfg.gen_ssa_cfg_ext"
###     found.
### Abstraction on left hand side of equation, in theorem:
### uninst_allDefs ?p ?g ?n ==
### gen_ssa_wf_ssa_defs ?g ?n Un uninst_phiDefs ?p ?g ?n
### Abstraction on left hand side of equation, in theorem:
### uninst_phiUses ?p ?g ?n ==
### UN n':set (uninst_successors ?g ?n).
###    UN v':uninst_phiDefs ?p ?g n'.
###       snd `
###       Set.filter (%(n'', v). n'' = ?n)
###        (set (zip (uninst_predecessors ?g n')
###               (the (Mapping.lookup (?p ?g) (n', v')))))
### Abstraction on left hand side of equation, in theorem:
### uninst_allUses ?u ?p ?g ?n == (usesOf o ?u) ?g ?n Un uninst_phiUses ?p ?g ?n
### Abstraction on left hand side of equation, in theorem:
### uninst_allVars ?u ?p ?g ==
### UN n:set (gen_ssa_wf_\<alpha>n ?g).
###    uninst_allDefs ?p ?g n Un uninst_allUses ?u ?p ?g n
### Abstraction on left hand side of equation, in theorem:
### uninst_phiUses ?p ?g ?n ==
### Union_of
###  (%n'. Union_of
###         (%v'. snd `
###               Set.filter (%(n'', v). n'' = ?n)
###                (set (zip (uninst_predecessors ?g n')
###                       (the (Mapping.lookup (?p ?g) (n', v'))))))
###         (uninst_phiDefs ?p ?g n'))
###  (set (uninst_successors ?g ?n))
### Abstraction on left hand side of equation, in theorem:
### uninst_allUses ?u ?p ?g ?n == (usesOf o ?u) ?g ?n Un uninst_phiUses ?p ?g ?n
### Abstraction on left hand side of equation, in theorem:
### uninst_allVars ?u ?p ?g ==
### Union_of (%n. uninst_allDefs ?p ?g n Un uninst_allUses ?u ?p ?g n)
###  (set (gen_ssa_wf_\<alpha>n ?g))
### Abstraction on left hand side of equation, in theorem:
### uninst_defNode ?p ?g ?v ==
### hd (filter (%n. ?v : uninst_allDefs ?p ?g n) (gen_ssa_wf_\<alpha>n ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst.trivial ?u ?p ?g ?v ==
### EX v':uninst_allVars ?u ?p ?g. uninst_isTrivialPhi ?p ?g ?v v'
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst.redundant ?u ?p ?g ==
### EX v:uninst_allVars ?u ?p ?g. uninst.trivial ?u ?p ?g v
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.old.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set (gen_ssa_wf_uses ?g n)))
###  (gen_ssa_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.uses'_all ?g == fst (gen_ssa_wf_notriv_substAll ?g)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.phis'_all ?g == snd (gen_ssa_wf_notriv_substAll ?g)
### Abstraction on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.substitution_code ?g ?next ==
### the (the_trivial (snd ?next)
###       (the (Mapping.lookup (gen_ssa_wf_phis ?g) ?next)))
### Abstraction on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.substNext_code ?g ?next ==
### %v. if v = snd ?next then gen_ssa_wf_notriv.substitution_code ?g ?next
###     else v
### Partially applied constant "Fun.comp" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.uses'_code ?g ?next ?n ==
### gen_ssa_wf_notriv.substNext_code ?g ?next `
### (usesOf o gen_ssa_wf_ssa_uses) ?g ?n
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.cond_code ?g ==
### CFG_SSA_wf_base_code.redundant_code gen_ssa_wf_phis ?g
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_uses" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.uses'_codem ?g ?next ?next' ?nodes_of_uses ==
### fold
###  (%n. Mapping.update n
###        (insert ?next'
###          (Set.remove (snd ?next)
###            (the (Mapping.lookup (gen_ssa_wf_ssa_uses ?g) n)))))
###  (sorted_list_of_set
###    (case Mapping.lookup ?nodes_of_uses (snd ?next) of None => {}
###     | Some x => id x))
###  (gen_ssa_wf_ssa_uses ?g)
### Type
### (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
### => ?'a::linorder * ?'d::linorder
###    => ?'d::linorder
###       => ?'d::linorder set
###          => (?'d::linorder, ?'a::linorder set) mapping
###             => (?'d::linorder, ?'a::linorder set) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.nodes_of_uses'"
### is too specific compared to declared type
### ?'g::{}
### => ?'node::{} * ?'val::{}
###    => ?'val::{}
###       => ?'val::{} set
###          => (?'val::{}, ?'node::{} set) mapping
###             => (?'val::{}, ?'node::{} set) mapping, in theorem:
### gen_ssa_wf_notriv.nodes_of_uses' ?g ?next ?next' ?phiVals ?nodes_of_uses ==
### let users =
###       case Mapping.lookup ?nodes_of_uses (snd ?next) of None => {}
###       | Some x => id x
### in if ?next' : ?phiVals
###    then Mapping.map_default ?next' {} (%ns. ns Un users)
###          (Mapping.delete (snd ?next) ?nodes_of_uses)
###    else Mapping.delete (snd ?next) ?nodes_of_uses
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.phis'_code ?g ?next ==
### map_values
###  (%(n, v) vs.
###      if v = snd ?next then None
###      else Some (map (gen_ssa_wf_notriv.substNext_code ?g ?next) vs))
###  (gen_ssa_wf_phis ?g)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.phis'_codem ?g ?next ?next' ?nodes_of_phis ==
### fold
###  (%n. Mapping.update n
###        (map (id(snd ?next := ?next'))
###          (the (Mapping.lookup (gen_ssa_wf_phis ?g) n))))
###  (sorted_list_of_set
###    (case Mapping.lookup ?nodes_of_phis (snd ?next) of None => {}
###     | Some x => Set.remove ?next x))
###  (Mapping.delete ?next (gen_ssa_wf_phis ?g))
### Type
### (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
### => ?'a::linorder * ?'d::linorder
###    => ?'d::linorder
###       => (?'d::linorder, (?'a::linorder * ?'d::linorder) set) mapping
###          => (?'d::linorder, (?'a::linorder * ?'d::linorder) set) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.nodes_of_phis'"
### is too specific compared to declared type
### ?'g::{}
### => ?'node::{} * ?'val::{}
###    => ?'val::{}
###       => (?'val::{}, (?'node::{} * ?'val::{}) set) mapping
###          => (?'val::{}, (?'node::{} * ?'val::{}) set) mapping, in theorem:
### gen_ssa_wf_notriv.nodes_of_phis' ?g ?next ?next' ?nodes_of_phis ==
### let old_phis =
###       Set.remove ?next
###        (case Mapping.lookup ?nodes_of_phis (snd ?next) of None => {}
###         | Some x => id x)
### in Let (Mapping.delete (snd ?next) ?nodes_of_phis)
###     (Mapping.map_default ?next' {} (%ns. Set.remove ?next ns Un old_phis))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.triv_phis' ?g ?next ?triv_phis ?nodes_of_phis ==
### Set.remove ?next ?triv_phis Un
### Set.filter
###  (%n. CFG_SSA_wf_base_code.trivial_code (snd n)
###        (the (Mapping.lookup (gen_ssa_wf_phis ?g) n)))
###  (case Mapping.lookup ?nodes_of_phis (snd ?next) of None => {}
###   | Some x => Set.remove ?next x)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_uses" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.step_code ?g ==
### let next = gen_ssa_wf_notriv.chooseNext' ?g
### in (gen_ssa_wf_notriv.uses'_code ?g next,
###     gen_ssa_wf_notriv.phis'_code ?g next)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_uses" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.step_codem ?g ?next ?next' ?nodes_of_uses
###  ?nodes_of_phis ==
### (gen_ssa_wf_notriv.uses'_codem ?g ?next ?next' ?nodes_of_uses,
###  gen_ssa_wf_notriv.phis'_codem ?g ?next ?next' ?nodes_of_phis)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set (gen_ssa_wf_notriv.uses'_all ?g n)))
###  (gen_ssa_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_defs" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.allDefs ?g ?n ==
### gen_ssa_wf_ssa_defs ?g ?n Un gen_ssa_wf_notriv.notriv.phiDefs ?g ?n
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.phiUses ?g ?n ==
### UN n':set (graph_path_base.successors gen_ssa_wf_\<alpha>n
###             gen_ssa_wf_inEdges' ?g ?n).
###    UN v':gen_ssa_wf_notriv.notriv.phiDefs ?g n'.
###       snd `
###       Set.filter (%(n'', v). n'' = ?n)
###        (set (zip (graph_path_base.predecessors gen_ssa_wf_inEdges' ?g n')
###               (the (gen_ssa_wf_notriv.phis'_all ?g (n', v')))))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.allUses ?g ?n ==
### gen_ssa_wf_notriv.uses'_all ?g ?n Un gen_ssa_wf_notriv.notriv.phiUses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.allVars ?g ==
### UN n:set (gen_ssa_wf_\<alpha>n ?g).
###    gen_ssa_wf_notriv.notriv.allDefs ?g n Un
###    gen_ssa_wf_notriv.notriv.allUses ?g n
### Partially applied constant "Construct_SSA_notriv.CFG_SSA_Transformed_notriv_base.phis'_all" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.phidefNodes ?g ==
### fold (%(n, v). Mapping.update v n)
###  (sorted_list_of_set (dom (gen_ssa_wf_notriv.phis'_all ?g))) Mapping.empty
### Partially applied constant "Construct_SSA_notriv.CFG_SSA_Transformed_notriv_base.phis'_all" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.phiNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (case gen_ssa_wf_notriv.phis'_all ?g n of None => []
###         | Some x => id x))
###  (sorted_list_of_set (dom (gen_ssa_wf_notriv.phis'_all ?g))) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.defNode ?g ?v ==
### hd (filter (%n. ?v : gen_ssa_wf_notriv.notriv.allDefs ?g n)
###      (gen_ssa_wf_\<alpha>n ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.isTrivialPhi ?g ?v ?v' ==
### ?v' ~= ?v &
### (case gen_ssa_wf_notriv.notriv.phi ?g ?v of None => False
###  | Some vs => set vs = {?v, ?v'} | set vs = {?v'})
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.trivial ?g ?v ==
### EX v':gen_ssa_wf_notriv.notriv.allVars ?g.
###    gen_ssa_wf_notriv.notriv.isTrivialPhi ?g ?v v'
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.redundant ?g ==
### EX v:gen_ssa_wf_notriv.notriv.allVars ?g.
###    gen_ssa_wf_notriv.notriv.trivial ?g v
### Code generator: dropping subsumed code equation
### gen_ssa_wf_notriv_substAll ?g ==
### while (gen_ssa_wf_notriv.cond ?g) (gen_ssa_wf_notriv.step ?g)
###  ((usesOf o gen_ssa_wf_ssa_uses) ?g, Mapping.lookup (gen_ssa_wf_phis ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst_code.substAll ?u ?p ?g ==
### while (uninst_code.cond ?u ?p ?g) (uninst_code.step ?u ?p ?g)
###  ((usesOf o ?u) ?g, Mapping.lookup (?p ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst_code.uses'_all ?u ?p ?g == fst (uninst_code.substAll ?u ?p ?g)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst_code.phis'_all ?u ?p ?g == snd (uninst_code.substAll ?u ?p ?g)
### Abstraction on left hand side of equation, in theorem:
### uninst_code_substNext ?p ?g ?next ==
### %v. if v = snd ?next then uninst_code_substitution ?p ?g ?next else v
### Partially applied constant "Fun.comp" on left hand side of equation, in theorem:
### uninst_code.uses'_code ?u ?p ?g ?next ?n ==
### uninst_code_substNext ?p ?g ?next ` (usesOf o ?u) ?g ?n
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => bool
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.cond_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{} => bool, in theorem:
### uninst_code.cond_code ?p ?g == uninst_redundant ?p ?g
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => ?'a::linorder * ?'d::linorder
###       => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.phis'_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{}
###    => ?'node::{} * ?'val::{}
###       => (?'node::{} * ?'val::{}, ?'val::{} list) mapping, in theorem:
### uninst_code.phis'_code ?p ?g ?next ==
### map_values
###  (%(n, v) vs.
###      if v = snd ?next then None
###      else Some (map (uninst_code_substNext ?p ?g ?next) vs))
###  (?p ?g)
### Partially applied constant "Generic_Interpretation.uninst_chooseNext" on left hand side of equation, in theorem:
### uninst_code.step_code ?u ?p ?g ==
### let next = uninst_code.chooseNext' ?u ?p ?g
### in (uninst_code.uses'_code ?u ?p ?g next, uninst_code.phis'_code ?p ?g next)
### Code generator: dropping subsumed code equation
### uninst_redundant ?p ?g == uninst_trivial_phis ?p ?g ~= {}
### Partially applied constant "Fun.comp" on left hand side of equation, in theorem:
### uninst_code.uses'_code ?u ?p ==
### %g next n. uninst_code_substNext ?p g next ` (usesOf o ?u) g n
### Code generator: dropping subsumed code equation
### uninst_code_substitution ?p ?g ?next ==
### the (the_trivial (snd ?next) (the (Mapping.lookup (?p ?g) ?next)))
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => ?'a::linorder * ?'d::linorder
###       => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.phis'_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{}
###    => ?'node::{} * ?'val::{}
###       => (?'node::{} * ?'val::{}, ?'val::{} list) mapping, in theorem:
### uninst_code.phis'_code ?p ?g ?next ==
### map_values
###  (%(n, v) vs.
###      if v = snd ?next then None
###      else Some (map (uninst_code_substNext ?p ?g ?next) vs))
###  (?p ?g)
### Partially applied constant "Generic_Interpretation.uninst_chooseNext" on left hand side of equation, in theorem:
### uninst_code.step_code ?u ?p ?g ==
### let next = uninst_code.chooseNext' ?u ?p ?g
### in (uninst_code.uses'_code ?u ?p ?g next, uninst_code.phis'_code ?p ?g next)
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => bool
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.cond_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{} => bool, in theorem:
### uninst_code.cond_code ?p ?g == uninst_redundant ?p ?g
### Code generator: dropping subsumed code equation
### gen_ssa_wf_notriv_substAll_efficient ?g ==
### let phiVals =
###       Mapping.keys
###        (CFG_SSA_base.phidefNodes (%g. Mapping.lookup (gen_ssa_wf_phis g))
###          ?g);
###     u = gen_ssa_wf_ssa_uses ?g; p = gen_ssa_wf_phis ?g;
###     tp = CFG_SSA_wf_base_code.trivial_phis gen_ssa_wf_phis ?g;
###     nou =
###       CFG_base.useNodes_of gen_ssa_wf_\<alpha>n
###        (usesOf o gen_ssa_wf_ssa_uses) ?g;
###     nop =
###       CFG_SSA_base.phiNodes_of (%g. Mapping.lookup (gen_ssa_wf_phis g)) ?g
### in while
###     (%((u, p), triv_phis, nodes_of_uses, nodes_of_phis).
###         ~ Set.is_empty triv_phis)
###     (%((u, p), triv_phis, nodes_of_uses, nodes_of_phis).
###         let next = Max triv_phis;
###             next' =
###               CFG_SSA_Transformed_notriv_base.substitution_code
###                (%g. Mapping.lookup p) ?g next;
###             (u', p') =
###               CFG_SSA_Transformed_notriv_base_code.step_codem (%_. u)
###                (%_. p) ?g next next' nodes_of_uses nodes_of_phis;
###             tp' =
###               CFG_SSA_Transformed_notriv_base_code.triv_phis' (%_. p') ?g
###                next triv_phis nodes_of_phis;
###             nou' =
###               gen_ssa_wf_notriv.nodes_of_uses' ?g next next' phiVals
###                nodes_of_uses;
###             nop' =
###               gen_ssa_wf_notriv.nodes_of_phis' ?g next next' nodes_of_phis
###         in ((u', p'), tp', nou', nop'))
###     ((u, p), tp, nou, nop)
### theory "Draft.Generic_Interpretation"
### 13.009s elapsed time, 16.272s cpu time, 4.568s GC time
Loading theory "Draft.Generic_InterpretationTemplates"
val templateLemmas =
   [("Generic_Interpretation.set_iterator_foldri_one",
     "set_iterator (foldri [?a]) {?a}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Generic_Interpretation.gen_var_wf_extend",
     "gen_var
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      ?v",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0))),
       template_var 0)),
    ("Generic_Interpretation.gen_ssa_uses_wf_extend",
     "gen_ssa_uses
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      ?u",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0))),
       template_var 2)),
    ("Generic_Interpretation.gen_phis_wf_extend",
     "gen_phis
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0))),
       template_var 1)),
    ("Generic_Interpretation.gen_Entry_wf_extend",
     "gen_Entry
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      gen_wf_Entry ?gen_cfg_wf",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 4))),
    ("Generic_Interpretation.gen_uses_wf_extend",
     "gen_uses
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      gen_wf_uses ?gen_cfg_wf",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 4))),
    ("Generic_Interpretation.gen_inEdges_wf_extend",
     "gen_inEdges
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      gen_wf_inEdges ?gen_cfg_wf",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 4))),
    ("Generic_Interpretation.gen_\<alpha>e_wf_extend",
     "gen_\<alpha>e
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      gen_wf_\<alpha>e ?gen_cfg_wf",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 4))),
    ("Generic_Interpretation.gen_\<alpha>n_wf_extend",
     "gen_\<alpha>n
       (gen_cfg_wf_extend ?gen_cfg_wf
         (| gen_ssa_defs = ?d, gen_ssa_uses = ?u, gen_phis = ?p,
            gen_var = ?v |)) =
      gen_wf_\<alpha>n ?gen_cfg_wf",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 4))),
    ("Generic_Interpretation.phiDefs_ign",
     "CFG_SSA_base.phiDefs (%_. Mapping.lookup (gen_phis ?g)) ?ga =
      CFG_SSA_base.phiDefs (%g. Mapping.lookup (gen_phis g)) ?g",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Generic_Interpretation.Union_of_code",
     "Union_of ?f (RBT_Set.Set ?r) = RBT.fold (%a _. (Un) (?f a)) ?r {}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 0),
         template_hole 0))),
    ("Generic_Interpretation.allDefs_ign",
     "CFG_SSA_base.allDefs (%_. gen_ssa_defs ?g)
       (%_. Mapping.lookup (gen_phis ?g)) ?ga ?n =
      CFG_SSA_base.allDefs gen_ssa_defs (%g. Mapping.lookup (gen_phis g)) ?g
       ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_app (template_hole 4, t_empty), t_empty),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_hole 3), t_empty),
           template_var 2),
         template_var 0))),
    ("Generic_Interpretation.predecessors_ign",
     "graph_path_base.predecessors (%_. gen_inEdges' ?g) ?ga ?n =
      graph_path_base.predecessors gen_inEdges' ?g ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_var 0))),
    ("Generic_Interpretation.successors_ign",
     "graph_path_base.successors (%_. gen_\<alpha>n ?g)
       (%_. gen_inEdges' ?g) ?ga ?n =
      graph_path_base.successors gen_\<alpha>n gen_inEdges' ?g ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_app (template_hole 7, t_empty), t_empty),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_hole 6), t_empty),
           template_var 2),
         template_var 0))),
    ("Generic_Interpretation.CFG_SSA_Transformed_codeI",
     "[| CFG_SSA_Transformed ?\<alpha>e ?\<alpha>n ?invar ?inEdges ?Entry
          ?oldDefs ?oldUses ?defs (%g. lookup_multimap (?uses g))
          (%g. Mapping.lookup (?phis g)) ?var;
         !!g. Mapping.keys (?uses g) <= set (?\<alpha>n g) |]
      ==> CFG_SSA_Transformed_code ?\<alpha>e ?\<alpha>n ?invar ?inEdges
           ?Entry ?oldDefs ?oldUses ?defs ?uses ?phis ?var",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 7, template_var 10),
                                template_var 9),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  t_empty),
                t_empty),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 0, template_var 10),
                               template_var 9),
                             template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Generic_Interpretation.fold_Cons_commute",
     "(!!a b.
          [| a : set (?x # ?xs); b : set (?x # ?xs) |]
          ==> (?f a \<circ>\<circ> ?f) b = (?f b \<circ>\<circ> ?f) a) ==>
      fold ?f (?x # ?xs) = (?f ?x \<circ>\<circ>\<circ> fold) ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Generic_Interpretation.gen_cfg_inhabited",
     "let g = (| gen_\<alpha>e = {}, gen_\<alpha>n = [undefined],
                 gen_inEdges = %_. [], gen_Entry = undefined,
                 gen_defs = %_. {}, gen_uses = %_. {}, ... = ?ext |)
      in CFG_wf (%_. gen_\<alpha>e g) (%_. gen_\<alpha>n g) (%_. True)
          (%_. gen_inEdges' g) (%_. gen_Entry g) (%_. gen_defs g)
          (%_. gen_uses g)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 18, template_hole 17),
                         template_app
                          (template_app
                            (template_hole 16, template_hole 15),
                           template_hole 14)),
                       t_empty),
                     template_hole 15),
                   t_empty),
                 t_empty),
               template_var 0)),
           t_empty)
         )),
    ("Generic_Interpretation.path2_ign",
     "graph_path_base.path2 (%_. gen_\<alpha>n ?g) (%_. True)
       (%_. gen_inEdges' ?g) ?g' ?n ?ns ?m =
      graph_path_base.path2 gen_\<alpha>n (%_. True) gen_inEdges' ?g ?n ?ns
       ?m",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, t_empty), t_empty),
                 t_empty),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_hole 7),
                   t_empty),
                 t_empty),
               template_var 4),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Generic_Interpretation.defAss'_ign",
     "CFG_base.defAss' (%_. gen_\<alpha>n ?g) (%_. True)
       (%_. gen_inEdges' ?g) (%_. gen_Entry ?g) (%_. gen_defs ?g) ?ga =
      CFG_base.defAss' gen_\<alpha>n (%_. True) gen_inEdges' gen_Entry
       gen_defs ?g",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 10, t_empty), t_empty),
               t_empty),
             t_empty),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_hole 9), t_empty),
               t_empty),
             template_hole 2),
           template_hole 1),
         template_var 1))),
    ("Generic_Interpretation.allUses_ign",
     "CFG_SSA_base.allUses (%_. gen_\<alpha>n ?g) (%_. gen_inEdges' ?g)
       (usesOf o (%_. gen_ssa_uses ?g)) (%_. Mapping.lookup (gen_phis ?g))
       ?ga ?m =
      CFG_SSA_base.allUses gen_\<alpha>n gen_inEdges'
       (usesOf o gen_ssa_uses) (%g. Mapping.lookup (gen_phis g)) ?g ?m",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 13, t_empty), t_empty),
               template_app
                (template_app (template_hole 6, template_hole 5), t_empty)),
             t_empty),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 12), t_empty),
               template_app
                (template_app (template_hole 0, template_hole 5),
                 template_hole 4)),
             t_empty),
           template_var 2),
         template_var 0))),
    ("Generic_Interpretation.defAss_ign",
     "CFG_SSA_base.defAss (%_. gen_\<alpha>n ?g) (%_. True)
       (%_. gen_inEdges' ?g) (%_. gen_Entry ?g) (%_. gen_ssa_defs ?g)
       (%_. Mapping.lookup (gen_phis ?g)) ?ga =
      CFG_SSA_base.defAss gen_\<alpha>n (%_. True) gen_inEdges' gen_Entry
       gen_ssa_defs (%g. Mapping.lookup (gen_phis g)) ?g",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 12, t_empty), t_empty),
                 t_empty),
               t_empty),
             t_empty),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_hole 11),
                   t_empty),
                 t_empty),
               template_hole 4),
             template_hole 3),
           t_empty),
         template_var 1))),
    ("Generic_Interpretation.CFG_SSA_Transformed_ign",
     "CFG_SSA_Transformed (%_. gen_wf_\<alpha>e ?gen_cfg_wf)
       (%_. gen_wf_\<alpha>n ?gen_cfg_wf) (%_. True)
       (%_. gen_wf_inEdges' ?gen_cfg_wf) (%_. gen_wf_Entry ?gen_cfg_wf)
       (%_. gen_wf_defs ?gen_cfg_wf) (%_. gen_wf_uses ?gen_cfg_wf)
       (%_. gen_wf_defs' ?gen_cfg_wf) (%_. gen_wf.uses' ?gen_cfg_wf)
       (%_. gen_wf.phis' ?gen_cfg_wf) (%_. gen_wf_var ?gen_cfg_wf)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 15, t_empty),
                             t_empty),
                           t_empty),
                         t_empty),
                       t_empty),
                     t_empty),
                   t_empty),
                 t_empty),
               t_empty),
             t_empty),
           t_empty)
         ))]:
   (string * thm * template) list
### theory "Draft.Generic_InterpretationTemplates"
### 2.248s elapsed time, 3.360s cpu time, 0.380s GC time
val it = (): unit
