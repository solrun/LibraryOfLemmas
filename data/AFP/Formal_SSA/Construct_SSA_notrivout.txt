Loading theory "Draft.Serial_Rel" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.Construct_SSA_notriv" via "Draft.Minimality")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.546s cpu time, 0.052s GC time
Loading theory "Draft.FormalSSA_Misc" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.Construct_SSA_notriv" via "Draft.SSA_CFG" via "Draft.Graph_path")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Serial_Rel"
### 0.181s elapsed time, 0.724s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.254s elapsed time, 1.017s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.ExtrEqs")
### theory "Draft.FormalSSA_Misc"
### 0.187s elapsed time, 0.711s cpu time, 0.124s GC time
Loading theory "Draft.Graph_path" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.Construct_SSA_notriv" via "Draft.SSA_CFG")
### theory "HOL-Library.Nat_Bijection"
### 0.366s elapsed time, 1.430s cpu time, 0.176s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.947s elapsed time, 3.561s cpu time, 0.886s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.047s elapsed time, 3.813s cpu time, 0.932s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.071s elapsed time, 6.315s cpu time, 1.241s GC time
Loading theory "Draft.Templates" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.096s elapsed time, 0.264s cpu time, 0.108s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Construct_SSA_notrivTemplates")
locale graph_pred_it_defs
  fixes
    pred_list_it ::
      "'G => 'V => (('V * 'W) list => bool)
                   => ('V * 'W => ('V * 'W) list => ('V * 'W) list)
                      => ('V * 'W) list => ('V * 'W) list"
locale graph_pred_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    pred_list_it ::
      "'G => 'V => (('V * 'W) list => bool)
                   => ('V * 'W => ('V * 'W) list => ('V * 'W) list)
                      => ('V * 'W) list => ('V * 'W) list"
  assumes "graph_pred_it \<alpha> invar pred_list_it"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.552s elapsed time, 1.140s cpu time, 0.075s GC time
locale Graph_path.StdGraphDefs
  fixes ops :: "('V, 'W, 'G, 'm) Graph_path.graph_ops_scheme"
locale Graph_path.StdGraph
  fixes ops :: "('a, 'b, 'c, 'd) Graph_path.graph_ops_scheme"
  assumes "Graph_path.StdGraph ops"
locale graph_path_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
locale graph_path
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
  assumes "graph_path \<alpha>e \<alpha>n invar inEdges'"
locale graph_Entry_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
locale graph_Entry
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
  assumes "graph_Entry \<alpha>e \<alpha>n invar inEdges' Entry"
Proofs for inductive predicate(s) "EntryPath"
  Proving monotonicity ...
### theory "Draft.Graph_path"
### 3.769s elapsed time, 9.079s cpu time, 2.339s GC time
Loading theory "Draft.SSA_CFG" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.Construct_SSA_notriv")
locale CFG_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
locale CFG_SSA
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes "CFG_SSA \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_wf_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
Proofs for inductive predicate(s) "liveVal"
  Proving monotonicity ...
locale CFG_SSA_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_Transformed_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
### theory "Draft.SSA_CFG"
### 1.463s elapsed time, 1.550s cpu time, 0.135s GC time
Loading theory "Draft.Minimality" (required by "Draft.Construct_SSA_notrivTemplates" via "Draft.Construct_SSA_notriv")
locale graph_path
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
  assumes "graph_path \<alpha>e \<alpha>n invar inEdges'"
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
### theory "Draft.Minimality"
### 0.618s elapsed time, 0.649s cpu time, 0.046s GC time
Loading theory "Draft.Construct_SSA_notriv" (required by "Draft.Construct_SSA_notrivTemplates")
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_SSA_Transformed_notriv
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var chooseNext_all"
locale CFG_SSA_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
Proofs for inductive predicate(s) "liveVal'"
  Proving monotonicity ...
locale CFG_SSA_step
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
    and g :: "'g"
  assumes
    "CFG_SSA_step \<alpha>e \<alpha>n invar inEdges' Entry oldDefs oldUses
      defs uses phis var chooseNext_all g"
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_SSA_Transformed_notriv
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var chooseNext_all"
### theory "Draft.Construct_SSA_notriv"
### 1.414s elapsed time, 1.472s cpu time, 0.089s GC time
Loading theory "Draft.Construct_SSA_notrivTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Construct_SSA_notrivTemplates"
### 2.146s elapsed time, 3.242s cpu time, 1.277s GC time
val it = (): unit
