Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Mapping_ExtsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Mapping_ExtsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Mapping_ExtsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.FormalSSA_Misc" (required by "Draft.Mapping_ExtsTemplates" via "Draft.Mapping_Exts")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.533s cpu time, 0.059s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Mapping_ExtsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.FormalSSA_Misc"
### 0.164s elapsed time, 0.661s cpu time, 0.059s GC time
Loading theory "Draft.Mapping_Exts" (required by "Draft.Mapping_ExtsTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.931s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Mapping_ExtsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.361s elapsed time, 1.417s cpu time, 0.182s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Mapping_ExtsTemplates" via "Draft.ExtrEqs")
### theory "Draft.Mapping_Exts"
### 0.285s elapsed time, 1.103s cpu time, 0.124s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.764s elapsed time, 2.482s cpu time, 0.345s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.975s elapsed time, 2.884s cpu time, 0.756s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.850s elapsed time, 4.472s cpu time, 0.936s GC time
Loading theory "Draft.Templates" (required by "Draft.Mapping_ExtsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.116s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Mapping_ExtsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.440s elapsed time, 0.447s cpu time, 0.000s GC time
Loading theory "Draft.Mapping_ExtsTemplates"
val templateLemmas =
   [("Mapping_Exts.Mapping_Mapping_lookup",
     "Mapping (Mapping.lookup ?m) = ?m",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Mapping_Exts.Mapping_eq_lookup",
     "(?m = ?m') = (Mapping.lookup ?m = Mapping.lookup ?m')",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Mapping_Exts.Mapping_lookup_map_values",
     "Mapping.lookup (map_values ?f ?m) ?k =
      Option.bind (Mapping.lookup ?m ?k) (?f ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Mapping_Exts.mapping_eq_iff",
     "(?m1.0 = ?m2.0) =
      (ALL k. Mapping.lookup ?m1.0 k = Mapping.lookup ?m2.0 k)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Mapping_Exts.Mapping_lookup_map",
     "Mapping.lookup (Mapping.map ?f ?g ?m) ?a =
      map_option ?g (Mapping.lookup ?m (?f ?a))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 3, template_var 0))))),
    ("Mapping_Exts.lookup_delete",
     "Mapping.lookup (Mapping.delete ?k ?m) ?k' =
      (if ?k = ?k' then None else Mapping.lookup ?m ?k')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Mapping_Exts.Mapping_lookup_mapping_add",
     "Mapping.lookup (mapping_add ?m1.0 ?m2.0) ?k =
      (case Mapping.lookup ?m2.0 ?k of None => Mapping.lookup ?m1.0 ?k
       | Some x => Some x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Mapping_Exts.lookup_update_cases",
     "Mapping.lookup (Mapping.update ?k ?v ?m) ?k' =
      (if ?k = ?k' then Some ?v else Mapping.lookup ?m ?k')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Mapping_Exts.map_of_map_if_conv",
     "map_of (map (%k. (k, ?f k)) ?xs) ?x =
      (if ?x : set ?xs then Some (?f ?x) else None)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0))),
         template_hole 0))),
    ("Mapping_Exts.lookup_fold_update",
     "Mapping.lookup (fold (%n. Mapping.update n (?g n)) ?xs ?m) ?x =
      (if ?x : set ?xs then Some (?g ?x) else Mapping.lookup ?m ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_hole 0,
             template_app (template_var 3, template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_var 0)))),
    ("Mapping_Exts.keys_map_values",
     "Mapping.keys (map_values ?f ?m) =
      Mapping.keys ?m -
      {k: Mapping.keys ?m. ?f k (the (Mapping.lookup ?m k)) = None}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_app (template_hole 6, t_empty)))),
    ("Mapping_Exts.lookup_map_keys",
     "Mapping.lookup (map_keys ?f ?m) ?x =
      (if ?f -` {?x} ~= {} then Mapping.lookup ?m (THE k. ?f -` {?x} = {k})
       else None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 2),
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_hole 5))),
                     template_hole 4))),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, t_empty))),
             template_hole 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Mapping_ExtsTemplates"
### 0.335s elapsed time, 0.483s cpu time, 0.067s GC time
val it = (): unit
