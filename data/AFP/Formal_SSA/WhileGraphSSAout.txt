Loading theory "Draft.Serial_Rel" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code" via "Draft.Construct_SSA_notriv" via "Draft.Minimality")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WhileGraphSSATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WhileGraphSSATemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WhileGraphSSATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.636s cpu time, 0.051s GC time
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Loading theory "Draft.FormalSSA_Misc" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code" via "Draft.SSA_CFG" via "Draft.Graph_path")
### theory "Draft.Serial_Rel"
### 0.188s elapsed time, 0.753s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WhileGraphSSATemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.317s elapsed time, 1.241s cpu time, 0.163s GC time
Loading theory "Draft.While_Combinator_Exts" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code")
### theory "Draft.FormalSSA_Misc"
### 0.177s elapsed time, 0.680s cpu time, 0.112s GC time
Loading theory "Draft.Mapping_Exts" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code")
### theory "Draft.While_Combinator_Exts"
### 0.057s elapsed time, 0.220s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WhileGraphSSATemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.449s elapsed time, 1.765s cpu time, 0.163s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WhileGraphSSATemplates" via "Draft.ExtrEqs")
### theory "Draft.Mapping_Exts"
### 0.242s elapsed time, 0.953s cpu time, 0.091s GC time
Loading theory "Draft.RBT_Mapping_Exts" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.RBT_Mapping_Exts"
### 0.387s elapsed time, 1.509s cpu time, 0.140s GC time
Loading theory "Draft.Disjoin_Transform" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcmd"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 25 of "$AFP/Formal_SSA/Disjoin_Transform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" maxVnameLen)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max)
###       ("_cargs" ("_applC" ("_position" length) ("_position" V))
###         ("_applC" ("_position" maxVnameLen_aux) ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" maxVnameLen)
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max)
###       ("_cargs" ("_applC" ("_position" length) ("_position" V))
###         ("_applC" ("_position" maxVnameLen_aux) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.BigO"
### 0.922s elapsed time, 3.493s cpu time, 0.788s GC time
Loading theory "Draft.Graph_path" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code" via "Draft.SSA_CFG")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.030s elapsed time, 3.890s cpu time, 0.889s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "newname"
  Proving monotonicity ...
### Ambiguous input (line 50 of "$AFP/Formal_SSA/Disjoin_Transform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" transform_aux)
###       ("_cargs" ("_position" V')
###         ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_position" V)
###         ("_applC" ("_position" rhs)
###           ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))))
###       ("\<^const>Com.cmd.Seq"
###         ("\<^const>Com.cmd.LAss" ("_position" V') ("_position" e))
###         ("\<^const>Com.cmd.LAss" ("_position" V)
###           ("_applC" ("_position" Var) ("_position" V'))))
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" transform_aux)
###       ("_cargs" ("_position" V')
###         ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_position" V)
###         ("_Update" ("_position" rhs)
###           ("_updbind" ("_position" V) ("_position" e))))
###       ("\<^const>Com.cmd.Seq"
###         ("\<^const>Com.cmd.LAss" ("_position" V') ("_position" e))
###         ("\<^const>Com.cmd.LAss" ("_position" V)
###           ("_applC" ("_position" Var) ("_position" V'))))
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Disjoin_Transform"
### 0.787s elapsed time, 2.777s cpu time, 0.832s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.021s elapsed time, 6.754s cpu time, 1.270s GC time
Loading theory "Draft.Templates" (required by "Draft.WhileGraphSSATemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WhileGraphSSATemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.501s elapsed time, 1.027s cpu time, 0.059s GC time
locale graph_pred_it_defs
  fixes
    pred_list_it ::
      "'G => 'V => (('V * 'W) list => bool)
                   => ('V * 'W => ('V * 'W) list => ('V * 'W) list)
                      => ('V * 'W) list => ('V * 'W) list"
locale graph_pred_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    pred_list_it ::
      "'G => 'V => (('V * 'W) list => bool)
                   => ('V * 'W => ('V * 'W) list => ('V * 'W) list)
                      => ('V * 'W) list => ('V * 'W) list"
  assumes "graph_pred_it \<alpha> invar pred_list_it"
locale Graph_path.StdGraphDefs
  fixes ops :: "('V, 'W, 'G, 'm) Graph_path.graph_ops_scheme"
locale Graph_path.StdGraph
  fixes ops :: "('a, 'b, 'c, 'd) Graph_path.graph_ops_scheme"
  assumes "Graph_path.StdGraph ops"
locale graph_path_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
locale graph_path
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
  assumes "graph_path \<alpha>e \<alpha>n invar inEdges'"
locale graph_Entry_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
locale graph_Entry
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
  assumes "graph_Entry \<alpha>e \<alpha>n invar inEdges' Entry"
Proofs for inductive predicate(s) "EntryPath"
  Proving monotonicity ...
### theory "Draft.Graph_path"
### 3.312s elapsed time, 6.237s cpu time, 1.485s GC time
Loading theory "Draft.SSA_CFG" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code" via "Draft.SSA_CFG_code")
locale CFG_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
locale CFG_SSA
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes "CFG_SSA \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_wf_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
Proofs for inductive predicate(s) "liveVal"
  Proving monotonicity ...
locale CFG_SSA_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_Transformed_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
### theory "Draft.SSA_CFG"
### 1.819s elapsed time, 2.626s cpu time, 1.134s GC time
Loading theory "Draft.Construct_SSA" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code")
Loading theory "Draft.Minimality" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code" via "Draft.Construct_SSA_notriv")
Loading theory "Draft.SSA_CFG_code" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_code")
locale graph_path
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
  assumes "graph_path \<alpha>e \<alpha>n invar inEdges'"
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
locale CFG_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
locale CFG
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
instantiation
  Def :: linorder
  less_eq_Def == less_eq :: Def => Def => bool
  less_Def == less :: Def => Def => bool
locale CFG_SSA_Transformed
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var"
### theory "Draft.Minimality"
### 0.763s elapsed time, 2.295s cpu time, 0.145s GC time
Loading theory "Draft.Construct_SSA_notriv" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation" via "Draft.Construct_SSA_notriv_code")
locale CFG_SSA
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes "CFG_SSA \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_Construct
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_Construct \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_ext_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
Found termination order: "(%p. length (fst (snd (snd p)))) <*mlex*> {}"
locale CFG_SSA_ext
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_ext \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
locale CFG_SSA_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
locale CFG_SSA_Transformed_notriv
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var chooseNext_all"
locale CFG_SSA_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
  assumes
    "CFG_SSA_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
Proofs for inductive predicate(s) "liveVal'"
locale CFG_SSA_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
  assumes
    "CFG_SSA_code \<alpha>e \<alpha>n invar inEdges' Entry defs uses phis"
  Proving monotonicity ...
locale CFG_SSA_wf_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
locale CFG_SSA_step
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
    and g :: "'g"
  assumes
    "CFG_SSA_step \<alpha>e \<alpha>n invar inEdges' Entry oldDefs oldUses
      defs uses phis var chooseNext_all g"
locale CFG_SSA_wf_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
  assumes
    "CFG_SSA_wf_code \<alpha>e \<alpha>n invar inEdges' Entry defs uses
      phis"
locale CFG_Construct
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_Construct \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_SSA_Transformed_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
  assumes
    "CFG_SSA_Transformed_code \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var"
### theory "Draft.SSA_CFG_code"
### 2.103s elapsed time, 6.300s cpu time, 0.487s GC time
locale CFG_Construct_wf
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes
    "CFG_Construct_wf \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
### theory "Draft.Construct_SSA"
### 2.271s elapsed time, 6.650s cpu time, 0.535s GC time
Loading theory "Draft.Construct_SSA_code" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation")
locale CFG_SSA_Transformed_notriv
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv \<alpha>e \<alpha>n invar inEdges' Entry
      oldDefs oldUses defs uses phis var chooseNext_all"
### theory "Draft.Construct_SSA_notriv"
### 1.735s elapsed time, 4.805s cpu time, 0.391s GC time
Loading theory "Draft.Construct_SSA_notriv_code" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation")
locale CFG_Construct_linorder
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes
    "CFG_Construct_linorder \<alpha>e \<alpha>n invar inEdges' Entry defs
      uses"
locale CFG_SSA_Transformed_notriv_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
locale CFG_SSA_Transformed_notriv_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
### theory "Draft.Construct_SSA_code"
### 1.493s elapsed time, 3.082s cpu time, 0.265s GC time
Loading theory "Draft.SSA_Transfer_Rules" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA" via "Draft.Generic_Interpretation")
locale graph_path_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
locale CFG_SSA_Transformed_notriv_linorder
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder \<alpha>e \<alpha>n invar inEdges'
      Entry oldDefs oldUses defs uses phis var chooseNext_all"
locale graph_Entry_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
locale graph_Entry
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
  assumes "graph_Entry \<alpha>e \<alpha>n invar inEdges' Entry"
locale CFG_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
locale CFG_SSA_Transformed_notriv_linorder
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val => 'val list option) => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder \<alpha>e \<alpha>n invar inEdges'
      Entry oldDefs oldUses defs uses phis var chooseNext_all"
locale CFG_Construct
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'var set"
    and "uses" :: "'g => 'node => 'var set"
  assumes "CFG_Construct \<alpha>e \<alpha>n invar inEdges' Entry defs uses"
locale CFG_SSA_base
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => 'node => 'val set"
    and phis :: "'g => 'node * 'val => 'val list option"
locale CFG_SSA_Transformed_notriv_linorder_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder_code \<alpha>e \<alpha>n invar
      inEdges' Entry oldDefs oldUses defs uses phis var chooseNext_all"
locale CFG_SSA_base_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
### theory "Draft.SSA_Transfer_Rules"
### 1.154s elapsed time, 2.358s cpu time, 0.161s GC time
locale CFG_SSA_step_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
    and g :: "'g"
  assumes
    "CFG_SSA_step_code \<alpha>e \<alpha>n invar inEdges' Entry oldDefs
      oldUses defs uses phis var chooseNext_all g"
locale CFG_SSA_Transformed_notriv_linorder_code
  fixes \<alpha>e :: "'g => ('node * 'edgeD * 'node) set"
    and \<alpha>n :: "'g => 'node list"
    and invar :: "'g => bool"
    and inEdges' :: "'g => 'node => ('node * 'edgeD) list"
    and Entry :: "'g => 'node"
    and oldDefs :: "'g => 'node => 'var set"
    and oldUses :: "'g => 'node => 'var set"
    and defs :: "'g => 'node => 'val set"
    and "uses" :: "'g => ('node, 'val set) mapping"
    and phis :: "'g => ('node * 'val, 'val list) mapping"
    and var :: "'g => 'val => 'var"
    and
    chooseNext_all ::
      "('node => 'val set)
       => ('node * 'val, 'val list) mapping => 'g => 'node * 'val"
  assumes
    "CFG_SSA_Transformed_notriv_linorder_code \<alpha>e \<alpha>n invar
      inEdges' Entry oldDefs oldUses defs uses phis var chooseNext_all"
### theory "Draft.Construct_SSA_notriv_code"
### 4.423s elapsed time, 6.987s cpu time, 0.444s GC time
Loading theory "Draft.Generic_Interpretation" (required by "Draft.WhileGraphSSATemplates" via "Draft.WhileGraphSSA")
### Generation of a parametrized correspondence relation failed.
### Reason:
###   No relator for the type "Generic_Interpretation.gen_cfg.gen_cfg_ext"
###     found.
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set (gen_wf_uses ?g n)))
###  (gen_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set
###          (CFG_Construct.uses' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs
###            gen_wf_uses ?g n)))
###  (gen_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_wf_defs'" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.allDefs ?g ?n ==
### gen_wf_defs' ?g ?n Un gen_wf.braun_ssa.phiDefs ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.phiUses ?g ?n ==
### UN n':set (gen_wf_successors ?g ?n).
###    UN v':gen_wf.braun_ssa.phiDefs ?g n'.
###       snd `
###       Set.filter (%(n'', v). n'' = ?n)
###        (set (zip (gen_wf_predecessors ?g n')
###               (the (CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges'
###                      gen_wf_defs gen_wf_uses ?g (n', v')))))
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.allUses ?g ?n ==
### CFG_Construct.uses' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs gen_wf_uses
###  ?g ?n Un
### gen_wf.braun_ssa.phiUses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.allVars ?g ==
### UN n:set (gen_wf_\<alpha>n ?g).
###    gen_wf.braun_ssa.allDefs ?g n Un gen_wf.braun_ssa.allUses ?g n
### Partially applied constant "Construct_SSA.CFG_Construct.phis'" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.phidefNodes ?g ==
### fold (%(n, v). Mapping.update v n)
###  (sorted_list_of_set
###    (dom (CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs
###           gen_wf_uses ?g)))
###  Mapping.empty
### Partially applied constant "Construct_SSA.CFG_Construct.phis'" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.phiNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (case CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges'
###               gen_wf_defs gen_wf_uses ?g n of
###         None => [] | Some x => id x))
###  (sorted_list_of_set
###    (dom (CFG_Construct.phis' gen_wf_\<alpha>n gen_wf_inEdges' gen_wf_defs
###           gen_wf_uses ?g)))
###  Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.lookupDef ?g ?n ?v ==
### if ?n ~: set (gen_wf_\<alpha>n ?g) then undefined
### else if ?v : gen_wf_defs ?g ?n then (?v, ?n, SimpleDef)
###      else case gen_wf_predecessors ?g ?n of [] => (?v, ?n, PhiDef)
###           | [m] => gen_wf.lookupDef ?g m ?v
###           | m # aa # lista => (?v, ?n, PhiDef)
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.uses' ?g ?n == gen_wf.lookupDef ?g ?n ` gen_wf_uses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.phis' ==
### %g (n, v, m, def).
###    if m = n & n : gen_wf.phiDefNodes g v & v : gen_wf_vars g & def = PhiDef
###    then Some (map (%m. gen_wf.lookupDef g m v) (gen_wf_predecessors g n))
###    else None
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.defNode ?g ?v ==
### hd (filter (%n. ?v : gen_wf.braun_ssa.allDefs ?g n) (gen_wf_\<alpha>n ?g))
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.isTrivialPhi ?g ?v ?v' ==
### ?v' ~= ?v &
### (case gen_wf.braun_ssa.phi ?g ?v of None => False
###  | Some vs => set vs = {?v, ?v'} | set vs = {?v'})
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.trivial ?g ?v ==
### EX v':gen_wf.braun_ssa.allVars ?g. gen_wf.braun_ssa.isTrivialPhi ?g ?v v'
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.braun_ssa.redundant ?g ==
### EX v:gen_wf.braun_ssa.allVars ?g. gen_wf.braun_ssa.trivial ?g v
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.lookupDef ?g ?n ?v ==
### if ?n ~: set (gen_wf_\<alpha>n ?g) then undefined
### else if ?v : gen_wf_defs ?g ?n then (?v, ?n, SimpleDef)
###      else case gen_wf_predecessors ?g ?n of [] => (?v, ?n, PhiDef)
###           | [m] => gen_wf.lookupDef ?g m ?v
###           | m # aa # lista => (?v, ?n, PhiDef)
### Abstraction on left hand side of equation, in theorem:
### gen_wf.phiDefNodes_aux ?g ?v ?unvisited ?n ==
### if ?n ~: set ?unvisited | ?v : gen_wf_defs ?g ?n then {}
### else fold (Un)
###       (map (gen_wf.phiDefNodes_aux ?g ?v (removeAll ?n ?unvisited))
###         (gen_wf_predecessors ?g ?n))
###       (if length (gen_wf_predecessors ?g ?n) ~= 1 then {?n} else {})
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.phiDefNodes ?g ?v ==
### fold (Un)
###  (concat
###    (map (%n. if ?v : gen_wf_uses ?g n
###              then [gen_wf.phiDefNodes_aux ?g ?v (gen_wf_\<alpha>n ?g) n]
###              else [])
###      (gen_wf_\<alpha>n ?g)))
###  {}
### Code generator: dropping subsumed code equation
### gen_wf_defs' ?g ?n == (%v. (v, ?n, SimpleDef)) ` gen_wf_defs ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.uses' ?g ?n == gen_wf.lookupDef ?g ?n ` gen_wf_uses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_wf.phis' ==
### %g (n, v, m, def).
###    if m = n & n : gen_wf.phiDefNodes g v & v : gen_wf_vars g & def = PhiDef
###    then Some (map (%m. gen_wf.lookupDef g m v) (gen_wf_predecessors g n))
###    else None
### Code generator: dropping subsumed code equation
### gen_wf_predecessors ?g ?n == map getFrom (gen_wf.inEdges ?g ?n)
### Not an equation, in theorem:
### gen_wf.readVariableRecursive_readArgs_dom (Inl (?g, ?v, ?n, ?phis)) ==>
### gen_wf_readVariableRecursive ?g ?v ?n ?phis ==
### if ?v : gen_wf_defs ?g ?n then ((?v, ?n, SimpleDef), ?phis)
### else case gen_wf_predecessors ?g ?n of
###      [] => ((?v, ?n, PhiDef), Mapping.update (?n, ?v) [] ?phis)
###      | [m] => gen_wf_readVariableRecursive ?g ?v m ?phis
###      | m # ab # lista =>
###          case Mapping.lookup ?phis (?n, ?v) of
###          None =>
###            let phis = Mapping.update (?n, ?v) [] ?phis;
###                (phis, args) = gen_wf_readArgs ?g ?v ?n phis (m # ab # lista)
###            in ((?v, ?n, PhiDef), Mapping.update (?n, ?v) args phis)
###          | Some x => ((?v, ?n, PhiDef), ?phis)
### Generation of a parametrized correspondence relation failed.
### Reason:
###   No relator for the type "Generic_Interpretation.gen_ssa_cfg.gen_ssa_cfg_ext"
###     found.
### Abstraction on left hand side of equation, in theorem:
### uninst_allDefs ?p ?g ?n ==
### gen_ssa_wf_ssa_defs ?g ?n Un uninst_phiDefs ?p ?g ?n
### Abstraction on left hand side of equation, in theorem:
### uninst_phiUses ?p ?g ?n ==
### UN n':set (uninst_successors ?g ?n).
###    UN v':uninst_phiDefs ?p ?g n'.
###       snd `
###       Set.filter (%(n'', v). n'' = ?n)
###        (set (zip (uninst_predecessors ?g n')
###               (the (Mapping.lookup (?p ?g) (n', v')))))
### Abstraction on left hand side of equation, in theorem:
### uninst_allUses ?u ?p ?g ?n == (usesOf o ?u) ?g ?n Un uninst_phiUses ?p ?g ?n
### Abstraction on left hand side of equation, in theorem:
### uninst_allVars ?u ?p ?g ==
### UN n:set (gen_ssa_wf_\<alpha>n ?g).
###    uninst_allDefs ?p ?g n Un uninst_allUses ?u ?p ?g n
### Abstraction on left hand side of equation, in theorem:
### uninst_phiUses ?p ?g ?n ==
### Union_of
###  (%n'. Union_of
###         (%v'. snd `
###               Set.filter (%(n'', v). n'' = ?n)
###                (set (zip (uninst_predecessors ?g n')
###                       (the (Mapping.lookup (?p ?g) (n', v'))))))
###         (uninst_phiDefs ?p ?g n'))
###  (set (uninst_successors ?g ?n))
### Abstraction on left hand side of equation, in theorem:
### uninst_allUses ?u ?p ?g ?n == (usesOf o ?u) ?g ?n Un uninst_phiUses ?p ?g ?n
### Abstraction on left hand side of equation, in theorem:
### uninst_allVars ?u ?p ?g ==
### Union_of (%n. uninst_allDefs ?p ?g n Un uninst_allUses ?u ?p ?g n)
###  (set (gen_ssa_wf_\<alpha>n ?g))
### Abstraction on left hand side of equation, in theorem:
### uninst_defNode ?p ?g ?v ==
### hd (filter (%n. ?v : uninst_allDefs ?p ?g n) (gen_ssa_wf_\<alpha>n ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst.trivial ?u ?p ?g ?v ==
### EX v':uninst_allVars ?u ?p ?g. uninst_isTrivialPhi ?p ?g ?v v'
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst.redundant ?u ?p ?g ==
### EX v:uninst_allVars ?u ?p ?g. uninst.trivial ?u ?p ?g v
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.old.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set (gen_ssa_wf_uses ?g n)))
###  (gen_ssa_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.uses'_all ?g == fst (gen_ssa_wf_notriv_substAll ?g)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.phis'_all ?g == snd (gen_ssa_wf_notriv_substAll ?g)
### Abstraction on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.substitution_code ?g ?next ==
### the (the_trivial (snd ?next)
###       (the (Mapping.lookup (gen_ssa_wf_phis ?g) ?next)))
### Abstraction on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.substNext_code ?g ?next ==
### %v. if v = snd ?next then gen_ssa_wf_notriv.substitution_code ?g ?next
###     else v
### Partially applied constant "Fun.comp" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.uses'_code ?g ?next ?n ==
### gen_ssa_wf_notriv.substNext_code ?g ?next `
### (usesOf o gen_ssa_wf_ssa_uses) ?g ?n
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.cond_code ?g ==
### CFG_SSA_wf_base_code.redundant_code gen_ssa_wf_phis ?g
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_uses" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.uses'_codem ?g ?next ?next' ?nodes_of_uses ==
### fold
###  (%n. Mapping.update n
###        (insert ?next'
###          (Set.remove (snd ?next)
###            (the (Mapping.lookup (gen_ssa_wf_ssa_uses ?g) n)))))
###  (sorted_list_of_set
###    (case Mapping.lookup ?nodes_of_uses (snd ?next) of None => {}
###     | Some x => id x))
###  (gen_ssa_wf_ssa_uses ?g)
### Type
### (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
### => ?'a::linorder * ?'d::linorder
###    => ?'d::linorder
###       => ?'d::linorder set
###          => (?'d::linorder, ?'a::linorder set) mapping
###             => (?'d::linorder, ?'a::linorder set) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.nodes_of_uses'"
### is too specific compared to declared type
### ?'g::{}
### => ?'node::{} * ?'val::{}
###    => ?'val::{}
###       => ?'val::{} set
###          => (?'val::{}, ?'node::{} set) mapping
###             => (?'val::{}, ?'node::{} set) mapping, in theorem:
### gen_ssa_wf_notriv.nodes_of_uses' ?g ?next ?next' ?phiVals ?nodes_of_uses ==
### let users =
###       case Mapping.lookup ?nodes_of_uses (snd ?next) of None => {}
###       | Some x => id x
### in if ?next' : ?phiVals
###    then Mapping.map_default ?next' {} (%ns. ns Un users)
###          (Mapping.delete (snd ?next) ?nodes_of_uses)
###    else Mapping.delete (snd ?next) ?nodes_of_uses
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.phis'_code ?g ?next ==
### map_values
###  (%(n, v) vs.
###      if v = snd ?next then None
###      else Some (map (gen_ssa_wf_notriv.substNext_code ?g ?next) vs))
###  (gen_ssa_wf_phis ?g)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.phis'_codem ?g ?next ?next' ?nodes_of_phis ==
### fold
###  (%n. Mapping.update n
###        (map (id(snd ?next := ?next'))
###          (the (Mapping.lookup (gen_ssa_wf_phis ?g) n))))
###  (sorted_list_of_set
###    (case Mapping.lookup ?nodes_of_phis (snd ?next) of None => {}
###     | Some x => Set.remove ?next x))
###  (Mapping.delete ?next (gen_ssa_wf_phis ?g))
### Type
### (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
### => ?'a::linorder * ?'d::linorder
###    => ?'d::linorder
###       => (?'d::linorder, (?'a::linorder * ?'d::linorder) set) mapping
###          => (?'d::linorder, (?'a::linorder * ?'d::linorder) set) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.nodes_of_phis'"
### is too specific compared to declared type
### ?'g::{}
### => ?'node::{} * ?'val::{}
###    => ?'val::{}
###       => (?'val::{}, (?'node::{} * ?'val::{}) set) mapping
###          => (?'val::{}, (?'node::{} * ?'val::{}) set) mapping, in theorem:
### gen_ssa_wf_notriv.nodes_of_phis' ?g ?next ?next' ?nodes_of_phis ==
### let old_phis =
###       Set.remove ?next
###        (case Mapping.lookup ?nodes_of_phis (snd ?next) of None => {}
###         | Some x => id x)
### in Let (Mapping.delete (snd ?next) ?nodes_of_phis)
###     (Mapping.map_default ?next' {} (%ns. Set.remove ?next ns Un old_phis))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_phis" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.triv_phis' ?g ?next ?triv_phis ?nodes_of_phis ==
### Set.remove ?next ?triv_phis Un
### Set.filter
###  (%n. CFG_SSA_wf_base_code.trivial_code (snd n)
###        (the (Mapping.lookup (gen_ssa_wf_phis ?g) n)))
###  (case Mapping.lookup ?nodes_of_phis (snd ?next) of None => {}
###   | Some x => Set.remove ?next x)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_uses" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.step_code ?g ==
### let next = gen_ssa_wf_notriv.chooseNext' ?g
### in (gen_ssa_wf_notriv.uses'_code ?g next,
###     gen_ssa_wf_notriv.phis'_code ?g next)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_uses" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.step_codem ?g ?next ?next' ?nodes_of_uses
###  ?nodes_of_phis ==
### (gen_ssa_wf_notriv.uses'_codem ?g ?next ?next' ?nodes_of_uses,
###  gen_ssa_wf_notriv.phis'_codem ?g ?next ?next' ?nodes_of_phis)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.useNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (sorted_list_of_set (gen_ssa_wf_notriv.uses'_all ?g n)))
###  (gen_ssa_wf_\<alpha>n ?g) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_ssa_defs" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.allDefs ?g ?n ==
### gen_ssa_wf_ssa_defs ?g ?n Un gen_ssa_wf_notriv.notriv.phiDefs ?g ?n
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.phiUses ?g ?n ==
### UN n':set (graph_path_base.successors gen_ssa_wf_\<alpha>n
###             gen_ssa_wf_inEdges' ?g ?n).
###    UN v':gen_ssa_wf_notriv.notriv.phiDefs ?g n'.
###       snd `
###       Set.filter (%(n'', v). n'' = ?n)
###        (set (zip (graph_path_base.predecessors gen_ssa_wf_inEdges' ?g n')
###               (the (gen_ssa_wf_notriv.phis'_all ?g (n', v')))))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.allUses ?g ?n ==
### gen_ssa_wf_notriv.uses'_all ?g ?n Un gen_ssa_wf_notriv.notriv.phiUses ?g ?n
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.allVars ?g ==
### UN n:set (gen_ssa_wf_\<alpha>n ?g).
###    gen_ssa_wf_notriv.notriv.allDefs ?g n Un
###    gen_ssa_wf_notriv.notriv.allUses ?g n
### Partially applied constant "Construct_SSA_notriv.CFG_SSA_Transformed_notriv_base.phis'_all" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.phidefNodes ?g ==
### fold (%(n, v). Mapping.update v n)
###  (sorted_list_of_set (dom (gen_ssa_wf_notriv.phis'_all ?g))) Mapping.empty
### Partially applied constant "Construct_SSA_notriv.CFG_SSA_Transformed_notriv_base.phis'_all" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.phiNodes_of ?g ==
### fold
###  (%n. fold (%v. Mapping.map_default v {} (insert n))
###        (case gen_ssa_wf_notriv.phis'_all ?g n of None => []
###         | Some x => id x))
###  (sorted_list_of_set (dom (gen_ssa_wf_notriv.phis'_all ?g))) Mapping.empty
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.defNode ?g ?v ==
### hd (filter (%n. ?v : gen_ssa_wf_notriv.notriv.allDefs ?g n)
###      (gen_ssa_wf_\<alpha>n ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.isTrivialPhi ?g ?v ?v' ==
### ?v' ~= ?v &
### (case gen_ssa_wf_notriv.notriv.phi ?g ?v of None => False
###  | Some vs => set vs = {?v, ?v'} | set vs = {?v'})
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.trivial ?g ?v ==
### EX v':gen_ssa_wf_notriv.notriv.allVars ?g.
###    gen_ssa_wf_notriv.notriv.isTrivialPhi ?g ?v v'
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### gen_ssa_wf_notriv.notriv.redundant ?g ==
### EX v:gen_ssa_wf_notriv.notriv.allVars ?g.
###    gen_ssa_wf_notriv.notriv.trivial ?g v
### Code generator: dropping subsumed code equation
### gen_ssa_wf_notriv_substAll ?g ==
### while (gen_ssa_wf_notriv.cond ?g) (gen_ssa_wf_notriv.step ?g)
###  ((usesOf o gen_ssa_wf_ssa_uses) ?g, Mapping.lookup (gen_ssa_wf_phis ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst_code.substAll ?u ?p ?g ==
### while (uninst_code.cond ?u ?p ?g) (uninst_code.step ?u ?p ?g)
###  ((usesOf o ?u) ?g, Mapping.lookup (?p ?g))
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst_code.uses'_all ?u ?p ?g == fst (uninst_code.substAll ?u ?p ?g)
### Partially applied constant "Generic_Interpretation.gen_ssa_wf_\<alpha>n" on left hand side of equation, in theorem:
### uninst_code.phis'_all ?u ?p ?g == snd (uninst_code.substAll ?u ?p ?g)
### Abstraction on left hand side of equation, in theorem:
### uninst_code_substNext ?p ?g ?next ==
### %v. if v = snd ?next then uninst_code_substitution ?p ?g ?next else v
### Partially applied constant "Fun.comp" on left hand side of equation, in theorem:
### uninst_code.uses'_code ?u ?p ?g ?next ?n ==
### uninst_code_substNext ?p ?g ?next ` (usesOf o ?u) ?g ?n
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => bool
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.cond_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{} => bool, in theorem:
### uninst_code.cond_code ?p ?g == uninst_redundant ?p ?g
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => ?'a::linorder * ?'d::linorder
###       => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.phis'_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{}
###    => ?'node::{} * ?'val::{}
###       => (?'node::{} * ?'val::{}, ?'val::{} list) mapping, in theorem:
### uninst_code.phis'_code ?p ?g ?next ==
### map_values
###  (%(n, v) vs.
###      if v = snd ?next then None
###      else Some (map (uninst_code_substNext ?p ?g ?next) vs))
###  (?p ?g)
### Partially applied constant "Generic_Interpretation.uninst_chooseNext" on left hand side of equation, in theorem:
### uninst_code.step_code ?u ?p ?g ==
### let next = uninst_code.chooseNext' ?u ?p ?g
### in (uninst_code.uses'_code ?u ?p ?g next, uninst_code.phis'_code ?p ?g next)
### Code generator: dropping subsumed code equation
### uninst_redundant ?p ?g == uninst_trivial_phis ?p ?g ~= {}
### Partially applied constant "Fun.comp" on left hand side of equation, in theorem:
### uninst_code.uses'_code ?u ?p ==
### %g next n. uninst_code_substNext ?p g next ` (usesOf o ?u) g n
### Code generator: dropping subsumed code equation
### uninst_code_substitution ?p ?g ?next ==
### the (the_trivial (snd ?next) (the (Mapping.lookup (?p ?g) ?next)))
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => ?'a::linorder * ?'d::linorder
###       => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.phis'_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{}
###    => ?'node::{} * ?'val::{}
###       => (?'node::{} * ?'val::{}, ?'val::{} list) mapping, in theorem:
### uninst_code.phis'_code ?p ?g ?next ==
### map_values
###  (%(n, v) vs.
###      if v = snd ?next then None
###      else Some (map (uninst_code_substNext ?p ?g ?next) vs))
###  (?p ?g)
### Partially applied constant "Generic_Interpretation.uninst_chooseNext" on left hand side of equation, in theorem:
### uninst_code.step_code ?u ?p ?g ==
### let next = uninst_code.chooseNext' ?u ?p ?g
### in (uninst_code.uses'_code ?u ?p ?g next, uninst_code.phis'_code ?p ?g next)
### Type
### ((?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###  => (?'a::linorder * ?'d::linorder, ?'d::linorder list) mapping)
### => (?'a::linorder, ?'b::linorder, ?'c::type, ?'d::linorder) gen_ssa_cfg_wf
###    => bool
### of constant "Construct_SSA_notriv_code.CFG_SSA_Transformed_notriv_base_code.cond_code"
### is too specific compared to declared type
### (?'g::{} => (?'node::{} * ?'val::{}, ?'val::{} list) mapping)
### => ?'g::{} => bool, in theorem:
### uninst_code.cond_code ?p ?g == uninst_redundant ?p ?g
### Code generator: dropping subsumed code equation
### gen_ssa_wf_notriv_substAll_efficient ?g ==
### let phiVals =
###       Mapping.keys
###        (CFG_SSA_base.phidefNodes (%g. Mapping.lookup (gen_ssa_wf_phis g))
###          ?g);
###     u = gen_ssa_wf_ssa_uses ?g; p = gen_ssa_wf_phis ?g;
###     tp = CFG_SSA_wf_base_code.trivial_phis gen_ssa_wf_phis ?g;
###     nou =
###       CFG_base.useNodes_of gen_ssa_wf_\<alpha>n
###        (usesOf o gen_ssa_wf_ssa_uses) ?g;
###     nop =
###       CFG_SSA_base.phiNodes_of (%g. Mapping.lookup (gen_ssa_wf_phis g)) ?g
### in while
###     (%((u, p), triv_phis, nodes_of_uses, nodes_of_phis).
###         ~ Set.is_empty triv_phis)
###     (%((u, p), triv_phis, nodes_of_uses, nodes_of_phis).
###         let next = Max triv_phis;
###             next' =
###               CFG_SSA_Transformed_notriv_base.substitution_code
###                (%g. Mapping.lookup p) ?g next;
###             (u', p') =
###               CFG_SSA_Transformed_notriv_base_code.step_codem (%_. u)
###                (%_. p) ?g next next' nodes_of_uses nodes_of_phis;
###             tp' =
###               CFG_SSA_Transformed_notriv_base_code.triv_phis' (%_. p') ?g
###                next triv_phis nodes_of_phis;
###             nou' =
###               gen_ssa_wf_notriv.nodes_of_uses' ?g next next' phiVals
###                nodes_of_uses;
###             nop' =
###               gen_ssa_wf_notriv.nodes_of_phis' ?g next next' nodes_of_phis
###         in ((u', p'), tp', nou', nop'))
###     ((u, p), tp, nou, nop)
### theory "Draft.Generic_Interpretation"
### 11.407s elapsed time, 12.138s cpu time, 1.068s GC time
Loading theory "Draft.WhileGraphSSA" (required by "Draft.WhileGraphSSATemplates")
instantiation
  w_node :: ord
  less_eq_w_node == less_eq :: w_node => w_node => bool
  less_w_node == less :: w_node => w_node => bool
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 106 of "$AFP/Formal_SSA/WhileGraphSSA.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" while_cfg_defs) ("_position" c))
###     ("_Update"
###       ("_applC" ("_position" Defs)
###         ("_applC" ("_position" transform) ("_position" c)))
###       ("_updbind" ("\<^const>WCFG.w_node.Entry")
###         ("_Coll" ("_position" v)
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" Uses)
###                 ("_cargs" ("_applC" ("_position" transform) ("_position" c))
###                   ("_position" n))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" while_cfg_defs) ("_position" c))
###     ("_applC"
###       ("_applC" ("_position" Defs)
###         ("_applC" ("_position" transform) ("_position" c)))
###       ("\<^const>Com.cmd.LAss" ("\<^const>WCFG.w_node.Entry")
###         ("_Coll" ("_position" v)
###           ("\<^const>HOL.Ex_binder" ("_position" n)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" Uses)
###                 ("_cargs" ("_applC" ("_position" transform) ("_position" c))
###                   ("_position" n))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Partially applied constant "WhileGraphSSA.while_cfg_inEdges'" on left hand side of equation, in theorem:
### while.predecessors ?g ?n == map getFrom (while.inEdges ?g ?n)
### Abstraction on left hand side of equation, in theorem:
### while_ign.predecessors ?cmd ?g ?n ==
### map getFrom (while_ign.inEdges ?cmd ?g ?n)
### theory "Draft.WhileGraphSSA"
### 1.467s elapsed time, 2.170s cpu time, 0.234s GC time
Loading theory "Draft.WhileGraphSSATemplates"
val templateLemmas =
   [("WhileGraphSSA.defs_cmd_finite", "finite (lhs ?c)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("WhileGraphSSA.uses_cmd_finite", "finite (rhs ?c)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("WhileGraphSSA.uses_expr_finite", "finite (rhs_aux ?e)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("WhileGraphSSA.finite_Defs", "finite (Defs ?c ?n)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("WhileGraphSSA.finite_Uses", "finite (Uses ?c ?n)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("WhileGraphSSA.finite_valid_edge", "finite (Collect (valid_edge ?c))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("WhileGraphSSA.Uses_Entry", "Uses ?c (_Entry_) = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("WhileGraphSSA.right_total_const", "right_total (%x y. x = ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("WhileGraphSSA.finite_labels'", "finite {(l, c). labels ?prog l c}",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty)))
         )),
    ("WhileGraphSSA.in_Uses_valid_node",
     "?V : Uses ?c ?n ==> valid_node ?c ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("WhileGraphSSA.const_transfer",
     "rel_fun (%x y. x = ?c) (=) ?f (%_. ?f ?c)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_hole 0),
             template_var 0),
           t_empty)
         )),
    ("WhileGraphSSA.while_path_graph_pathD",
     "While_CFG.path (transform ?c) ?n ?es ?m ==>
      while.path2 ?c ?n (?n # map targetnode ?es) ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, t_empty), t_empty),
                    template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_var 3)),
                        template_var 3))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_hole 3),
                     template_hole 2),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 1))),
             template_var 0)
           ))),
    ("WhileGraphSSA.while_cfg_CFG_wf_impl",
     "SSA_CFG.CFG_wf (%_. gen_\<alpha>e (gen_while_cfg ?cmd))
       (%_. gen_\<alpha>n (gen_while_cfg ?cmd)) (%_. while_cfg_invar ?cmd)
       (%_. gen_inEdges' (gen_while_cfg ?cmd))
       (%_. gen_Entry (gen_while_cfg ?cmd))
       (%_. gen_defs (gen_while_cfg ?cmd))
       (%_. gen_uses (gen_while_cfg ?cmd))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, t_empty), t_empty),
                   t_empty),
                 t_empty),
               t_empty),
             t_empty),
           t_empty)
         ))]:
   (string * thm * template) list
### theory "Draft.WhileGraphSSATemplates"
### 2.342s elapsed time, 2.900s cpu time, 0.337s GC time
val it = (): unit
