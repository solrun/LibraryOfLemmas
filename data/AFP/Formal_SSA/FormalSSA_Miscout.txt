Loading theory "Draft.FormalSSA_Misc" (required by "Draft.FormalSSA_MiscTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FormalSSA_MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FormalSSA_MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FormalSSA_MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.556s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FormalSSA_MiscTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.FormalSSA_Misc"
### 0.184s elapsed time, 0.741s cpu time, 0.048s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.898s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FormalSSA_MiscTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.273s cpu time, 0.141s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FormalSSA_MiscTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.690s elapsed time, 2.081s cpu time, 0.293s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.874s elapsed time, 2.527s cpu time, 0.694s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.734s elapsed time, 3.952s cpu time, 0.868s GC time
Loading theory "Draft.Templates" (required by "Draft.FormalSSA_MiscTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FormalSSA_MiscTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.503s cpu time, 0.057s GC time
Loading theory "Draft.FormalSSA_MiscTemplates"
val templateLemmas =
   [("FormalSSA_Misc.set_tl", "set (tl ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("FormalSSA_Misc.removeAll_le",
     "length (removeAll ?x ?xs) <= length ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("FormalSSA_Misc.dom_comp_subset", "?g ` dom (?f o ?g) <= dom ?f",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))),
       template_app (template_hole 0, template_var 0))),
    ("FormalSSA_Misc.prefix_butlastD",
     "prefix ?xs (butlast ?ys) ==> prefix ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("FormalSSA_Misc.butlast_prefix",
     "prefix ?xs ?ys ==> prefix (butlast ?xs) (butlast ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("FormalSSA_Misc.butlast_strict_prefix",
     "?xs ~= [] ==> strict_prefix (butlast ?xs) ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("FormalSSA_Misc.set_sorted_list_of_set_remove",
     "set (sorted_list_of_set (Set.remove ?x ?A)) =
      Set.remove ?x (set (sorted_list_of_set ?A))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("FormalSSA_Misc.distinct_hd_tl",
     "distinct ?xs ==> hd ?xs ~: set (tl ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("FormalSSA_Misc.set_mono_strict_prefix",
     "strict_prefix ?xs ?ys ==> set ?xs <= set (butlast ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("FormalSSA_Misc.length_1_last_hd",
     "length ?ns = 1 ==> last ?ns = hd ?ns",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("FormalSSA_Misc.singleton_list_hd_last",
     "length ?xs = 1 ==> hd ?xs = last ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("FormalSSA_Misc.in_set_tlD", "?x : set (tl ?xs) ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("FormalSSA_Misc.set_tl_append'",
     "set (tl (?xs @ ?ys)) <= set (tl ?xs) Un set ?ys",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("FormalSSA_Misc.The_Max", "Ex1 ?P ==> The ?P = Max {x. ?P x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("FormalSSA_Misc.The_Min", "Ex1 ?P ==> The ?P = Min {x. ?P x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("FormalSSA_Misc.prefix_tl_subset",
     "prefix ?xs ?ys ==> set (tl ?xs) <= set (tl ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("FormalSSA_Misc.suffix_tl_subset",
     "suffix ?xs ?ys ==> set (tl ?xs) <= set (tl ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("FormalSSA_Misc.last_in_tl",
     "1 < length ?xs ==> last ?xs : set (tl ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("FormalSSA_Misc.hd_in_butlast",
     "1 < length ?xs ==> hd ?xs : set (butlast ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("FormalSSA_Misc.set_single_hd", "set ?vs = {?v} ==> hd ?vs = ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("FormalSSA_Misc.removeAll_less",
     "?x : set ?xs ==> length (removeAll ?x ?xs) < length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("FormalSSA_Misc.set_butlast_distinct",
     "distinct ?xs ==> set (butlast ?xs) Int {last ?xs} = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)),
         template_hole 0))),
    ("FormalSSA_Misc.in_prefix",
     "[| prefix ?xs ?ys; ?x : set ?xs |] ==> ?x : set ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("FormalSSA_Misc.strict_prefix_butlast",
     "[| prefix ?xs (butlast ?ys); ?ys ~= [] |] ==> strict_prefix ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("FormalSSA_Misc.disjoint_elem",
     "[| ?A Int ?B = {}; ?x : ?A |] ==> ?x ~: ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)
               )
           ))),
    ("FormalSSA_Misc.fold_union_finite",
     "[| finite ?xs; ALL xs:set ?xss. finite xs |]
      ==> finite (fold (Un) ?xss ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0),
               template_var 1))
           ))),
    ("FormalSSA_Misc.set_hd_tl",
     "?xs ~= [] ==> set [hd ?xs] Un set (tl ?xs) = set ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 6))),
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 3, template_var 0)))),
    ("FormalSSA_Misc.finite_dom_comp",
     "[| finite (dom ?f); inj_on ?g (dom (?f o ?g)) |]
      ==> finite (dom (?f o ?g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))
           ))),
    ("FormalSSA_Misc.nonsimple_length_gt_1",
     "[| ?xs ~= []; hd ?xs ~= last ?xs |] ==> 1 < length ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("FormalSSA_Misc.in_set_butlastI",
     "[| ?x : set ?xs; ?x ~= last ?xs |] ==> ?x : set (butlast ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("FormalSSA_Misc.not_in_butlast",
     "[| ?x : set ?ys; ?x ~: set (butlast ?ys) |] ==> ?x = last ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 2, template_var 0)))
                )
            )],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("FormalSSA_Misc.fold_union_elemI'",
     "?x : ?xs | (EX xs:set ?xss. ?x : xs) ==> ?x : fold (Un) ?xss ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0),
               template_var 1))
           ))),
    ("FormalSSA_Misc.card_eq_1_singleton",
     "[| card ?A = 1; !!x. ?A = {x} ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.map_option_the",
     "[| ?x = map_option ?f ?y; ?x ~= None |] ==> the ?x = ?f (the ?y)",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("FormalSSA_Misc.fold_union_elemI",
     "[| ?x : ?ys; ?ys : set ?xss Un {?xs} |] ==> ?x : fold (Un) ?xss ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("FormalSSA_Misc.removeAll_induct",
     "(!!xs. (!!x. x : set xs ==> ?P (removeAll x xs)) ==> ?P xs) ==>
      ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("FormalSSA_Misc.fold_update_conv",
     "fold (%n m. m(n |-> ?g n)) ?xs ?m ?x =
      (if ?x : set ?xs then Some (?g ?x) else ?m ?x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_hole 3,
             template_app (template_var 3, template_var 0))),
         template_app (template_var 1, template_var 0)))),
    ("FormalSSA_Misc.the1_list",
     "EX! x. x : set ?xs & ?P x ==>
      (THE x. x : set ?xs & ?P x) = hd (filter ?P ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("FormalSSA_Misc.set_double_filter_hd",
     "[| set ?vs = {?v, ?v'}; ?v ~= ?v' |]
      ==> hd (filter (%v'. v' ~= ?v) ?vs) = ?v'",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4))),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_var 0))),
    ("FormalSSA_Misc.butlast_idx'",
     "[| ?xs ! ?i = ?y; ?i < length ?xs - 1; 1 < length ?xs |]
      ==> ?y : set (butlast ?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_hole 3)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("FormalSSA_Misc.prefix_split_first",
     "[| ?x : set ?xs;
         !!as. [| prefix (as @ [?x]) ?xs; ?x ~: set as |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.butlast_idx",
     "[| ?y : set (butlast ?xs);
         !!i. [| ?xs ! i = ?y; i < length ?xs - 1 |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.concat_join",
     "[| ?xs ~= []; ?ys ~= []; last ?xs = hd ?ys |]
      ==> butlast ?xs @ ?ys = ?xs @ tl ?ys",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("FormalSSA_Misc.fold_induct",
     "[| ?P ?s; !!x s. [| x : set ?xs; ?P s |] ==> ?P (?f x s) |]
      ==> ?P (fold ?f ?xs ?s)",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_var 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("FormalSSA_Misc.fold_union_elem",
     "[| ?x : fold (Un) ?xss ?xs;
         !!ys. [| ?x : ys; ys : set ?xss Un {?xs} |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.set_zip_leftI",
     "[| length ?xs = length ?ys; ?y : set ?ys;
         !!x. (x, ?y) : set (zip ?xs ?ys) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.set_take_two",
     "[| 2 <= card ?A; !!x y. [| x : ?A; y : ?A; x ~= y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.in_set_zip_map",
     "[| (?x, ?y) : set (zip ?xs (map ?f ?ys));
         !!y'. [| (?x, y') : set (zip ?xs ?ys); ?f y' = ?y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_var 4)),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.suffix_unsnoc",
     "[| suffix ?xs ?ys; ?xs ~= [];
         !!x. [| ?xs = butlast ?xs @ [x]; ?ys = butlast ?ys @ [x] |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("FormalSSA_Misc.set_minus_one",
     "[| ?v ~= ?v'; ?v' : set ?vs |]
      ==> (set ?vs - {?v'} <= {?v}) =
          (set ?vs = {?v'} | set ?vs = {?v, ?v'})",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 7, template_var 0)),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_hole 2))),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 7, template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2))))
             ))))]:
   (string * thm * template) list
### theory "Draft.FormalSSA_MiscTemplates"
### 0.329s elapsed time, 0.473s cpu time, 0.064s GC time
val it = (): unit
