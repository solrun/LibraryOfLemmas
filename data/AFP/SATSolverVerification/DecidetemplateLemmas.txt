   [("SatSolverVerification.InvariantCFalseAfterDecide",
     "[| InvariantCFalse ?conflictFlag ?M ?C;
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantCFalse ?conflictFlag ?M' ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 1),
             template_var 2)
           ))),
    ("SatSolverVerification.InvariantReasonClausesAfterDecide",
     "[| InvariantReasonClauses ?F ?M; InvariantUniq ?M;
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantReasonClauses ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3), template_var 1)
           ))),
    ("SatSolverVerification.InvariantConsistentAfterDecide",
     "[| InvariantConsistent ?M; var ?literal ~: vars (elements ?M);
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantConsistent ?M'",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)))
                )
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 11, template_var 0)))),
    ("SatSolverVerification.InvariantUniqAfterDecide",
     "[| InvariantUniq ?M; var ?literal ~: vars (elements ?M);
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantUniq ?M'",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)))
                )
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 11, template_var 0)))),
    ("SatSolverVerification.InvariantVarsMAfterDecide",
     "[| InvariantVarsM ?M ?F0.0 ?Vbl; var ?literal : ?Vbl;
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantVarsM ?M' ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsAfterDecide",
     "[| InvariantImpliedLiterals ?F ?M; var ?literal ~: vars (elements ?M);
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantImpliedLiterals ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)))
                )
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 3),
             template_var 0)
           ))),
    ("Decide.InvariantEquivalentZLAfterApplyDecide",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0 |]
      ==> let state' = applyDecide ?state ?Vbl
          in InvariantEquivalentZL (getF state') (getM state') ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Decide.InvariantConsistentAfterApplyDecide",
     "[| ~ ?Vbl <= vars (elements (getM ?state));
         InvariantConsistent (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state) |]
      ==> let state' = applyDecide ?state ?Vbl
          in InvariantConsistent (getM state')",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 9, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 0)),
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Decide.InvariantUniqAfterApplyDecide",
     "[| ~ ?Vbl <= vars (elements (getM ?state));
         InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state) |]
      ==> let state' = applyDecide ?state ?Vbl
          in InvariantUniq (getM state')",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 9, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 0)),
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Decide.applyDecideEffect",
     "[| ~ ?Vbl <= vars (elements (getM ?state));
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state) |]
      ==> let literal = selectLiteral ?state ?Vbl;
              state' = applyDecide ?state ?Vbl
          in var literal ~: vars (elements (getM ?state)) &
             var literal : ?Vbl &
             getM state' = getM ?state @ [(literal, True)] &
             getF state' = getF ?state",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 22,
                template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 0)),
                template_app (template_hole 17, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 0)),
              template_app (template_hole 18, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Decide.InvariantGetReasonIsReasonAfterApplyDecide",
     "[| ~ ?Vbl <= vars (elements (getM ?state));
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         getQ ?state = [] |]
      ==> let state' = applyDecide ?state ?Vbl
          in InvariantGetReasonIsReason (getReason state') (getF state')
              (getM state') (set (getQ state'))",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 18,
                template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 0)),
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 14, template_var 0)),
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 14, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 13, template_var 0)),
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 13, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            ),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Decide.InvariantQCharacterizationAfterApplyDecide",
     "[| ~ ?Vbl <= vars (elements (getM ?state));
         InvariantConsistent (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state);
         getQ ?state = [] |]
      ==> let state' = applyDecide ?state ?Vbl
          in InvariantQCharacterization (getConflictFlag state')
              (getQ state') (getF state') (getM state')",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 21,
                template_app
                 (template_hole 20,
                  template_app (template_hole 19, template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 16, template_var 0)),
                template_app (template_hole 12, template_var 0)),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 15, template_var 0)),
                template_app (template_hole 12, template_var 0)),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 15, template_var 0)),
                template_app (template_hole 12, template_var 0)),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 15, template_var 0)),
                  template_app (template_hole 12, template_var 0)),
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 0)),
                template_app (template_hole 15, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 4, template_var 0)),
                template_app (template_hole 15, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Decide.InvariantsVarsAfterApplyDecide",
     "[| ~ ?Vbl <= vars (elements (getM ?state));
         InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantVarsM (getM ?state) ?F0.0 ?Vbl;
         InvariantVarsF (getF ?state) ?F0.0 ?Vbl; getQ ?state = [] |]
      ==> let state' = applyDecide ?state ?Vbl
          in InvariantVarsM (getM state') ?F0.0 ?Vbl &
             InvariantVarsF (getF state') ?F0.0 ?Vbl &
             InvariantVarsQ (getQ state') ?F0.0 ?Vbl",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 2,
              template_app
               (template_hole 23,
                template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 16, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app (template_hole 17, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 13, template_var 1)),
              template_app (template_hole 12, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 13, template_var 1)),
              template_app (template_hole 12, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 13, template_var 1)),
              template_app (template_hole 12, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 13, template_var 1)),
                template_app (template_hole 12, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 21, template_var 1)),
                template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 16, template_var 1)),
                template_var 0),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             t_empty)
           )))]
