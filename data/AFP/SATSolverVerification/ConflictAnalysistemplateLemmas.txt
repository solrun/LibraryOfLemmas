   [("ConflictAnalysis.InvariantUniqQAfterApplyLearn",
     "InvariantUniqQ (getQ ?state) ==>
      let state' = applyLearn ?state in InvariantUniqQ (getQ state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.oneElementSetCharacterization",
     "(set ?l = {?a}) = (remdups ?l = [?a])",
     template_bimplication
      (template_equation
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("ConflictAnalysis.uniqOneElementCharacterization",
     "uniq ?l ==> (?l = [?a]) = (set ?l = {?a})",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4)),
         template_equation
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("ConflictAnalysis.InvariantUniqQAfterApplyBackjump",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantUniqQ (getQ state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConflictFlagCharacterizationAfterApplyLearn",
     "[| getConflictFlag ?state;
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantConflictFlagCharacterization (getConflictFlag state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.applyBackjumpPreservedVariables",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> let state' = applyBackjump ?state
          in getSATFlag state' = getSATFlag ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantGetReasonIsReasonAfterApplyLearn",
     "InvariantGetReasonIsReason (getReason ?state) (getF ?state)
       (getM ?state) (set (getQ ?state)) ==>
      let state' = applyLearn ?state
      in InvariantGetReasonIsReason (getReason state') (getF state')
          (getM state') (set (getQ state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.clauseFalseInPrefixToLastAssertedLiteral",
     "[| isLastAssertedLiteral ?l (oppositeLiteralList ?c) (elements ?M);
         clauseFalse ?c (elements ?M); uniq (elements ?M) |]
      ==> clauseFalse ?c
           (elements (prefixToLevel (elementLevel ?l ?M) ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 0)))
           ))),
    ("ConflictAnalysis.InvariantConflictClauseCharacterizationAfterApplyLearn",
     "[| getConflictFlag ?state;
         InvariantConflictClauseCharacterization (getConflictFlag ?state)
          (getConflictClause ?state) (getF ?state) (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantConflictClauseCharacterization
              (getConflictFlag state') (getConflictClause state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 4, template_var 0)),
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantQCharacterizationAfterApplyLearn",
     "[| getConflictFlag ?state;
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantQCharacterization (getConflictFlag state')
              (getQ state') (getF state') (getM state')",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 4, template_var 0)),
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantEquivalentZLAfterApplyLearn",
     "[| InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         getConflictFlag ?state |]
      ==> let state' = applyLearn ?state
          in InvariantEquivalentZL (getF state') (getM state') ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantVarsFAfterApplyLearn",
     "[| InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         getConflictFlag ?state; InvariantVarsF (getF ?state) ?F0.0 ?Vbl;
         InvariantVarsM (getM ?state) ?F0.0 ?Vbl |]
      ==> let state' = applyLearn ?state
          in InvariantVarsF (getF state') ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 6, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             t_empty)
           ))),
    ("ConflictAnalysis.CnEqual1IffUIP",
     "[| InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state) |]
      ==> (getCn ?state = 1) =
          isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 0)),
                template_app (template_hole 9, template_var 0)),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 0)),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 9, template_var 0)),
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 10, template_var 0))),
             template_app (template_hole 9, template_var 0)),
           template_app (template_hole 8, template_var 0))))),
    ("ConflictAnalysis.InvariantConflictClauseCharacterizationAfterApplyBackjump",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConflictClauseCharacterization
              (getConflictFlag state') (getConflictClause state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 0)),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 12, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 12, template_var 0)),
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 11, template_var 0)),
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantNoDecisionsWhenConflictEnsuresCurrentLevelCl",
     "[| InvariantNoDecisionsWhenConflict ?F ?M (currentLevel ?M);
         ?clause el ?F; clauseFalse ?clause (elements ?M);
         uniq (elements ?M); 0 < currentLevel ?M |]
      ==> ?clause ~= [] &
          (let Cl = getLastAssertedLiteral (oppositeLiteralList ?clause)
                     (elements ?M)
           in InvariantClCurrentLevel Cl ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 2),
                template_var 1),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 14, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_app (template_hole 11, template_var 1))),
               t_empty))
           ))),
    ("ConflictAnalysis.InvariantCllCharacterizationAfterApplyLearn",
     "[| InvariantUniq (getM ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state); getConflictFlag ?state |]
      ==> let state' = applyLearn ?state
          in InvariantCllCharacterization (getCl state') (getCll state')
              (getC state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 0)),
                template_app (template_hole 7, template_var 0)),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 10, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantWatchCharacterizationInBackjumpPrefix",
     "InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
       (getWatch2 ?state) (getM ?state) ==>
      let l = getCl ?state; level = getBackjumpLevel ?state;
          prefix = prefixToLevel level (getM ?state);
          state' = ?state
            (| getConflictFlag := False, getQ := [], getM := prefix |)
      in InvariantWatchCharacterization (getF state') (getWatch1 state')
          (getWatch2 state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 0)),
                  template_app (template_hole 14, template_var 0)),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 12, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.applyLearnPreservedVariables",
     "let state' = applyLearn ?state
      in getM state' = getM ?state &
         getQ state' = getQ ?state &
         getC state' = getC ?state &
         getCl state' = getCl ?state &
         getConflictFlag state' = getConflictFlag ?state &
         getConflictClause state' = getConflictClause ?state &
         getF state' =
         (if getC ?state = [opposite (getCl ?state)] then getF ?state
          else getF ?state @ [getC ?state])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 22,
             template_app (template_hole 21, template_var 0)),
           t_empty)
         )),
    ("ConflictAnalysis.ApplyExplainUIPPreservedVariables",
     "applyExplainUIP_dom ?state ==>
      let state' = applyExplainUIP ?state
      in getM state' = getM ?state &
         getF state' = getF ?state &
         getQ state' = getQ ?state &
         getWatch1 state' = getWatch1 ?state &
         getWatch2 state' = getWatch2 ?state &
         getWatchList state' = getWatchList ?state &
         getConflictFlag state' = getConflictFlag ?state &
         getConflictClause state' = getConflictClause ?state &
         getSATFlag state' = getSATFlag ?state &
         getReason state' = getReason ?state",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app (template_hole 20, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.isMinimalBackjumpLevelGetBackjumpLevel",
     "[| InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state); getConflictFlag ?state;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> isMinimalBackjumpLevel (getBackjumpLevel ?state)
           (opposite (getCl ?state)) (getC ?state) (getM ?state)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 0)),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 11, template_var 0)),
                  template_app (template_hole 9, template_var 0)),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 14, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 11, template_var 0))),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 2,
            template_app (template_hole 16, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 11, template_var 0))),
               template_app (template_hole 13, template_var 0)),
             template_app (template_hole 16, template_var 0))
           ))),
    ("ConflictAnalysis.ApplyExplainUIPTermination",
     "[| InvariantUniq (getM ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         getConflictFlag ?state; 0 < currentLevel (getM ?state) |]
      ==> applyExplainUIP_dom ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 18,
                    template_app (template_hole 17, template_var 1)),
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_than, template_hole 2,
          template_app
           (template_hole 1,
            template_app (template_hole 19, template_var 1)))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("ConflictAnalysis.InvariantsClAfterApplyConflict",
     "[| getConflictFlag ?state; InvariantUniq (getM ?state);
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         InvariantConflictClauseCharacterization (getConflictFlag ?state)
          (getConflictClause ?state) (getF ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyConflict ?state
          in InvariantCFalse (getConflictFlag state') (getM state')
              (getC state') &
             InvariantCEntailed (getConflictFlag state') ?F0.0
              (getC state') &
             InvariantClCharacterization (getCl state') (getC state')
              (getM state') &
             InvariantClCurrentLevel (getCl state') (getM state') &
             InvariantCnCharacterization (getCn state') (getC state')
              (getM state') &
             InvariantUniqC (getC state')",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app
               (template_hole 17,
                template_app (template_hole 20, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 18, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 22, template_var 1)),
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 18, template_var 1)),
              template_app (template_hole 20, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 12,
          template_app
           (template_hole 17,
            template_app (template_hole 20, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.isUIPApplyExplainUIP",
     "[| applyExplainUIP_dom ?state; InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         getConflictFlag ?state; 0 < currentLevel (getM ?state) |]
      ==> let state' = applyExplainUIP ?state
          in isUIP (opposite (getCl state')) (getC state') (getM state')",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 20, template_var 1)),
                template_var 0),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 16, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 22, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConsistentAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConsistent (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 16, template_var 1)),
                template_var 0),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 10, template_var 1)),
                  template_app (template_hole 8, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 24, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 10, template_var 1))),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantUniqAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state in InvariantUniq (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 16, template_var 1)),
                template_var 0),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 10, template_var 1)),
                  template_app (template_hole 8, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 24, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 10, template_var 1))),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantEquivalentZLAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state; InvariantUniqC (getC ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantEquivalentZL (getF state') (getM state') ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 22, template_var 1)),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 17, template_var 1)),
                template_var 0),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 22, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 11, template_var 1))),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 2,
            template_app (template_hole 25, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantNoDecisionsWhenConflictNorUnitAfterApplyLearn",
     "[| InvariantUniq (getM ?state); InvariantConsistent (getM ?state);
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenUnit (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state); getConflictFlag ?state;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantNoDecisionsWhenConflict (getF ?state) (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenUnit (getF ?state) (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenConflict [getC ?state] (getM state')
              (getBackjumpLevel state') &
             InvariantNoDecisionsWhenUnit [getC ?state] (getM state')
              (getBackjumpLevel state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 19, template_var 0)),
                template_app (template_hole 22, template_var 0)),
              template_app
               (template_hole 18,
                template_app (template_hole 22, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 19, template_var 0)),
                template_app (template_hole 22, template_var 0)),
              template_app
               (template_hole 18,
                template_app (template_hole 22, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 0)),
                template_app (template_hole 22, template_var 0)),
              template_app (template_hole 14, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 0)),
                template_app (template_hole 14, template_var 0)),
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 0)),
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 14, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 15, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 12, template_var 0))),
                template_app (template_hole 14, template_var 0)),
              template_app (template_hole 22, template_var 0))
            ),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_hole 18,
            template_app (template_hole 22, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.WatchInvariantsAfterApplyLearn",
     "[| InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantWatchesEl (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchesDiffer (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchCharacterization (getF state') (getWatch1 state')
              (getWatch2 state') (getM state') &
             InvariantWatchListsContainOnlyClausesFromF
              (getWatchList state') (getF state') &
             InvariantWatchListsUniq (getWatchList state') &
             InvariantWatchListsCharacterization (getWatchList state')
              (getWatch1 state') (getWatch2 state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 17, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 17, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 17, template_var 0)),
                  template_app (template_hole 16, template_var 0)),
                template_app (template_hole 15, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 17, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 11, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 6, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 19, template_var 0)),
              template_app (template_hole 6, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsClAfterApplyExplain",
     "[| InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         getCn ?state ~= 1; getConflictFlag ?state;
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyExplain (getCl ?state) ?state
          in InvariantCFalse (getConflictFlag state') (getM state')
              (getC state') &
             InvariantCEntailed (getConflictFlag state') ?F0.0
              (getC state') &
             InvariantClCharacterization (getCl state') (getC state')
              (getM state') &
             InvariantClCurrentLevel (getCl state') (getM state') &
             InvariantCnCharacterization (getCn state') (getC state')
              (getM state') &
             InvariantUniqC (getC state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 23, template_var 1)),
                template_var 0),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 1)),
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 16, template_var 1),
              template_hole 7)
            ),
        template_predicate
         (template_app (template_hole 23, template_var 1)),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 25, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 20, template_var 1)),
                 template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsClAfterExplainUIP",
     "[| applyExplainUIP_dom ?state; InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         getConflictFlag ?state; 0 < currentLevel (getM ?state) |]
      ==> let state' = applyExplainUIP ?state
          in InvariantCFalse (getConflictFlag state') (getM state')
              (getC state') &
             InvariantCEntailed (getConflictFlag state') ?F0.0
              (getC state') &
             InvariantClCharacterization (getCl state') (getC state')
              (getM state') &
             InvariantCnCharacterization (getCn state') (getC state')
              (getM state') &
             InvariantClCurrentLevel (getCl state') (getM state') &
             InvariantUniqC (getC state')",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 20, template_var 1)),
                template_var 0),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 16, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 1)),
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 3,
            template_app (template_hole 22, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsNoDecisionsWhenConflictNorUnitAfterApplyBackjump_1",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantUniqC (getC ?state);
         getC ?state = [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenUnit (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         getConflictFlag ?state;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantNoDecisionsWhenConflict (getF state') (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenUnit (getF state') (getM state')
              (currentLevel (getM state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 31,
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 29,
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 27, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 1)),
              template_app (template_hole 27, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 1))
            ),
        template_equation
         (template_app (template_hole 21, template_var 1),
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1))),
            template_hole 16)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 27, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app
               (template_hole 14,
                template_app (template_hole 30, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 27, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app
               (template_hole 14,
                template_app (template_hole 30, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 11, template_var 1)),
                template_var 0),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 17, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 18,
                    template_app (template_hole 17, template_var 1))),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 14,
            template_app (template_hole 30, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.applyBackjumpEffect",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let l = getCl ?state; bClause = getC ?state;
              bLiteral = opposite l; level = getBackjumpLevel ?state;
              prefix = prefixToLevel level (getM ?state);
              state'' = applyBackjump ?state
          in (formulaEntailsClause ?F0.0 bClause &
              isUnitClause bClause bLiteral (elements prefix) &
              getM state'' = prefix @ [(bLiteral, False)]) &
             getF state'' = getF ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 42,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 40,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 39,
                  template_app (template_hole 38, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 35,
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 33, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 33, template_var 1)),
                template_app (template_hole 41, template_var 1)),
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 30,
                  template_app (template_hole 33, template_var 1)),
                template_var 0),
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 27,
                    template_app (template_hole 28, template_var 1)),
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_hole 22,
                    template_app (template_hole 28, template_var 1))),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 20,
          template_app
           (template_hole 19,
            template_app (template_hole 41, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app (template_hole 28, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantGetReasonIsReasonAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         getConflictFlag ?state; InvariantUniqC (getC ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         0 < getBackjumpLevel ?state -->
         getF ?state ~= [] & last (getF ?state) = getC ?state |]
      ==> let state' = applyBackjump ?state
          in InvariantGetReasonIsReason (getReason state') (getF state')
              (getM state') (set (getQ state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 39,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 36,
                  template_app (template_hole 35, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 35, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 30,
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 31, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 28, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 27,
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 25,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 38, template_var 1)),
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 28, template_var 1)),
                template_var 0),
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 22, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 21,
                    template_app (template_hole 22, template_var 1)),
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 17,
                    template_app (template_hole 22, template_var 1))),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 15,
          template_app
           (template_hole 14,
            template_app (template_hole 38, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 1)),
                  template_app (template_hole 35, template_var 1)),
                template_app (template_hole 38, template_var 1)),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_app (template_hole 8, template_var 1))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 35, template_var 1)),
                      template_hole 4))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 35, template_var 1))),
                  template_app (template_hole 26, template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConflictFlagCharacterizationAfterApplyBackjump_1",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state = [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConflictFlagCharacterization (getConflictFlag state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 34,
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 32,
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 28,
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 30, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 29, template_var 1)),
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 1))
            ),
        template_equation
         (template_app (template_hole 20, template_var 1),
          template_app
           (template_app
             (template_hole 18,
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 1))),
            template_hole 15)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app
               (template_hole 13,
                template_app (template_hole 33, template_var 1)))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 16, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 13,
            template_app (template_hole 33, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_var 1))),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 33, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.WatchInvariantsAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         getConflictFlag ?state; InvariantUniqC (getC ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantWatchesEl (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchesDiffer (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchCharacterization (getF state') (getWatch1 state')
              (getWatch2 state') (getM state') &
             InvariantWatchListsContainOnlyClausesFromF
              (getWatchList state') (getF state') &
             InvariantWatchListsUniq (getWatchList state') &
             InvariantWatchListsCharacterization (getWatchList state')
              (getWatch1 state') (getWatch2 state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 30,
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 28,
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 26, template_var 1)),
                  template_app (template_hole 25, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 17, template_var 1)),
                template_var 0),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 11, template_var 1))),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 3,
            template_app (template_hole 29, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConflictFlagCharacterizationAfterApplyBackjump_2",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state ~= [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (butlast (getF ?state))
          (getM ?state) (currentLevel (getM ?state));
         getF ?state ~= []; last (getF ?state) = getC ?state;
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConflictFlagCharacterization (getConflictFlag state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 39,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 36,
                template_app (template_hole 35, template_var 1)),
              template_app (template_hole 34, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 33,
              template_app (template_hole 35, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 35, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 27,
                    template_app (template_hole 34, template_var 1)),
                  template_app (template_hole 31, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 25, template_var 1),
              template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_hole 21,
                    template_app (template_hole 20, template_var 1))),
                template_hole 19))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 17,
                    template_app (template_hole 34, template_var 1))),
                template_app (template_hole 38, template_var 1)),
              template_app
               (template_hole 16,
                template_app (template_hole 38, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 34, template_var 1),
              template_hole 14)
            ),
        template_equation
         (template_app
           (template_hole 13,
            template_app (template_hole 34, template_var 1)),
          template_app (template_hole 25, template_var 1)),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 38, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 20, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 16,
            template_app (template_hole 38, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 21,
                    template_app (template_hole 20, template_var 1))),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 38, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsNoDecisionsWhenConflictNorUnitAfterApplyBackjump_2",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantUniqC (getC ?state);
         getC ?state ~= [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (butlast (getF ?state))
          (getM ?state) (currentLevel (getM ?state));
         InvariantNoDecisionsWhenUnit (butlast (getF ?state)) (getM ?state)
          (currentLevel (getM ?state));
         getF ?state ~= []; last (getF ?state) = getC ?state;
         InvariantNoDecisionsWhenConflict [getC ?state] (getM ?state)
          (getBackjumpLevel ?state);
         InvariantNoDecisionsWhenUnit [getC ?state] (getM ?state)
          (getBackjumpLevel ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantNoDecisionsWhenConflict (getF state') (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenUnit (getF state') (getM state')
              (currentLevel (getM state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 38,
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 36,
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 35,
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 32, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 34, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 29,
              template_app (template_hole 28, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 28, template_var 1),
              template_app
               (template_app
                 (template_hole 25,
                  template_app
                   (template_hole 24,
                    template_app (template_hole 23, template_var 1))),
                template_hole 22))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 34, template_var 1))),
                template_app (template_hole 37, template_var 1)),
              template_app
               (template_hole 19,
                template_app (template_hole 37, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 34, template_var 1))),
                template_app (template_hole 37, template_var 1)),
              template_app
               (template_hole 19,
                template_app (template_hole 37, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 34, template_var 1),
              template_hole 16)
            ),
        template_equation
         (template_app
           (template_hole 15,
            template_app (template_hole 34, template_var 1)),
          template_app (template_hole 28, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app (template_hole 28, template_var 1)),
                    template_hole 16)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app (template_hole 28, template_var 1)),
                    template_hole 16)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 23, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 23, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 24,
                    template_app (template_hole 23, template_var 1))),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 19,
            template_app (template_hole 37, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.invariantQCharacterizationAfterApplyBackjump_1",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state = [opposite (getCl ?state)];
         InvariantNoDecisionsWhenUnit (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state'' = applyBackjump ?state
          in InvariantQCharacterization (getConflictFlag state'')
              (getQ state'') (getF state'') (getM state'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 35,
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 32, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 31,
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 30,
                  template_app (template_hole 33, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 25,
                    template_app (template_hole 32, template_var 1)),
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 32, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 23, template_var 1)),
                  template_app (template_hole 21, template_var 1)),
                template_app (template_hole 32, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 1))
            ),
        template_equation
         (template_app (template_hole 19, template_var 1),
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 1))),
            template_hole 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 36, template_var 1)),
              template_app
               (template_hole 12,
                template_app (template_hole 36, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 36, template_var 1)),
              template_app
               (template_hole 12,
                template_app (template_hole 36, template_var 1)))
            ),
        template_predicate
         (template_app (template_hole 23, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 36, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 23, template_var 1)),
                template_var 0),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 15, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 15, template_var 1)),
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 12,
            template_app (template_hole 36, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 1))),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 36, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsVarsAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0' (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0';
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state); vars ?F0' <= vars ?F0.0;
         InvariantVarsM (getM ?state) ?F0.0 ?Vbl;
         InvariantVarsF (getF ?state) ?F0.0 ?Vbl;
         InvariantVarsQ (getQ ?state) ?F0.0 ?Vbl |]
      ==> let state' = applyBackjump ?state
          in InvariantVarsM (getM state') ?F0.0 ?Vbl &
             InvariantVarsF (getF state') ?F0.0 ?Vbl &
             InvariantVarsQ (getQ state') ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 35,
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 34,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 30,
                template_app (template_hole 29, template_var 3)),
              template_app (template_hole 33, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 28,
              template_app (template_hole 29, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 29, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 34,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 25,
                    template_app (template_hole 33, template_var 3)),
                  template_app (template_hole 32, template_var 3)),
                template_app (template_hole 31, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 24, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 24, template_var 3)),
                template_app (template_hole 36, template_var 3)),
              template_app (template_hole 22, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 22, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 24, template_var 3)),
                template_var 2),
              template_app (template_hole 22, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 3)),
                template_app (template_hole 22, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 18, template_var 3)),
                  template_app (template_hole 16, template_var 3)),
                template_app (template_hole 22, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 18, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 36, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 18, template_var 3))),
                template_app (template_hole 22, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_inequation
         (less_than, template_hole 10,
          template_app
           (template_hole 9,
            template_app (template_hole 36, template_var 3))),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 36, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 33, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             t_empty)
           ))),
    ("ConflictAnalysis.invariantQCharacterizationAfterApplyBackjump_2",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state ~= [opposite (getCl ?state)];
         InvariantNoDecisionsWhenUnit (butlast (getF ?state)) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenConflict (butlast (getF ?state))
          (getM ?state) (currentLevel (getM ?state));
         getF ?state ~= []; last (getF ?state) = getC ?state;
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state'' = applyBackjump ?state
          in InvariantQCharacterization (getConflictFlag state'')
              (getQ state'') (getF state'') (getM state'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 42,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 40,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 39,
                template_app (template_hole 38, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 36,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 35,
                  template_app (template_hole 38, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 37, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 31,
                  template_app (template_hole 37, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 30,
                    template_app (template_hole 37, template_var 1)),
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 27,
                    template_app (template_hole 28, template_var 1)),
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 24, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 24, template_var 1),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 19, template_var 1))),
                template_hole 18))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 37, template_var 1))),
                template_app (template_hole 41, template_var 1)),
              template_app
               (template_hole 15,
                template_app (template_hole 41, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 37, template_var 1))),
                template_app (template_hole 41, template_var 1)),
              template_app
               (template_hole 15,
                template_app (template_hole 41, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 37, template_var 1),
              template_hole 12)
            ),
        template_equation
         (template_app
           (template_hole 11,
            template_app (template_hole 37, template_var 1)),
          template_app (template_hole 24, template_var 1)),
        template_predicate
         (template_app (template_hole 28, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 41, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 28, template_var 1)),
                template_var 0),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 19, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 19, template_var 1)),
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 15,
            template_app (template_hole 41, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 19, template_var 1))),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 41, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           )))]
