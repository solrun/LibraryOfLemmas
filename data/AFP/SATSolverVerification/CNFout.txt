Loading theory "HOL-Library.Cancellation" (required by "Draft.CNFMoreTemplates" via "Draft.CNF" via "Draft.MoreList" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CNFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CNFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CNFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.153s elapsed time, 0.627s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CNFMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.240s elapsed time, 0.982s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CNFMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.315s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CNFMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.424s elapsed time, 1.704s cpu time, 0.120s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.CNFMoreTemplates" via "Draft.CNF" via "Draft.MoreList")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.778s cpu time, 0.883s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.066s elapsed time, 3.893s cpu time, 0.808s GC time
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.018s elapsed time, 6.248s cpu time, 1.122s GC time
Loading theory "Draft.Templates" (required by "Draft.CNFMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CNFMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.128s cpu time, 0.109s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.081s elapsed time, 7.156s cpu time, 1.278s GC time
Loading theory "Draft.MoreList" (required by "Draft.CNFMoreTemplates" via "Draft.CNF")
consts
  uniq :: "'a list => bool"
consts
  firstPos :: "'a => 'a list => nat"
consts
  list_diff :: "'a list => 'a list => 'a list"
### theory "Draft.MoreList"
### 0.428s elapsed time, 1.067s cpu time, 0.813s GC time
Loading theory "Draft.CNF" (required by "Draft.CNFMoreTemplates")
overloading
  literalElClause \<equiv> member :: Literal => Literal list => bool
overloading
  clauseElFormula \<equiv> member ::
    Literal list => Literal list list => bool
overloading
  el_literal \<equiv> member :: Literal => Literal list list => bool
consts
  el_literal :: "Literal => Literal list list => bool"
consts
  var :: "Literal => nat"
consts
  varsClause :: "Literal list => nat set"
consts
  varsFormula :: "Literal list list => nat set"
overloading
  vars_clause \<equiv> vars :: Literal list => nat set
overloading
  vars_formula \<equiv> vars :: Literal list list => nat set
overloading
  vars_set \<equiv> vars :: Literal set => nat set
consts
  opposite :: "Literal => Literal"
consts
  clauseTautology :: "Literal list => bool"
consts
  clauseTrue :: "Literal list => Literal list => bool"
consts
  clauseFalse :: "Literal list => Literal list => bool"
consts
  formulaTrue :: "Literal list list => Literal list => bool"
consts
  formulaFalse :: "Literal list list => Literal list => bool"
consts
  val2form :: "Literal list => Literal list list"
consts
  inconsistent :: "Literal list => bool"
overloading
  modelFormula \<equiv> model :: Literal list => Literal list list => bool
overloading
  modelClause \<equiv> model :: Literal list => Literal list => bool
### theory "Draft.CNF"
### 0.723s elapsed time, 0.813s cpu time, 0.123s GC time
Loading theory "Draft.CNFMoreTemplates"
val templateLemmas =
   [("CNF.emptyClauseIsFalse", "clauseFalse [] ?valuation",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("CNF.equivalentFormulaeReflexivity",
     "equivalentFormulae ?formula ?formula",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("CNF.oppositeIsDifferentFromLiteral", "opposite ?literal ~= ?literal",
     template_negation
      (
         template_equation
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("CNF.oppositeLiteralListIdempotency",
     "oppositeLiteralList (oppositeLiteralList ?literalList) =
      ?literalList",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("CNF.oppositeIdempotency", "opposite (opposite ?literal) = ?literal",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("CNF.oppositeLiteralsHaveSameVariable",
     "var (opposite ?literal) = var ?literal",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("CNF.varsClauseVarsSet", "vars ?clause = vars (set ?clause)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("CNF.varsOppositeLiteralList",
     "vars (oppositeLiteralList ?clause) = vars ?clause",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("CNF.equivalentFormulaeSymmetry",
     "equivalentFormulae ?formula1.0 ?formula2.0 =
      equivalentFormulae ?formula2.0 ?formula1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("CNF.formulaUnsatIffImpliesEmptyClause",
     "formulaEntailsClause ?formula [] = (~ satisfiable ?formula)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("CNF.varsRemoveAllClause",
     "vars (removeAll ?clause ?formula) <= vars ?formula",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("CNF.varsRemoveLiteral",
     "vars (removeAll ?literal ?clause) <= vars ?clause",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("CNF.removeDuplicateLiteralsEquivalentClause",
     "equivalentFormulae [remdups ?clause] [?clause]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))
         )),
    ("CNF.val2formIsEntailed",
     "formulaEntailsValuation (?F' @ val2form ?valuation @ ?F'')
       ?valuation",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0))),
           template_var 1)
         )),
    ("CNF.clauseTrueRemoveDuplicateLiterals",
     "clauseTrue ?c ?v = clauseTrue (remdups ?c) ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("CNF.formulaWithEmptyClauseIsUnsatisfiable",
     "[] el ?formula ==> ~ satisfiable ?formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("CNF.formulaEntailsItsClauses",
     "?clause el ?formula ==> formulaEntailsClause ?formula ?clause",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("CNF.inconsistentRemoveAll",
     "inconsistent (removeAll ?literal ?valuation) ==>
      inconsistent ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("CNF.satisfiableAppend",
     "satisfiable (?formula1.0 @ ?formula2.0) ==> satisfiable ?formula1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("CNF.satisfiableAppend",
     "satisfiable (?formula1.0 @ ?formula2.0) ==> satisfiable ?formula2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("CNF.literalElListIffOppositeLiteralElOppositeLiteralList",
     "?literal el ?literalList =
      opposite ?literal el oppositeLiteralList ?literalList",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.oppositeSymmetry",
     "(opposite ?literal1.0 = ?literal2.0) =
      (opposite ?literal2.0 = ?literal1.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("CNF.oppositeUniqueness",
     "(opposite ?literal1.0 = opposite ?literal2.0) =
      (?literal1.0 = ?literal2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("CNF.resolventIsEntailed",
     "formulaEntailsClause [?clause1.0, ?clause2.0]
       (resolve ?clause1.0 ?clause2.0 ?literal)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("CNF.varsAppendFormulae",
     "vars (?formula1.0 @ ?formula2.0) =
      vars ?formula1.0 Un vars ?formula2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.varsAppendClauses",
     "vars (?clause1.0 @ ?clause2.0) = vars ?clause1.0 Un vars ?clause2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.varsAppendValuation",
     "vars (?valuation1.0 @ ?valuation2.0) =
      vars ?valuation1.0 Un vars ?valuation2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.satisfiableFilterTautologies",
     "satisfiable ?F = satisfiable (filter (%c. ~ clauseTautology c) ?F)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("CNF.val2FormEl",
     "?literal el ?valuation = [?literal] el val2form ?valuation",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.oppositeLiteralListNonempty",
     "(?literalList ~= []) = (oppositeLiteralList ?literalList ~= [])",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 1)),
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("CNF.val2formAppend",
     "val2form (?valuation1.0 @ ?valuation2.0) =
      val2form ?valuation1.0 @ val2form ?valuation2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.oppositeLiteralListRemove",
     "oppositeLiteralList (removeAll ?literal ?literalList) =
      removeAll (opposite ?literal) (oppositeLiteralList ?literalList)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.varsRemoveAllClauseSuperset",
     "vars ?formula - vars ?clause <= vars (removeAll ?clause ?formula)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CNF.clauseFalseAppendValuation",
     "clauseFalse ?clause ?valuation ==>
      clauseFalse ?clause (?valuation @ ?valuation')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.clauseFalseRemove",
     "clauseFalse ?clause ?valuation ==>
      clauseFalse (removeAll ?literal ?clause) ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("CNF.valuationContainsItsFalseClausesVariables",
     "clauseFalse ?clause ?valuation ==> vars ?clause <= vars ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.clauseTrueAppendValuation",
     "clauseTrue ?clause ?valuation ==>
      clauseTrue ?clause (?valuation @ ?valuation')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.satisfiableEquivalent",
     "equivalentFormulae ?formula1.0 ?formula2.0 ==>
      satisfiable ?formula1.0 = satisfiable ?formula2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.formulaEntailsClauseAppend",
     "formulaEntailsClause ?formula ?clause ==>
      formulaEntailsClause (?formula @ ?formula') ?clause",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("CNF.satisfiableEntailedFormula",
     "formulaEntailsFormula ?formula0.0 ?formula ==>
      satisfiable ?formula0.0 --> satisfiable ?formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF.formulaEntailsLiteralAppend",
     "formulaEntailsLiteral ?formula ?literal ==>
      formulaEntailsLiteral (?formula @ ?formula') ?literal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("CNF.formulaFalseAppendValuation",
     "formulaFalse ?formula ?valuation ==>
      formulaFalse ?formula (?valuation @ ?valuation')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.formulaFalseAppend",
     "formulaFalse ?formula ?valuation ==>
      formulaFalse (?formula @ ?formula') ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("CNF.formulaTrueAppendValuation",
     "formulaTrue ?formula ?valuation ==>
      formulaTrue ?formula (?valuation @ ?valuation')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.formulaTrueRemoveAll",
     "formulaTrue ?formula ?valuation ==>
      formulaTrue (removeAll ?clause ?formula) ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("CNF.formulaContainsItsClausesVariables",
     "?clause el ?formula ==> vars ?clause <= vars ?formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.formulaContainsItsLiteralsVariable",
     "?literal el ?formula ==> var ?literal : vars ?formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF.clauseContainsItsLiteralsVariable",
     "?literal el ?clause ==> var ?literal : vars ?clause",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF.valuationContainsItsLiteralsVariable",
     "?literal el ?valuation ==> var ?literal : vars ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF.varsPrefixValuation",
     "isPrefix ?valuation1.0 ?valuation2.0 ==>
      vars ?valuation1.0 <= vars ?valuation2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.emptyValuationFalsifiesOnlyEmptyClause",
     "?clause ~= [] ==> ~ clauseFalse ?clause []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 1)
               )
           ))),
    ("CNF.formulaEntailsLiteralRemoveAll",
     "formulaEntailsLiteral (removeAll ?clause ?formula) ?literal ==>
      formulaEntailsLiteral ?formula ?literal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("CNF.isLastAssertedCharacterization",
     "isLastAssertedLiteral ?literal (oppositeLiteralList ?literalList)
       ?valuation ==>
      literalTrue ?literal ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("CNF.equivalentFormulaeIffEntailEachOther",
     "equivalentFormulae ?formula1.0 ?formula2.0 =
      (formulaEntailsFormula ?formula1.0 ?formula2.0 &
       formulaEntailsFormula ?formula2.0 ?formula1.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CNF.formulaTrueCommutativity",
     "formulaTrue (?f1.0 @ ?f2.0) ?valuation =
      formulaTrue (?f2.0 @ ?f1.0) ?valuation",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("CNF.val2FormRemoveAll",
     "removeAll [?literal] (val2form ?valuation) =
      val2form (removeAll ?literal ?valuation)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CNF.isUnitClauseRemoveAllUnitLiteralIsFalse",
     "isUnitClause ?uClause ?uLiteral ?valuation ==>
      clauseFalse (removeAll ?uLiteral ?uClause) ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("CNF.isLastAssertedCharacterization",
     "isLastAssertedLiteral ?literal (oppositeLiteralList ?literalList)
       ?valuation ==>
      opposite ?literal el ?literalList",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("CNF.consistentPrefix",
     "[| isPrefix ?valuation1.0 ?valuation2.0; consistent ?valuation2.0 |]
      ==> consistent ?valuation1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("CNF.inconsistentPrefix",
     "[| isPrefix ?valuation1.0 ?valuation2.0; inconsistent ?valuation1.0 |]
      ==> inconsistent ?valuation2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF.inconsistentCharacterization",
     "inconsistent ?valuation =
      (EX literal.
          literalTrue literal ?valuation &
          literalFalse literal ?valuation)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.varsRemoveLiteralSuperset",
     "vars ?clause - {var ?literal} <= vars (removeAll ?literal ?clause)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CNF.equivalentFormulaeAppend",
     "equivalentFormulae ?formula1.0 ?formula1' ==>
      equivalentFormulae (?formula1.0 @ ?formula2.0)
       (?formula1' @ ?formula2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.isReasonAppend",
     "isReason ?clause ?literal ?valuation ==>
      isReason ?clause ?literal (?valuation @ ?valuation')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.varsSubsetValuation",
     "set ?valuation1.0 <= set ?valuation2.0 ==>
      vars ?valuation1.0 <= vars ?valuation2.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.tautologyNotFalse",
     "[| clauseTautology ?clause; consistent ?valuation |]
      ==> ~ clauseFalse ?clause ?valuation",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)
               )
           ))),
    ("CNF.clauseTrueAndClauseFalseImpliesInconsistent",
     "[| clauseTrue ?clause ?valuation; clauseFalse ?clause ?valuation |]
      ==> inconsistent ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF.formulaTrueAndFormulaFalseImpliesInconsistent",
     "[| formulaTrue ?formula ?valuation;
         formulaFalse ?formula ?valuation |]
      ==> inconsistent ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("CNF.clauseTautologyCharacterization",
     "clauseTautology ?clause =
      (EX literal. literal el ?clause & opposite literal el ?clause)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.clauseFalseIffAllLiteralsAreFalse",
     "clauseFalse ?clause ?valuation =
      (ALL literal.
          literal el ?clause --> literalFalse literal ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.clauseTrueIffContainsTrueLiteral",
     "clauseTrue ?clause ?valuation =
      (EX literal. literal el ?clause & literalTrue literal ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaEntailsFormulaIffEntailsAllItsClauses",
     "formulaEntailsFormula ?formula ?formula' =
      (ALL clause.
          clause el ?formula' --> formulaEntailsClause ?formula clause)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaFalseIffContainsFalseClause",
     "formulaFalse ?formula ?valuation =
      (EX clause. clause el ?formula & clauseFalse clause ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaTrueIffAllClausesAreTrue",
     "formulaTrue ?formula ?valuation =
      (ALL clause. clause el ?formula --> clauseTrue clause ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.literalElFormulaCharacterization",
     "?literal el ?formula =
      (EX clause. clause el ?formula & ?literal el clause)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaTrueAppend",
     "formulaTrue (?formula1.0 @ ?formula2.0) ?valuation =
      (formulaTrue ?formula1.0 ?valuation &
       formulaTrue ?formula2.0 ?valuation)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("CNF.variableDefinedImpliesLiteralDefined",
     "(var ?literal : vars ?valuation) =
      (literalTrue ?literal ?valuation | literalFalse ?literal ?valuation)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CNF.clauseTrueRemoveFalseLiterals",
     "consistent ?v ==>
      clauseTrue ?c ?v = clauseTrue (removeFalseLiterals ?c ?v) ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("CNF.totalValuationForFormulaDefinesItsValue",
     "CNF.total ?valuation (vars ?formula) ==>
      formulaTrue ?formula ?valuation | formulaFalse ?formula ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CNF.totalValuationForClauseDefinesItsValue",
     "CNF.total ?valuation (vars ?clause) ==>
      clauseTrue ?clause ?valuation | clauseFalse ?clause ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CNF.equivalentFormulaeTransitivity",
     "[| equivalentFormulae ?formula1.0 ?formula2.0;
         equivalentFormulae ?formula2.0 ?formula3.0 |]
      ==> equivalentFormulae ?formula1.0 ?formula3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("CNF.formulaEntailsFormulaThatEntailsClause",
     "[| formulaEntailsFormula ?formula1.0 ?formula2.0;
         formulaEntailsClause ?formula2.0 ?clause |]
      ==> formulaEntailsClause ?formula1.0 ?clause",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("CNF.formulaFalseInEntailedValuationIsUnsatisfiable",
     "[| formulaFalse ?formula ?valuation;
         formulaEntailsValuation ?formula ?valuation |]
      ==> ~ satisfiable ?formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("CNF.clauseEntailsLiteralThenFormulaEntailsLiteral",
     "[| ?clause el ?formula; clauseEntailsLiteral ?clause ?literal |]
      ==> formulaEntailsLiteral ?formula ?literal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CNF.totalSubset",
     "[| ?A <= ?B; CNF.total ?valuation ?B |] ==> CNF.total ?valuation ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("CNF.val2formFormulaTrue",
     "formulaTrue (val2form ?valuation1.0) ?valuation2.0 =
      (ALL literal. literal el ?valuation1.0 --> literal el ?valuation2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("CNF.literalsWithSameVariableAreEqualOrOpposite",
     "(var ?literal1.0 = var ?literal2.0) =
      (?literal1.0 = ?literal2.0 | opposite ?literal1.0 = ?literal2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("CNF.unitBecomesFalse",
     "isUnitClause ?uClause ?uLiteral ?valuation ==>
      clauseFalse ?uClause (?valuation @ [opposite ?uLiteral])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0)))
           ))),
    ("CNF.formulaEntailsLiteralRemoveAllAppend",
     "formulaEntailsLiteral (removeAll ?clause ?formula1.0 @ ?formula2.0)
       ?literal ==>
      formulaEntailsLiteral (?formula1.0 @ ?formula2.0) ?literal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("CNF.tautologyInTotalValuation",
     "[| clauseTautology ?clause; vars ?clause <= vars ?valuation |]
      ==> clauseTrue ?clause ?valuation",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CNF.satisfiableAppendTautology",
     "[| satisfiable ?F; clauseTautology ?c |] ==> satisfiable (?F @ [?c])",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.singleLiteralClausesEntailItsLiteral",
     "[| length ?clause = 1; ?literal el ?clause |]
      ==> clauseEntailsLiteral ?clause ?literal",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CNF.clauseOrderIrrelevant",
     "equivalentFormulae (?F1.0 @ ?F @ ?F' @ ?F2.0)
       (?F1.0 @ ?F' @ ?F @ ?F2.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("CNF.varInFormulaVars",
     "(?variable : vars ?formula) =
      (EX literal. literal el ?formula & var literal = ?variable)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("CNF.varInClauseVars",
     "(?variable : vars ?clause) =
      (EX literal. literal el ?clause & var literal = ?variable)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("CNF.formulaTrueAssociativity",
     "formulaTrue ((?f1.0 @ ?f2.0) @ ?f3.0) ?valuation =
      formulaTrue (?f1.0 @ ?f2.0 @ ?f3.0) ?valuation",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("CNF.val2formOfSingleLiteralValuation",
     "length ?v = 1 ==> val2form ?v = [[hd ?v]]",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 0), template_hole 7)],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1)),
           template_hole 0)))),
    ("CNF.satisfiableEquivalentAppend",
     "[| equivalentFormulae ?formula1.0 ?formula1';
         satisfiable (?formula1.0 @ ?formula2.0) |]
      ==> satisfiable (?formula1' @ ?formula2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.totalClause",
     "[| ?clause el ?formula; CNF.total ?valuation (vars ?formula) |]
      ==> CNF.total ?valuation (vars ?clause)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("CNF.lastAssertedLiteralIsUniq",
     "[| isLastAssertedLiteral ?literal ?literalList ?valuation;
         isLastAssertedLiteral ?literal' ?literalList ?valuation |]
      ==> ?literal = ?literal'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_equation (template_var 3, template_var 0))),
    ("CNF.val2FormAreSingleLiteralClauses",
     "?clause el val2form ?valuation -->
      (EX literal. ?clause = [literal] & literal el ?valuation)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app (template_hole 6, template_var 0))),
           template_app (template_hole 5, t_empty))
         )),
    ("CNF.replaceEquivalentByEquivalent",
     "equivalentFormulae ?formula ?formula' ==>
      equivalentFormulae (?formula1.0 @ ?formula @ ?formula2.0)
       (?formula1.0 @ ?formula' @ ?formula2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("CNF.varsSubsetFormula",
     "ALL c. c el ?F --> c el ?F' ==> vars ?F <= vars ?F'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.satisfiableSubset",
     "ALL clause. clause el ?formula0.0 --> clause el ?formula ==>
      satisfiable ?formula --> satisfiable ?formula0.0",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("CNF.consistentAppendElement",
     "[| consistent ?v; ~ literalFalse ?l ?v |] ==> consistent (?v @ [?l])",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.formulaEntailsClauseRemoveEntailedLiteralOpposites",
     "[| formulaEntailsClause ?F ?clause;
         formulaEntailsValuation ?F ?valuation |]
      ==> formulaEntailsClause ?F
           (list_diff ?clause (oppositeLiteralList ?valuation))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("CNF.formulaEntailsResolvent",
     "[| formulaEntailsClause ?formula ?clause1.0;
         formulaEntailsClause ?formula ?clause2.0 |]
      ==> formulaEntailsClause ?formula
           (resolve ?clause1.0 ?clause2.0 ?literal)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("CNF.extendEquivalentFormulaWithEntailedClause",
     "[| equivalentFormulae ?formula1.0 ?formula2.0;
         formulaEntailsClause ?formula2.0 ?clause |]
      ==> equivalentFormulae ?formula1.0 (?formula2.0 @ [?clause])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.unitLiteralIsEntailed",
     "[| isUnitClause ?uClause ?uLiteral ?valuation;
         formulaEntailsClause ?formula ?uClause |]
      ==> formulaEntailsLiteral (?formula @ val2form ?valuation) ?uLiteral",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_var 2)
           ))),
    ("CNF.isUnitClauseIsReason",
     "[| isUnitClause ?uClause ?uLiteral ?valuation;
         ?uLiteral el ?valuation' |]
      ==> isReason ?uClause ?uLiteral (?valuation @ ?valuation')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.unsatisfiableFormulaWithSingleLiteralClauses",
     "[| ~ satisfiable (?F @ val2form (oppositeLiteralList ?c));
         ~ clauseTautology ?c |]
      ==> formulaEntailsClause ?F ?c",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 0))))
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("CNF.satisfiableAppendTautologicalFormula",
     "[| satisfiable ?F; ALL c. c el ?F' --> clauseTautology c |]
      ==> satisfiable (?F @ ?F')",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CNF.totalValuationForFormulaDefinesAllItsClauses",
     "[| CNF.total ?valuation (vars ?formula); ?clause el ?formula |]
      ==> clauseTrue ?clause ?valuation | clauseFalse ?clause ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("CNF.totalValuationForFormulaDefinesAllItsLiterals",
     "[| CNF.total ?valuation (vars ?formula); ?literal el ?formula |]
      ==> literalTrue ?literal ?valuation |
          literalFalse ?literal ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("CNF.trueOrFalse",
     "[| CNF.total ?valuation (vars ?clause); ?literal el ?clause |]
      ==> literalTrue ?literal ?valuation |
          literalFalse ?literal ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("CNF.formulaEntailsLiteralSubset",
     "[| formulaEntailsLiteral ?formula ?literal;
         ALL c. c el ?formula --> c el ?formula' |]
      ==> formulaEntailsLiteral ?formula' ?literal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 1)
           ))),
    ("CNF.formulaTrueSubset",
     "[| formulaTrue ?formula ?valuation;
         ALL clause. clause el ?formula' --> clause el ?formula |]
      ==> formulaTrue ?formula' ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 1)
           ))),
    ("CNF.lastAssertedLastInValuation",
     "[| ?literal el ?literalList; ~ literalTrue ?literal ?valuation |]
      ==> isLastAssertedLiteral ?literal ?literalList
           (?valuation @ [?literal])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)))
           ))),
    ("CNF.trueFormulaWithSingleLiteralClause",
     "formulaTrue (removeAll [?literal] ?formula)
       (?valuation @ [?literal]) ==>
      formulaTrue ?formula (?valuation @ [?literal])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_hole 1)),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)))
           ))),
    ("CNF.modelExpand",
     "[| model ?valuation ?formula; var ?literal ~: vars ?valuation |]
      ==> model (?valuation @ [?literal]) ?formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_var 1)
           ))),
    ("CNF.unsatisfiableFormulaWithSingleLiteralClause",
     "[| ~ satisfiable ?formula; [?literal] el ?formula |]
      ==> formulaEntailsLiteral (removeAll [?literal] ?formula)
           (opposite ?literal)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("CNF.modelFilterTautologies",
     "[| model ?valuation (filter (%c. ~ clauseTautology c) ?F);
         vars ?F <= vars ?valuation |]
      ==> model ?valuation ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, t_empty), template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 0),
          template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), template_var 0)
           ))),
    ("CNF.isReasonHoldsInPrefix",
     "[| ?literal el ?prefix; isPrefix ?prefix ?valuation;
         isReason ?clause ?literal ?valuation |]
      ==> isReason ?clause ?literal ?prefix",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("CNF.inconsistentAppend",
     "inconsistent (?valuation1.0 @ ?valuation2.0) ==>
      inconsistent ?valuation1.0 |
      inconsistent ?valuation2.0 |
      (EX literal.
          literalTrue literal ?valuation1.0 &
          literalFalse literal ?valuation2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 6, template_var 0)),
               template_app (template_hole 3, t_empty)))
           ))),
    ("CNF.entailsLiteralRelpacePartWithEquivalent",
     "[| equivalentFormulae ?F ?F';
         formulaEntailsLiteral (?F1.0 @ ?F @ ?F2.0) ?l |]
      ==> formulaEntailsLiteral (?F1.0 @ ?F' @ ?F2.0) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))),
             template_var 0)
           ))),
    ("CNF.resolveFalseClauses",
     "[| clauseFalse (removeAll ?literal ?clause1.0) ?valuation;
         clauseFalse (removeAll (opposite ?literal) ?clause2.0)
          ?valuation |]
      ==> clauseFalse (resolve ?clause1.0 ?clause2.0 ?literal) ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 3)),
             template_var 1)
           ))),
    ("CNF.totalRemoveAllSingleLiteralClause",
     "[| var ?literal : vars ?valuation;
         CNF.total ?valuation (vars (removeAll [?literal] ?formula)) |]
      ==> CNF.total ?valuation (vars ?formula)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 2),
                      template_hole 0)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 0))
           ))),
    ("CNF.containsTrueNotUnit",
     "[| ?l el ?c; literalTrue ?l ?v; consistent ?v |]
      ==> \<nexists>ul. isUnitClause ?c ul ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (template_predicate (template_app (template_hole 1, t_empty))))),
    ("CNF.formulaTrueExtendWithEntailedClauses",
     "[| ALL clause.
            clause el ?formula --> formulaEntailsClause ?formula0.0 clause;
         consistent ?valuation |]
      ==> formulaTrue ?formula0.0 ?valuation -->
          formulaTrue ?formula ?valuation",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CNF.isLastAssertedLiteralSubset",
     "[| isLastAssertedLiteral ?l ?c ?M; set ?c' <= set ?c; ?l el ?c' |]
      ==> isLastAssertedLiteral ?l ?c' ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 0),
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("CNF.satisfiedClauseCanBeRemoved",
     "[| equivalentFormulae (?F @ val2form ?v) ?F'; clauseTrue ?c ?v |]
      ==> equivalentFormulae (?F @ val2form ?v) (?F' @ [?c])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.getLastAssertedLiteralCharacterization",
     "[| clauseFalse ?clause ?valuation; ?clause ~= []; uniq ?valuation |]
      ==> isLastAssertedLiteral
           (getLastAssertedLiteral (oppositeLiteralList ?clause) ?valuation)
           (oppositeLiteralList ?clause) ?valuation",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 0)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("CNF.formulaFalseInEntailedOrPureValuationIsUnsatisfiable",
     "[| formulaFalse ?formula ?valuation;
         ALL literal'.
            literal' el ?valuation -->
            formulaEntailsLiteral ?formula literal' |
            ~ opposite literal' el ?formula |]
      ==> ~ satisfiable ?formula",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("CNF.modelAppendTautology",
     "[| model ?valuation ?F; clauseTautology ?c;
         vars ?F Un vars ?c <= vars ?valuation |]
      ==> model ?valuation (?F @ [?c])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.isUnitClauseAppendValuation",
     "[| isUnitClause ?uClause ?uLiteral ?valuation; ?l ~= ?uLiteral;
         ?l ~= opposite ?uLiteral |]
      ==> isUnitClause ?uClause ?uLiteral (?valuation @ [?l])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_var 2)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.falseLiteralsCanBeRemoved",
     "equivalentFormulae (?F1.0 @ val2form ?v @ ?F2.0) ?F' ==>
      equivalentFormulae
       (?F1.0 @ val2form ?v @ [removeFalseLiterals ?c ?v] @ ?F2.0)
       (?F' @ [?c])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 3)),
                    template_var 2))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 0),
                             template_var 3)),
                         template_hole 0)),
                     template_var 2)))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.falseAndDuplicateLiteralsCanBeRemoved",
     "equivalentFormulae (?F1.0 @ val2form ?v @ ?F2.0) ?F' ==>
      equivalentFormulae
       (?F1.0 @ val2form ?v @ [remdups (removeFalseLiterals ?c ?v)] @ ?F2.0)
       (?F' @ [?c])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 3)),
                    template_var 2))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 3)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 0),
                               template_var 3))),
                         template_hole 0)),
                     template_var 2)))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0)))
           ))),
    ("CNF.modelAppendTautologicalFormula",
     "[| model ?valuation ?F; ALL c. c el ?F' --> clauseTautology c;
         vars ?F Un vars ?F' <= vars ?valuation |]
      ==> model ?valuation (?F @ ?F')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_app (template_hole 2, template_var 0)),
          template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.CNFMoreTemplates"
### 0.411s elapsed time, 0.637s cpu time, 0.099s GC time
val it = (): unit
