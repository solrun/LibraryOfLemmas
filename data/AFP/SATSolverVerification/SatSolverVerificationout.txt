Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.SatSolverVerification" via "Draft.CNF" via "Draft.MoreList" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.574s cpu time, 0.060s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.912s cpu time, 0.060s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.366s elapsed time, 1.466s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.449s elapsed time, 1.802s cpu time, 0.125s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.SatSolverVerification" via "Draft.CNF" via "Draft.MoreList")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.963s elapsed time, 3.633s cpu time, 0.827s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 3.951s cpu time, 0.897s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
### theory "HOL-Library.Tree"
### 2.017s elapsed time, 6.339s cpu time, 1.174s GC time
Loading theory "Draft.Templates" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SatSolverVerificationMoreTemplates")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.800s elapsed time, 1.923s cpu time, 0.830s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.333s elapsed time, 7.830s cpu time, 1.966s GC time
Loading theory "Draft.MoreList" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.SatSolverVerification" via "Draft.CNF")
consts
  uniq :: "'a list => bool"
consts
  firstPos :: "'a => 'a list => nat"
consts
  list_diff :: "'a list => 'a list => 'a list"
### theory "Draft.MoreList"
### 0.256s elapsed time, 0.444s cpu time, 0.121s GC time
Loading theory "Draft.CNF" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.SatSolverVerification")
Loading theory "Draft.Trail" (required by "Draft.SatSolverVerificationMoreTemplates" via "Draft.SatSolverVerification")
consts
  elements :: "('a * bool) list => 'a list"
consts
  markedElements :: "('a * bool) list => 'a list"
consts
  prefixBeforeElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToLevel_aux :: "('a * bool) list => nat => nat => ('a * bool) list"
overloading
  literalElClause \<equiv> member :: Literal => Literal list => bool
consts
  levelsCounter_aux :: "('a * bool) list => nat list => nat list"
overloading
  clauseElFormula \<equiv> member ::
    Literal list => Literal list list => bool
overloading
  el_literal \<equiv> member :: Literal => Literal list list => bool
consts
  el_literal :: "Literal => Literal list list => bool"
consts
  var :: "Literal => nat"
consts
  varsClause :: "Literal list => nat set"
consts
  varsFormula :: "Literal list list => nat set"
overloading
  vars_clause \<equiv> vars :: Literal list => nat set
overloading
  vars_formula \<equiv> vars :: Literal list list => nat set
consts
  prefixBeforeLastMarked :: "('a * bool) list => ('a * bool) list"
overloading
  vars_set \<equiv> vars :: Literal set => nat set
### theory "Draft.Trail"
### 0.593s elapsed time, 1.595s cpu time, 0.989s GC time
consts
  opposite :: "Literal => Literal"
consts
  clauseTautology :: "Literal list => bool"
consts
  clauseTrue :: "Literal list => Literal list => bool"
consts
  clauseFalse :: "Literal list => Literal list => bool"
consts
  formulaTrue :: "Literal list list => Literal list => bool"
consts
  formulaFalse :: "Literal list list => Literal list => bool"
consts
  val2form :: "Literal list => Literal list list"
consts
  inconsistent :: "Literal list => bool"
overloading
  modelFormula \<equiv> model :: Literal list => Literal list list => bool
overloading
  modelClause \<equiv> model :: Literal list => Literal list => bool
### theory "Draft.CNF"
### 1.048s elapsed time, 2.139s cpu time, 1.128s GC time
Loading theory "Draft.SatSolverVerification" (required by "Draft.SatSolverVerificationMoreTemplates")
### theory "Draft.SatSolverVerification"
### 0.462s elapsed time, 0.565s cpu time, 0.140s GC time
Loading theory "Draft.SatSolverVerificationMoreTemplates"
val templateLemmas =
   [("SatSolverVerification.finiteVarsFormula", "finite (vars ?F)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SatSolverVerification.finiteVarsClause", "finite (vars ?c)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SatSolverVerification.transLexLessRestricted",
     "trans (lexLessRestricted ?Vbl)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SatSolverVerification.wfLearnLess", "wf (learnLess ?C)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SatSolverVerification.wfMultLess", "wf (multLess ?M)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("SatSolverVerification.irreflexiveLexLess", "(?x, ?x) ~: lexLess",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 0)),
               template_hole 0)
             )
         )),
    ("SatSolverVerification.irreflexiveDecisionLess",
     "(?x, ?x) ~: decisionLess",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 0)),
               template_hole 0)
             )
         )),
    ("SatSolverVerification.wfLexLessRestricted",
     "finite ?Vbl ==> wf (lexLessRestricted ?Vbl)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SatSolverVerification.finiteListDecompose",
     "finite {(a, b). ?l = a @ b}",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))
         )),
    ("SatSolverVerification.lexLessAppend",
     "?b ~= [] ==> (?a @ ?b, ?a) : lexLess",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_var 0)),
             template_hole 0)
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsHoldsForPrefix",
     "[| InvariantImpliedLiterals ?F ?M; isPrefix ?prefix ?M |]
      ==> InvariantImpliedLiterals ?F ?prefix",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("SatSolverVerification.multLessListDiff",
     "(?a, ?b) : multLess ?M ==> (list_diff ?a ?x, ?b) : multLess ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0)),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("SatSolverVerification.transIrreflexiveOrderingIsAcyclic",
     "[| trans ?r; ALL x. (x, x) ~: ?r |] ==> acyclic ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SatSolverVerification.InvariantImpliedLiteralsAfterLearn",
     "[| InvariantImpliedLiterals ?F ?M; ?F' = ?F @ [?C] |]
      ==> InvariantImpliedLiterals ?F' ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 0),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), template_var 2)
           ))),
    ("SatSolverVerification.InvariantReasonClausesHoldsForPrefix",
     "[| InvariantReasonClauses ?F ?M; InvariantUniq ?M; isPrefix ?p ?M |]
      ==> InvariantReasonClauses ?F ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsAndFormulaFalseThenFormulaAndDecisionsAreNotSatisfiable",
     "[| InvariantImpliedLiterals ?F ?M; formulaFalse ?F (elements ?M) |]
      ==> ~ satisfiable (?F @ val2form (decisions ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0))))
               )
           ))),
    ("SatSolverVerification.InvariantCEntailedAfterLearn",
     "[| InvariantCEntailed ?conflictFlag ?F ?C; ?F' = ?F @ [?C] |]
      ==> InvariantCEntailed ?conflictFlag ?F' ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("SatSolverVerification.finiteUniqAndConsistentTrailsWithGivenVariableSet",
     "finite ?V ==>
      finite
       {M. vars (elements M) = ?V &
           uniq (elements M) & consistent (elements M)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("SatSolverVerification.finiteUniqAndConsistentTrailsWithGivenVariableSuperset",
     "finite ?V ==>
      finite
       {M. vars (elements M) <= ?V &
           uniq (elements M) & consistent (elements M)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("SatSolverVerification.finiteListDecomposeSet",
     "finite ?L ==> finite {(a, b). EX l. l : ?L & l = a @ b}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty)))
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsAndElementsEntailLiteralThenDecisionsEntailLiteral",
     "[| InvariantImpliedLiterals ?F ?M;
         formulaEntailsLiteral (?F @ val2form (elements ?M)) ?literal |]
      ==> formulaEntailsLiteral (?F @ val2form (decisions ?M)) ?literal",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 1)))),
             template_var 0)
           ))),
    ("SatSolverVerification.InvariantCFalseAfterDecide",
     "[| InvariantCFalse ?conflictFlag ?M ?C;
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantCFalse ?conflictFlag ?M' ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 1),
             template_var 2)
           ))),
    ("SatSolverVerification.InvariantCFalseAfterUnitPropagate",
     "[| InvariantCFalse ?conflictFlag ?M ?C;
         ?M' = ?M @ [(?uLiteral, False)] |]
      ==> InvariantCFalse ?conflictFlag ?M' ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 1),
             template_var 2)
           ))),
    ("SatSolverVerification.InvariantEquivalentAfterLearn",
     "[| InvariantEquivalent ?F0.0 ?F; formulaEntailsClause ?F ?C;
         ?F' = ?F @ [?C] |]
      ==> InvariantEquivalent ?F0.0 ?F'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3), template_var 0)
           ))),
    ("SatSolverVerification.InvariantReasonClausesAfterLearn",
     "[| InvariantReasonClauses ?F ?M; formulaEntailsClause ?F ?C;
         ?F' = ?F @ [?C] |]
      ==> InvariantReasonClauses ?F' ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0), template_var 2)
           ))),
    ("SatSolverVerification.unsatReportExtensiveExplain",
     "[| InvariantEquivalent ?F0.0 ?F;
         InvariantCEntailed ?conflictFlag ?F ?C; ?conflictFlag; ?C = [] |]
      ==> ~ satisfiable ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate (template_var 1),
        template_equation (template_var 0, template_hole 2)],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 3))
           ))),
    ("SatSolverVerification.multLessResolve",
     "[| opposite ?l el ?C; isReason ?reason ?l (elements ?M) |]
      ==> (resolve ?C ?reason (opposite ?l), ?C) : multLess ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 3),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1),
                     template_app (template_hole 6, template_var 3))),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SatSolverVerification.wellFoundedEmbed",
     "[| ALL x y. (x, y) : ?rel --> (x, y) : ?rel'; wf ?rel' |]
      ==> wf ?rel",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("SatSolverVerification.InvariantReasonClausesAfterDecide",
     "[| InvariantReasonClauses ?F ?M; InvariantUniq ?M;
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantReasonClauses ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3), template_var 1)
           ))),
    ("SatSolverVerification.lexLessBacktrack",
     "[| ?p = prefixBeforeLastDecision ?a; decisions ?a ~= [] |]
      ==> (?p @ [(?x, False)], ?a) : lexLess",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 12, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2)),
                       template_hole 1))),
                 template_var 1)),
             template_hole 0)
           ))),
    ("SatSolverVerification.InvariantConsistentAfterUnitPropagate",
     "[| InvariantConsistent ?M;
         isUnitClause ?uClause ?uLiteral (elements ?M);
         ?M' = ?M @ [(?uLiteral, False)] |]
      ==> InvariantConsistent ?M'",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 8, template_var 0)))),
    ("SatSolverVerification.InvariantUniqAfterUnitPropagate",
     "[| InvariantUniq ?M; isUnitClause ?uClause ?uLiteral (elements ?M);
         ?M' = ?M @ [(?uLiteral, False)] |]
      ==> InvariantUniq ?M'",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 8, template_var 0)))),
    ("SatSolverVerification.InvariantCEntailedAfterExplain",
     "[| InvariantCEntailed ?conflictFlag ?F ?C;
         formulaEntailsClause ?F ?reason;
         ?C' = resolve ?C ?reason (opposite ?l) |]
      ==> InvariantCEntailed ?conflictFlag ?F ?C'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 1)
           ))),
    ("SatSolverVerification.unsatReport",
     "[| InvariantImpliedLiterals ?F ?M; InvariantEquivalent ?F0.0 ?F;
         decisions ?M = []; formulaFalse ?F (elements ?M) |]
      ==> ~ satisfiable ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("SatSolverVerification.InvariantConsistentAfterDecide",
     "[| InvariantConsistent ?M; var ?literal ~: vars (elements ?M);
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantConsistent ?M'",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)))
                )
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 11, template_var 0)))),
    ("SatSolverVerification.InvariantUniqAfterDecide",
     "[| InvariantUniq ?M; var ?literal ~: vars (elements ?M);
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantUniq ?M'",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)))
                )
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 11, template_var 0)))),
    ("SatSolverVerification.InvariantVarsMAfterDecide",
     "[| InvariantVarsM ?M ?F0.0 ?Vbl; var ?literal : ?Vbl;
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantVarsM ?M' ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsAfterDecide",
     "[| InvariantImpliedLiterals ?F ?M; var ?literal ~: vars (elements ?M);
         ?M' = ?M @ [(?literal, True)] |]
      ==> InvariantImpliedLiterals ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 1)),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 2)))
                )
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 3),
             template_var 0)
           ))),
    ("SatSolverVerification.InvariantVarsFAfterLearn",
     "[| InvariantVarsF ?F ?F0.0 ?Vbl; vars ?C <= vars ?F0.0 Un ?Vbl;
         ?F' = ?F @ [?C] |]
      ==> InvariantVarsF ?F' ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3)),
            template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 4),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("SatSolverVerification.lexLessBackjump",
     "[| ?p = prefixToLevel ?level ?a; 0 <= ?level;
         ?level < currentLevel ?a |]
      ==> (?p @ [(?x, False)], ?a) : lexLess",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 12, template_var 2),
            template_var 1)),
        template_inequation (less_equals, template_hole 10, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 2)),
                       template_hole 1))),
                 template_var 1)),
             template_hole 0)
           ))),
    ("SatSolverVerification.InvariantConsistentAfterBackjump",
     "[| InvariantConsistent ?M; isPrefix ?p ?M;
         isUnitClause ?bClause ?bLiteral (elements ?p);
         ?M' = ?p @ [(?bLiteral, False)] |]
      ==> InvariantConsistent ?M'",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 9, template_var 0)))),
    ("SatSolverVerification.InvariantUniqAfterBackjump",
     "[| InvariantUniq ?M; isPrefix ?p ?M;
         isUnitClause ?bClause ?bLiteral (elements ?p);
         ?M' = ?p @ [(?bLiteral, False)] |]
      ==> InvariantUniq ?M'",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 9, template_var 0)))),
    ("SatSolverVerification.lastAssertedLiteralHasHighestElementLevel",
     "[| isLastAssertedLiteral ?literal ?clause (elements ?M);
         uniq (elements ?M) |]
      ==> ALL l'.
             l' el ?clause & l' el elements ?M -->
             elementLevel l' ?M <= elementLevel ?literal ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("SatSolverVerification.InvariantVarsMAfterUnitPropagate",
     "[| InvariantVarsM ?M ?F0.0 ?Vbl; var ?uLiteral : vars ?F0.0 Un ?Vbl;
         ?M' = ?M @ [(?uLiteral, False)] |]
      ==> InvariantVarsM ?M' ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_var 2))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("SatSolverVerification.backjumpLevelZero",
     "[| isLastAssertedLiteral (opposite ?l) (oppositeLiteralList ?C)
          (elements ?M);
         0 < elementLevel (opposite ?l) ?M; set ?C = {?l} |]
      ==> isBackjumpLevel 0 ?l ?C ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                template_app (template_hole 9, template_var 1)),
              template_app (template_hole 8, template_var 0))
            ),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 10, template_var 2)),
            template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_hole 6),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("SatSolverVerification.isBackjumpLevelEnsuresIsUnitInPrefix",
     "[| consistent (elements ?M); uniq (elements ?M);
         clauseFalse ?c (elements ?M); isBackjumpLevel ?level ?l ?c ?M |]
      ==> isUnitClause ?c ?l (elements (prefixToLevel ?level ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0),
                template_var 2),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)))
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsWeakerVariant",
     "ALL l.
         l el elements ?M -->
         formulaEntailsLiteral (?F @ val2form (decisionsTo l ?M)) l ==>
      ALL l.
         l el elements ?M -->
         formulaEntailsLiteral (?F @ val2form (decisions ?M)) l",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("SatSolverVerification.allDecisionsThenUIP",
     "[| uniq (elements ?M);
         ALL l'. l' el ?c --> opposite l' el decisions ?M;
         isLastAssertedLiteral (opposite ?l) (oppositeLiteralList ?c)
          (elements ?M) |]
      ==> isUIP ?l ?c ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 4, template_var 0)),
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 8, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("SatSolverVerification.InvariantVarsMAfterBacktrack",
     "[| InvariantVarsM ?M ?F0.0 ?Vbl; decisions ?M ~= [];
         ?M' =
         prefixBeforeLastDecision ?M @
         [(opposite (lastDecision ?M), False)] |]
      ==> InvariantVarsM ?M' ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 3),
              template_hole 9)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3)),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 3))),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("SatSolverVerification.InvariantConsistentAfterBacktrack",
     "[| InvariantUniq ?M; InvariantConsistent ?M; decisions ?M ~= [];
         ?M' =
         prefixBeforeLastDecision ?M @
         [(opposite (lastDecision ?M), False)] |]
      ==> InvariantConsistent ?M'",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 1))),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 13, template_var 0)))),
    ("SatSolverVerification.InvariantUniqAfterBacktrack",
     "[| InvariantUniq ?M; InvariantConsistent ?M; decisions ?M ~= [];
         ?M' =
         prefixBeforeLastDecision ?M @
         [(opposite (lastDecision ?M), False)] |]
      ==> InvariantUniq ?M'",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 1))),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (template_app (template_hole 14, template_var 0)))),
    ("SatSolverVerification.lastDecisionThenUIP",
     "[| uniq (elements ?M); opposite ?l el decisions ?M;
         clauseFalse ?c (elements ?M);
         isLastAssertedLiteral (opposite ?l) (oppositeLiteralList ?c)
          (elements ?M) |]
      ==> isUIP ?l ?c ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 5, template_var 1)),
                template_app (template_hole 1, template_var 0)),
              template_app (template_hole 7, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsAfterUnitPropagate",
     "[| InvariantImpliedLiterals ?F ?M; formulaEntailsClause ?F ?uClause;
         isUnitClause ?uClause ?uLiteral (elements ?M);
         ?M' = ?M @ [(?uLiteral, False)] |]
      ==> InvariantImpliedLiterals ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 4), template_var 0)
           ))),
    ("SatSolverVerification.InvariantReasonClausesAfterUnitPropagate",
     "[| InvariantReasonClauses ?F ?M; formulaEntailsClause ?F ?uClause;
         isUnitClause ?uClause ?uLiteral (elements ?M);
         ?M' = ?M @ [(?uLiteral, False)] |]
      ==> InvariantReasonClauses ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 4), template_var 0)
           ))),
    ("SatSolverVerification.multLessRemdups",
     "(?a, ?b) : multLess ?M ==>
      (remdups ?a, remdups ?b) : multLess ?M &
      (remdups ?a, ?b) : multLess ?M & (?a, remdups ?b) : multLess ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 0, template_var 2)),
                     template_app (template_hole 0, template_var 1))),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 0, template_var 2)),
                       template_var 1)),
                   template_app (template_hole 2, template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 0, template_var 1))),
                 template_app (template_hole 2, template_var 0))))
           ))),
    ("SatSolverVerification.isUIPExistsBackjumpLevel",
     "[| clauseFalse ?c (elements ?M); isUIP ?l ?c ?M; uniq (elements ?M);
         0 < elementLevel (opposite ?l) ?M |]
      ==> EX level. isBackjumpLevel level ?l ?c ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 8, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SatSolverVerification.InvariantCFalseAfterExplain",
     "[| InvariantCFalse ?conflictFlag ?M ?C; opposite ?literal el ?C;
         isReason ?reason ?literal (elements ?M);
         ?C' = resolve ?C ?reason (opposite ?literal) |]
      ==> InvariantCFalse ?conflictFlag ?M ?C'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2),
              template_app (template_hole 2, template_var 4))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1),
            template_app (template_hole 4, template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 5),
               template_var 4),
             template_var 0)
           ))),
    ("SatSolverVerification.allDecisionsThenExistsBackjumpLevel",
     "[| uniq (elements ?M);
         ALL l'. l' el ?c --> opposite l' el decisions ?M;
         isLastAssertedLiteral (opposite ?l) (oppositeLiteralList ?c)
          (elements ?M) |]
      ==> EX level. isBackjumpLevel level ?l ?c ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 9, template_var 2))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SatSolverVerification.InvariantReasonClausesHoldsForPrefixElements",
     "[| InvariantReasonClauses ?F ?p; isPrefix ?p ?M;
         ?literal el elements ?p; ~ ?literal el decisions ?M |]
      ==> EX clause.
             formulaEntailsClause ?F clause &
             isReason clause ?literal (elements ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("SatSolverVerification.InvariantVarsMAfterBackjump",
     "[| InvariantVarsM ?M ?F0.0 ?Vbl; isPrefix ?p ?M;
         var ?bLiteral : vars ?F0.0 Un ?Vbl;
         ?M' = ?p @ [(?bLiteral, False)] |]
      ==> InvariantVarsM ?M' ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 4)),
                template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_var 0),
               template_var 4),
             template_var 3)
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsHoldsForUnitLiteral",
     "[| InvariantImpliedLiterals ?F ?M; formulaEntailsClause ?F ?uClause;
         isUnitClause ?uClause ?uLiteral (elements ?M);
         ?M' = ?M @ [(?uLiteral, False)] |]
      ==> formulaEntailsLiteral (?F @ val2form (decisionsTo ?uLiteral ?M'))
           ?uLiteral",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_app (template_hole 10, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 8, template_var 3),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_hole 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))),
             template_var 1)
           ))),
    ("SatSolverVerification.InvariantImpliedLiteralsAfterBackjump",
     "[| InvariantImpliedLiterals ?F ?M; isPrefix ?p ?M;
         formulaEntailsClause ?F ?bClause;
         isUnitClause ?bClause ?bLiteral (elements ?p);
         ?M' = ?p @ [(?bLiteral, False)] |]
      ==> InvariantImpliedLiterals ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_app (template_hole 6, template_var 3))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 5),
             template_var 0)
           ))),
    ("SatSolverVerification.invariantCEntailedAfterConflict",
     "[| ?conflictFlag = False; formulaFalse ?F (elements ?M);
         ?clause el ?F; clauseFalse ?clause (elements ?M); ?C' = ?clause;
         ?conflictFlag' = True |]
      ==> InvariantCEntailed ?conflictFlag' ?F ?C'",
     template_implication
      ([template_equation (template_var 5, template_hole 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 5, template_var 3))
            ),
        template_equation (template_var 1, template_var 2),
        template_equation (template_var 0, template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 1)
           ))),
    ("SatSolverVerification.invariantCFalseAfterConflict",
     "[| ?conflictFlag = False; formulaFalse ?F (elements ?M);
         ?clause el ?F; clauseFalse ?clause (elements ?M); ?C' = ?clause;
         ?conflictFlag' = True |]
      ==> InvariantCFalse ?conflictFlag' ?M ?C'",
     template_implication
      ([template_equation (template_var 5, template_hole 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 5, template_var 3))
            ),
        template_equation (template_var 1, template_var 2),
        template_equation (template_var 0, template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1)
           ))),
    ("SatSolverVerification.backjumpLevelLastLast",
     "[| isUIP ?l ?C ?M; uniq (elements ?M); clauseFalse ?C (elements ?M);
         isLastAssertedLiteral (opposite ?ll)
          (removeAll (opposite ?l) (oppositeLiteralList ?C))
          (elements ?M) |]
      ==> isBackjumpLevel (elementLevel (opposite ?ll) ?M) ?l ?C ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 4, template_var 3)),
                  template_app (template_hole 2, template_var 2))),
              template_app (template_hole 7, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 4, template_var 0)),
                     template_var 1)),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("SatSolverVerification.isMinimalBackjumpLevelEnsuresIsNotUnitBeforePrefix",
     "[| consistent (elements ?M); uniq (elements ?M);
         clauseFalse ?c (elements ?M);
         isMinimalBackjumpLevel ?level ?l ?c ?M; ?level' < ?level |]
      ==> \<nexists>l'.
             isUnitClause ?c l' (elements (prefixToLevel ?level' ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 4)
            ),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("SatSolverVerification.satReport",
     "[| vars ?F0.0 <= ?Vbl; InvariantVarsF ?F ?F0.0 ?Vbl;
         InvariantConsistent ?M; InvariantEquivalent ?F0.0 ?F;
         ~ formulaFalse ?F (elements ?M); ?Vbl <= vars (elements ?M) |]
      ==> model (elements ?M) ?F0.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 1,
            template_app (template_hole 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_var 3)
           ))),
    ("SatSolverVerification.explainApplicableToEachNonDecision",
     "[| InvariantReasonClauses ?F ?M; InvariantCFalse ?conflictFlag ?M ?C;
         ?conflictFlag = True; opposite ?literal el ?C;
         ~ ?literal el decisions ?M |]
      ==> EX clause.
             formulaEntailsClause ?F clause &
             isReason clause ?literal (elements ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 3),
              template_var 1)
            ),
        template_equation (template_var 2, template_hole 9),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app (template_hole 5, template_var 3))
                )
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("SatSolverVerification.InvariantReasonClausesAfterBackjump",
     "[| InvariantReasonClauses ?F ?M; InvariantUniq ?M; isPrefix ?p ?M;
         isUnitClause ?bClause ?bLiteral (elements ?p);
         formulaEntailsClause ?F ?bClause;
         ?M' = ?p @ [(?bLiteral, False)] |]
      ==> InvariantReasonClauses ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 5),
             template_var 0)
           ))),
    ("SatSolverVerification.isMinimalBackjumpLevelCharacterization",
     "[| isUIP ?l ?c ?M; clauseFalse ?c (elements ?M); uniq (elements ?M) |]
      ==> isMinimalBackjumpLevel ?level ?l ?c ?M =
          (isBackjumpLevel ?level ?l ?c ?M &
           (ALL level'<?level. ~ isBackjumpLevel level' ?l ?c ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 0),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_app (template_hole 3, t_empty))))),
    ("SatSolverVerification.InvariantImpliedLiteralsAfterBacktrack",
     "[| InvariantImpliedLiterals ?F ?M; InvariantUniq ?M;
         InvariantConsistent ?M; decisions ?M ~= [];
         formulaFalse ?F (elements ?M);
         ?M' =
         prefixBeforeLastDecision ?M @
         [(opposite (lastDecision ?M), False)] |]
      ==> InvariantImpliedLiterals ?F ?M'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 12, template_var 1),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 1))),
                  template_hole 1)),
              template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 17, template_var 2),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.SatSolverVerificationMoreTemplates"
### 0.405s elapsed time, 0.645s cpu time, 0.143s GC time
val it = (): unit
