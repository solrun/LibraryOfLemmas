Loading theory "HOL-Library.Cancellation" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "Draft.SatSolverVerification" via "Draft.CNF" via "Draft.MoreList" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "HOL-Library.Code_Target_Numeral")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### theory "HOL-Library.Code_Abstract_Nat"
### 0.059s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.553s cpu time, 0.040s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Code_Target_Int"
### 0.166s elapsed time, 0.682s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Library.Code_Target_Nat"
### 0.138s elapsed time, 0.536s cpu time, 0.040s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Code_Target_Numeral"
### 0.106s elapsed time, 0.422s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.822s cpu time, 0.069s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.429s elapsed time, 1.714s cpu time, 0.108s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "Draft.SatSolverVerification" via "Draft.CNF" via "Draft.MoreList")
### theory "HOL-Library.Nat_Bijection"
### 0.295s elapsed time, 1.168s cpu time, 0.069s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.992s elapsed time, 3.736s cpu time, 0.831s GC time
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.097s elapsed time, 4.013s cpu time, 0.916s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.211s elapsed time, 6.868s cpu time, 1.899s GC time
Loading theory "Draft.Templates" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.168s cpu time, 0.039s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConflictAnalysisMoreTemplates")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.554s elapsed time, 1.150s cpu time, 0.103s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.333s elapsed time, 8.214s cpu time, 1.918s GC time
Loading theory "Draft.MoreList" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "Draft.SatSolverVerification" via "Draft.CNF")
consts
  uniq :: "'a list => bool"
consts
  firstPos :: "'a => 'a list => nat"
consts
  list_diff :: "'a list => 'a list => 'a list"
### theory "Draft.MoreList"
### 0.212s elapsed time, 0.340s cpu time, 0.095s GC time
Loading theory "Draft.CNF" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "Draft.SatSolverVerification")
Loading theory "Draft.Trail" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode" via "Draft.SatSolverVerification")
consts
  elements :: "('a * bool) list => 'a list"
consts
  markedElements :: "('a * bool) list => 'a list"
consts
  prefixBeforeElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToLevel_aux :: "('a * bool) list => nat => nat => ('a * bool) list"
overloading
  literalElClause \<equiv> member :: Literal => Literal list => bool
overloading
  clauseElFormula \<equiv> member ::
    Literal list => Literal list list => bool
consts
  levelsCounter_aux :: "('a * bool) list => nat list => nat list"
overloading
  el_literal \<equiv> member :: Literal => Literal list list => bool
consts
  el_literal :: "Literal => Literal list list => bool"
consts
  var :: "Literal => nat"
consts
  varsClause :: "Literal list => nat set"
consts
  varsFormula :: "Literal list list => nat set"
overloading
  vars_clause \<equiv> vars :: Literal list => nat set
overloading
  vars_formula \<equiv> vars :: Literal list list => nat set
consts
  prefixBeforeLastMarked :: "('a * bool) list => ('a * bool) list"
overloading
  vars_set \<equiv> vars :: Literal set => nat set
### theory "Draft.Trail"
### 0.594s elapsed time, 1.602s cpu time, 0.972s GC time
consts
  opposite :: "Literal => Literal"
consts
  clauseTautology :: "Literal list => bool"
consts
  clauseTrue :: "Literal list => Literal list => bool"
consts
  clauseFalse :: "Literal list => Literal list => bool"
consts
  formulaTrue :: "Literal list list => Literal list => bool"
consts
  formulaFalse :: "Literal list list => Literal list => bool"
consts
  val2form :: "Literal list => Literal list list"
consts
  inconsistent :: "Literal list => bool"
overloading
  modelFormula \<equiv> model :: Literal list => Literal list list => bool
overloading
  modelClause \<equiv> model :: Literal list => Literal list => bool
### theory "Draft.CNF"
### 1.031s elapsed time, 2.126s cpu time, 1.098s GC time
Loading theory "Draft.SatSolverVerification" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral" via "Draft.SatSolverCode")
### theory "Draft.SatSolverVerification"
### 0.509s elapsed time, 0.742s cpu time, 0.313s GC time
Loading theory "Draft.SatSolverCode" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis" via "Draft.AssertLiteral")
consts
  getNonWatchedUnfalsifiedLiteral ::
    "Literal list
     => Literal => Literal => (Literal * bool) list => Literal option"
consts
  notifyWatches_loop :: "Literal => nat list => nat list => State => State"
Proofs for inductive predicate(s) "exhaustiveUnitPropagate_dom"
  Proving monotonicity ...
consts
  initialize :: "Literal list list => State => State"
Proofs for inductive predicate(s) "applyExplainUIP_dom"
  Proving monotonicity ...
Proofs for inductive predicate(s) "solve_loop_dom"
  Proving monotonicity ...
### theory "Draft.SatSolverCode"
### 1.120s elapsed time, 1.242s cpu time, 0.159s GC time
Loading theory "Draft.AssertLiteral" (required by "Draft.ConflictAnalysisMoreTemplates" via "Draft.ConflictAnalysis")
### theory "Draft.AssertLiteral"
### 0.966s elapsed time, 2.119s cpu time, 1.577s GC time
Loading theory "Draft.ConflictAnalysis" (required by "Draft.ConflictAnalysisMoreTemplates")
### theory "Draft.ConflictAnalysis"
### 0.518s elapsed time, 0.711s cpu time, 0.260s GC time
Loading theory "Draft.ConflictAnalysisMoreTemplates"
val templateLemmas =
   [("ConflictAnalysis.InvariantUniqQAfterApplyLearn",
     "InvariantUniqQ (getQ ?state) ==>
      let state' = applyLearn ?state in InvariantUniqQ (getQ state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.oneElementSetCharacterization",
     "(set ?l = {?a}) = (remdups ?l = [?a])",
     template_bimplication
      (template_equation
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("ConflictAnalysis.uniqOneElementCharacterization",
     "uniq ?l ==> (?l = [?a]) = (set ?l = {?a})",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4)),
         template_equation
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("ConflictAnalysis.InvariantUniqQAfterApplyBackjump",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantUniqQ (getQ state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConflictFlagCharacterizationAfterApplyLearn",
     "[| getConflictFlag ?state;
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantConflictFlagCharacterization (getConflictFlag state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.applyBackjumpPreservedVariables",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> let state' = applyBackjump ?state
          in getSATFlag state' = getSATFlag ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantGetReasonIsReasonAfterApplyLearn",
     "InvariantGetReasonIsReason (getReason ?state) (getF ?state)
       (getM ?state) (set (getQ ?state)) ==>
      let state' = applyLearn ?state
      in InvariantGetReasonIsReason (getReason state') (getF state')
          (getM state') (set (getQ state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.clauseFalseInPrefixToLastAssertedLiteral",
     "[| isLastAssertedLiteral ?l (oppositeLiteralList ?c) (elements ?M);
         clauseFalse ?c (elements ?M); uniq (elements ?M) |]
      ==> clauseFalse ?c
           (elements (prefixToLevel (elementLevel ?l ?M) ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 0)))
           ))),
    ("ConflictAnalysis.InvariantConflictClauseCharacterizationAfterApplyLearn",
     "[| getConflictFlag ?state;
         InvariantConflictClauseCharacterization (getConflictFlag ?state)
          (getConflictClause ?state) (getF ?state) (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantConflictClauseCharacterization
              (getConflictFlag state') (getConflictClause state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 4, template_var 0)),
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantQCharacterizationAfterApplyLearn",
     "[| getConflictFlag ?state;
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantQCharacterization (getConflictFlag state')
              (getQ state') (getF state') (getM state')",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 0)),
                  template_app (template_hole 4, template_var 0)),
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantEquivalentZLAfterApplyLearn",
     "[| InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         getConflictFlag ?state |]
      ==> let state' = applyLearn ?state
          in InvariantEquivalentZL (getF state') (getM state') ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantVarsFAfterApplyLearn",
     "[| InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         getConflictFlag ?state; InvariantVarsF (getF ?state) ?F0.0 ?Vbl;
         InvariantVarsM (getM ?state) ?F0.0 ?Vbl |]
      ==> let state' = applyLearn ?state
          in InvariantVarsF (getF state') ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 6, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             t_empty)
           ))),
    ("ConflictAnalysis.CnEqual1IffUIP",
     "[| InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state) |]
      ==> (getCn ?state = 1) =
          isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 0)),
                template_app (template_hole 9, template_var 0)),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 0)),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 9, template_var 0)),
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_hole 10, template_var 0))),
             template_app (template_hole 9, template_var 0)),
           template_app (template_hole 8, template_var 0))))),
    ("ConflictAnalysis.InvariantConflictClauseCharacterizationAfterApplyBackjump",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConflictClauseCharacterization
              (getConflictFlag state') (getConflictClause state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 0)),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 12, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 12, template_var 0)),
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 11, template_var 0)),
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantNoDecisionsWhenConflictEnsuresCurrentLevelCl",
     "[| InvariantNoDecisionsWhenConflict ?F ?M (currentLevel ?M);
         ?clause el ?F; clauseFalse ?clause (elements ?M);
         uniq (elements ?M); 0 < currentLevel ?M |]
      ==> ?clause ~= [] &
          (let Cl = getLastAssertedLiteral (oppositeLiteralList ?clause)
                     (elements ?M)
           in InvariantClCurrentLevel Cl ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 2),
                template_var 1),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 14, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_app (template_hole 11, template_var 1))),
               t_empty))
           ))),
    ("ConflictAnalysis.InvariantCllCharacterizationAfterApplyLearn",
     "[| InvariantUniq (getM ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state); getConflictFlag ?state |]
      ==> let state' = applyLearn ?state
          in InvariantCllCharacterization (getCl state') (getCll state')
              (getC state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 0)),
                template_app (template_hole 7, template_var 0)),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 10, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantWatchCharacterizationInBackjumpPrefix",
     "InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
       (getWatch2 ?state) (getM ?state) ==>
      let l = getCl ?state; level = getBackjumpLevel ?state;
          prefix = prefixToLevel level (getM ?state);
          state' = ?state
            (| getConflictFlag := False, getQ := [], getM := prefix |)
      in InvariantWatchCharacterization (getF state') (getWatch1 state')
          (getWatch2 state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 0)),
                  template_app (template_hole 14, template_var 0)),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 12, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.applyLearnPreservedVariables",
     "let state' = applyLearn ?state
      in getM state' = getM ?state &
         getQ state' = getQ ?state &
         getC state' = getC ?state &
         getCl state' = getCl ?state &
         getConflictFlag state' = getConflictFlag ?state &
         getConflictClause state' = getConflictClause ?state &
         getF state' =
         (if getC ?state = [opposite (getCl ?state)] then getF ?state
          else getF ?state @ [getC ?state])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 22,
             template_app (template_hole 21, template_var 0)),
           t_empty)
         )),
    ("ConflictAnalysis.ApplyExplainUIPPreservedVariables",
     "applyExplainUIP_dom ?state ==>
      let state' = applyExplainUIP ?state
      in getM state' = getM ?state &
         getF state' = getF ?state &
         getQ state' = getQ ?state &
         getWatch1 state' = getWatch1 ?state &
         getWatch2 state' = getWatch2 ?state &
         getWatchList state' = getWatchList ?state &
         getConflictFlag state' = getConflictFlag ?state &
         getConflictClause state' = getConflictClause ?state &
         getSATFlag state' = getSATFlag ?state &
         getReason state' = getReason ?state",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app (template_hole 20, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.isMinimalBackjumpLevelGetBackjumpLevel",
     "[| InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state); getConflictFlag ?state;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> isMinimalBackjumpLevel (getBackjumpLevel ?state)
           (opposite (getCl ?state)) (getC ?state) (getM ?state)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 0)),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 11, template_var 0)),
                  template_app (template_hole 9, template_var 0)),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 14, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 11, template_var 0))),
                template_app (template_hole 13, template_var 0)),
              template_app (template_hole 16, template_var 0))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 2,
            template_app (template_hole 16, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 11, template_var 0))),
               template_app (template_hole 13, template_var 0)),
             template_app (template_hole 16, template_var 0))
           ))),
    ("ConflictAnalysis.ApplyExplainUIPTermination",
     "[| InvariantUniq (getM ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         getConflictFlag ?state; 0 < currentLevel (getM ?state) |]
      ==> applyExplainUIP_dom ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 18,
                    template_app (template_hole 17, template_var 1)),
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_than, template_hole 2,
          template_app
           (template_hole 1,
            template_app (template_hole 19, template_var 1)))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("ConflictAnalysis.InvariantsClAfterApplyConflict",
     "[| getConflictFlag ?state; InvariantUniq (getM ?state);
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         InvariantConflictClauseCharacterization (getConflictFlag ?state)
          (getConflictClause ?state) (getF ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyConflict ?state
          in InvariantCFalse (getConflictFlag state') (getM state')
              (getC state') &
             InvariantCEntailed (getConflictFlag state') ?F0.0
              (getC state') &
             InvariantClCharacterization (getCl state') (getC state')
              (getM state') &
             InvariantClCurrentLevel (getCl state') (getM state') &
             InvariantCnCharacterization (getCn state') (getC state')
              (getM state') &
             InvariantUniqC (getC state')",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app
               (template_hole 17,
                template_app (template_hole 20, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 18, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 22, template_var 1)),
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 18, template_var 1)),
              template_app (template_hole 20, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 12,
          template_app
           (template_hole 17,
            template_app (template_hole 20, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.isUIPApplyExplainUIP",
     "[| applyExplainUIP_dom ?state; InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         getConflictFlag ?state; 0 < currentLevel (getM ?state) |]
      ==> let state' = applyExplainUIP ?state
          in isUIP (opposite (getCl state')) (getC state') (getM state')",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 20, template_var 1)),
                template_var 0),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 16, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 22, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConsistentAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConsistent (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 16, template_var 1)),
                template_var 0),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 10, template_var 1)),
                  template_app (template_hole 8, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 24, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 10, template_var 1))),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantUniqAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state in InvariantUniq (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 16, template_var 1)),
                template_var 0),
              template_app (template_hole 14, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 10, template_var 1)),
                  template_app (template_hole 8, template_var 1)),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 24, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 10, template_var 1))),
                template_app (template_hole 14, template_var 1)),
              template_app (template_hole 24, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantEquivalentZLAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state; InvariantUniqC (getC ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantEquivalentZL (getF state') (getM state') ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 22, template_var 1)),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 17, template_var 1)),
                template_var 0),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 22, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 11, template_var 1))),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 2,
            template_app (template_hole 25, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantNoDecisionsWhenConflictNorUnitAfterApplyLearn",
     "[| InvariantUniq (getM ?state); InvariantConsistent (getM ?state);
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenUnit (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state); getConflictFlag ?state;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantNoDecisionsWhenConflict (getF ?state) (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenUnit (getF ?state) (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenConflict [getC ?state] (getM state')
              (getBackjumpLevel state') &
             InvariantNoDecisionsWhenUnit [getC ?state] (getM state')
              (getBackjumpLevel state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 19, template_var 0)),
                template_app (template_hole 22, template_var 0)),
              template_app
               (template_hole 18,
                template_app (template_hole 22, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 19, template_var 0)),
                template_app (template_hole 22, template_var 0)),
              template_app
               (template_hole 18,
                template_app (template_hole 22, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 0)),
                template_app (template_hole 22, template_var 0)),
              template_app (template_hole 14, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 0)),
                template_app (template_hole 14, template_var 0)),
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 0)),
              template_app (template_hole 22, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 14, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 15, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 12, template_var 0))),
                template_app (template_hole 14, template_var 0)),
              template_app (template_hole 22, template_var 0))
            ),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_hole 18,
            template_app (template_hole 22, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.WatchInvariantsAfterApplyLearn",
     "[| InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state) |]
      ==> let state' = applyLearn ?state
          in InvariantWatchesEl (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchesDiffer (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchCharacterization (getF state') (getWatch1 state')
              (getWatch2 state') (getM state') &
             InvariantWatchListsContainOnlyClausesFromF
              (getWatchList state') (getF state') &
             InvariantWatchListsUniq (getWatchList state') &
             InvariantWatchListsCharacterization (getWatchList state')
              (getWatch1 state') (getWatch2 state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 17, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 17, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 17, template_var 0)),
                  template_app (template_hole 16, template_var 0)),
                template_app (template_hole 15, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              template_app (template_hole 17, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 11, template_var 0)),
                template_app (template_hole 16, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0)),
                template_app (template_hole 6, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 5, template_var 0)),
                template_app (template_hole 19, template_var 0)),
              template_app (template_hole 6, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsClAfterApplyExplain",
     "[| InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         getCn ?state ~= 1; getConflictFlag ?state;
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyExplain (getCl ?state) ?state
          in InvariantCFalse (getConflictFlag state') (getM state')
              (getC state') &
             InvariantCEntailed (getConflictFlag state') ?F0.0
              (getC state') &
             InvariantClCharacterization (getCl state') (getC state')
              (getM state') &
             InvariantClCurrentLevel (getCl state') (getM state') &
             InvariantCnCharacterization (getCn state') (getC state')
              (getM state') &
             InvariantUniqC (getC state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 23, template_var 1)),
                template_var 0),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 1)),
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 16, template_var 1),
              template_hole 7)
            ),
        template_predicate
         (template_app (template_hole 23, template_var 1)),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_hole 4,
            template_app (template_hole 25, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 20, template_var 1)),
                 template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsClAfterExplainUIP",
     "[| applyExplainUIP_dom ?state; InvariantUniq (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCnCharacterization (getCn ?state) (getC ?state)
          (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0.0;
         getConflictFlag ?state; 0 < currentLevel (getM ?state) |]
      ==> let state' = applyExplainUIP ?state
          in InvariantCFalse (getConflictFlag state') (getM state')
              (getC state') &
             InvariantCEntailed (getConflictFlag state') ?F0.0
              (getC state') &
             InvariantClCharacterization (getCl state') (getC state')
              (getM state') &
             InvariantCnCharacterization (getCn state') (getC state')
              (getM state') &
             InvariantClCurrentLevel (getCl state') (getM state') &
             InvariantUniqC (getC state')",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 20, template_var 1)),
                template_var 0),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 16, template_var 1)),
              template_app (template_hole 22, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 1)),
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 22, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 3,
            template_app (template_hole 22, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsNoDecisionsWhenConflictNorUnitAfterApplyBackjump_1",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantUniqC (getC ?state);
         getC ?state = [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenUnit (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         getConflictFlag ?state;
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantNoDecisionsWhenConflict (getF state') (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenUnit (getF state') (getM state')
              (currentLevel (getM state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 31,
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 29,
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 27, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 1)),
              template_app (template_hole 27, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 1))
            ),
        template_equation
         (template_app (template_hole 21, template_var 1),
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1))),
            template_hole 16)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 27, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app
               (template_hole 14,
                template_app (template_hole 30, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 27, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app
               (template_hole 14,
                template_app (template_hole 30, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 11, template_var 1)),
                template_var 0),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 17, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 18,
                    template_app (template_hole 17, template_var 1))),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 14,
            template_app (template_hole 30, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.applyBackjumpEffect",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let l = getCl ?state; bClause = getC ?state;
              bLiteral = opposite l; level = getBackjumpLevel ?state;
              prefix = prefixToLevel level (getM ?state);
              state'' = applyBackjump ?state
          in (formulaEntailsClause ?F0.0 bClause &
              isUnitClause bClause bLiteral (elements prefix) &
              getM state'' = prefix @ [(bLiteral, False)]) &
             getF state'' = getF ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 42,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 40,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 39,
                  template_app (template_hole 38, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 35,
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 33, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 33, template_var 1)),
                template_app (template_hole 41, template_var 1)),
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 30,
                  template_app (template_hole 33, template_var 1)),
                template_var 0),
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 27,
                    template_app (template_hole 28, template_var 1)),
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_hole 22,
                    template_app (template_hole 28, template_var 1))),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 20,
          template_app
           (template_hole 19,
            template_app (template_hole 41, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app (template_hole 28, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantGetReasonIsReasonAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         getConflictFlag ?state; InvariantUniqC (getC ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) (set (getQ ?state));
         0 < getBackjumpLevel ?state -->
         getF ?state ~= [] & last (getF ?state) = getC ?state |]
      ==> let state' = applyBackjump ?state
          in InvariantGetReasonIsReason (getReason state') (getF state')
              (getM state') (set (getQ state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 39,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 36,
                  template_app (template_hole 35, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 35, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 30,
              template_app (template_hole 31, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 31, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 28, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 27,
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 25,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 38, template_var 1)),
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 28, template_var 1)),
                template_var 0),
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 22, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 21,
                    template_app (template_hole 22, template_var 1)),
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 22, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 17,
                    template_app (template_hole 22, template_var 1))),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 15,
          template_app
           (template_hole 14,
            template_app (template_hole 38, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 1)),
                  template_app (template_hole 35, template_var 1)),
                template_app (template_hole 38, template_var 1)),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_app (template_hole 8, template_var 1))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 35, template_var 1)),
                      template_hole 4))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 35, template_var 1))),
                  template_app (template_hole 26, template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConflictFlagCharacterizationAfterApplyBackjump_1",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state = [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConflictFlagCharacterization (getConflictFlag state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 34,
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 32,
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 28,
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 30, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 26, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 29, template_var 1)),
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 1))
            ),
        template_equation
         (template_app (template_hole 20, template_var 1),
          template_app
           (template_app
             (template_hole 18,
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 1))),
            template_hole 15)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app
               (template_hole 13,
                template_app (template_hole 33, template_var 1)))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 16, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 16, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 13,
            template_app (template_hole 33, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_var 1))),
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 33, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.WatchInvariantsAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         getConflictFlag ?state; InvariantUniqC (getC ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantWatchesEl (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchesDiffer (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchCharacterization (getF state') (getWatch1 state')
              (getWatch2 state') (getM state') &
             InvariantWatchListsContainOnlyClausesFromF
              (getWatchList state') (getF state') &
             InvariantWatchListsUniq (getWatchList state') &
             InvariantWatchListsCharacterization (getWatchList state')
              (getWatch1 state') (getWatch2 state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 30,
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 28,
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 26, template_var 1)),
                  template_app (template_hole 25, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app (template_hole 20, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 17, template_var 1)),
                template_var 0),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 11, template_var 1)),
                  template_app (template_hole 9, template_var 1)),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 11, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 11, template_var 1))),
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 29, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 3,
            template_app (template_hole 29, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantConflictFlagCharacterizationAfterApplyBackjump_2",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state ~= [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (butlast (getF ?state))
          (getM ?state) (currentLevel (getM ?state));
         getF ?state ~= []; last (getF ?state) = getC ?state;
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantConflictFlagCharacterization (getConflictFlag state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 39,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 36,
                template_app (template_hole 35, template_var 1)),
              template_app (template_hole 34, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 33,
              template_app (template_hole 35, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 35, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 31, template_var 1)),
              template_app (template_hole 30, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 27,
                    template_app (template_hole 34, template_var 1)),
                  template_app (template_hole 31, template_var 1)),
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 25, template_var 1),
              template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_hole 21,
                    template_app (template_hole 20, template_var 1))),
                template_hole 19))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 17,
                    template_app (template_hole 34, template_var 1))),
                template_app (template_hole 38, template_var 1)),
              template_app
               (template_hole 16,
                template_app (template_hole 38, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 34, template_var 1),
              template_hole 14)
            ),
        template_equation
         (template_app
           (template_hole 13,
            template_app (template_hole 34, template_var 1)),
          template_app (template_hole 25, template_var 1)),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 38, template_var 1)),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 25, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 20, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 20, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 20, template_var 1)),
              template_app (template_hole 38, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 16,
            template_app (template_hole 38, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 21,
                    template_app (template_hole 20, template_var 1))),
                template_app (template_hole 25, template_var 1)),
              template_app (template_hole 38, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsNoDecisionsWhenConflictNorUnitAfterApplyBackjump_2",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantUniqC (getC ?state);
         getC ?state ~= [opposite (getCl ?state)];
         InvariantNoDecisionsWhenConflict (butlast (getF ?state))
          (getM ?state) (currentLevel (getM ?state));
         InvariantNoDecisionsWhenUnit (butlast (getF ?state)) (getM ?state)
          (currentLevel (getM ?state));
         getF ?state ~= []; last (getF ?state) = getC ?state;
         InvariantNoDecisionsWhenConflict [getC ?state] (getM ?state)
          (getBackjumpLevel ?state);
         InvariantNoDecisionsWhenUnit [getC ?state] (getM ?state)
          (getBackjumpLevel ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state) |]
      ==> let state' = applyBackjump ?state
          in InvariantNoDecisionsWhenConflict (getF state') (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenUnit (getF state') (getM state')
              (currentLevel (getM state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 38,
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 36,
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 35,
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 32, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app (template_hole 30, template_var 1)),
              template_app (template_hole 34, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 29,
              template_app (template_hole 28, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 28, template_var 1),
              template_app
               (template_app
                 (template_hole 25,
                  template_app
                   (template_hole 24,
                    template_app (template_hole 23, template_var 1))),
                template_hole 22))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 34, template_var 1))),
                template_app (template_hole 37, template_var 1)),
              template_app
               (template_hole 19,
                template_app (template_hole 37, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 34, template_var 1))),
                template_app (template_hole 37, template_var 1)),
              template_app
               (template_hole 19,
                template_app (template_hole 37, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 34, template_var 1),
              template_hole 16)
            ),
        template_equation
         (template_app
           (template_hole 15,
            template_app (template_hole 34, template_var 1)),
          template_app (template_hole 28, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app (template_hole 28, template_var 1)),
                    template_hole 16)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app (template_hole 28, template_var 1)),
                    template_hole 16)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 12, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 12, template_var 1)),
                template_var 0),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 23, template_var 1)),
                  template_app (template_hole 7, template_var 1)),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 23, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 24,
                    template_app (template_hole 23, template_var 1))),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 19,
            template_app (template_hole 37, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.invariantQCharacterizationAfterApplyBackjump_1",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state = [opposite (getCl ?state)];
         InvariantNoDecisionsWhenUnit (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state'' = applyBackjump ?state
          in InvariantQCharacterization (getConflictFlag state'')
              (getQ state'') (getF state'') (getM state'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 35,
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 34,
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 32, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 31,
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 30,
                  template_app (template_hole 33, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 29, template_var 1)),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 25,
                    template_app (template_hole 32, template_var 1)),
                  template_app (template_hole 29, template_var 1)),
                template_app (template_hole 28, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 32, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 22,
                    template_app (template_hole 23, template_var 1)),
                  template_app (template_hole 21, template_var 1)),
                template_app (template_hole 32, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 1))
            ),
        template_equation
         (template_app (template_hole 19, template_var 1),
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 1))),
            template_hole 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 36, template_var 1)),
              template_app
               (template_hole 12,
                template_app (template_hole 36, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 32, template_var 1)),
                template_app (template_hole 36, template_var 1)),
              template_app
               (template_hole 12,
                template_app (template_hole 36, template_var 1)))
            ),
        template_predicate
         (template_app (template_hole 23, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 23, template_var 1)),
                template_app (template_hole 36, template_var 1)),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 23, template_var 1)),
                template_var 0),
              template_app (template_hole 19, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 15, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 15, template_var 1)),
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 36, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 12,
            template_app (template_hole 36, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 1))),
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 36, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("ConflictAnalysis.InvariantsVarsAfterApplyBackjump",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantUniqC (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0' (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         InvariantEquivalentZL (getF ?state) (getM ?state) ?F0';
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state);
         0 < currentLevel (getM ?state); vars ?F0' <= vars ?F0.0;
         InvariantVarsM (getM ?state) ?F0.0 ?Vbl;
         InvariantVarsF (getF ?state) ?F0.0 ?Vbl;
         InvariantVarsQ (getQ ?state) ?F0.0 ?Vbl |]
      ==> let state' = applyBackjump ?state
          in InvariantVarsM (getM state') ?F0.0 ?Vbl &
             InvariantVarsF (getF state') ?F0.0 ?Vbl &
             InvariantVarsQ (getQ state') ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 37,
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 35,
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 34,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 30,
                template_app (template_hole 29, template_var 3)),
              template_app (template_hole 33, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 28,
              template_app (template_hole 29, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 29, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 34,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 32, template_var 3)),
              template_app (template_hole 31, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 25,
                    template_app (template_hole 33, template_var 3)),
                  template_app (template_hole 32, template_var 3)),
                template_app (template_hole 31, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 24, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 23,
                  template_app (template_hole 24, template_var 3)),
                template_app (template_hole 36, template_var 3)),
              template_app (template_hole 22, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 22, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 24, template_var 3)),
                template_var 2),
              template_app (template_hole 22, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 18, template_var 3)),
                template_app (template_hole 22, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 18, template_var 3)),
                  template_app (template_hole 16, template_var 3)),
                template_app (template_hole 22, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 18, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 33, template_var 3)),
                template_app (template_hole 36, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 18, template_var 3))),
                template_app (template_hole 22, template_var 3)),
              template_app (template_hole 36, template_var 3))
            ),
        template_inequation
         (less_than, template_hole 10,
          template_app
           (template_hole 9,
            template_app (template_hole 36, template_var 3))),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 36, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 33, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             t_empty)
           ))),
    ("ConflictAnalysis.invariantQCharacterizationAfterApplyBackjump_2",
     "[| InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state);
         InvariantUniqC (getC ?state);
         getC ?state ~= [opposite (getCl ?state)];
         InvariantNoDecisionsWhenUnit (butlast (getF ?state)) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenConflict (butlast (getF ?state))
          (getM ?state) (currentLevel (getM ?state));
         getF ?state ~= []; last (getF ?state) = getC ?state;
         getConflictFlag ?state;
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         InvariantCEntailed (getConflictFlag ?state) ?F0.0 (getC ?state);
         InvariantClCharacterization (getCl ?state) (getC ?state)
          (getM ?state);
         InvariantCllCharacterization (getCl ?state) (getCll ?state)
          (getC ?state) (getM ?state);
         InvariantClCurrentLevel (getCl ?state) (getM ?state);
         0 < currentLevel (getM ?state);
         isUIP (opposite (getCl ?state)) (getC ?state) (getM ?state) |]
      ==> let state'' = applyBackjump ?state
          in InvariantQCharacterization (getConflictFlag state'')
              (getQ state'') (getF state'') (getM state'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 42,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 40,
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 39,
                template_app (template_hole 38, template_var 1)),
              template_app (template_hole 37, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 36,
              template_app (template_hole 38, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 35,
                  template_app (template_hole 38, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 37, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 31,
                  template_app (template_hole 37, template_var 1)),
                template_app (template_hole 34, template_var 1)),
              template_app (template_hole 33, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 30,
                    template_app (template_hole 37, template_var 1)),
                  template_app (template_hole 34, template_var 1)),
                template_app (template_hole 33, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 27,
                    template_app (template_hole 28, template_var 1)),
                  template_app (template_hole 26, template_var 1)),
                template_app (template_hole 37, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 24, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 24, template_var 1),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 19, template_var 1))),
                template_hole 18))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 37, template_var 1))),
                template_app (template_hole 41, template_var 1)),
              template_app
               (template_hole 15,
                template_app (template_hole 41, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 16,
                    template_app (template_hole 37, template_var 1))),
                template_app (template_hole 41, template_var 1)),
              template_app
               (template_hole 15,
                template_app (template_hole 41, template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 37, template_var 1),
              template_hole 12)
            ),
        template_equation
         (template_app
           (template_hole 11,
            template_app (template_hole 37, template_var 1)),
          template_app (template_hole 24, template_var 1)),
        template_predicate
         (template_app (template_hole 28, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 28, template_var 1)),
                template_app (template_hole 41, template_var 1)),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 28, template_var 1)),
                template_var 0),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 19, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 19, template_var 1)),
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 41, template_var 1))
            ),
        template_inequation
         (less_than, template_hole 3,
          template_app
           (template_hole 15,
            template_app (template_hole 41, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 20,
                    template_app (template_hole 19, template_var 1))),
                template_app (template_hole 24, template_var 1)),
              template_app (template_hole 41, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.ConflictAnalysisMoreTemplates"
### 0.454s elapsed time, 0.653s cpu time, 0.089s GC time
val it = (): unit
