   [("CNF.oppositeLiteralListIdempotency",
     "oppositeLiteralList (oppositeLiteralList ?literalList) =
      ?literalList",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("CNF.oppositeIdempotency", "opposite (opposite ?literal) = ?literal",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("CNF.oppositeLiteralsHaveSameVariable",
     "var (opposite ?literal) = var ?literal",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("CNF.varsClauseVarsSet", "vars ?clause = vars (set ?clause)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("CNF.varsOppositeLiteralList",
     "vars (oppositeLiteralList ?clause) = vars ?clause",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("CNF.equivalentFormulaeSymmetry",
     "equivalentFormulae ?formula1.0 ?formula2.0 =
      equivalentFormulae ?formula2.0 ?formula1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("CNF.formulaUnsatIffImpliesEmptyClause",
     "formulaEntailsClause ?formula [] = (~ satisfiable ?formula)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("CNF.clauseTrueRemoveDuplicateLiterals",
     "clauseTrue ?c ?v = clauseTrue (remdups ?c) ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("CNF.literalElListIffOppositeLiteralElOppositeLiteralList",
     "?literal el ?literalList =
      opposite ?literal el oppositeLiteralList ?literalList",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.oppositeSymmetry",
     "(opposite ?literal1.0 = ?literal2.0) =
      (opposite ?literal2.0 = ?literal1.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("CNF.oppositeUniqueness",
     "(opposite ?literal1.0 = opposite ?literal2.0) =
      (?literal1.0 = ?literal2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("CNF.varsAppendFormulae",
     "vars (?formula1.0 @ ?formula2.0) =
      vars ?formula1.0 Un vars ?formula2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.varsAppendClauses",
     "vars (?clause1.0 @ ?clause2.0) = vars ?clause1.0 Un vars ?clause2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.varsAppendValuation",
     "vars (?valuation1.0 @ ?valuation2.0) =
      vars ?valuation1.0 Un vars ?valuation2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.satisfiableFilterTautologies",
     "satisfiable ?F = satisfiable (filter (%c. ~ clauseTautology c) ?F)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("CNF.val2FormEl",
     "?literal el ?valuation = [?literal] el val2form ?valuation",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("CNF.oppositeLiteralListNonempty",
     "(?literalList ~= []) = (oppositeLiteralList ?literalList ~= [])",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 1)),
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("CNF.val2formAppend",
     "val2form (?valuation1.0 @ ?valuation2.0) =
      val2form ?valuation1.0 @ val2form ?valuation2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.oppositeLiteralListRemove",
     "oppositeLiteralList (removeAll ?literal ?literalList) =
      removeAll (opposite ?literal) (oppositeLiteralList ?literalList)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("CNF.equivalentFormulaeIffEntailEachOther",
     "equivalentFormulae ?formula1.0 ?formula2.0 =
      (formulaEntailsFormula ?formula1.0 ?formula2.0 &
       formulaEntailsFormula ?formula2.0 ?formula1.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CNF.formulaTrueCommutativity",
     "formulaTrue (?f1.0 @ ?f2.0) ?valuation =
      formulaTrue (?f2.0 @ ?f1.0) ?valuation",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("CNF.val2FormRemoveAll",
     "removeAll [?literal] (val2form ?valuation) =
      val2form (removeAll ?literal ?valuation)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CNF.inconsistentCharacterization",
     "inconsistent ?valuation =
      (EX literal.
          literalTrue literal ?valuation &
          literalFalse literal ?valuation)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.clauseTautologyCharacterization",
     "clauseTautology ?clause =
      (EX literal. literal el ?clause & opposite literal el ?clause)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.clauseFalseIffAllLiteralsAreFalse",
     "clauseFalse ?clause ?valuation =
      (ALL literal.
          literal el ?clause --> literalFalse literal ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.clauseTrueIffContainsTrueLiteral",
     "clauseTrue ?clause ?valuation =
      (EX literal. literal el ?clause & literalTrue literal ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaEntailsFormulaIffEntailsAllItsClauses",
     "formulaEntailsFormula ?formula ?formula' =
      (ALL clause.
          clause el ?formula' --> formulaEntailsClause ?formula clause)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaFalseIffContainsFalseClause",
     "formulaFalse ?formula ?valuation =
      (EX clause. clause el ?formula & clauseFalse clause ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaTrueIffAllClausesAreTrue",
     "formulaTrue ?formula ?valuation =
      (ALL clause. clause el ?formula --> clauseTrue clause ?valuation)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.literalElFormulaCharacterization",
     "?literal el ?formula =
      (EX clause. clause el ?formula & ?literal el clause)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("CNF.formulaTrueAppend",
     "formulaTrue (?formula1.0 @ ?formula2.0) ?valuation =
      (formulaTrue ?formula1.0 ?valuation &
       formulaTrue ?formula2.0 ?valuation)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("CNF.variableDefinedImpliesLiteralDefined",
     "(var ?literal : vars ?valuation) =
      (literalTrue ?literal ?valuation | literalFalse ?literal ?valuation)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CNF.val2formFormulaTrue",
     "formulaTrue (val2form ?valuation1.0) ?valuation2.0 =
      (ALL literal. literal el ?valuation1.0 --> literal el ?valuation2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("CNF.literalsWithSameVariableAreEqualOrOpposite",
     "(var ?literal1.0 = var ?literal2.0) =
      (?literal1.0 = ?literal2.0 | opposite ?literal1.0 = ?literal2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_dunno)),
    ("CNF.varInFormulaVars",
     "(?variable : vars ?formula) =
      (EX literal. literal el ?formula & var literal = ?variable)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("CNF.varInClauseVars",
     "(?variable : vars ?clause) =
      (EX literal. literal el ?clause & var literal = ?variable)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("CNF.formulaTrueAssociativity",
     "formulaTrue ((?f1.0 @ ?f2.0) @ ?f3.0) ?valuation =
      formulaTrue (?f1.0 @ ?f2.0 @ ?f3.0) ?valuation",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0)))]
