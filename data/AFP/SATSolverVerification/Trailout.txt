Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TrailMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.TrailMoreTemplates" via "Draft.Trail" via "Draft.MoreList" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TrailMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TrailMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.534s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TrailMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.193s elapsed time, 0.792s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TrailMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.349s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TrailMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.435s elapsed time, 1.749s cpu time, 0.128s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.TrailMoreTemplates" via "Draft.Trail" via "Draft.MoreList")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.998s elapsed time, 3.774s cpu time, 0.920s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.087s elapsed time, 3.921s cpu time, 0.874s GC time
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.026s elapsed time, 6.353s cpu time, 1.260s GC time
Loading theory "Draft.Templates" (required by "Draft.TrailMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TrailMoreTemplates")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.773s elapsed time, 1.848s cpu time, 0.775s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.344s elapsed time, 7.880s cpu time, 2.061s GC time
Loading theory "Draft.MoreList" (required by "Draft.TrailMoreTemplates" via "Draft.Trail")
consts
  uniq :: "'a list => bool"
consts
  firstPos :: "'a => 'a list => nat"
consts
  list_diff :: "'a list => 'a list => 'a list"
### theory "Draft.MoreList"
### 0.224s elapsed time, 0.377s cpu time, 0.133s GC time
Loading theory "Draft.Trail" (required by "Draft.TrailMoreTemplates")
consts
  elements :: "('a * bool) list => 'a list"
consts
  markedElements :: "('a * bool) list => 'a list"
consts
  prefixBeforeElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToLevel_aux :: "('a * bool) list => nat => nat => ('a * bool) list"
consts
  levelsCounter_aux :: "('a * bool) list => nat list => nat list"
consts
  prefixBeforeLastMarked :: "('a * bool) list => ('a * bool) list"
### theory "Draft.Trail"
### 0.261s elapsed time, 0.261s cpu time, 0.000s GC time
Loading theory "Draft.TrailMoreTemplates"
val templateLemmas =
   [("Trail.isPrefixPrefixBeforeLastMarked",
     "isPrefix (prefixBeforeLastMarked ?M) ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Trail.isPrefixPrefixBeforeElement",
     "isPrefix (prefixBeforeElement ?e ?t) ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Trail.isPrefixPrefixToElement", "isPrefix (prefixToElement ?e ?t) ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Trail.isPrefixPrefixToLevel", "isPrefix (prefixToLevel ?l ?t) ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("Trail.markedElementsToArePrefixOfMarkedElements",
     "isPrefix (markedElementsTo ?e ?M) (markedElements ?M)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Trail.elementLevelLeqCurrentLevel",
     "elementLevel ?a ?M <= currentLevel ?M",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Trail.currentLevelPrefixToLevel",
     "currentLevel (prefixToLevel ?level ?M) <= ?level",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Trail.elementsButlastTrailIsButlastElementsTrail",
     "elements (butlast ?M) = butlast (elements ?M)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Trail.elementsEmptyIffTrailEmpty",
     "(elements ?list = []) = (?list = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Trail.isPrefixPrefixToLevel_aux",
     "EX s. prefixToLevel_aux ?t ?l ?i @ s = ?t",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Trail.elementsAppend",
     "elements (?a @ ?b) = elements ?a @ elements ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Trail.markedElementsAppend",
     "markedElements (?M1.0 @ ?M2.0) =
      markedElements ?M1.0 @ markedElements ?M2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Trail.isPrefixElements",
     "isPrefix ?a ?b ==> isPrefix (elements ?a) (elements ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Trail.currentLevelPrefix",
     "isPrefix ?a ?b ==> currentLevel ?a <= currentLevel ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Trail.currentLevelNonMarked",
     "currentLevel ?M = currentLevel (?M @ [(?l, False)])",
     template_equation
      (template_app (template_hole 5, template_var 1),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0))))),
    ("Trail.currentLevelZeroTrailEqualsItsPrefixToLevelZero",
     "currentLevel ?M = 0 ==> ?M = prefixToLevel 0 ?M",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Trail.markedElementsEmptyImpliesMarkedElementsToEmpty",
     "markedElements ?M = [] ==> markedElementsTo ?e ?M = []",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_hole 1))),
    ("Trail.markedElementIsMarkedTrue",
     "(?m : set (markedElements ?M)) = ((?m, True) : set ?M)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Trail.prefixElementsAreTrailElements",
     "isPrefix ?p ?M ==> set (elements ?p) <= set (elements ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Trail.isPrefixPrefixToLevelLowerLevel",
     "?level < ?level' ==>
      isPrefix (prefixToLevel ?level ?M) (prefixToLevel ?level' ?M)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Trail.currentLevelPrefixToLevelEq",
     "?level <= currentLevel ?M ==>
      currentLevel (prefixToLevel ?level ?M) = ?level",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Trail.elementMemElements",
     "?x : set ?M ==> element ?x : set (elements ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Trail.markedElementsAreElements",
     "?m : set (markedElements ?M) ==> ?m : set (elements ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Trail.levelsCounter_auxSuffixContinues",
     "ALL l.
         levelsCounter_aux (?a @ ?b) l =
         levelsCounter_aux ?b (levelsCounter_aux ?a l)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Trail.levelsCounter_auxNotEmpty",
     "ALL l. l ~= [] --> levelsCounter_aux ?a l ~= []",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Trail.eitherMarkedOrNotMarkedElement",
     "?a = (element ?a, True) | ?a = (element ?a, False)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 0)))
         )),
    ("Trail.elementLastTrailIsLastElementsTrail",
     "?M ~= [] ==> element (last ?M) = last (elements ?M)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Trail.lastMarkedIsMarkedElement",
     "markedElements ?M ~= [] ==> lastMarked ?M : set (markedElements ?M)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 0)))
           ))),
    ("Trail.markedElementsToAreMarkedElements",
     "?m : set (markedElementsTo ?e ?M) ==> ?m : set (markedElements ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Trail.uniqElementsTrailImpliesUniqElementsPrefix",
     "[| isPrefix ?p ?M; uniq (elements ?M) |] ==> uniq (elements ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Trail.isPrefixPrefixToLevel_auxLowerLevel",
     "?i <= ?j ==>
      isPrefix (prefixToLevel_aux ?M ?i ?k) (prefixToLevel_aux ?M ?j ?k)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Trail.currentLevelPrefixToLevel_aux",
     "?i <= ?l ==> currentLevel (prefixToLevel_aux ?M ?l ?i) <= ?l - ?i",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Trail.prefixToLevelPrefixToLevelHigherLevel",
     "?level <= ?level' ==>
      prefixToLevel ?level ?M =
      prefixToLevel ?level (prefixToLevel ?level' ?M)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Trail.lastTrailElementNotMarkedImpliesMarkedElementsToLAreMarkedElementsToLInButlastTrail",
     "~ marked (last ?M) ==>
      markedElementsTo ?e ?M = markedElementsTo ?e (butlast ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Trail.elementLevelPrecedesLeq",
     "precedes ?a ?b (elements ?M) ==>
      elementLevel ?a ?M <= elementLevel ?b ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trail.prefixToElementContainsTrailElement",
     "?e : set (elements ?M) ==>
      ?e : set (elements (prefixToElement ?e ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Trail.markedElementsToNonMemberAreAllMarkedElements",
     "?e ~: set (elements ?M) ==>
      markedElementsTo ?e ?M = markedElements ?M",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Trail.prefixToLevelElementsElementLevel",
     "?e : set (elements (prefixToLevel ?level ?M)) ==>
      elementLevel ?e ?M <= ?level",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Trail.literalNotInEarlierLevelsThanItsLevel",
     "?level < elementLevel ?e ?M ==>
      ?e ~: set (elements (prefixToLevel ?level ?M))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0))))
               )
           ))),
    ("Trail.prefixBeforeElementDoesNotContainTrailElement",
     "?e : set (elements ?M) ==>
      ?e ~: set (elements (prefixBeforeElement ?e ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))))
               )
           ))),
    ("Trail.prefixBeforeLastMarkedIsPrefixBeforeLastLevel",
     "markedElements ?M ~= [] ==>
      prefixBeforeLastMarked ?M = prefixToLevel (currentLevel ?M - 1) ?M",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)),
           template_var 0)))),
    ("Trail.elementLevelAppend",
     "?a : set (elements ?M) ==>
      elementLevel ?a ?M = elementLevel ?a (?M @ ?M')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Trail.markedAndMemberImpliesIsMarkedElement",
     "[| marked ?m; ?m : set ?M |]
      ==> element ?m : set (markedElements ?M)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Trail.prefixToLevel_auxPrefixToLevel_auxHigherLevel",
     "?i <= ?j ==>
      prefixToLevel_aux ?a ?i ?k =
      prefixToLevel_aux (prefixToLevel_aux ?a ?j ?k) ?i ?k",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_var 3),
           template_var 0)))),
    ("Trail.markedElementsPrefixAreMarkedElementsTrail",
     "[| isPrefix ?p ?M; ?m : set (markedElements ?p) |]
      ==> ?m : set (markedElements ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Trail.elementLevelMarkedGeq1",
     "[| uniq (elements ?M); ?e : set (markedElements ?M) |]
      ==> 1 <= elementLevel ?e ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Trail.levelsCounter_aux_startIrellevant",
     "ALL y.
         y ~= [] -->
         levelsCounter_aux ?a (?x @ y) = ?x @ levelsCounter_aux ?a y",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Trail.prefixToLevel_auxIncreaseAuxilaryCounter",
     "?i <= ?k ==>
      prefixToLevel_aux ?M ?l ?i =
      prefixToLevel_aux ?M (?l + (?k - ?i)) ?k",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3))),
           template_var 2)))),
    ("Trail.markedElementsAreElementsBeforeLastDecisionAndLastDecision",
     "markedElements ?M ~= [] ==>
      markedElements ?M =
      markedElements (prefixBeforeLastMarked ?M) @ [lastMarked ?M]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_hole 4))))),
    ("Trail.elementLevelPrefixElement",
     "?e : set (elements (prefixToLevel ?level ?M)) ==>
      elementLevel ?e (prefixToLevel ?level ?M) = elementLevel ?e ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Trail.markedElementsToPrefixElement",
     "[| isPrefix ?p ?M; ?e : set (elements ?p) |]
      ==> markedElementsTo ?e ?M = markedElementsTo ?e ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Trail.prefixToElementToPrefixElement",
     "[| isPrefix ?p ?M; ?e : set (elements ?p) |]
      ==> prefixToElement ?e ?M = prefixToElement ?e ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Trail.markedElementsToLastMarkedAreAllMarkedElements",
     "[| uniq (elements ?M); markedElements ?M ~= [] |]
      ==> markedElementsTo (lastMarked ?M) ?M = markedElements ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0),
         template_app (template_hole 3, template_var 0)))),
    ("Trail.prefixToElementAppend",
     "prefixToElement ?e (?M1.0 @ ?M2.0) =
      (if ?e : set (elements ?M1.0) then prefixToElement ?e ?M1.0
       else ?M1.0 @ prefixToElement ?e ?M2.0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0))))),
    ("Trail.removeLastMarkedFromMarkedElementsToLastMarkedAreAllMarkedElementsInPrefixLastMarked",
     "markedElements ?M ~= [] ==>
      removeAll (lastMarked ?M) (markedElementsTo (lastMarked ?M) ?M) =
      markedElements (prefixBeforeElement (lastMarked ?M) ?M)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_var 0))))),
    ("Trail.eitherMarkedOrNotMarked",
     "?e : set (elements ?M) ==>
      (?e, True) : set ?M | (?e, False) : set ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 0)),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Trail.lastMarkedNotInPrefixBeforeLastMarked",
     "[| uniq (elements ?M); markedElements ?M ~= [] |]
      ==> lastMarked ?M ~: set (elements (prefixBeforeLastMarked ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 0, template_var 0))))
               )
           ))),
    ("Trail.lastMarkedIsMemberOfItsMarkedElementsTo",
     "[| uniq (elements ?M); markedElements ?M ~= [] |]
      ==> lastMarked ?M : set (markedElementsTo (lastMarked ?M) ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 0)),
                 template_var 0)))
           ))),
    ("Trail.levelsCounter_auxIncreasesFirst",
     "ALL m n l1 l2. levelsCounter_aux ?a (m # l1) = n # l2 --> m <= n",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Trail.markedElementsToAppend",
     "markedElementsTo ?e (?M1.0 @ ?M2.0) =
      (if ?e : set (elements ?M1.0) then markedElementsTo ?e ?M1.0
       else markedElements ?M1.0 @ markedElementsTo ?e ?M2.0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)))),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0))))),
    ("Trail.prefixToLevelAppend",
     "prefixToLevel ?level (?a @ ?b) =
      (if ?level < currentLevel ?a then prefixToLevel ?level ?a
       else ?a @ prefixToLevel_aux ?b ?level (currentLevel ?a))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_app (template_hole 1, template_var 1)))))),
    ("Trail.elementLevelLtLevelImpliesMemberPrefixToLevel",
     "[| ?e : set (elements ?M); elementLevel ?e ?M <= ?level |]
      ==> ?e : set (elements (prefixToLevel ?level ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("Trail.uniqImpliesExclusiveTrueOrFalse",
     "[| (?e, ?d) : set ?M; uniq (elements ?M) |] ==> (?e, ~ ?d) ~: set ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app (template_hole 0, template_var 1))),
                 template_app (template_hole 3, template_var 0))
               )
           ))),
    ("Trail.currentLevelPrefixToLevelEq_aux",
     "[| ?i <= ?l; ?l - ?i <= currentLevel ?M |]
      ==> currentLevel (prefixToLevel_aux ?M ?l ?i) = ?l - ?i",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1), template_var 2),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 2)))),
    ("Trail.uniqImpliesPrefixBeforeLastMarkedIsPrefixBeforeLastMarked",
     "[| markedElements ?M ~= []; lastMarked ?M ~: set (elements ?M) |]
      ==> prefixBeforeLastMarked ?M =
          prefixBeforeElement (lastMarked ?M) ?M",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 0)),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 0)),
           template_var 0)))),
    ("Trail.markedElementIsMemberOfItsMarkedElementsTo",
     "[| uniq (elements ?M); marked ?e; ?e : set ?M |]
      ==> element ?e : set (markedElementsTo (element ?e) ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 0)),
                 template_var 1)))
           ))),
    ("Trail.isProperPrefixPrefixToLevel",
     "?level < currentLevel ?t ==>
      EX s. prefixToLevel ?level ?t @ s = ?t & s ~= [] & marked (hd s)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Trail.prefixToLevelAppend_aux1",
     "[| ?i <= ?l; ?l - ?i < currentLevel ?a |]
      ==> prefixToLevel_aux (?a @ ?b) ?l ?i = prefixToLevel_aux ?a ?l ?i",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 3),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 3)))),
    ("Trail.lastTrailElementMarkedImpliesMarkedElementsToLastElementAreAllMarkedElements",
     "[| marked (last ?M);
         last (elements ?M) ~: set (butlast (elements ?M)) |]
      ==> markedElementsTo (last (elements ?M)) ?M = markedElements ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 0))),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 5, template_var 0))))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0))),
           template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Trail.elementOnCurrentLevel",
     "?a ~: set (elements ?M) ==>
      elementLevel ?a (?M @ [(?a, ?d)]) = currentLevel (?M @ [(?a, ?d)])",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_hole 1))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_hole 1)))))),
    ("Trail.levelsCounterPrefix",
     "isPrefix ?p ?a ==>
      EX rest.
         rest ~= [] &
         levelsCounter ?a = butlast (levelsCounter ?p) @ rest &
         last (levelsCounter ?p) <= hd rest",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Trail.prefixToLevelAppend_aux2",
     "[| ?i <= ?l; currentLevel ?a + ?i <= ?l |]
      ==> prefixToLevel_aux (?a @ ?b) ?l ?i =
          ?a @ prefixToLevel_aux ?b ?l (?i + currentLevel ?a)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2),
           template_var 3),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 3, template_var 1))))))),
    ("Trail.elementLevelLtLevelImpliesMemberPrefixToLevel_aux",
     "[| ?e : set (elements ?M); elementLevel ?e ?M + ?i <= ?level;
         ?i <= ?level |]
      ==> ?e : set (elements (prefixToLevel_aux ?M ?level ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1),
          template_var 0),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 1))))
           ))),
    ("Trail.markedElementsTrailMemPrefixAreMarkedElementsPrefix",
     "[| uniq (elements ?M); isPrefix ?p ?M; ?m : set (elements ?p);
         ?m : set (markedElements ?M) |]
      ==> ?m : set (markedElements ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Trail.levelsCounterPrefixToLevel",
     "[| ?p = prefixToLevel ?level ?a; 0 <= ?level;
         ?level < currentLevel ?a |]
      ==> EX rest. rest ~= [] & levelsCounter ?a = levelsCounter ?p @ rest",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 11, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_hole 9, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Trail.elementLevelPrecedesMarkedElementLt",
     "[| uniq (elements ?M); ?e ~= ?d; ?d : set (markedElements ?M);
         precedes ?e ?d (elements ?M) |]
      ==> elementLevel ?e ?M < elementLevel ?d ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app (template_hole 8, template_var 2))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Trail.differentMarkedElementsHaveDifferentLevels",
     "[| uniq (elements ?M); ?a : set (markedElements ?M);
         ?b : set (markedElements ?M); ?a ~= ?b |]
      ==> elementLevel ?a ?M ~= elementLevel ?b ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           )))]:
   (string * thm * template) list
### theory "Draft.TrailMoreTemplates"
### 0.662s elapsed time, 1.549s cpu time, 1.012s GC time
val it = (): unit
