   [("BasicDPLL.applicableBacktrackCharacterization",
     "applicableBacktrack ?stateA ?F0.0 =
      (formulaFalse ?F0.0 (elements (getM ?stateA)) &
       decisions (getM ?stateA) ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("BasicDPLL.applicableUnitPropagateCharacterization",
     "applicableUnitPropagate ?stateA ?F0.0 =
      (EX uc ul.
          uc el ?F0.0 & isUnitClause uc ul (elements (getM ?stateA)))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("BasicDPLL.finalStateNonApplicable",
     "isFinalState ?state ?F0.0 ?decisionVars =
      (~ applicableDecide ?state ?decisionVars &
       ~ applicableUnitPropagate ?state ?F0.0 &
       ~ applicableBacktrack ?state ?F0.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("BasicDPLL.applicableDecideCharacterization",
     "applicableDecide ?stateA ?decisionVars =
      (EX l. var l : ?decisionVars &
             ~ l el elements (getM ?stateA) &
             ~ opposite l el elements (getM ?stateA))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty)))]
