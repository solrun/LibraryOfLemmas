Loading theory "HOL-Library.Cancellation" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.KrsticGoel" via "Draft.SatSolverVerification" via "Draft.CNF" via "Draft.MoreList" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.599s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.192s elapsed time, 0.776s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.358s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.435s elapsed time, 1.741s cpu time, 0.121s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.KrsticGoel" via "Draft.SatSolverVerification" via "Draft.CNF" via "Draft.MoreList")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.996s elapsed time, 3.753s cpu time, 0.874s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.093s elapsed time, 3.919s cpu time, 0.837s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.035s elapsed time, 6.329s cpu time, 1.211s GC time
Loading theory "Draft.Templates" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.KrsticGoelMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.780s elapsed time, 1.861s cpu time, 0.780s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.344s elapsed time, 7.914s cpu time, 2.029s GC time
Loading theory "Draft.MoreList" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.KrsticGoel" via "Draft.SatSolverVerification" via "Draft.CNF")
consts
  uniq :: "'a list => bool"
consts
  firstPos :: "'a => 'a list => nat"
consts
  list_diff :: "'a list => 'a list => 'a list"
### theory "Draft.MoreList"
### 0.227s elapsed time, 0.377s cpu time, 0.123s GC time
Loading theory "Draft.CNF" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.KrsticGoel" via "Draft.SatSolverVerification")
Loading theory "Draft.Trail" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.KrsticGoel" via "Draft.SatSolverVerification")
consts
  elements :: "('a * bool) list => 'a list"
consts
  markedElements :: "('a * bool) list => 'a list"
consts
  prefixBeforeElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToElement :: "'a => ('a * bool) list => ('a * bool) list"
consts
  prefixToLevel_aux :: "('a * bool) list => nat => nat => ('a * bool) list"
overloading
  literalElClause \<equiv> member :: Literal => Literal list => bool
overloading
  clauseElFormula \<equiv> member ::
    Literal list => Literal list list => bool
consts
  levelsCounter_aux :: "('a * bool) list => nat list => nat list"
overloading
  el_literal \<equiv> member :: Literal => Literal list list => bool
consts
  el_literal :: "Literal => Literal list list => bool"
consts
  var :: "Literal => nat"
consts
  varsClause :: "Literal list => nat set"
consts
  varsFormula :: "Literal list list => nat set"
overloading
  vars_clause \<equiv> vars :: Literal list => nat set
overloading
  vars_formula \<equiv> vars :: Literal list list => nat set
overloading
  vars_set \<equiv> vars :: Literal set => nat set
consts
  prefixBeforeLastMarked :: "('a * bool) list => ('a * bool) list"
### theory "Draft.Trail"
### 0.599s elapsed time, 1.621s cpu time, 1.027s GC time
consts
  opposite :: "Literal => Literal"
consts
  clauseTautology :: "Literal list => bool"
consts
  clauseTrue :: "Literal list => Literal list => bool"
consts
  clauseFalse :: "Literal list => Literal list => bool"
consts
  formulaTrue :: "Literal list list => Literal list => bool"
consts
  formulaFalse :: "Literal list list => Literal list => bool"
consts
  val2form :: "Literal list => Literal list list"
consts
  inconsistent :: "Literal list => bool"
overloading
  modelFormula \<equiv> model :: Literal list => Literal list list => bool
overloading
  modelClause \<equiv> model :: Literal list => Literal list => bool
### theory "Draft.CNF"
### 1.055s elapsed time, 2.155s cpu time, 1.142s GC time
Loading theory "Draft.SatSolverVerification" (required by "Draft.KrsticGoelMoreTemplates" via "Draft.KrsticGoel")
### theory "Draft.SatSolverVerification"
### 0.457s elapsed time, 0.536s cpu time, 0.108s GC time
Loading theory "Draft.KrsticGoel" (required by "Draft.KrsticGoelMoreTemplates")
### theory "Draft.KrsticGoel"
### 0.473s elapsed time, 0.560s cpu time, 0.118s GC time
Loading theory "Draft.KrsticGoelMoreTemplates"
val templateLemmas =
   [("KrsticGoel.wfLexLessState",
     "finite ?decisionVars ==> wf (lexLessState ?F0.0 ?decisionVars)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("KrsticGoel.wfTerminationLess",
     "finite ?decisionVars ==> wf (terminationLess ?F0.0 ?decisionVars)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("KrsticGoel.invariantsHoldInInitialState",
     "isInitialState ?state ?F0.0 ==>
      invariantsHoldInState ?state ?F0.0 ?decisionVars",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("KrsticGoel.conflictFlagIsDecreasedByConflict",
     "appliedConflict ?stateA ?stateB ==> getM ?stateA = getM ?stateB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("KrsticGoel.conflictClauseIsDecreasedByExplain",
     "appliedExplain ?stateA ?stateB ==>
      getConflictFlag ?stateA = getConflictFlag ?stateB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("KrsticGoel.conflictClauseIsDecreasedByExplain",
     "appliedExplain ?stateA ?stateB ==> getM ?stateA = getM ?stateB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("KrsticGoel.formulaIsDecreasedByLearn",
     "appliedLearn ?stateA ?stateB ==>
      getConflictFlag ?stateA = getConflictFlag ?stateB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("KrsticGoel.formulaIsDecreasedByLearn",
     "appliedLearn ?stateA ?stateB ==> getC ?stateA = getC ?stateB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("KrsticGoel.formulaIsDecreasedByLearn",
     "appliedLearn ?stateA ?stateB ==> getM ?stateA = getM ?stateB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("KrsticGoel.conflictFlagIsDecreasedByConflict",
     "appliedConflict ?stateA ?stateB ==>
      (getConflictFlag ?stateB, getConflictFlag ?stateA) : boolLess",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)
           ))),
    ("KrsticGoel.applicableLearnCharacterization",
     "applicableLearn ?stateA =
      (getConflictFlag ?stateA = True & ~ getC ?stateA el getF ?stateA)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 5, template_var 0)),
                 template_hole 4)),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("KrsticGoel.conflictClauseIsDecreasedByExplain",
     "appliedExplain ?stateA ?stateB ==>
      (getC ?stateB, getC ?stateA) : multLess (getM ?stateA)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("KrsticGoel.formulaIsDecreasedByLearn",
     "appliedLearn ?stateA ?stateB ==>
      (getF ?stateB, getF ?stateA) : learnLess (getC ?stateA)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("KrsticGoel.minimalStatesAreFinal",
     "[| invariantsHoldInState ?state ?F0.0 ?decisionVars;
         isMinimalState ?state ?F0.0 ?decisionVars |]
      ==> isFinalState ?state ?F0.0 ?decisionVars",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("KrsticGoel.transitionsPreserveInvariants",
     "[| transition ?stateA ?stateB ?F0.0 ?decisionVars;
         invariantsHoldInState ?stateA ?F0.0 ?decisionVars |]
      ==> invariantsHoldInState ?stateB ?F0.0 ?decisionVars",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("KrsticGoel.invariantsHoldInValidRunsFromInitialState",
     "[| isInitialState ?state0.0 ?F0.0;
         (?state0.0, ?state) : transitionRelation ?F0.0 ?decisionVars |]
      ==> invariantsHoldInState ?state ?F0.0 ?decisionVars",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 1)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("KrsticGoel.applicableBackjumpCharacterization",
     "applicableBackjump ?stateA =
      (EX l level.
          getConflictFlag ?stateA = True &
          isBackjumpLevel level l (getC ?stateA) (getM ?stateA))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app (template_hole 7, t_empty))),
    ("KrsticGoel.invariantsHoldInValidRuns",
     "[| invariantsHoldInState ?stateA ?F0.0 ?decisionVars;
         (?stateA, ?stateB) : transitionRelation ?F0.0 ?decisionVars |]
      ==> invariantsHoldInState ?stateB ?F0.0 ?decisionVars",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 0)),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("KrsticGoel.applicableConflictCharacterization",
     "applicableConflict ?stateA =
      (EX clause.
          getConflictFlag ?stateA = False &
          formulaEntailsClause (getF ?stateA) clause &
          clauseFalse clause (elements (getM ?stateA)))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("KrsticGoel.stateIsDecreasedByValidTransitions",
     "[| invariantsHoldInState ?stateA ?F0.0 ?decisionVars;
         transition ?stateA ?stateB ?F0.0 ?decisionVars |]
      ==> (?stateB, ?stateA) : terminationLess ?F0.0 ?decisionVars",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("KrsticGoel.finalNonConflictState",
     "[| getConflictFlag ?state = False;
         ~ applicableDecide ?state ?decisionVars;
         ~ applicableConflict ?state |]
      ==> ?decisionVars <= vars (elements (getM ?state))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("KrsticGoel.finalNonConflictState",
     "[| getConflictFlag ?state = False;
         ~ applicableDecide ?state ?decisionVars;
         ~ applicableConflict ?state |]
      ==> ~ formulaFalse (getF ?state) (elements (getM ?state))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))
               )
           ))),
    ("KrsticGoel.applicableDecideCharacterization",
     "applicableDecide ?stateA ?decisionVars =
      (EX l. var l : ?decisionVars &
             ~ l el elements (getM ?stateA) &
             ~ opposite l el elements (getM ?stateA))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty))),
    ("KrsticGoel.noInfiniteTransitionChains",
     "finite ?decisionVars ==>
      \<nexists>Q.
         EX state0:Q.
            isInitialState state0 ?F0.0 &
            (ALL state:Q.
                EX state':Q. transition state state' ?F0.0 ?decisionVars)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_negation
        (template_predicate (template_app (template_hole 5, t_empty))))),
    ("KrsticGoel.wfTransitionRelation",
     "[| finite ?decisionVars; isInitialState ?state0.0 ?F0.0 |]
      ==> wf {(stateB, stateA).
              (?state0.0, stateA) : transitionRelation ?F0.0 ?decisionVars &
              transition stateA stateB ?F0.0 ?decisionVars}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty)))
           ))),
    ("KrsticGoel.applicableUnitPropagateCharacterization",
     "applicableUnitPropagate ?stateA ?F0.0 ?decisionVars =
      (EX uc ul.
          formulaEntailsClause (getF ?stateA) uc &
          var ul : ?decisionVars Un vars ?F0.0 &
          isUnitClause uc ul (elements (getM ?stateA)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 11, t_empty))),
    ("KrsticGoel.applicableExplainCharacterization",
     "applicableExplain ?stateA =
      (EX l reason.
          getConflictFlag ?stateA = True &
          l el getC ?stateA &
          formulaEntailsClause (getF ?stateA) reason &
          isReason reason (opposite l) (elements (getM ?stateA)))",
     template_equation
      (template_app (template_hole 13, template_var 0),
       template_app (template_hole 12, t_empty))),
    ("KrsticGoel.soundnessForUNSAT",
     "[| isInitialState ?state0.0 ?F0.0;
         (?state0.0, ?state) : transitionRelation ?F0.0 ?decisionVars;
         getConflictFlag ?state = True; getC ?state = [] |]
      ==> ~ satisfiable ?F0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 1)),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5),
        template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 2))
           ))),
    ("KrsticGoel.finalStateNonApplicable",
     "isFinalState ?state ?F0.0 ?decisionVars =
      (~ applicableDecide ?state ?decisionVars &
       ~ applicableUnitPropagate ?state ?F0.0 ?decisionVars &
       ~ applicableBackjump ?state &
       ~ applicableLearn ?state &
       ~ applicableConflict ?state & ~ applicableExplain ?state)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 2, template_var 2))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 1, template_var 2))),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 2))))))))),
    ("KrsticGoel.partialCorrectness",
     "[| vars ?F0.0 <= ?decisionVars; isInitialState ?state0.0 ?F0.0;
         (?state0.0, ?state) : transitionRelation ?F0.0 ?decisionVars;
         isFinalState ?state ?F0.0 ?decisionVars |]
      ==> satisfiable ?F0.0 = (~ getConflictFlag ?state)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("KrsticGoel.trailIsDecreasedByDeciedUnitPropagateAndBackjump",
     "[| invariantsHoldInState ?stateA ?F0.0 ?decisionVars;
         appliedDecide ?stateA ?stateB ?decisionVars |
         appliedUnitPropagate ?stateA ?stateB ?F0.0 ?decisionVars |
         appliedBackjump ?stateA ?stateB |]
      ==> (getM ?stateB, getM ?stateA)
          : lexLessRestricted (vars ?F0.0 Un ?decisionVars)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 0),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 3),
                        template_var 0),
                      template_var 2),
                    template_var 1)),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 3, template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1)))
           ))),
    ("KrsticGoel.finalConflictingState",
     "[| InvariantUniq (getM ?state);
         InvariantReasonClauses (getF ?state) (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         ~ applicableExplain ?state; ~ applicableBackjump ?state;
         getConflictFlag ?state |]
      ==> getC ?state = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 0)),
                template_app (template_hole 10, template_var 0)),
              template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0), template_hole 0))),
    ("KrsticGoel.completenessForUNSAT",
     "[| vars ?F0.0 <= ?decisionVars; ~ satisfiable ?F0.0;
         isInitialState ?state0.0 ?F0.0;
         (?state0.0, ?state) : transitionRelation ?F0.0 ?decisionVars;
         isFinalState ?state ?F0.0 ?decisionVars |]
      ==> getConflictFlag ?state = True & getC ?state = []",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 14, template_var 3),
          template_var 2),
        template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           ))),
    ("KrsticGoel.completenessForSAT",
     "[| satisfiable ?F0.0; isInitialState ?state0.0 ?F0.0;
         (?state0.0, ?state) : transitionRelation ?F0.0 ?decisionVars;
         isFinalState ?state ?F0.0 ?decisionVars |]
      ==> getConflictFlag ?state = False &
          ~ formulaFalse (getF ?state) (elements (getM ?state)) &
          ?decisionVars <= vars (elements (getM ?state))",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 12, template_var 3),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 1)),
                 template_hole 7)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 1)),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1))))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1))))))
           ))),
    ("KrsticGoel.soundnessForSAT",
     "[| vars ?F0.0 <= ?decisionVars; isInitialState ?state0.0 ?F0.0;
         (?state0.0, ?state) : transitionRelation ?F0.0 ?decisionVars;
         getConflictFlag ?state = False;
         ~ formulaFalse (getF ?state) (elements (getM ?state));
         ?decisionVars <= vars (elements (getM ?state)) |]
      ==> model (elements (getM ?state)) ?F0.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 14, template_var 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2))
            ),
        template_equation
         (template_app (template_hole 8, template_var 0), template_hole 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 0)))
                )
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 1,
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_var 3)
           ))),
    ("KrsticGoel.finalStateCharacterization",
     "[| isInitialState ?state0.0 ?F0.0;
         (?state0.0, ?state) : transitionRelation ?F0.0 ?decisionVars;
         isFinalState ?state ?F0.0 ?decisionVars |]
      ==> getConflictFlag ?state = False &
          ~ formulaFalse (getF ?state) (elements (getM ?state)) &
          ?decisionVars <= vars (elements (getM ?state)) |
          getConflictFlag ?state = True & getC ?state = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_var 1)),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app (template_hole 12, template_var 1)),
                     template_hole 11)),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app (template_hole 8, template_var 1)),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_var 1))))),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6, template_var 1))))))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_var 1)),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0)))
           ))),
    ("KrsticGoel.finalStateCharacterizationLemma",
     "[| InvariantUniq (getM ?state);
         InvariantReasonClauses (getF ?state) (getM ?state);
         InvariantCFalse (getConflictFlag ?state) (getM ?state)
          (getC ?state);
         ~ applicableDecide ?state ?decisionVars;
         ~ applicableConflict ?state; ~ applicableExplain ?state;
         ~ applicableBackjump ?state |]
      ==> getConflictFlag ?state = False &
          ~ formulaFalse (getF ?state) (elements (getM ?state)) &
          ?decisionVars <= vars (elements (getM ?state)) |
          getConflictFlag ?state = True & getC ?state = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app (template_hole 19, template_var 1)),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 17, template_var 1)),
                template_app (template_hole 21, template_var 1)),
              template_app (template_hole 16, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 13, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 17, template_var 1)),
                     template_hole 7)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 19, template_var 1)),
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 21, template_var 1))))),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 21, template_var 1))))))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 17, template_var 1)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 16, template_var 1)),
                 template_hole 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.KrsticGoelMoreTemplates"
### 0.388s elapsed time, 0.596s cpu time, 0.097s GC time
val it = (): unit
