   [("AssertLiteral.getNonWatchedUnfalsifiedLiteralSomeCharacterization",
     "getNonWatchedUnfalsifiedLiteral ?clause ?w1.0 ?w2.0 ?M = Some ?l ==>
      ?l el ?clause",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 4)
           ))),
    ("AssertLiteral.getNonWatchedUnfalsifiedLiteralSomeCharacterization",
     "getNonWatchedUnfalsifiedLiteral ?clause ?w1.0 ?w2.0 ?M = Some ?l ==>
      ?l ~= ?w1.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_var 3)))),
    ("AssertLiteral.getNonWatchedUnfalsifiedLiteralSomeCharacterization",
     "getNonWatchedUnfalsifiedLiteral ?clause ?w1.0 ?w2.0 ?M = Some ?l ==>
      ?l ~= ?w2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_var 2)))),
    ("AssertLiteral.getNonWatchedUnfalsifiedLiteralSomeCharacterization",
     "getNonWatchedUnfalsifiedLiteral ?clause ?w1.0 ?w2.0 ?M = Some ?l ==>
      ~ literalFalse ?l (elements ?M)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("AssertLiteral.swapWatchesEffect",
     "getWatch1 (swapWatches ?clause ?state) ?clause' =
      (if ?clause = ?clause' then getWatch2 ?state ?clause'
       else getWatch1 ?state ?clause')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("AssertLiteral.swapWatchesEffect",
     "getWatch2 (swapWatches ?clause ?state) ?clause' =
      (if ?clause = ?clause' then getWatch1 ?state ?clause'
       else getWatch2 ?state ?clause')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("AssertLiteral.InvariantGetReasonIsReasonQSubset",
     "[| ?Q <= ?Q'; InvariantGetReasonIsReason ?GetReason ?F ?M ?Q' |]
      ==> InvariantGetReasonIsReason ?GetReason ?F ?M ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 4)
           ))),
    ("AssertLiteral.assertLiteralEffect",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> getF (assertLiteral ?l ?d ?state) = getF ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 5, template_var 2)),
                template_app (template_hole 3, template_var 2)),
              template_app (template_hole 2, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app (template_hole 5, template_var 2)))),
    ("AssertLiteral.assertLiteralEffect",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> getSATFlag (assertLiteral ?l ?d ?state) = getSATFlag ?state",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 2)),
                template_app (template_hole 4, template_var 2)),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app (template_hole 1, template_var 2)))),
    ("AssertLiteral.assertLiteralEffect",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> isPrefix (getQ ?state) (getQ (assertLiteral ?l ?d ?state))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 6, template_var 2)),
                template_app (template_hole 4, template_var 2)),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("AssertLiteral.getNonWatchedUnfalsifiedLiteralNoneCharacterization",
     "getNonWatchedUnfalsifiedLiteral ?clause ?w1.0 ?w2.0 ?M = None ==>
      ALL l.
         l el ?clause & l ~= ?w1.0 & l ~= ?w2.0 -->
         literalFalse l (elements ?M)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0),
          template_hole 8)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("AssertLiteral.assertLiteralEffect",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> getM (assertLiteral ?l ?d ?state) = getM ?state @ [(?l, ?d)]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 10, template_var 2)),
                template_app (template_hole 8, template_var 2)),
              template_app (template_hole 7, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0))))),
    ("AssertLiteral.InvariantUniqQAfterAssertLiteral",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantUniqQ (getQ ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantUniqQ (getQ state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantWatchesElNotifyWatchesLoop",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state) |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in InvariantWatchesEl (getF state') (getWatch1 state')
              (getWatch2 state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_var 3)),
                template_app (template_hole 12, template_var 3)),
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantUniqQAfterNotifyWatchesLoop",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state);
         InvariantUniqQ (getQ ?state) |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in InvariantUniqQ (getQ state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 3)),
                template_app (template_hole 14, template_var 3)),
              template_app (template_hole 13, template_var 3))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantWatchesDifferNotifyWatchesLoop",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state) |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in InvariantWatchesDiffer (getF state') (getWatch1 state')
              (getWatch2 state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 3)),
                template_app (template_hole 13, template_var 3)),
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 14, template_var 3)),
                template_app (template_hole 13, template_var 3)),
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantWatchListsContainOnlyClausesFromFNotifyWatchesLoop",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c.
            c : set ?Wl | c : set ?newWl -->
            0 <= c & c < length (getF ?state) |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in InvariantWatchListsContainOnlyClausesFromF
              (getWatchList state') (getF state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 3)),
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 15, template_var 3)),
                template_app (template_hole 13, template_var 3)),
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2),
                   template_var 1),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantConflictClauseCharacterizationAfterAssertLiteral",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantConflictClauseCharacterization (getConflictFlag ?state)
          (getConflictClause ?state) (getF ?state) (getM ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantConflictClauseCharacterization
              (getConflictFlag state') (getConflictClause state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 8, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_app (template_hole 3, template_var 2)),
                template_app (template_hole 12, template_var 2)),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.AssertLiteralStartQIreleveant",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state) |]
      ==> let state' =
                assertLiteral ?literal ?decision (?state(| getQ := ?Q' |));
              state'' =
                assertLiteral ?literal ?decision (?state(| getQ := ?Q'' |))
          in getM state' = getM state'' &
             getF state' = getF state'' &
             getSATFlag state' = getSATFlag state'' &
             getConflictFlag state' = getConflictFlag state''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 4)),
                template_app (template_hole 14, template_var 4)),
              template_app (template_hole 13, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app (template_hole 15, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 8, t_empty),
                   template_var 4))),
             t_empty)
           ))),
    ("AssertLiteral.notifyWatchesLoopPreservedWatches",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state) |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in ALL c.
                c ~: set ?Wl -->
                getWatch1 state' c = getWatch1 ?state c &
                getWatch2 state' c = getWatch2 ?state c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 3)),
                template_app (template_hole 14, template_var 3)),
              template_app (template_hole 13, template_var 3))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.notifyWatchesLoopPreservedVariables",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state) |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in getM state' = getM ?state &
             getF state' = getF ?state &
             getSATFlag state' = getSATFlag ?state &
             isPrefix (getQ ?state) (getQ state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 3)),
                template_app (template_hole 19, template_var 3)),
              template_app (template_hole 18, template_var 3))
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.assertedLiteralIsNotUnit",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in ?literal ~: set (getQ state') - set (getQ ?state)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 22,
              template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 2)),
                template_app
                 (template_app
                   (template_hole 19,
                    template_app
                     (template_app (template_hole 18, template_var 1),
                      template_var 0)),
                  template_hole 17)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 2)),
              template_app (template_hole 14, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 15, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 15, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 14, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 14, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 14, template_var 2)),
                  template_app (template_hole 11, template_var 2)),
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 20, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.WatchInvariantsAfterAssertLiteral",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantWatchListsContainOnlyClausesFromF
              (getWatchList state') (getF state') &
             InvariantWatchListsUniq (getWatchList state') &
             InvariantWatchListsCharacterization (getWatchList state')
              (getWatch1 state') (getWatch2 state') &
             InvariantWatchesEl (getF state') (getWatch1 state')
              (getWatch2 state') &
             InvariantWatchesDiffer (getF state') (getWatch1 state')
              (getWatch2 state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 10, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 9, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 9, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantWatchCharacterizationAfterAssertLiteral",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantUniq (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantWatchCharacterization (getF state') (getWatch1 state')
              (getWatch2 state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 2)),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 1),
                      template_var 0)),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 2)),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_var 1),
                      template_var 0)),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 10, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 9, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 9, template_var 2)),
                template_app (template_hole 6, template_var 2)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 9, template_var 2)),
                  template_app (template_hole 6, template_var 2)),
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 16, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantsNoDecisionsWhenConflictNorUnitAfterAssertLiteral",
     "[| InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state);
         InvariantNoDecisionsWhenConflict (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         InvariantNoDecisionsWhenUnit (getF ?state) (getM ?state)
          (currentLevel (getM ?state));
         ?decision --> ~ getConflictFlag ?state & getQ ?state = [] |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantNoDecisionsWhenConflict (getF state') (getM state')
              (currentLevel (getM state')) &
             InvariantNoDecisionsWhenUnit (getF state') (getM state')
              (currentLevel (getM state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app (template_hole 19, template_var 2)),
              template_app (template_hole 18, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 18, template_var 2)),
                template_app (template_hole 16, template_var 2)),
              template_app (template_hole 15, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_var 2)),
                template_app (template_hole 18, template_var 2)),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 13, template_var 2)),
                  template_app (template_hole 10, template_var 2)),
                template_app (template_hole 18, template_var 2)),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 18, template_var 2)),
                template_app (template_hole 12, template_var 2)),
              template_app
               (template_hole 8,
                template_app (template_hole 12, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 18, template_var 2)),
                template_app (template_hole 12, template_var 2)),
              template_app
               (template_hole 8,
                template_app (template_hole 12, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app (template_hole 13, template_var 2))),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 10, template_var 2)),
                  template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantConflictFlagCharacterizationAfterAssertLiteral",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantConflictFlagCharacterization (getConflictFlag state')
              (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 19,
              template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 17, template_var 2)),
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_var 1),
                      template_var 0)),
                  template_hole 14)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 12, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 12, template_var 2)),
                  template_app (template_hole 11, template_var 2)),
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 17, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_app (template_hole 12, template_var 2)),
              template_app (template_hole 17, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.NotifyWatchesLoopConflictFlagEffect",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state);
         InvariantConsistent (getM ?state);
         ALL c.
            c : set ?Wl -->
            Some ?literal = getWatch1 ?state c |
            Some ?literal = getWatch2 ?state c;
         literalFalse ?literal (elements (getM ?state)); uniq ?Wl |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in getConflictFlag state' =
             (getConflictFlag ?state |
              (EX clause.
                  clause : set ?Wl &
                  clauseFalse (getF ?state ! clause)
                   (elements (getM ?state))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 27,
                  template_app (template_hole 26, template_var 3)),
                template_app (template_hole 25, template_var 3)),
              template_app (template_hole 24, template_var 3))
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3))
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 13, template_var 3)))
            ),
        template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantConflictClauseCharacterizationAfterNotifyWatches",
     "[| getM ?state = ?M @ [(opposite ?literal, ?decision)];
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state);
         ALL c.
            c : set ?Wl -->
            Some ?literal = getWatch1 ?state c |
            Some ?literal = getWatch2 ?state c;
         InvariantConflictClauseCharacterization (getConflictFlag ?state)
          (getConflictClause ?state) (getF ?state) (getM ?state);
         uniq ?Wl |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in InvariantConflictClauseCharacterization
              (getConflictFlag state') (getConflictClause state')
              (getF state') (getM state')",
     template_implication
      ([template_equation
         (template_app (template_hole 27, template_var 5),
          template_app
           (template_app (template_hole 26, template_var 4),
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app (template_hole 23, template_var 3)),
                  template_var 2)),
              template_hole 22))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 5)),
                template_app (template_hole 19, template_var 5)),
              template_app (template_hole 18, template_var 5))
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 5)),
                  template_app (template_hole 3, template_var 5)),
                template_app (template_hole 20, template_var 5)),
              template_app (template_hole 27, template_var 5))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1),
                   template_var 0),
                 template_var 5)),
             t_empty)
           ))),
    ("AssertLiteral.assertLiteralConflictFlagEffect",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantUniq (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in getConflictFlag state' =
             (getConflictFlag ?state |
              (EX clause.
                  clause el getF ?state &
                  opposite ?literal el clause &
                  clauseFalse clause
                   (elements (getM ?state) @ [?literal])))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 30,
              template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 2)),
                template_app
                 (template_app
                   (template_hole 27,
                    template_app
                     (template_app (template_hole 26, template_var 1),
                      template_var 0)),
                  template_hole 25)))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 2)),
                template_app
                 (template_app
                   (template_hole 27,
                    template_app
                     (template_app (template_hole 26, template_var 1),
                      template_var 0)),
                  template_hole 25)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_var 2)),
              template_app (template_hole 21, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 20,
              template_app (template_hole 22, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 22, template_var 2)),
                template_app (template_hole 18, template_var 2)),
              template_app (template_hole 17, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 21, template_var 2)),
                template_app (template_hole 18, template_var 2)),
              template_app (template_hole 17, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 21, template_var 2)),
                  template_app (template_hole 18, template_var 2)),
                template_app (template_hole 17, template_var 2)),
              template_app (template_hole 28, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app (template_hole 13, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantVarsQAfterAssertLiteral",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantUniq (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantVarsQ (getQ ?state) ?F0.0 ?Vbl;
         InvariantVarsF (getF ?state) ?F0.0 ?Vbl |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantVarsQ (getQ state') ?F0.0 ?Vbl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 19, template_var 4)),
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_var 3),
                      template_var 2)),
                  template_hole 16)))
            ),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 19, template_var 4)),
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_var 3),
                      template_var 2)),
                  template_hole 16)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 4)),
              template_app (template_hole 12, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 13, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 13, template_var 4)),
                template_app (template_hole 9, template_var 4)),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 12, template_var 4)),
                template_app (template_hole 9, template_var 4)),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 12, template_var 4)),
                template_app (template_hole 9, template_var 4)),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 12, template_var 4)),
                  template_app (template_hole 9, template_var 4)),
                template_app (template_hole 8, template_var 4)),
              template_app (template_hole 19, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 4)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 12, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 4)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantQCharacterizationAfterAssertLiteral",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantQCharacterization (getConflictFlag state')
              (removeAll ?literal (getQ state')) (getF state')
              (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 22,
              template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 2)),
                template_app
                 (template_app
                   (template_hole 19,
                    template_app
                     (template_app (template_hole 18, template_var 1),
                      template_var 0)),
                  template_hole 17)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 2)),
              template_app (template_hole 14, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 15, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 15, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 14, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 14, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 14, template_var 2)),
                  template_app (template_hole 11, template_var 2)),
                template_app (template_hole 10, template_var 2)),
              template_app (template_hole 20, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_app (template_hole 14, template_var 2)),
              template_app (template_hole 20, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 5, template_var 2)),
                  template_app (template_hole 3, template_var 2)),
                template_app (template_hole 14, template_var 2)),
              template_app (template_hole 20, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantGetReasonIsReasonAfterNotifyWatches",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state);
         ALL c.
            c : set ?Wl -->
            Some ?literal = getWatch1 ?state c |
            Some ?literal = getWatch2 ?state c;
         uniq ?Wl; getM ?state = ?M @ [(opposite ?literal, ?decision)];
         InvariantGetReasonIsReason (getReason ?state) (getF ?state)
          (getM ?state) ?Q |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in Let (?Q Un (set (getQ state') - set (getQ ?state)))
              (InvariantGetReasonIsReason (getReason state') (getF state')
                (getM state'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 31, template_var 6)),
                template_app (template_hole 30, template_var 6)),
              template_app (template_hole 29, template_var 6))
            ),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate
         (template_app (template_hole 16, template_var 5)),
        template_equation
         (template_app (template_hole 14, template_var 6),
          template_app
           (template_app (template_hole 13, template_var 3),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 4)),
                  template_var 2)),
              template_hole 9))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 6)),
                  template_app (template_hole 31, template_var 6)),
                template_app (template_hole 14, template_var 6)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 5),
                   template_var 0),
                 template_var 6)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantQCharacterizationAfterAssertLiteralNotInQ",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state);
         InvariantConflictFlagCharacterization (getConflictFlag ?state)
          (getF ?state) (getM ?state);
         InvariantQCharacterization (getConflictFlag ?state) (getQ ?state)
          (getF ?state) (getM ?state);
         ~ ?literal el getQ ?state |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in InvariantQCharacterization (getConflictFlag state')
              (getQ state') (getF state') (getM state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 2)),
                template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 19, template_var 1),
                      template_var 0)),
                  template_hole 18)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 2)),
              template_app (template_hole 15, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 16, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 16, template_var 2)),
                template_app (template_hole 12, template_var 2)),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 15, template_var 2)),
                template_app (template_hole 12, template_var 2)),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 15, template_var 2)),
                template_app (template_hole 12, template_var 2)),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 15, template_var 2)),
                  template_app (template_hole 12, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 21, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_app (template_hole 15, template_var 2)),
              template_app (template_hole 21, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 2)),
                  template_app (template_hole 4, template_var 2)),
                template_app (template_hole 15, template_var 2)),
              template_app (template_hole 21, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 4, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.notifyWatchesStartQIreleveant",
     "[| InvariantWatchesEl (getF ?stateA) (getWatch1 ?stateA)
          (getWatch2 ?stateA);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?stateA);
         getM ?stateA = getM ?stateB; getF ?stateA = getF ?stateB;
         getWatch1 ?stateA = getWatch1 ?stateB;
         getWatch2 ?stateA = getWatch2 ?stateB;
         getConflictFlag ?stateA = getConflictFlag ?stateB;
         getSATFlag ?stateA = getSATFlag ?stateB |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?stateA;
              state'' = notifyWatches_loop ?literal ?Wl ?newWl ?stateB
          in getM state' = getM state'' &
             getF state' = getF state'' &
             getSATFlag state' = getSATFlag state'' &
             getConflictFlag state' = getConflictFlag state''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 4)),
                template_app (template_hole 20, template_var 4)),
              template_app (template_hole 19, template_var 4))
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_equation
         (template_app (template_hole 8, template_var 4),
          template_app (template_hole 8, template_var 2)),
        template_equation
         (template_app (template_hole 21, template_var 4),
          template_app (template_hole 21, template_var 2)),
        template_equation
         (template_app (template_hole 20, template_var 4),
          template_app (template_hole 20, template_var 2)),
        template_equation
         (template_app (template_hole 19, template_var 4),
          template_app (template_hole 19, template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 4),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app (template_hole 2, template_var 4),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3),
                   template_var 0),
                 template_var 4)),
             t_empty)
           ))),
    ("AssertLiteral.assertLiteralQEffect",
     "[| InvariantConsistent (getM ?state @ [(?literal, ?decision)]);
         InvariantUniq (getM ?state @ [(?literal, ?decision)]);
         InvariantWatchListsContainOnlyClausesFromF (getWatchList ?state)
          (getF ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         InvariantWatchListsCharacterization (getWatchList ?state)
          (getWatch1 ?state) (getWatch2 ?state);
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) (getM ?state) |]
      ==> let state' = assertLiteral ?literal ?decision ?state
          in set (getQ state') =
             set (getQ ?state) Un
             {ul.
              EX uc.
                 uc el getF ?state &
                 opposite ?literal el uc &
                 isUnitClause uc ul (elements (getM ?state) @ [?literal])}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 33,
              template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 31, template_var 2)),
                template_app
                 (template_app
                   (template_hole 30,
                    template_app
                     (template_app (template_hole 29, template_var 1),
                      template_var 0)),
                  template_hole 28)))
            ),
        template_predicate
         (
            template_app
             (template_hole 27,
              template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 31, template_var 2)),
                template_app
                 (template_app
                   (template_hole 30,
                    template_app
                     (template_app (template_hole 29, template_var 1),
                      template_var 0)),
                  template_hole 28)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app (template_hole 25, template_var 2)),
              template_app (template_hole 24, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 25, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 25, template_var 2)),
                template_app (template_hole 21, template_var 2)),
              template_app (template_hole 20, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app (template_hole 24, template_var 2)),
                template_app (template_hole 21, template_var 2)),
              template_app (template_hole 20, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 24, template_var 2)),
                template_app (template_hole 21, template_var 2)),
              template_app (template_hole 20, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 24, template_var 2)),
                  template_app (template_hole 21, template_var 2)),
                template_app (template_hole 20, template_var 2)),
              template_app (template_hole 31, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_app (template_hole 15, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           ))),
    ("AssertLiteral.InvariantWatchListsCharacterizationNotifyWatchesLoop",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchListsUniq (getWatchList ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state);
         ALL c l.
            l ~= ?literal -->
            (c : set (getWatchList ?state l)) =
            (Some l = getWatch1 ?state c | Some l = getWatch2 ?state c);
         ALL c.
            (c : set ?newWl | c : set ?Wl) =
            (Some ?literal = getWatch1 ?state c |
             Some ?literal = getWatch2 ?state c);
         set ?Wl Int set ?newWl = {}; uniq ?Wl; uniq ?newWl |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in InvariantWatchListsCharacterization (getWatchList state')
              (getWatch1 state') (getWatch2 state') &
             InvariantWatchListsUniq (getWatchList state')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 3)),
                template_app (template_hole 27, template_var 3)),
              template_app (template_hole 26, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 25,
                  template_app (template_hole 28, template_var 3)),
                template_app (template_hole 27, template_var 3)),
              template_app (template_hole 26, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 23, template_var 3))
            ),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 19, template_var 2)),
            template_app (template_hole 19, template_var 0)),
          template_hole 4),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3)),
             t_empty)
           ))),
    ("AssertLiteral.NotifyWatchesLoopWatchCharacterizationEffect",
     "[| InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantConsistent (getM ?state); InvariantUniq (getM ?state);
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) ?M;
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state);
         getM ?state = ?M @ [(opposite ?literal, ?decision)]; uniq ?Wl;
         ALL c.
            c : set ?Wl -->
            Some ?literal = getWatch1 ?state c |
            Some ?literal = getWatch2 ?state c |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in ALL c.
                c : set ?Wl -->
                (ALL w1 w2.
                    Some w1 = getWatch1 state' c &
                    Some w2 = getWatch2 state' c -->
                    watchCharacterizationCondition w1 w2 (getM state')
                     (getF state' ! c) &
                    watchCharacterizationCondition w2 w1 (getM state')
                     (getF state' ! c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 31, template_var 5)),
                template_app (template_hole 30, template_var 5)),
              template_app (template_hole 29, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 31, template_var 5)),
                template_app (template_hole 30, template_var 5)),
              template_app (template_hole 29, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 27,
              template_app (template_hole 26, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 26, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 24,
                    template_app (template_hole 31, template_var 5)),
                  template_app (template_hole 30, template_var 5)),
                template_app (template_hole 29, template_var 5)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_equation
         (template_app (template_hole 26, template_var 5),
          template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 2)),
                  template_var 1)),
              template_hole 9))),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 3),
                   template_var 0),
                 template_var 5)),
             t_empty)
           ))),
    ("AssertLiteral.NotifyWatchesLoopQEffect",
     "[| getM ?state = ?M @ [(opposite ?literal, ?decision)];
         InvariantWatchesEl (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         InvariantWatchesDiffer (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state);
         ALL c. c : set ?Wl --> 0 <= c & c < length (getF ?state);
         InvariantConsistent (getM ?state);
         ALL c.
            c : set ?Wl -->
            Some ?literal = getWatch1 ?state c |
            Some ?literal = getWatch2 ?state c;
         uniq ?Wl;
         InvariantWatchCharacterization (getF ?state) (getWatch1 ?state)
          (getWatch2 ?state) ?M |]
      ==> let state' = notifyWatches_loop ?literal ?Wl ?newWl ?state
          in (ALL l.
                 l : set (getQ state') - set (getQ ?state) -->
                 (EX clause.
                     clause el getF ?state &
                     ?literal el clause &
                     isUnitClause clause l (elements (getM ?state)))) &
             (ALL clause.
                 clause : set ?Wl -->
                 (ALL l.
                     isUnitClause (getF ?state ! clause) l
                      (elements (getM ?state)) -->
                     l : set (getQ state')))",
     template_implication
      ([template_equation
         (template_app (template_hole 38, template_var 5),
          template_app
           (template_app (template_hole 37, template_var 4),
            template_app
             (template_app
               (template_hole 36,
                template_app
                 (template_app
                   (template_hole 35,
                    template_app (template_hole 34, template_var 3)),
                  template_var 2)),
              template_hole 33))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 31, template_var 5)),
                template_app (template_hole 30, template_var 5)),
              template_app (template_hole 29, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 31, template_var 5)),
                template_app (template_hole 30, template_var 5)),
              template_app (template_hole 29, template_var 5))
            ),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 38, template_var 5))
            ),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 31, template_var 5)),
                  template_app (template_hole 30, template_var 5)),
                template_app (template_hole 29, template_var 5)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, template_var 3),
                     template_var 1),
                   template_var 0),
                 template_var 5)),
             t_empty)
           )))]
