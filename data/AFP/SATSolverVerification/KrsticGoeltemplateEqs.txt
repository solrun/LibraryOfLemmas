   [("KrsticGoel.applicableLearnCharacterization",
     "applicableLearn ?stateA =
      (getConflictFlag ?stateA = True & ~ getC ?stateA el getF ?stateA)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_dunno)),
    ("KrsticGoel.applicableBackjumpCharacterization",
     "applicableBackjump ?stateA =
      (EX l level.
          getConflictFlag ?stateA = True &
          isBackjumpLevel level l (getC ?stateA) (getM ?stateA))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app (template_hole 7, t_empty))),
    ("KrsticGoel.applicableConflictCharacterization",
     "applicableConflict ?stateA =
      (EX clause.
          getConflictFlag ?stateA = False &
          formulaEntailsClause (getF ?stateA) clause &
          clauseFalse clause (elements (getM ?stateA)))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("KrsticGoel.applicableDecideCharacterization",
     "applicableDecide ?stateA ?decisionVars =
      (EX l. var l : ?decisionVars &
             ~ l el elements (getM ?stateA) &
             ~ opposite l el elements (getM ?stateA))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty))),
    ("KrsticGoel.applicableUnitPropagateCharacterization",
     "applicableUnitPropagate ?stateA ?F0.0 ?decisionVars =
      (EX uc ul.
          formulaEntailsClause (getF ?stateA) uc &
          var ul : ?decisionVars Un vars ?F0.0 &
          isUnitClause uc ul (elements (getM ?stateA)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 11, t_empty))),
    ("KrsticGoel.applicableExplainCharacterization",
     "applicableExplain ?stateA =
      (EX l reason.
          getConflictFlag ?stateA = True &
          l el getC ?stateA &
          formulaEntailsClause (getF ?stateA) reason &
          isReason reason (opposite l) (elements (getM ?stateA)))",
     template_equation
      (template_app (template_hole 13, template_var 0),
       template_app (template_hole 12, t_empty))),
    ("KrsticGoel.finalStateNonApplicable",
     "isFinalState ?state ?F0.0 ?decisionVars =
      (~ applicableDecide ?state ?decisionVars &
       ~ applicableUnitPropagate ?state ?F0.0 ?decisionVars &
       ~ applicableBackjump ?state &
       ~ applicableLearn ?state &
       ~ applicableConflict ?state & ~ applicableExplain ?state)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 2, template_var 2))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 1, template_var 2))),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 2)))))))))]
