Loading theory "Draft.sse_boolean_algebra" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.topo_alexandrov" via "Draft.sse_operation_positive_quantification" via "Draft.sse_operation_positive")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.566s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.846s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.sse_boolean_algebra"
### 0.347s elapsed time, 1.384s cpu time, 0.113s GC time
Loading theory "Draft.sse_boolean_algebra_quantification" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.topo_alexandrov" via "Draft.sse_operation_positive_quantification")
### theory "HOL-Library.Nat_Bijection"
### 0.376s elapsed time, 1.504s cpu time, 0.113s GC time
Loading theory "Draft.sse_operation_positive" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.topo_alexandrov" via "Draft.sse_operation_positive_quantification")
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
### theory "Draft.sse_operation_positive"
### 0.125s elapsed time, 0.487s cpu time, 0.059s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.ExtrEqs")
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.sse_boolean_algebra_quantification"
### 0.346s elapsed time, 1.358s cpu time, 0.127s GC time
Loading theory "Draft.sse_operation_positive_quantification" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.topo_alexandrov")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.sse_operation_positive_quantification"
### 0.411s elapsed time, 1.481s cpu time, 0.562s GC time
Loading theory "Draft.topo_alexandrov" (required by "Draft.topo_alexandrovMoreTemplates")
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
### theory "HOL-Library.BigO"
### 0.948s elapsed time, 3.591s cpu time, 0.762s GC time
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.topo_alexandrov"
### 0.150s elapsed time, 0.512s cpu time, 0.038s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.048s elapsed time, 3.376s cpu time, 0.732s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.868s elapsed time, 5.332s cpu time, 0.924s GC time
Loading theory "Draft.Templates" (required by "Draft.topo_alexandrovMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.topo_alexandrovMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.473s elapsed time, 0.506s cpu time, 0.040s GC time
Loading theory "Draft.topo_alexandrovMoreTemplates"
val templateLemmas =
   [("topo_alexandrov.rC1", "ADDI (\<C>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("topo_alexandrov.rI1", "MULT (\<I>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("topo_alexandrov.rC3", "NOR (\<C>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("topo_alexandrov.rI3", "dNOR (\<I>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("topo_alexandrov.rC1i", "iADDI (\<C>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("topo_alexandrov.rI1i", "iMULT (\<I>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("topo_alexandrov.rC2", "reflexive ?R --> EXP (\<C>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("topo_alexandrov.sp_rel_reflex",
     "EXP ?\<C> ==> reflexive (\<R>\<^sup>C ?\<C>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("topo_alexandrov.rI2", "reflexive ?R ==> dEXP (\<I>\<^sub>R ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("topo_alexandrov.dual_rel1",
     "ALL A w. \<C>\<^sub>R ?R A w = \<I>\<^sub>R ?R\<^sup>d A w",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("topo_alexandrov.dual_rel2",
     "ALL A w. \<I>\<^sub>R ?R A w = \<C>\<^sub>R ?R\<^sup>d A w",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("topo_alexandrov.sp_rel_a",
     "MONO ?\<C> ==>
      ALL A. contains (?\<C> A) (\<C>\<^sub>R (\<R>\<^sup>C ?\<C>) A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("topo_alexandrov.sp_rel",
     "iADDI ?\<C> ==>
      ALL A w. ?\<C> A w = \<C>\<^sub>R (\<R>\<^sup>C ?\<C>) A w",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("topo_alexandrov.sp_rel_b",
     "iADDI_a ?\<C> ==>
      ALL A. contains (\<C>\<^sub>R (\<R>\<^sup>C ?\<C>) A) (?\<C> A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("topo_alexandrov.rI_Barcan",
     "ALL \<pi>.
         contains (\<I>\<^sub>R ?R (mforallB \<pi>))
          (%w. ALL X. \<I>\<^sub>R ?R (\<pi> X) w)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("topo_alexandrov.rC_Barcan",
     "ALL \<pi>.
         contains (%w. nonEmpty (%X. \<C>\<^sub>R ?R (\<pi> X) w))
          (\<C>\<^sub>R ?R (mexistsB \<pi>))",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("topo_alexandrov.rC4",
     "reflexive ?R & transitive ?R --> IDEM (\<C>\<^sub>R ?R)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_app (template_hole 2, t_empty))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("topo_alexandrov.T1_symm_a",
     "(ALL w wa. ?\<C> (%u. u = w) wa = (wa = w)) -->
      symmetric (\<R>\<^sup>C ?\<C>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 3, t_empty))
         )),
    ("topo_alexandrov.sp_rel_trans",
     "[| MONO ?\<C>; IDEM ?\<C> |] ==> transitive (\<R>\<^sup>C ?\<C>)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("topo_alexandrov.rI4",
     "[| reflexive ?R; transitive ?R |] ==> IDEM (\<I>\<^sub>R ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("topo_alexandrov.T0_antisymm_a",
     "MONO ?\<C> ==>
      (ALL w.
          contains
           (%v. nonEmpty
                 (%G. (ALL w. ?\<C>\<^sup>d G w = G w) & G w ~= G v))
           ((~=) w)) -->
      antisymmetric (\<R>\<^sup>C ?\<C>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app (template_hole 7, t_empty))
           ))),
    ("topo_alexandrov.T0_antisymm_b",
     "[| EXP ?\<C>; IDEM ?\<C> |]
      ==> antisymmetric (\<R>\<^sup>C ?\<C>) -->
          (ALL w.
              contains
               (%v. nonEmpty
                     (%G. (ALL w. ?\<C>\<^sup>d G w = G w) & G w ~= G v))
               ((~=) w))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app (template_hole 7, t_empty))
           ))),
    ("topo_alexandrov.T0_antisymm",
     "[| MONO ?\<C>; EXP ?\<C>; IDEM ?\<C> |]
      ==> (ALL w.
              contains
               (%v. nonEmpty
                     (%G. (ALL w. ?\<C>\<^sup>d G w = G w) & G w ~= G v))
               ((~=) w)) =
          antisymmetric (\<R>\<^sup>C ?\<C>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app (template_hole 7, t_empty)))),
    ("topo_alexandrov.T1_symm",
     "[| MONO ?\<C>; EXP ?\<C>;
         ALL w.
            contains
             (%v. nonEmpty
                   (%G. (ALL w. ?\<C>\<^sup>d G w = G w) & G w ~= G v))
             ((~=) w) |]
      ==> symmetric (\<R>\<^sup>C ?\<C>) =
          (ALL w wa. ?\<C> (%u. u = w) wa = (wa = w))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 8, t_empty)))),
    ("topo_alexandrov.T1_symm_b",
     "[| MONO ?\<C>; EXP ?\<C>;
         ALL w.
            contains
             (%v. nonEmpty
                   (%G. (ALL w. ?\<C>\<^sup>d G w = G w) & G w ~= G v))
             ((~=) w) |]
      ==> symmetric (\<R>\<^sup>C ?\<C>) -->
          (ALL w wa. ?\<C> (%u. u = w) wa = (wa = w))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 8, t_empty)),
             template_app (template_hole 8, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.topo_alexandrovMoreTemplates"
### 0.348s elapsed time, 0.468s cpu time, 0.062s GC time
val it = (): unit
