Loading theory "Draft.sse_boolean_algebra" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.sse_boolean_algebra_quantification")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.548s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.857s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.sse_boolean_algebra"
### 0.313s elapsed time, 1.233s cpu time, 0.115s GC time
Loading theory "Draft.sse_boolean_algebra_quantification" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.309s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.ExtrEqs")
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.sse_boolean_algebra_quantification"
### 0.416s elapsed time, 1.646s cpu time, 0.125s GC time
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.994s elapsed time, 3.473s cpu time, 0.740s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.988s elapsed time, 3.271s cpu time, 0.705s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.819s elapsed time, 4.731s cpu time, 0.838s GC time
Loading theory "Draft.Templates" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.106s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.sse_boolean_algebra_quantificationMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.458s cpu time, 0.000s GC time
Loading theory "Draft.sse_boolean_algebra_quantificationMoreTemplates"
val templateLemmas =
   [("sse_boolean_algebra_quantification.dom_compl_invol",
     "?D = ?D\<inverse>\<inverse>",
     template_equation
      (template_var 0,
       template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)))),
    ("sse_boolean_algebra_quantification.iDM_a",
     "infimum\<^sup>c ?S = \<^bold>\<Or>?S\<inverse>",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("sse_boolean_algebra_quantification.iDM_b",
     "supremum\<^sup>c ?S = \<^bold>\<And>?S\<inverse>",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("sse_boolean_algebra_quantification.Ra_dual1",
     "Ra[?\<pi>\<^sup>d|?D] = Ra[?\<pi>|?D\<inverse>]\<inverse>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("sse_boolean_algebra_quantification.Ra_dual3",
     "Ra[?\<pi>\<^sup>d|?D]\<inverse> = Ra[?\<pi>|?D\<inverse>]",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("sse_boolean_algebra_quantification.Ra_dual4",
     "Ra[?\<pi>\<^sup>d|?D\<inverse>] = Ra[?\<pi>|?D]\<inverse>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("sse_boolean_algebra_quantification.Ra_all",
     "\<^bold>\<And>Ra?\<pi> = mforallB ?\<pi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("sse_boolean_algebra_quantification.Ra_ex",
     "\<^bold>\<Or>Ra?\<pi> = mexistsB ?\<pi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("sse_boolean_algebra_quantification.Ra_compl",
     "Ra[?\<pi>\<^sup>c|?D] = Ra[?\<pi>|?D]\<inverse>",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("sse_boolean_algebra_quantification.Ra_dual2",
     "Ra[?\<pi>\<^sup>d|?D] = Ra[?\<pi>\<^sup>c|?D\<inverse>]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("sse_boolean_algebra_quantification.Ra_all_restr",
     "\<^bold>\<And>Ra[?\<pi>|?D] = (%w. contains (%X. ?\<pi> X w) ?D)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("sse_boolean_algebra_quantification.Ra_ex_restr",
     "\<^bold>\<Or>Ra[?\<pi>|?D] = (%w. nonEmpty (%X. ?D X & ?\<pi> X w))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("sse_boolean_algebra_quantification.Ra_all_comp1",
     "mforallB (?\<pi> o ?\<gamma>) =
      (%w. contains (%X. ?\<pi> X w) Ra?\<gamma>)",
     template_equation (t_empty, t_empty)),
    ("sse_boolean_algebra_quantification.Ra_ex_comp1",
     "mexistsB (?\<pi> o ?\<gamma>) =
      (%w. nonEmpty (%X. Ra?\<gamma> X & ?\<pi> X w))",
     template_equation (t_empty, t_empty)),
    ("sse_boolean_algebra_quantification.all_restr",
     "\<^bold>\<forall>\<^sup>R?\<delta>?\<pi> =
      \<^bold>\<forall>\<^sup>R?\<delta>?\<pi>",
     template_equation (t_empty, t_empty)),
    ("sse_boolean_algebra_quantification.ex_restr",
     "\<^bold>\<exists>\<^sup>R?\<delta>?\<pi> =
      \<^bold>\<exists>\<^sup>R?\<delta>?\<pi>",
     template_equation (t_empty, t_empty)),
    ("sse_boolean_algebra_quantification.sup_char",
     "contains (contains \<^bold>\<Or>?S) ?S &
      contains (%X. contains X \<^bold>\<Or>?S)
       (%X. contains (contains X) ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 3, t_empty))
         )),
    ("sse_boolean_algebra_quantification.inf_char",
     "contains (%X. contains X \<^bold>\<And>?S) ?S &
      contains (contains \<^bold>\<And>?S)
       (%X. contains (%Xa. contains Xa X) ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 3, t_empty))
         ))]:
   (string * thm * template) list
### theory "Draft.sse_boolean_algebra_quantificationMoreTemplates"
### 0.328s elapsed time, 0.433s cpu time, 0.052s GC time
val it = (): unit
