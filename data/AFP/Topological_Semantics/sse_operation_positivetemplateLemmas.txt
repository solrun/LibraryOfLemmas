   [("sse_operation_positive.ADDIb_MULTa",
     "ADDI_b ?\<phi> = MULT_a ?\<phi>",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("sse_operation_positive.MONO_ADDIb", "MONO ?\<phi> = ADDI_b ?\<phi>",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("sse_operation_positive.MONO_MULTa", "MONO ?\<phi> = MULT_a ?\<phi>",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("sse_operation_positive.IDEM_dual",
     "IDEM ?\<phi> = IDEM ?\<phi>\<^sup>d",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("sse_operation_positive.NOR_dual1",
     "NOR ?\<phi> = dNOR ?\<phi>\<^sup>d",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("sse_operation_positive.NOR_dual2",
     "dNOR ?\<phi> = NOR ?\<phi>\<^sup>d",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("sse_operation_positive.EXP_dual1",
     "EXP ?\<phi> ==> dEXP ?\<phi>\<^sup>d",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("sse_operation_positive.IDEM_dual1",
     "IDEMa ?\<phi> ==> IDEMb ?\<phi>\<^sup>d",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("sse_operation_positive.IDEM_dual2",
     "IDEMb ?\<phi> ==> IDEMa ?\<phi>\<^sup>d",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("sse_operation_positive.MONO_dual",
     "MONO ?\<phi> ==> MONO ?\<phi>\<^sup>d",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("sse_operation_positive.EXP_dual2",
     "dEXP ?\<phi> ==> EXP ?\<phi>\<^sup>d",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("sse_operation_positive.dEXP_fp",
     "dEXP ?\<phi> ==>
      ?\<phi>\<^sup>f\<^sup>p \<^bold>\<equiv>
      ?\<phi> \<^bold>\<squnion> compl",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (template_app (template_app (template_hole 3, t_empty), t_empty)))),
    ("sse_operation_positive.EXP_fp",
     "EXP ?\<phi> ==>
      ?\<phi>\<^sup>f\<^sup>p \<^bold>\<equiv>
      ?\<phi>\<^sup>c \<^bold>\<squnion> id",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (template_app (template_app (template_hole 4, t_empty), t_empty)))),
    ("sse_operation_positive.MONO_cons",
     "MONO ?\<phi> ==>
      ALL A B C.
         B \<^bold>\<succeq> A -->
         ?\<phi> (C \<^bold>\<rightarrow> B) \<^bold>\<succeq>
         ?\<phi> (C \<^bold>\<rightarrow> A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("sse_operation_positive.MONO_ant",
     "MONO ?\<phi> ==>
      ALL A B C.
         B \<^bold>\<succeq> A -->
         ?\<phi> (A \<^bold>\<rightarrow> C) \<^bold>\<succeq>
         ?\<phi> (B \<^bold>\<rightarrow> C)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty))))]
