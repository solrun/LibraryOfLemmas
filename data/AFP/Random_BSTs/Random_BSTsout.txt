Loading theory "Draft.Random_BSTs" (required by "Draft.Random_BSTsTemplates")
Loading theory "HOL-Library.BigO" (required by "Draft.Random_BSTsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Random_BSTsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.255s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.652s elapsed time, 1.458s cpu time, 0.132s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Random_BSTsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.482s elapsed time, 0.994s cpu time, 0.072s GC time
### Ignoring duplicate rewrite rule:
### set_tree ?t1 = {} == ?t1 = \<langle>\<rangle>
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  lookup_cost :: "'a => 'a tree => nat"
### theory "Draft.Random_BSTs"
### 1.568s elapsed time, 2.993s cpu time, 0.321s GC time
Loading theory "Draft.Random_BSTsTemplates"
val templateLemmas =
   [("Random_BSTs.finite_pmf_set_eheight_rbst",
     "finite (set_pmf (eheight_rbst ?n))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Random_BSTs.set_bst_of_list", "set_tree (bst_of_list ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Random_BSTs.eheight_Node_singleton",
     "eheight \<langle>\<langle>\<rangle>, ?x, \<langle>\<rangle>\<rangle> =
      1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Random_BSTs.bst_of_list_altdef",
     "bst_of_list ?xs = fold Tree_Set.insert ?xs \<langle>\<rangle>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Random_BSTs.set_tree_empty_iff",
     "(set_tree ?t = {}) = (?t = \<langle>\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Random_BSTs.bst_of_list_eq_Leaf_iff",
     "(bst_of_list ?xs = \<langle>\<rangle>) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Random_BSTs.Nil_in_permutations_of_set_iff",
     "([] : permutations_of_set ?A) = (?A = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Random_BSTs.finite_set_random_bst",
     "finite ?A ==> finite (set_pmf (random_bst ?A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Random_BSTs.set_bst_insert",
     "set_tree (Tree_Set.insert ?x ?t) = insert ?x (set_tree ?t)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Random_BSTs.ln_sum_bigo_ln", "(%x. ln (x + ?c)) : O(ln)",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 3))
         )),
    ("Random_BSTs.bst_of_list_append",
     "bst_of_list (?xs @ ?ys) = fold Tree_Set.insert ?ys (bst_of_list ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Random_BSTs.random_bst_code",
     "random_bst (set ?xs) =
      map_pmf bst_of_list (pmf_of_set (permutations_of_set (set ?xs)))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)))))),
    ("Random_BSTs.random_bst_singleton",
     "random_bst {?x} =
      return_pmf
       \<langle>\<langle>\<rangle>, ?x, \<langle>\<rangle>\<rangle>",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_hole 0)))),
    ("Random_BSTs.size_bst_of_list_distinct",
     "distinct ?xs ==> size (bst_of_list ?xs) = length ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Random_BSTs.bst_of_list_snoc",
     "bst_of_list (?xs @ [?y]) = Tree_Set.insert ?y (bst_of_list ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 4, template_var 1)))),
    ("Random_BSTs.random_bst_altdef'",
     "finite ?A ==>
      random_bst ?A =
      fold_random_permutation Tree_Set.insert \<langle>\<rangle> ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)))),
    ("Random_BSTs.card_set_tree_bst",
     "bst ?t ==> card (set_tree ?t) = size ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Random_BSTs.eheight_rbst",
     "finite ?A ==>
      eheight_rbst (card ?A) = map_pmf eheight (random_bst ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Random_BSTs.map_pmf_random_bst_eq_rqs_cost",
     "finite ?A ==> map_pmf ipl (random_bst ?A) = rqs_cost (card ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Random_BSTs.random_bst_altdef",
     "finite ?A ==>
      random_bst ?A =
      map_pmf bst_of_list (pmf_of_set (permutations_of_set ?A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Random_BSTs.Leaf_in_set_random_bst_iff",
     "finite ?A ==>
      (\<langle>\<rangle> : set_pmf (random_bst ?A)) = (?A = {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0)))
              )],
         template_equation (template_var 0, template_hole 0)))),
    ("Random_BSTs.sum_lookup_costs",
     "bst ?t ==> (SUM x:set_tree ?t. lookup_cost x ?t) = ipl ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Random_BSTs.size_bst_insert",
     "?x ~: set_tree ?t ==> size (Tree_Set.insert ?x ?t) = Suc (size ?t)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Random_BSTs.expected_ipl_random_bst_eq",
     "finite ?A ==>
      measure_pmf.expectation (random_bst ?A) (%x. real (ipl x)) =
      rqs_cost_exp (card ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           t_empty),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Random_BSTs.size_random_bst",
     "[| ?t : set_pmf (random_bst ?A); finite ?A |] ==> size ?t = card ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Random_BSTs.pair_pmf_cong",
     "[| ?p = ?p'; ?q = ?q' |] ==> pair_pmf ?p ?q = pair_pmf ?p' ?q'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Random_BSTs.eheight_exp_bound",
     "eheight_exp ?n <= real (?n + 3 choose 3) / 4",
     template_inequation
      (less_equals, template_app (template_hole 9, template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 0, template_hole 2)))))),
    ("Random_BSTs.set_pmf_random_permutation",
     "finite ?A ==>
      set_pmf (pmf_of_set (permutations_of_set ?A)) =
      {xs. distinct xs & set xs = ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 4, t_empty)))),
    ("Random_BSTs.max_power_distrib_right",
     "(1::?'a) < ?a ==> max (?a ^ ?b) (?a ^ ?c) = ?a ^ max ?b ?c",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Random_BSTs.random_bst_image",
     "[| finite ?A; strict_mono_on ?f ?A |]
      ==> random_bst (?f ` ?A) = map_pmf (map_tree ?f) (random_bst ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Random_BSTs.bst_of_list_map",
     "[| strict_mono_on ?f ?A; set ?xs <= ?A |]
      ==> bst_of_list (map ?f ?xs) = map_tree ?f (bst_of_list ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Random_BSTs.eheight_exp_reduce_bound",
     "1 < ?n ==> eheight_exp ?n <= 4 / real ?n * sum eheight_exp {..<?n}",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Random_BSTs.height_expectation_bound",
     "[| finite ?A; ?A ~= {} |]
      ==> measure_pmf.expectation (random_bst ?A) (%x. real (height x))
          <= height_exp_approx (card ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           t_empty),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Random_BSTs.strict_mono_on_imp_less_iff",
     "[| strict_mono_on ?f ?A; ?x : ?A; ?y : ?A |]
      ==> (?f ?x < ?f ?y) = (?x < ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 3, template_var 1)),
           template_app (template_var 3, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Random_BSTs.eheight_Node",
     "?l ~= \<langle>\<rangle> | ?r ~= \<langle>\<rangle> ==>
      eheight \<langle>?l, ?x, ?r\<rangle> =
      2 * max (eheight ?l) (eheight ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 8))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_hole 8)))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 6, template_var 2)),
             template_app (template_hole 6, template_var 1)))))),
    ("Random_BSTs.expected_lookup_cost",
     "[| bst ?t; ?t ~= \<langle>\<rangle> |]
      ==> measure_pmf.expectation (pmf_of_set (set_tree ?t))
           (%x. real (lookup_cost x ?t)) =
          real (ipl ?t) / real (size ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)))),
           t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 4,
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0)))))),
    ("Random_BSTs.eheight_rbst_reduce",
     "1 < ?n ==>
      eheight_rbst ?n =
      pmf_of_set {..<?n} >>=
      (%k. eheight_rbst k >>=
           (%h1. eheight_rbst (?n - k - 1) >>=
                 (%h2. return_pmf (2 * max h1 h2))))",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 0)],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0))),
           t_empty)))),
    ("Random_BSTs.expectation_add_pair_pmf",
     "[| finite (set_pmf ?p); finite (set_pmf ?q) |]
      ==> measure_pmf.expectation (pair_pmf ?p ?q) (%(x, y). ?f x + ?g y) =
          measure_pmf.expectation ?p ?f + measure_pmf.expectation ?q ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2))),
           template_app (template_hole 5, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 3)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Random_BSTs.expected_ipl_random_bst_eq'",
     "finite ?A ==>
      measure_pmf.expectation (random_bst ?A) (%x. real (ipl x)) =
      2 * real (card ?A + 1) * harm (card ?A) - 4 * real (card ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 0))),
           t_empty),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       template_hole 1)))),
               template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0)))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 5, template_hole 4)))),
             template_app
              (template_hole 10,
               template_app (template_hole 2, template_var 0)))))))]:
   (string * thm * template) list
### theory "Draft.Random_BSTsTemplates"
### 1.448s elapsed time, 2.195s cpu time, 0.716s GC time
val it = (): unit
