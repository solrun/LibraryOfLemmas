Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Transposition"
### 0.124s elapsed time, 0.523s cpu time, 0.000s GC time
Loading theory "HOL-Library.Fun_Lexorder" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### theory "HOL-Library.Fun_Lexorder"
### 0.058s elapsed time, 0.217s cpu time, 0.040s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.424s elapsed time, 1.695s cpu time, 0.123s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.473s elapsed time, 1.895s cpu time, 0.123s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.FuncSet"
### 0.370s elapsed time, 1.450s cpu time, 0.148s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "HOL-Combinatorics.Permutations")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Function_Algebras"
### 0.113s elapsed time, 0.436s cpu time, 0.064s GC time
Loading theory "HOL-Library.Groups_Big_Fun" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
locale comm_monoid_fun
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fun (\<^bold>*) \<^bold>1"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### Cannot skip proof of schematic goal statement
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.974s elapsed time, 3.714s cpu time, 0.658s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Disjoint_Sets"
### 0.419s elapsed time, 1.524s cpu time, 0.471s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Groups_Big_Fun"
### 0.406s elapsed time, 1.468s cpu time, 0.471s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.More_List"
### 0.202s elapsed time, 0.801s cpu time, 0.086s GC time
Loading theory "HOL-Library.Poly_Mapping" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type")
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.371s cpu time, 0.175s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.374s elapsed time, 1.468s cpu time, 0.175s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
class zero = type +
  fixes zero :: "'a"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.896s cpu time, 0.118s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
instantiation
  poly_mapping :: (type, zero) zero
  zero_poly_mapping == zero_class.zero :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, monoid_add) monoid_add
  plus_poly_mapping == plus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  poly_mapping :: (type, cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly_mapping == minus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, ab_group_add) ab_group_add
  uminus_poly_mapping == uminus ::
    ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (zero, zero_neq_one) zero_neq_one
  one_poly_mapping == one_class.one :: 'a \<Rightarrow>\<^sub>0 'b
consts
  snth :: "'a stream => nat => 'a"
instantiation
  poly_mapping :: (monoid_add, semiring_0) semiring_0
  times_poly_mapping == times ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
instantiation
  poly_mapping :: (linorder, {zero,linorder}) linorder
  less_eq_poly_mapping == less_eq ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
  less_poly_mapping == less ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  mset :: "'a list => 'a multiset"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.211s elapsed time, 4.584s cpu time, 1.224s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
instantiation
  poly_mapping :: (type, zero) size
  size_poly_mapping == size :: ('a \<Rightarrow>\<^sub>0 'b) => nat
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Poly_Mapping"
### 1.665s elapsed time, 6.374s cpu time, 1.524s GC time
Loading theory "Polynomials.MPoly_Type" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type")
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Poly_Mapping.poly_mapping" found.
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  mpoly :: (zero) zero
  zero_mpoly == zero_class.zero :: 'a mpoly
instantiation
  mpoly :: (monoid_add) monoid_add
  plus_mpoly == plus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_mpoly == minus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (ab_group_add) ab_group_add
  uminus_mpoly == uminus :: 'a mpoly => 'a mpoly
Found termination order: "size <*mlex*> {}"
instantiation
  mpoly :: (zero_neq_one) zero_neq_one
  one_mpoly == one_class.one :: 'a mpoly
instantiation
  mpoly :: (semiring_0) semiring_0
  times_mpoly == times :: 'a mpoly => 'a mpoly => 'a mpoly
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 494 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>div" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 498 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>mod" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/Polynomials/MPoly_Type.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Polynomials.MPoly_Type"
### 0.888s elapsed time, 3.308s cpu time, 1.370s GC time
Loading theory "Polynomials.More_MPoly_Type" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials")
### theory "HOL-Library.BigO"
### 1.232s elapsed time, 4.665s cpu time, 1.581s GC time
MPoly (mapping_of ?x) = ?x
?y : UNIV ==> mapping_of (MPoly ?y) = ?y
(mapping_of ?x = mapping_of ?y) = (?x = ?y)
[| ?x : UNIV; ?y : UNIV |] ==> (MPoly ?x = MPoly ?y) = (?x = ?y)
[| ?y : UNIV; !!x. ?P (mapping_of x) |] ==> ?P ?y
(!!y. y : UNIV ==> ?P (MPoly y)) ==> ?P ?x
[| ?y : UNIV; !!x. ?y = mapping_of x ==> ?P |] ==> ?P
(!!y. [| ?x = MPoly y; y : UNIV |] ==> ?P) ==> ?P
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Polynomials.More_MPoly_Type"
### 0.322s elapsed time, 1.272s cpu time, 0.177s GC time
Found termination order: "size <*mlex*> {}"
"(Gcd (coeffs
        (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
          6 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
          8)),
  sdiv
   (Gcd (coeffs
          (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
            6 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
            8)))
   (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
    M [(1::'b) + (1::'b), 0::'b, (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
     6 +
    M [(1::'b) + (1::'b), 0::'b,
       (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
     8))"
  :: "'a * 'a mpoly"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.693s elapsed time, 10.025s cpu time, 2.918s GC time
Loading theory "Draft.Templates" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.114s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.475s elapsed time, 15.764s cpu time, 3.956s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.589s elapsed time, 1.291s cpu time, 0.210s GC time
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 0.775s elapsed time, 1.759s cpu time, 0.325s GC time
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.111s elapsed time, 7.407s cpu time, 2.184s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 0.999s elapsed time, 3.130s cpu time, 0.343s GC time
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.640s elapsed time, 10.779s cpu time, 1.324s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.224s elapsed time, 0.489s cpu time, 0.092s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.894s elapsed time, 13.619s cpu time, 1.608s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.220s elapsed time, 0.697s cpu time, 0.109s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.207s elapsed time, 0.810s cpu time, 0.220s GC time
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.444s elapsed time, 1.562s cpu time, 0.329s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
### theory "HOL-Computational_Algebra.Squarefree"
### 0.228s elapsed time, 0.872s cpu time, 0.220s GC time
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.836s elapsed time, 1.867s cpu time, 0.270s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.745s elapsed time, 1.647s cpu time, 0.348s GC time
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.093s elapsed time, 0.232s cpu time, 0.095s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.251s elapsed time, 0.546s cpu time, 0.087s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 2.802s elapsed time, 6.248s cpu time, 1.184s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.456s elapsed time, 0.497s cpu time, 0.031s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.507s elapsed time, 1.729s cpu time, 0.309s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.938s elapsed time, 0.968s cpu time, 0.033s GC time
Loading theory "Symmetric_Polynomials.Vieta" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials")
### theory "Symmetric_Polynomials.Vieta"
### 0.542s elapsed time, 0.573s cpu time, 0.043s GC time
Loading theory "Symmetric_Polynomials.Symmetric_Polynomials" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates" via "Draft.Power_Sum_Polynomials_Library")
### Ignoring duplicate rewrite rule:
### length (sorted_list_of_set ?A1) == card ?A1
locale ring_closed
  fixes A :: "'a set"
  assumes "ring_closed A"
locale ring_homomorphism
  fixes f :: "'a => 'b"
  assumes "ring_homomorphism f"
### theory "Symmetric_Polynomials.Symmetric_Polynomials"
### 1.481s elapsed time, 1.644s cpu time, 0.225s GC time
Loading theory "Draft.Power_Sum_Polynomials_Library" (required by "Draft.Power_Sum_Polynomials_LibraryMoreTemplates")
### theory "Draft.Power_Sum_Polynomials_Library"
### 0.474s elapsed time, 0.517s cpu time, 0.059s GC time
Loading theory "Draft.Power_Sum_Polynomials_LibraryMoreTemplates"
val templateLemmas =
   [("Power_Sum_Polynomials_Library.smult_0_right",
     "MPoly_Type.smult ?p 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Power_Sum_Polynomials_Library.gcd_poly_code_aux_reduce",
     "gcd_poly_code_aux ?p 0 = normalize ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.mpoly_monom_0_eq_Const",
     "MPoly_Type.monom 0 ?c = Const ?c",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.of_nat_mpoly_eq",
     "of_nat ?n = Const (of_nat ?n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.poly_roots_const",
     "poly_roots [:?c:] = {#}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Power_Sum_Polynomials_Library.poly_of_int",
     "poly (of_int ?n) ?x = of_int ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Power_Sum_Polynomials_Library.insertion_of_nat",
     "insertion ?f (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.poly_of_nat",
     "poly (of_nat ?n) ?x = of_nat ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_uminus",
     "Const (- ?a) = - Const ?a",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.coprime_pderiv_imp_squarefree",
     "coprime ?p (pderiv ?p) ==> squarefree ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.coprime_pderiv_imp_rsquarefree",
     "coprime ?p (pderiv ?p) ==> rsquarefree ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_power",
     "Const (?a ^ ?n) = Const ?a ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Power_Sum_Polynomials_Library.sym_mpoly_0",
     "finite ?A ==> sym_mpoly ?A 0 = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_mult",
     "Const (?a * ?b) = Const ?a * Const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_add",
     "Const (?a + ?b) = Const ?a + Const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mult_smult_right",
     "?p * MPoly_Type.smult ?c ?q = MPoly_Type.smult ?c (?p * ?q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Power_Sum_Polynomials_Library.poly_roots_linear",
     "poly_roots [:- ?x, 1::?'a:] = {#?x#}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 5, template_hole 3),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Power_Sum_Polynomials_Library.sym_mpoly_eq_0",
     "card ?A < ?k ==> sym_mpoly ?A ?k = 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.count_poly_roots'",
     "count (poly_roots ?p) ?x = (if ?p = 0 then 0 else order ?x ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Power_Sum_Polynomials_Library.poly_roots_smult",
     "?c ~= (0::?'a) ==>
      poly_roots (Polynomial.smult ?c ?p) = poly_roots ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Power_Sum_Polynomials_Library.squarefree_field_poly_iff",
     "?p ~= 0 ==> squarefree ?p = coprime ?p (pderiv ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Power_Sum_Polynomials_Library.rsquarefree_imp_distinct_roots",
     "[| rsquarefree ?p; mset ?xs = poly_roots ?p |] ==> distinct ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.insertion_monom_of_set",
     "insertion ?f (MPoly_Type.monom (monom_of_set ?X) ?c) =
      ?c * prod ?f ?X",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Power_Sum_Polynomials_Library.poly_roots_monom",
     "?c ~= (0::?'a) ==>
      poly_roots (Polynomial.monom ?c ?n) = replicate_mset ?n (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 4)))),
    ("Power_Sum_Polynomials_Library.count_poly_roots",
     "?p ~= 0 ==> count (poly_roots ?p) ?x = order ?x ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Power_Sum_Polynomials_Library.rsquarefree_poly_roots_eq",
     "rsquarefree ?p ==>
      poly_roots ?p = mset_set {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Power_Sum_Polynomials_Library.poly_roots_power",
     "?p ~= 0 ==> poly_roots (?p ^ ?n) = repeat_mset ?n (poly_roots ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Power_Sum_Polynomials_Library.poly_roots_prod_list",
     "0 ~: set ?xs ==>
      poly_roots (prod_list ?xs) = sum_list (map poly_roots ?xs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("Power_Sum_Polynomials_Library.poly_roots_prod_mset",
     "0 ~:# ?A ==>
      poly_roots (\<Prod>\<^sub># ?A) =
      \<Sum>\<^sub># (image_mset poly_roots ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("Power_Sum_Polynomials_Library.gcd_poly_code_aux_reduce",
     "?q ~= 0 ==>
      gcd_poly_code_aux ?p ?q =
      gcd_poly_code_aux ?q (primitive_part (pseudo_mod ?p ?q))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Power_Sum_Polynomials_Library.order_power",
     "?p ~= 0 ==> order ?x (?p ^ ?n) = ?n * order ?x ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("Power_Sum_Polynomials_Library.set_mset_poly_roots",
     "?p ~= 0 ==> set_mset (poly_roots ?p) = {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Power_Sum_Polynomials_Library.order_pos_iff",
     "?p ~= 0 ==> (0 < order ?x ?p) = (poly ?p ?x = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Power_Sum_Polynomials_Library.in_poly_roots_iff",
     "?p ~= 0 ==> (?x :# poly_roots ?p) = (poly ?p ?x = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Power_Sum_Polynomials_Library.order_prod_list",
     "0 ~: set ?xs ==>
      order ?x (prod_list ?xs) = sum_list (map (order ?x) ?xs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)),
             template_var 1))))),
    ("Power_Sum_Polynomials_Library.order_prod_mset",
     "0 ~:# ?A ==>
      order ?x (\<Prod>\<^sub># ?A) =
      \<Sum>\<^sub># (image_mset (order ?x) ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)),
             template_var 1))))),
    ("Power_Sum_Polynomials_Library.atLeastAtMost_nat_numeral",
     "{?m..numeral ?k} =
      (if ?m <= numeral ?k then insert (numeral ?k) {?m..pred_numeral ?k}
       else {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.fundamental_theorem_algebra_factorized'",
     "?p =
      Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD x:#poly_roots ?p. [:- x, 1:])",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Power_Sum_Polynomials_Library.order_eq_0_iff",
     "?p ~= 0 ==> (order ?x ?p = 0) = (poly ?p ?x ~= (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1),
           template_hole 3),
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0)
             )))),
    ("Power_Sum_Polynomials_Library.sum_in_Rats",
     "(!!x. x : ?A ==> ?f x : \<rat>) ==> sum ?f ?A : \<rat>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Power_Sum_Polynomials_Library.poly_roots_factorization",
     "?c ~= (0::?'a) ==>
      poly_roots (Polynomial.smult ?c (PROD x:#?A. [:- x, 1::?'a:])) = ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_var 0)))),
         template_var 0))),
    ("Power_Sum_Polynomials_Library.Sum_any_zeroI'",
     "(!!x. ?P x ==> ?f x = (0::?'b)) ==>
      (SUM x. ?f x when ?P x) = (0::?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 1, t_empty), template_hole 2))),
    ("Power_Sum_Polynomials_Library.poly_roots_eq_imp_eq",
     "[| Polynomial.lead_coeff ?p = Polynomial.lead_coeff ?q;
         poly_roots ?p = poly_roots ?q |]
      ==> ?p = ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_hole 3, template_var 0))),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Power_Sum_Polynomials_Library.poly_roots_mult",
     "[| ?p ~= 0; ?q ~= 0 |]
      ==> poly_roots (?p * ?q) = poly_roots ?p + poly_roots ?q",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Power_Sum_Polynomials_Library.coeff_sym_mpoly_monom_of_set_eq_0'",
     "[| finite ?X; ~ ?Y <= ?X; finite ?Y |]
      ==> MPoly_Type.coeff (sym_mpoly ?X ?k) (monom_of_set ?Y) = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1, template_var 2)
            ),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.mapping_single_eq_iff",
     "(Poly_Mapping.single ?a ?b = Poly_Mapping.single ?c ?d) =
      (?b = (0::?'b) & ?d = (0::?'b) | ?a = ?c & ?b = ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)))
           ))),
    ("Power_Sum_Polynomials_Library.coeff_sym_mpoly_monom_of_set_eq_0",
     "[| finite ?X; ?Y <= ?X; card ?Y ~= ?k |]
      ==> MPoly_Type.coeff (sym_mpoly ?X ?k) (monom_of_set ?Y) = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.poly_roots_prod",
     "(!!x. x : ?A ==> ?f x ~= 0) ==>
      poly_roots (prod ?f ?A) = (SUM x:?A. poly_roots (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Power_Sum_Polynomials_Library.monom_of_set_plus_monom_of_set",
     "[| ?A Int ?B = {}; finite ?A; finite ?B |]
      ==> monom_of_set ?A + monom_of_set ?B = monom_of_set (?A Un ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Power_Sum_Polynomials_Library.order_prod",
     "(!!x. x : ?A ==> ?f x ~= 0) ==>
      order ?x (prod ?f ?A) = (SUM y:?A. order ?x (?f y))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Power_Sum_Polynomials_Library.sym_mpoly_insert",
     "[| finite ?X; ?x ~: ?X |]
      ==> sym_mpoly (insert ?x ?X) (Suc ?k) =
          MPoly_Type.monom (monom_of_set {?x}) (1::?'a) * sym_mpoly ?X ?k +
          sym_mpoly ?X (Suc ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 2)),
           template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 7, template_var 1),
                         template_hole 1))),
                   template_hole 0)),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app (template_hole 6, template_var 0)))))),
    ("Power_Sum_Polynomials_Library.coprimeI_primes",
     "[| ?a ~= (0::?'a) | ?b ~= (0::?'a);
         !!p. [| prime p; p dvd ?a; p dvd ?b |] ==> False |]
      ==> coprime ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_hole 5))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Power_Sum_Polynomials_Library.symmetric_mpoly_symmetric_sum",
     "[| !!\<pi>. \<pi> permutes ?A ==> ?g \<pi> permutes ?X;
         !!x \<pi>.
            [| x : ?X; \<pi> permutes ?A |]
            ==> mpoly_map_vars \<pi> (?f x) = ?f (?g \<pi> x) |]
      ==> symmetric_mpoly ?A (sum ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Power_Sum_Polynomials_LibraryMoreTemplates"
### 0.647s elapsed time, 0.877s cpu time, 0.111s GC time
val it = (): unit
