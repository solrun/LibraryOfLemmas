   [("Power_Sum_Polynomials_Library.smult_0_right",
     "MPoly_Type.smult ?p 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Power_Sum_Polynomials.powsum_mpoly_empty", "powsum_mpoly {} ?k = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Power_Sum_Polynomials_Library.gcd_poly_code_aux_reduce",
     "gcd_poly_code_aux ?p 0 = normalize ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.mpoly_monom_0_eq_Const",
     "MPoly_Type.monom 0 ?c = Const ?c",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.of_nat_mpoly_eq",
     "of_nat ?n = Const (of_nat ?n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.poly_roots_const",
     "poly_roots [:?c:] = {#}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Power_Sum_Polynomials.vars_powsum_mpoly_subset",
     "vars (powsum_mpoly ?A ?k) <= ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Power_Sum_Polynomials_Library.poly_of_int",
     "poly (of_int ?n) ?x = of_int ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Power_Sum_Polynomials_Library.insertion_of_nat",
     "insertion ?f (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.poly_of_nat",
     "poly (of_nat ?n) ?x = of_nat ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Power_Sum_Polynomials.powsum_mpoly_0",
     "powsum_mpoly ?X 0 = of_nat (card ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_uminus",
     "Const (- ?a) = - Const ?a",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.coprime_pderiv_imp_squarefree",
     "coprime ?p (pderiv ?p) ==> squarefree ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.coprime_pderiv_imp_rsquarefree",
     "coprime ?p (pderiv ?p) ==> rsquarefree ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_power",
     "Const (?a ^ ?n) = Const ?a ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Power_Sum_Polynomials_Library.sym_mpoly_0",
     "finite ?A ==> sym_mpoly ?A 0 = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_mult",
     "Const (?a * ?b) = Const ?a * Const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_add",
     "Const (?a + ?b) = Const ?a + Const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials.powsum_mpoly_infinite",
     "infinite ?A ==> powsum_mpoly ?A ?k = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Power_Sum_Polynomials.symmetric_powsum_mpoly",
     "?A <= ?B ==> symmetric_mpoly ?A (powsum_mpoly ?B ?k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Power_Sum_Polynomials_Library.mult_smult_right",
     "?p * MPoly_Type.smult ?c ?q = MPoly_Type.smult ?c (?p * ?q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Power_Sum_Polynomials_Library.poly_roots_linear",
     "poly_roots [:- ?x, 1::?'a:] = {#?x#}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 5, template_hole 3),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Power_Sum_Polynomials_Library.sym_mpoly_eq_0",
     "card ?A < ?k ==> sym_mpoly ?A ?k = 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Power_Sum_Polynomials.powsum_mpoly_altdef",
     "powsum_mpoly ?X ?k =
      (SUM x:?X. MPoly_Type.monom (Poly_Mapping.single x ?k) (1::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_var 1))),
    ("Power_Sum_Polynomials.keys_powsum_mpoly_aux",
     "?m : keys (powsum_mpoly_aux ?A ?k) ==> keys ?m <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Power_Sum_Polynomials.insertion_powsum_mpoly",
     "insertion ?f (powsum_mpoly ?X ?k) = (SUM i:?X. ?f i ^ ?k)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Power_Sum_Polynomials_Library.count_poly_roots'",
     "count (poly_roots ?p) ?x = (if ?p = 0 then 0 else order ?x ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Power_Sum_Polynomials_Library.poly_roots_smult",
     "?c ~= (0::?'a) ==>
      poly_roots (Polynomial.smult ?c ?p) = poly_roots ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Power_Sum_Polynomials_Library.squarefree_field_poly_iff",
     "?p ~= 0 ==> squarefree ?p = coprime ?p (pderiv ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Power_Sum_Polynomials_Library.rsquarefree_imp_distinct_roots",
     "[| rsquarefree ?p; mset ?xs = poly_roots ?p |] ==> distinct ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials.coeff_powsum_mpoly_0_right",
     "MPoly_Type.coeff (powsum_mpoly ?X 0) ?mon =
      (if ?mon = 0 then of_nat (card ?X) else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)
           ))),
    ("Power_Sum_Polynomials_Library.insertion_monom_of_set",
     "insertion ?f (MPoly_Type.monom (monom_of_set ?X) ?c) =
      ?c * prod ?f ?X",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Power_Sum_Polynomials_Library.poly_roots_monom",
     "?c ~= (0::?'a) ==>
      poly_roots (Polynomial.monom ?c ?n) = replicate_mset ?n (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 4)))),
    ("Power_Sum_Polynomials_Library.count_poly_roots",
     "?p ~= 0 ==> count (poly_roots ?p) ?x = order ?x ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Power_Sum_Polynomials_Library.rsquarefree_poly_roots_eq",
     "rsquarefree ?p ==>
      poly_roots ?p = mset_set {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Power_Sum_Polynomials_Library.poly_roots_power",
     "?p ~= 0 ==> poly_roots (?p ^ ?n) = repeat_mset ?n (poly_roots ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Power_Sum_Polynomials_Library.poly_roots_prod_list",
     "0 ~: set ?xs ==>
      poly_roots (prod_list ?xs) = sum_list (map poly_roots ?xs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("Power_Sum_Polynomials_Library.poly_roots_prod_mset",
     "0 ~:# ?A ==>
      poly_roots (\<Prod>\<^sub># ?A) =
      \<Sum>\<^sub># (image_mset poly_roots ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("Power_Sum_Polynomials_Library.gcd_poly_code_aux_reduce",
     "?q ~= 0 ==>
      gcd_poly_code_aux ?p ?q =
      gcd_poly_code_aux ?q (primitive_part (pseudo_mod ?p ?q))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Power_Sum_Polynomials_Library.order_power",
     "?p ~= 0 ==> order ?x (?p ^ ?n) = ?n * order ?x ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("Power_Sum_Polynomials_Library.set_mset_poly_roots",
     "?p ~= 0 ==> set_mset (poly_roots ?p) = {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Power_Sum_Polynomials_Library.order_pos_iff",
     "?p ~= 0 ==> (0 < order ?x ?p) = (poly ?p ?x = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Power_Sum_Polynomials_Library.in_poly_roots_iff",
     "?p ~= 0 ==> (?x :# poly_roots ?p) = (poly ?p ?x = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)))
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Power_Sum_Polynomials_Library.order_prod_list",
     "0 ~: set ?xs ==>
      order ?x (prod_list ?xs) = sum_list (map (order ?x) ?xs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)),
             template_var 1))))),
    ("Power_Sum_Polynomials_Library.order_prod_mset",
     "0 ~:# ?A ==>
      order ?x (\<Prod>\<^sub># ?A) =
      \<Sum>\<^sub># (image_mset (order ?x) ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)),
             template_var 1))))),
    ("Power_Sum_Polynomials_Library.atLeastAtMost_nat_numeral",
     "{?m..numeral ?k} =
      (if ?m <= numeral ?k then insert (numeral ?k) {?m..pred_numeral ?k}
       else {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.fundamental_theorem_algebra_factorized'",
     "?p =
      Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD x:#poly_roots ?p. [:- x, 1:])",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Power_Sum_Polynomials.powsum_mpoly_eq_0_iff",
     "0 < ?k ==> (powsum_mpoly ?X ?k = 0) = (infinite ?X | ?X = {})",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1),
           template_hole 5),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))
             )))),
    ("Power_Sum_Polynomials_Library.order_eq_0_iff",
     "?p ~= 0 ==> (order ?x ?p = 0) = (poly ?p ?x ~= (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1),
           template_hole 3),
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0)
             )))),
    ("Power_Sum_Polynomials_Library.sum_in_Rats",
     "(!!x. x : ?A ==> ?f x : \<rat>) ==> sum ?f ?A : \<rat>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Power_Sum_Polynomials_Library.poly_roots_factorization",
     "?c ~= (0::?'a) ==>
      poly_roots (Polynomial.smult ?c (PROD x:#?A. [:- x, 1::?'a:])) = ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_var 0)))),
         template_var 0))),
    ("Power_Sum_Polynomials_Library.Sum_any_zeroI'",
     "(!!x. ?P x ==> ?f x = (0::?'b)) ==>
      (SUM x. ?f x when ?P x) = (0::?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app (template_hole 1, t_empty), template_hole 2))),
    ("Power_Sum_Polynomials_Library.poly_roots_eq_imp_eq",
     "[| Polynomial.lead_coeff ?p = Polynomial.lead_coeff ?q;
         poly_roots ?p = poly_roots ?q |]
      ==> ?p = ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_hole 3, template_var 0))),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Power_Sum_Polynomials.powsum_mpoly_nz",
     "[| finite ?X; ?X ~= {}; 0 < ?k |] ==> powsum_mpoly ?X ?k ~= 0",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Power_Sum_Polynomials_Library.poly_roots_mult",
     "[| ?p ~= 0; ?q ~= 0 |]
      ==> poly_roots (?p * ?q) = poly_roots ?p + poly_roots ?q",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Power_Sum_Polynomials_Library.coeff_sym_mpoly_monom_of_set_eq_0'",
     "[| finite ?X; ~ ?Y <= ?X; finite ?Y |]
      ==> MPoly_Type.coeff (sym_mpoly ?X ?k) (monom_of_set ?Y) = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1, template_var 2)
            ),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.mapping_single_eq_iff",
     "(Poly_Mapping.single ?a ?b = Poly_Mapping.single ?c ?d) =
      (?b = (0::?'b) & ?d = (0::?'b) | ?a = ?c & ?b = ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)))
           ))),
    ("Power_Sum_Polynomials.coeff_powsum_mpoly_singleton",
     "[| finite ?X; 0 < ?k |]
      ==> MPoly_Type.coeff (powsum_mpoly ?X ?k)
           (Poly_Mapping.single ?x ?k) =
          (if ?x : ?X then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation (less_than, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_hole 1),
           template_hole 0)))),
    ("Power_Sum_Polynomials.lookup_sym_mpoly_aux_monom_singleton'",
     "[| finite ?X; 0 < ?k |]
      ==> lookup (powsum_mpoly_aux ?X ?k) (Poly_Mapping.single ?x ?k) =
          (if ?x : ?X then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation (less_than, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_hole 1),
           template_hole 0)))),
    ("Power_Sum_Polynomials.coeff_powsum_mpoly_singleton_eq_1",
     "[| finite ?X; ?x : ?X; 0 < ?k |]
      ==> MPoly_Type.coeff (powsum_mpoly ?X ?k)
           (Poly_Mapping.single ?x ?k) =
          (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            ),
        template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Power_Sum_Polynomials.lookup_sym_mpoly_aux_monom_singleton",
     "[| finite ?X; ?x : ?X; 0 < ?k |]
      ==> lookup (powsum_mpoly_aux ?X ?k) (Poly_Mapping.single ?x ?k) =
          (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            ),
        template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.coeff_sym_mpoly_monom_of_set_eq_0",
     "[| finite ?X; ?Y <= ?X; card ?Y ~= ?k |]
      ==> MPoly_Type.coeff (sym_mpoly ?X ?k) (monom_of_set ?Y) = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Power_Sum_Polynomials.coeff_powsum_mpoly_singleton_eq_0",
     "[| finite ?X; ?x ~: ?X; 0 < ?k |]
      ==> MPoly_Type.coeff (powsum_mpoly ?X ?k)
           (Poly_Mapping.single ?x ?k) =
          (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 2)
                )
            ),
        template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.poly_roots_prod",
     "(!!x. x : ?A ==> ?f x ~= 0) ==>
      poly_roots (prod ?f ?A) = (SUM x:?A. poly_roots (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Power_Sum_Polynomials_Library.monom_of_set_plus_monom_of_set",
     "[| ?A Int ?B = {}; finite ?A; finite ?B |]
      ==> monom_of_set ?A + monom_of_set ?B = monom_of_set (?A Un ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Power_Sum_Polynomials_Library.order_prod",
     "(!!x. x : ?A ==> ?f x ~= 0) ==>
      order ?x (prod ?f ?A) = (SUM y:?A. order ?x (?f y))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Power_Sum_Polynomials.Girard_Newton'",
     "[| finite ?X; card ?X < ?k |]
      ==> (SUM i<=card ?X.
           (- 1) ^ i * sym_mpoly ?X i * powsum_mpoly ?X (?k - i)) =
          0",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 11, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 11, template_var 1))),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.sym_mpoly_insert",
     "[| finite ?X; ?x ~: ?X |]
      ==> sym_mpoly (insert ?x ?X) (Suc ?k) =
          MPoly_Type.monom (monom_of_set {?x}) (1::?'a) * sym_mpoly ?X ?k +
          sym_mpoly ?X (Suc ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 2)),
           template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 7, template_var 1),
                         template_hole 1))),
                   template_hole 0)),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app (template_hole 6, template_var 0)))))),
    ("Power_Sum_Polynomials_Library.coprimeI_primes",
     "[| ?a ~= (0::?'a) | ?b ~= (0::?'a);
         !!p. [| prime p; p dvd ?a; p dvd ?b |] ==> False |]
      ==> coprime ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_hole 5))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Power_Sum_Polynomials.powsum_mpoly_recurrence'",
     "[| card ?X < ?k; finite ?X |]
      ==> powsum_mpoly ?X ?k =
          - (SUM i = 1..card ?X.
             (- 1) ^ i * sym_mpoly ?X i * powsum_mpoly ?X (?k - i))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_var 1),
          template_var 0),
        template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 1), template_var 0),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app (template_hole 12, template_var 1))))))),
    ("Power_Sum_Polynomials.Girard_Newton",
     "finite ?X ==>
      (- 1) ^ ?k * of_nat ?k * sym_mpoly ?X ?k +
      (SUM i<?k. (- 1) ^ i * sym_mpoly ?X i * powsum_mpoly ?X (?k - i)) =
      0",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)),
                       template_var 0)),
                   template_app (template_hole 6, template_var 0))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Power_Sum_Polynomials.sym_mpoly_recurrence",
     "[| 0 < ?k; finite ?X |]
      ==> sym_mpoly ?X ?k =
          - MPoly_Type.smult ((1::?'a) / of_nat ?k)
             (SUM i = 1..?k.
              (- 1) ^ i * sym_mpoly ?X (?k - i) * powsum_mpoly ?X i)",
     template_implication
      ([template_inequation (less_than, template_hole 16, template_var 1),
        template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 13, template_var 0), template_var 1),
         template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app (template_hole 8, template_var 1))),
             template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1))))))),
    ("Power_Sum_Polynomials.coeff_powsum_mpoly",
     "MPoly_Type.coeff (powsum_mpoly ?X ?k) ?mon =
      (if infinite ?X | ?k = 0 & ?mon ~= 0 then 0::?'a
       else if ?k = 0 & ?mon = 0 then of_nat (card ?X)
            else if finite ?X & (EX x:?X. ?mon = Poly_Mapping.single x ?k)
                 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_var 2))),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_hole 8)),
                     template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_hole 6))))),
               template_hole 5),
             template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_hole 8)),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2))),
               template_app
                (template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app (template_hole 11, template_var 2)),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         t_empty))),
                   template_hole 0),
                 template_hole 5)))
           ))),
    ("Power_Sum_Polynomials.lookup_powsum_mpoly_aux",
     "lookup (powsum_mpoly_aux ?X ?k) ?mon =
      (if infinite ?X | ?k = 0 & ?mon ~= 0 then 0::?'a
       else if ?k = 0 & ?mon = 0 then of_nat (card ?X)
            else if finite ?X & (EX x:?X. ?mon = Poly_Mapping.single x ?k)
                 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_var 2))),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_hole 8)),
                     template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_hole 6))))),
               template_hole 5),
             template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_hole 8)),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2))),
               template_app
                (template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app (template_hole 11, template_var 2)),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         t_empty))),
                   template_hole 0),
                 template_hole 5)))
           ))),
    ("Power_Sum_Polynomials_Library.symmetric_mpoly_symmetric_sum",
     "[| !!\<pi>. \<pi> permutes ?A ==> ?g \<pi> permutes ?X;
         !!x \<pi>.
            [| x : ?X; \<pi> permutes ?A |]
            ==> mpoly_map_vars \<pi> (?f x) = ?f (?g \<pi> x) |]
      ==> symmetric_mpoly ?A (sum ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("Power_Sum_Polynomials.powsum_mpoly_recurrence",
     "[| 0 < ?k; finite ?X |]
      ==> powsum_mpoly ?X ?k =
          (- 1) ^ (?k + 1) * of_nat ?k * sym_mpoly ?X ?k -
          (SUM i = 1..<?k.
           (- 1) ^ i * sym_mpoly ?X i * powsum_mpoly ?X (?k - i))",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 1),
        template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 12, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)),
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_hole 5))),
                   template_app (template_hole 4, template_var 1))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_hole 5),
               template_var 1))))))]
