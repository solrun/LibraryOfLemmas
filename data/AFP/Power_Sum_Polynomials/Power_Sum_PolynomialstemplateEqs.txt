   [("Power_Sum_Polynomials_Library.smult_0_right",
     "MPoly_Type.smult ?p 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Power_Sum_Polynomials.powsum_mpoly_empty", "powsum_mpoly {} ?k = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Power_Sum_Polynomials_Library.gcd_poly_code_aux_reduce",
     "gcd_poly_code_aux ?p 0 = normalize ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.mpoly_monom_0_eq_Const",
     "MPoly_Type.monom 0 ?c = Const ?c",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.of_nat_mpoly_eq",
     "of_nat ?n = Const (of_nat ?n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.poly_roots_const",
     "poly_roots [:?c:] = {#}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Power_Sum_Polynomials_Library.poly_of_int",
     "poly (of_int ?n) ?x = of_int ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Power_Sum_Polynomials_Library.insertion_of_nat",
     "insertion ?f (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Power_Sum_Polynomials_Library.poly_of_nat",
     "poly (of_nat ?n) ?x = of_nat ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Power_Sum_Polynomials.powsum_mpoly_0",
     "powsum_mpoly ?X 0 = of_nat (card ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_uminus",
     "Const (- ?a) = - Const ?a",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_power",
     "Const (?a ^ ?n) = Const ?a ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_mult",
     "Const (?a * ?b) = Const ?a * Const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mpoly_Const_add",
     "Const (?a + ?b) = Const ?a + Const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Power_Sum_Polynomials_Library.mult_smult_right",
     "?p * MPoly_Type.smult ?c ?q = MPoly_Type.smult ?c (?p * ?q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Power_Sum_Polynomials_Library.poly_roots_linear",
     "poly_roots [:- ?x, 1::?'a:] = {#?x#}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 5, template_hole 3),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Power_Sum_Polynomials.powsum_mpoly_altdef",
     "powsum_mpoly ?X ?k =
      (SUM x:?X. MPoly_Type.monom (Poly_Mapping.single x ?k) (1::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_var 1))),
    ("Power_Sum_Polynomials.insertion_powsum_mpoly",
     "insertion ?f (powsum_mpoly ?X ?k) = (SUM i:?X. ?f i ^ ?k)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Power_Sum_Polynomials_Library.count_poly_roots'",
     "count (poly_roots ?p) ?x = (if ?p = 0 then 0 else order ?x ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Power_Sum_Polynomials.coeff_powsum_mpoly_0_right",
     "MPoly_Type.coeff (powsum_mpoly ?X 0) ?mon =
      (if ?mon = 0 then of_nat (card ?X) else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)),
              template_var 0)
            )],
       template_dunno)),
    ("Power_Sum_Polynomials_Library.insertion_monom_of_set",
     "insertion ?f (MPoly_Type.monom (monom_of_set ?X) ?c) =
      ?c * prod ?f ?X",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Power_Sum_Polynomials_Library.atLeastAtMost_nat_numeral",
     "{?m..numeral ?k} =
      (if ?m <= numeral ?k then insert (numeral ?k) {?m..pred_numeral ?k}
       else {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_hole 0))),
    ("Power_Sum_Polynomials_Library.fundamental_theorem_algebra_factorized'",
     "?p =
      Polynomial.smult (Polynomial.lead_coeff ?p)
       (PROD x:#poly_roots ?p. [:- x, 1:])",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Power_Sum_Polynomials_Library.mapping_single_eq_iff",
     "(Poly_Mapping.single ?a ?b = Poly_Mapping.single ?c ?d) =
      (?b = (0::?'b) & ?d = (0::?'b) | ?a = ?c & ?b = ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_dunno)),
    ("Power_Sum_Polynomials.coeff_powsum_mpoly",
     "MPoly_Type.coeff (powsum_mpoly ?X ?k) ?mon =
      (if infinite ?X | ?k = 0 & ?mon ~= 0 then 0::?'a
       else if ?k = 0 & ?mon = 0 then of_nat (card ?X)
            else if finite ?X & (EX x:?X. ?mon = Poly_Mapping.single x ?k)
                 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Power_Sum_Polynomials.lookup_powsum_mpoly_aux",
     "lookup (powsum_mpoly_aux ?X ?k) ?mon =
      (if infinite ?X | ?k = 0 & ?mon ~= 0 then 0::?'a
       else if ?k = 0 & ?mon = 0 then of_nat (card ?X)
            else if finite ?X & (EX x:?X. ?mon = Poly_Mapping.single x ?k)
                 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno))]
