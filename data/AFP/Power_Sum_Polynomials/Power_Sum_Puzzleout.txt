Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test" via "Polynomial_Factorization.Missing_List" via "HOL-Library.Monad_Syntax")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.096s elapsed time, 0.403s cpu time, 0.025s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test" via "Polynomial_Factorization.Missing_List")
### theory "HOL-Library.Monad_Syntax"
### 0.037s elapsed time, 0.146s cpu time, 0.000s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
### theory "HOL-Combinatorics.Transposition"
### 0.142s elapsed time, 0.590s cpu time, 0.025s GC time
Loading theory "HOL-Library.Fun_Lexorder" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### theory "HOL-Library.Fun_Lexorder"
### 0.044s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.467s elapsed time, 1.872s cpu time, 0.096s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.416s elapsed time, 1.638s cpu time, 0.120s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.FuncSet"
### 0.376s elapsed time, 1.467s cpu time, 0.120s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.485s cpu time, 0.049s GC time
Loading theory "HOL-Library.Groups_Big_Fun" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
locale comm_monoid_fun
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fun (\<^bold>*) \<^bold>1"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.997s elapsed time, 3.824s cpu time, 0.603s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Disjoint_Sets"
### 0.442s elapsed time, 1.621s cpu time, 0.458s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Groups_Big_Fun"
### 0.458s elapsed time, 1.677s cpu time, 0.458s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.More_List"
### 0.200s elapsed time, 0.781s cpu time, 0.105s GC time
Loading theory "HOL-Library.Poly_Mapping" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.386s elapsed time, 1.521s cpu time, 0.210s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.348s elapsed time, 1.364s cpu time, 0.210s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class zero = type +
  fixes zero :: "'a"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Set_Algebras"
### 0.263s elapsed time, 1.028s cpu time, 0.207s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
instantiation
  poly_mapping :: (type, zero) zero
  zero_poly_mapping == zero_class.zero :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, monoid_add) monoid_add
  plus_poly_mapping == plus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  poly_mapping :: (type, cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly_mapping == minus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
Proofs for coinductive predicate(s) "streamsp"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
  Proving monotonicity ...
instantiation
  poly_mapping :: (type, ab_group_add) ab_group_add
  uminus_poly_mapping == uminus ::
    ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
instantiation
  poly_mapping :: (zero, zero_neq_one) zero_neq_one
  one_poly_mapping == one_class.one :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (monoid_add, semiring_0) semiring_0
  times_poly_mapping == times ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  poly_mapping :: (linorder, {zero,linorder}) linorder
  less_eq_poly_mapping == less_eq ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
  less_poly_mapping == less ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
consts
  cycle :: "'a list => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.275s elapsed time, 4.848s cpu time, 1.345s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  poly_mapping :: (type, zero) size
  size_poly_mapping == size :: ('a \<Rightarrow>\<^sub>0 'b) => nat
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Poly_Mapping"
### 2.037s elapsed time, 7.676s cpu time, 2.662s GC time
Loading theory "Polynomials.MPoly_Type" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type")
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Poly_Mapping.poly_mapping" found.
instantiation
  mpoly :: (zero) zero
  zero_mpoly == zero_class.zero :: 'a mpoly
instantiation
  mpoly :: (monoid_add) monoid_add
  plus_mpoly == plus :: 'a mpoly => 'a mpoly => 'a mpoly
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  mpoly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_mpoly == minus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (ab_group_add) ab_group_add
  uminus_mpoly == uminus :: 'a mpoly => 'a mpoly
instantiation
  mpoly :: (zero_neq_one) zero_neq_one
  one_mpoly == one_class.one :: 'a mpoly
Found termination order: "size <*mlex*> {}"
instantiation
  mpoly :: (semiring_0) semiring_0
  times_mpoly == times :: 'a mpoly => 'a mpoly => 'a mpoly
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 494 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>div" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 498 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>mod" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/Polynomials/MPoly_Type.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Polynomials.MPoly_Type"
### 0.558s elapsed time, 2.212s cpu time, 0.268s GC time
Loading theory "Polynomials.More_MPoly_Type" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials")
### theory "HOL-Library.BigO"
### 1.209s elapsed time, 4.592s cpu time, 1.590s GC time
Loading theory "Matrix.Utility" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test" via "Polynomial_Factorization.Missing_List")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.298s elapsed time, 1.178s cpu time, 0.210s GC time
Loading theory "Polynomial_Factorization.Missing_List" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test")
### theory "Polynomials.More_MPoly_Type"
### 0.365s elapsed time, 1.430s cpu time, 0.320s GC time
MPoly (mapping_of ?x) = ?x
?y : UNIV ==> mapping_of (MPoly ?y) = ?y
(mapping_of ?x = mapping_of ?y) = (?x = ?y)
[| ?x : UNIV; ?y : UNIV |] ==> (MPoly ?x = MPoly ?y) = (?x = ?y)
[| ?y : UNIV; !!x. ?P (mapping_of x) |] ==> ?P ?y
(!!y. y : UNIV ==> ?P (MPoly y)) ==> ?P ?x
[| ?y : UNIV; !!x. ?y = mapping_of x ==> ?P |] ==> ?P
(!!y. [| ?x = MPoly y; y : UNIV |] ==> ?P) ==> ?P
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.744s elapsed time, 10.484s cpu time, 3.037s GC time
Loading theory "Draft.Templates" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list length <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.261s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Power_Sum_PuzzleMoreTemplates")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
"(Gcd (coeffs
        (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
          6 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
          8)),
  sdiv
   (Gcd (coeffs
          (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
            6 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
            8)))
   (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
    M [(1::'b) + (1::'b), 0::'b, (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
     6 +
    M [(1::'b) + (1::'b), 0::'b,
       (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
     8))"
  :: "'a * 'a mpoly"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  list_union :: "'a list => 'a list => 'a list"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.703s elapsed time, 2.257s cpu time, 0.335s GC time
### theory "HOL-Library.Multiset"
### 4.613s elapsed time, 17.181s cpu time, 4.247s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "length <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Polynomial_Factorization.Missing_List"
### 1.863s elapsed time, 6.189s cpu time, 0.956s GC time
Loading theory "Polynomial_Factorization.Missing_Multiset" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test" via "Polynomial_Factorization.Prime_Factorization")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 0.937s elapsed time, 2.996s cpu time, 0.503s GC time
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "Polynomial_Factorization.Missing_Multiset"
### 0.198s elapsed time, 0.463s cpu time, 0.000s GC time
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.753s elapsed time, 7.198s cpu time, 0.849s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test" via "Polynomial_Factorization.Gauss_Lemma" via "Polynomial_Interpolation.Ring_Hom_Poly")
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
Found termination order: "length <*mlex*> {}"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
consts
  Poly :: "'a list => 'a poly"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.162s elapsed time, 4.691s cpu time, 0.478s GC time
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.629s elapsed time, 9.187s cpu time, 0.909s GC time
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.847s elapsed time, 13.646s cpu time, 1.193s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.225s elapsed time, 0.485s cpu time, 0.079s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.255s elapsed time, 16.700s cpu time, 1.559s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Primes"
### 0.312s elapsed time, 1.253s cpu time, 0.140s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.436s elapsed time, 1.751s cpu time, 0.234s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.181s elapsed time, 0.726s cpu time, 0.094s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Squarefree"
### 0.156s elapsed time, 0.616s cpu time, 0.096s GC time
Loading theory "Polynomial_Factorization.Prime_Factorization" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test")
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
### Cannot skip proof of schematic goal statement
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 1.106s elapsed time, 4.406s cpu time, 0.506s GC time
(%n. mset (prime_factorization_nat n)) = prime_factorization
### theory "Polynomial_Factorization.Prime_Factorization"
### 0.627s elapsed time, 2.482s cpu time, 0.288s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.032s elapsed time, 3.526s cpu time, 0.482s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.790s elapsed time, 1.730s cpu time, 0.327s GC time
Loading theory "Polynomial_Factorization.Missing_Polynomial_Factorial" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test" via "Polynomial_Factorization.Gauss_Lemma")
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Draft.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test" via "Polynomial_Factorization.Gauss_Lemma")
### Ignoring duplicate rewrite rule:
### is_unit ?p1 == ?p1 ~= 0 & degree ?p1 = 0
### theory "Polynomial_Factorization.Order_Polynomial"
### 1.017s elapsed time, 3.721s cpu time, 3.256s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Draft.Power_Sum_Polynomials_Library")
### theory "Polynomial_Factorization.Missing_Polynomial_Factorial"
### 1.070s elapsed time, 3.920s cpu time, 3.321s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.316s elapsed time, 1.003s cpu time, 0.065s GC time
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 4.152s elapsed time, 12.983s cpu time, 4.582s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.473s elapsed time, 1.005s cpu time, 0.109s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 2.460s elapsed time, 7.143s cpu time, 3.648s GC time
Loading theory "Polynomial_Factorization.Gauss_Lemma" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Polynomial_Factorization.Rational_Root_Test")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
### theory "Polynomial_Factorization.Gauss_Lemma"
### 1.025s elapsed time, 2.205s cpu time, 0.351s GC time
Loading theory "Polynomial_Factorization.Rational_Root_Test" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle")
### theory "Polynomial_Factorization.Rational_Root_Test"
### 0.332s elapsed time, 0.707s cpu time, 0.088s GC time
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.614s elapsed time, 3.274s cpu time, 0.439s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.926s elapsed time, 0.976s cpu time, 0.060s GC time
Loading theory "Symmetric_Polynomials.Vieta" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials" via "Symmetric_Polynomials.Symmetric_Polynomials")
### theory "Symmetric_Polynomials.Vieta"
### 0.531s elapsed time, 0.562s cpu time, 0.042s GC time
Loading theory "Symmetric_Polynomials.Symmetric_Polynomials" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials")
### Ignoring duplicate rewrite rule:
### length (sorted_list_of_set ?A1) == card ?A1
locale ring_closed
  fixes A :: "'a set"
  assumes "ring_closed A"
locale ring_homomorphism
  fixes f :: "'a => 'b"
  assumes "ring_homomorphism f"
### theory "Symmetric_Polynomials.Symmetric_Polynomials"
### 1.483s elapsed time, 1.687s cpu time, 0.283s GC time
Loading theory "Draft.Power_Sum_Polynomials_Library" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle" via "Draft.Power_Sum_Polynomials")
### theory "Draft.Power_Sum_Polynomials_Library"
### 0.460s elapsed time, 0.501s cpu time, 0.055s GC time
Loading theory "Draft.Power_Sum_Polynomials" (required by "Draft.Power_Sum_PuzzleMoreTemplates" via "Draft.Power_Sum_Puzzle")
### theory "Draft.Power_Sum_Polynomials"
### 0.498s elapsed time, 0.557s cpu time, 0.080s GC time
Loading theory "Draft.Power_Sum_Puzzle" (required by "Draft.Power_Sum_PuzzleMoreTemplates")
locale power_sum_puzzle
  fixes x :: "nat => complex"
    and n :: "nat"
locale power_sum_puzzle_existence
  fixes f :: "nat => complex"
    and n :: "nat"
Found termination order: "size <*mlex*> {}"
locale power_sum_puzzle_example
  fixes x :: "complex"
    and y :: "complex"
    and z :: "complex"
  assumes "power_sum_puzzle_example x y z"
### theory "Draft.Power_Sum_Puzzle"
### 0.519s elapsed time, 0.589s cpu time, 0.064s GC time
Loading theory "Draft.Power_Sum_PuzzleMoreTemplates"
val templateLemmas =
   [("Power_Sum_Puzzle.power_sum_puzzle_has_solution",
     "EX Root. ALL k:{1..?n}. (SUM i<?n. Root i ^ k) = ?f k",
     template_predicate (template_app (template_hole 7, t_empty)))]:
   (string * thm * template) list
### theory "Draft.Power_Sum_PuzzleMoreTemplates"
### 0.723s elapsed time, 0.986s cpu time, 0.120s GC time
val it = (): unit
