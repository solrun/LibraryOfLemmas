   [("CertLin.iprod_a_Nil2", "?cs \<odot>\<^sub>a [] = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("CertLin.refute_I",
     "~ interpret ?h (Neg ?f) ?e ==> interpret ?h ?f ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_app (template_hole 0, template_var 1)),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("CertLin.contradictD",
     "contradict ?as ?cs ==> EX a:set ?as. ~ I\<^sub>R a ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             t_empty)
           ))),
    ("CertLin.I_R_additive",
     "[| I\<^sub>R ?a ?xs; I\<^sub>R ?b ?xs |] ==> I\<^sub>R (?a + ?b) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("CertLin.I_R_mult_atom",
     "[| 0 <= ?c; I\<^sub>R ?a ?xs |] ==> I\<^sub>R (?c *\<^sub>a ?a) ?xs",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("CertLin.cyclic_dnfD",
     "[| qfree ?f; contradict_dnf (dnf (R.nnf ?f)) |] ==> ~ R.I ?f ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("CertLin.I_R_iprod_a",
     "[| length ?cs = length ?as;
         ALL (c, a):set (zip ?cs ?as). I\<^sub>R (c *\<^sub>a a) ?xs |]
      ==> I\<^sub>R (?cs \<odot>\<^sub>a ?as) ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app (template_hole 3, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           )))]
