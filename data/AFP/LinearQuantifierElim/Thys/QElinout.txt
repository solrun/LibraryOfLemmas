Loading theory "HOL-Library.Function_Algebras" (required by "Draft.QElinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.FuncSet" (required by "Draft.QElinMoreTemplates" via "Draft.QElin" via "Draft.LinArith" via "Draft.QE" via "Draft.Logic")
Loading theory "HOL-Library.ListVector" (required by "Draft.QElinMoreTemplates" via "Draft.QElin" via "Draft.LinArith")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.QElinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.509s cpu time, 0.042s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.QElinMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
instantiation
  list :: ({plus,zero}) plus
  plus_list == plus :: 'a list => 'a list => 'a list
instantiation
  list :: ({uminus,zero}) uminus
  uminus_list == uminus :: 'a list => 'a list
instantiation
  list :: ({minus,zero}) minus
  minus_list == minus :: 'a list => 'a list => 'a list
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.ListVector"
### 0.284s elapsed time, 1.140s cpu time, 0.110s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.QElinMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.790s cpu time, 0.068s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.QElinMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.334s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.QElinMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.429s elapsed time, 1.697s cpu time, 0.196s GC time
Loading theory "Draft.Logic" (required by "Draft.QElinMoreTemplates" via "Draft.QElin" via "Draft.LinArith" via "Draft.QE")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.882s cpu time, 0.915s GC time
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.081s elapsed time, 4.058s cpu time, 0.915s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!a v. amap\<^sub>f\<^sub>m a (ExQ v) = undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v. dnf (Neg v) = undefined
### !!v. dnf (ExQ v) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.980s elapsed time, 6.133s cpu time, 1.171s GC time
Loading theory "Draft.Templates" (required by "Draft.QElinMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale ATOM
  fixes aneg :: "'a => 'a fm"
    and anormal :: "'a => bool"
    and I\<^sub>a :: "'a => 'b list => bool"
    and depends\<^sub>0 :: "'a => bool"
    and decr :: "'a => 'a"
  assumes "ATOM aneg anormal I\<^sub>a depends\<^sub>0 decr"
### Missing patterns in function definition:
### !!v. atoms\<^sub>0 (ExQ v) = undefined
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.QElinMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Logic"
### 2.209s elapsed time, 6.351s cpu time, 1.152s GC time
Loading theory "Draft.QE" (required by "Draft.QElinMoreTemplates" via "Draft.QElin" via "Draft.LinArith")
locale ATOM
  fixes aneg :: "'a => 'a fm"
    and anormal :: "'a => bool"
    and I\<^sub>a :: "'a => 'b list => bool"
    and depends\<^sub>0 :: "'a => bool"
    and decr :: "'a => 'a"
  assumes "ATOM aneg anormal I\<^sub>a depends\<^sub>0 decr"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.201s cpu time, 0.126s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale ATOM_EQ
  fixes aneg :: "'a => 'a fm"
    and anormal :: "'a => bool"
    and I\<^sub>a :: "'a => 'b list => bool"
    and depends\<^sub>0 :: "'a => bool"
    and decr :: "'a => 'a"
    and solvable\<^sub>0 :: "'a => bool"
    and trivial :: "'a => bool"
    and subst\<^sub>0 :: "'a => 'a => 'a"
  assumes
    "ATOM_EQ aneg anormal I\<^sub>a depends\<^sub>0 decr solvable\<^sub>0
      trivial subst\<^sub>0"
### theory "Draft.QE"
### 0.592s elapsed time, 0.910s cpu time, 0.116s GC time
Loading theory "Draft.LinArith" (required by "Draft.QElinMoreTemplates" via "Draft.QElin")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LinArith"
### 1.896s elapsed time, 2.674s cpu time, 0.972s GC time
Loading theory "Draft.QElin" (required by "Draft.QElinMoreTemplates")
### Missing patterns in function definition:
### !!v va b. subst\<^sub>0 (Less v va) b = undefined
### !!v b. subst\<^sub>0 (Eq v []) b = undefined
Found termination order: "{}"
### theory "Draft.QElin"
### 0.153s elapsed time, 0.196s cpu time, 0.024s GC time
Loading theory "Draft.QElinMoreTemplates"
val templateLemmas =
   [("QElin.qfree_qe_FM", "qfree (qe_FM ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("QElin.qfree_qe_FM\<^sub>1", "qfree (qe_FM\<^sub>1 ?as)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("QElin.qesimps", "list_conj ?fs = foldr Logic.and ?fs TrueF",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("QElin.qesimps", "list_disj ?fs = foldr Logic.or ?fs FalseF",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("QElin.qesimps", "depends\<^sub>R ?a = (hd_coeff ?a ~= 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("QElin.I_qe_FM", "R.I (qe_FM ?\<phi>) ?xs = R.I ?\<phi> ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0))),
    ("QElin.qesimps",
     "qe_FM\<^sub>1 ?as =
      list_conj
       (concat
         (map (%p. map (%q. Atom (combine p q)) (ubounds ?as))
           (lbounds ?as)))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("QElin.qesimps",
     "Logic.and ?\<phi>\<^sub>1 ?\<phi>\<^sub>2 =
      (if ?\<phi>\<^sub>1 = TrueF then ?\<phi>\<^sub>2
       else if ?\<phi>\<^sub>2 = TrueF then ?\<phi>\<^sub>1
            else if ?\<phi>\<^sub>1 = FalseF | ?\<phi>\<^sub>2 = FalseF
                 then FalseF else And ?\<phi>\<^sub>1 ?\<phi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 3)),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 3)),
                 template_var 1),
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 6, template_var 1),
                           template_hole 1)),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 1))),
                   template_hole 1),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("QElin.qesimps",
     "Logic.or ?\<phi>\<^sub>1 ?\<phi>\<^sub>2 =
      (if ?\<phi>\<^sub>1 = FalseF then ?\<phi>\<^sub>2
       else if ?\<phi>\<^sub>2 = FalseF then ?\<phi>\<^sub>1
            else if ?\<phi>\<^sub>1 = TrueF | ?\<phi>\<^sub>2 = TrueF
                 then TrueF else Or ?\<phi>\<^sub>1 ?\<phi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 3)),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 3)),
                 template_var 1),
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 6, template_var 1),
                           template_hole 1)),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 1))),
                   template_hole 1),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("QElin.subst\<^sub>0_pretty",
     "subst\<^sub>0 (Eq ?r (?c # ?cs)) (Eq ?s (?d # ?ds)) =
      Eq (?s - ?r * ?d / ?c) (?ds - (?d / ?c) *\<^sub>s ?cs)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 5),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1)),
               template_var 4))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4))),
             template_var 3))))),
    ("QElin.subst\<^sub>0_pretty",
     "subst\<^sub>0 (Eq ?r (?c # ?cs)) (Less ?s (?d # ?ds)) =
      Less (?s - ?r * ?d / ?c) (?ds - (?d / ?c) *\<^sub>s ?cs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 5),
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1)),
               template_var 4))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4))),
             template_var 3))))),
    ("QElin.I_qe_FM\<^sub>1_pretty",
     "ALL a:set ?as. is_Less a & depends\<^sub>R a ==>
      R.is_dnf_qe qe_FM\<^sub>1 ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("QElin.I_subst\<^sub>0",
     "[| depends\<^sub>R ?a; ?c ~= 0 |]
      ==> I\<^sub>R (subst\<^sub>0 (Eq ?r (?c # ?cs)) ?a) ?xs =
          I\<^sub>R ?a ((?r - \<langle>?cs,?xs\<rangle>) / ?c # ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1))),
               template_var 4)),
           template_var 0),
         template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))),
                 template_var 3)),
             template_var 0))))),
    ("QElin.I_qe_FM\<^sub>1",
     "[| ALL a:set ?as. is_Less a; ALL a:set ?as. depends\<^sub>R a |]
      ==> R.I (qe_FM\<^sub>1 ?as) ?xs =
          (EX x. ALL a:set ?as. I\<^sub>R a (x # ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("QElin.qesimps",
     "R.qelim ?qe ?as =
      (let qf = ?qe (filter depends\<^sub>R ?as);
           indep =
             concat
              (map (%a. if ~ depends\<^sub>R a then [Atom (decr\<^sub>R a)]
                        else [])
                ?as)
       in Logic.and qf (list_conj indep))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 14, template_hole 13),
             template_hole 12),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 10, t_empty), template_var 0))),
         t_empty))),
    ("QElin.qesimps",
     "lbounds ?as =
      concat
       (map (%x. case x of Less r [] => []
                 | Less r (c # cs) =>
                     if 0 < c then [(r / c, (- 1 / c) *\<^sub>s cs)] else []
                 | Eq real list => [])
         ?as)",
     template_equation
      (template_app (template_hole 15, template_var 0),
       template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, t_empty), template_var 0)))),
    ("QElin.qesimps",
     "ubounds ?as =
      concat
       (map (%x. case x of Less r [] => []
                 | Less r (c # cs) =>
                     if c < 0 then [(r / c, (- 1 / c) *\<^sub>s cs)] else []
                 | Eq real list => [])
         ?as)",
     template_equation
      (template_app (template_hole 15, template_var 0),
       template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, t_empty), template_var 0)))),
    ("QElin.qesimps",
     "R\<^sub>e.lift_eq_qe ?qe ?as =
      (let as = filter
                 (%a. ~ (case a of Less real list => False
                         | Eq r cs => r = 0 & (ALL c:set cs. c = 0)))
                 ?as
       in case filter
                (%a. case a of Less real list => False | Eq x [] => False
                     | Eq x (c # xa) => c ~= 0)
                as of
          [] => ?qe as
          | eq # eqs =>
              let ineqs =
                    filter
                     (%a. ~ (case a of Less real list => False
                             | Eq x [] => False | Eq x (c # xa) => c ~= 0))
                     as
              in list_conj (map (Atom o subst\<^sub>0 eq) (eqs @ ineqs)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 18, t_empty), t_empty),
             template_hole 8),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_var 0)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.QElinMoreTemplates"
### 0.421s elapsed time, 0.575s cpu time, 0.053s GC time
val it = (): unit
