   [("Logic.qfree_neg", "qfree (neg ?\<phi>) = qfree ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Logic.nqfree_qfree", "nqfree ?\<phi> ==> qfree ?\<phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Logic.nqfree_map_fm",
     "nqfree (map\<^sub>f\<^sub>m ?f ?\<phi>) = nqfree ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Logic.qfree_map_fm",
     "qfree (map\<^sub>f\<^sub>m ?f ?\<phi>) = qfree ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Logic.atoms_map_fm",
     "atoms (map\<^sub>f\<^sub>m ?f ?v) = ?f ` atoms ?v",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Logic.amap_fm_list_disj",
     "amap\<^sub>f\<^sub>m ?h (list_disj ?fs) =
      Disj ?fs (amap\<^sub>f\<^sub>m ?h)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("Logic.qfree_list_conj",
     "ALL \<phi>:set ?fs. qfree \<phi> ==> qfree (list_conj ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Logic.qfree_list_disj",
     "ALL \<phi>:set ?fs. qfree \<phi> ==> qfree (list_disj ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Logic.qfree_and",
     "[| qfree ?\<phi>\<^sub>1; qfree ?\<phi>\<^sub>2 |]
      ==> qfree (Logic.and ?\<phi>\<^sub>1 ?\<phi>\<^sub>2)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Logic.qfree_or",
     "[| qfree ?\<phi>\<^sub>1; qfree ?\<phi>\<^sub>2 |]
      ==> qfree (Logic.or ?\<phi>\<^sub>1 ?\<phi>\<^sub>2)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Logic.qfree_foldr_Or",
     "qfree (foldr Or ?fs ?\<phi>) =
      (qfree ?\<phi> & (ALL \<phi>:set ?fs. qfree \<phi>))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           t_empty)))),
    ("Logic.atoms_list_conjE",
     "?a : atoms (list_conj ?fs) ==> ?a : \<Union> (atoms ` set ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Logic.atoms_list_disjE",
     "?a : atoms (list_disj ?fs) ==> ?a : \<Union> (atoms ` set ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 0))))
           )))]
