   [("QElin.qesimps", "list_conj ?fs = foldr Logic.and ?fs TrueF",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("QElin.qesimps", "list_disj ?fs = foldr Logic.or ?fs FalseF",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("QElin.qesimps", "depends\<^sub>R ?a = (hd_coeff ?a ~= 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("QElin.I_qe_FM", "R.I (qe_FM ?\<phi>) ?xs = R.I ?\<phi> ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0))),
    ("QElin.qesimps",
     "qe_FM\<^sub>1 ?as =
      list_conj
       (concat
         (map (%p. map (%q. Atom (combine p q)) (ubounds ?as))
           (lbounds ?as)))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("QElin.qesimps",
     "Logic.and ?\<phi>\<^sub>1 ?\<phi>\<^sub>2 =
      (if ?\<phi>\<^sub>1 = TrueF then ?\<phi>\<^sub>2
       else if ?\<phi>\<^sub>2 = TrueF then ?\<phi>\<^sub>1
            else if ?\<phi>\<^sub>1 = FalseF | ?\<phi>\<^sub>2 = FalseF
                 then FalseF else And ?\<phi>\<^sub>1 ?\<phi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("QElin.qesimps",
     "Logic.or ?\<phi>\<^sub>1 ?\<phi>\<^sub>2 =
      (if ?\<phi>\<^sub>1 = FalseF then ?\<phi>\<^sub>2
       else if ?\<phi>\<^sub>2 = FalseF then ?\<phi>\<^sub>1
            else if ?\<phi>\<^sub>1 = TrueF | ?\<phi>\<^sub>2 = TrueF
                 then TrueF else Or ?\<phi>\<^sub>1 ?\<phi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("QElin.subst\<^sub>0_pretty",
     "subst\<^sub>0 (Eq ?r (?c # ?cs)) (Eq ?s (?d # ?ds)) =
      Eq (?s - ?r * ?d / ?c) (?ds - (?d / ?c) *\<^sub>s ?cs)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 5),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1)),
               template_var 4))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4))),
             template_var 3))))),
    ("QElin.subst\<^sub>0_pretty",
     "subst\<^sub>0 (Eq ?r (?c # ?cs)) (Less ?s (?d # ?ds)) =
      Less (?s - ?r * ?d / ?c) (?ds - (?d / ?c) *\<^sub>s ?cs)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 5),
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1)),
               template_var 4))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4))),
             template_var 3))))),
    ("QElin.qesimps",
     "R.qelim ?qe ?as =
      (let qf = ?qe (filter depends\<^sub>R ?as);
           indep =
             concat
              (map (%a. if ~ depends\<^sub>R a then [Atom (decr\<^sub>R a)]
                        else [])
                ?as)
       in Logic.and qf (list_conj indep))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 14, template_hole 13),
             template_hole 12),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 10, t_empty), template_var 0))),
         t_empty))),
    ("QElin.qesimps",
     "lbounds ?as =
      concat
       (map (%x. case x of Less r [] => []
                 | Less r (c # cs) =>
                     if 0 < c then [(r / c, (- 1 / c) *\<^sub>s cs)] else []
                 | Eq real list => [])
         ?as)",
     template_equation
      (template_app (template_hole 15, template_var 0),
       template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, t_empty), template_var 0)))),
    ("QElin.qesimps",
     "ubounds ?as =
      concat
       (map (%x. case x of Less r [] => []
                 | Less r (c # cs) =>
                     if c < 0 then [(r / c, (- 1 / c) *\<^sub>s cs)] else []
                 | Eq real list => [])
         ?as)",
     template_equation
      (template_app (template_hole 15, template_var 0),
       template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, t_empty), template_var 0)))),
    ("QElin.qesimps",
     "R\<^sub>e.lift_eq_qe ?qe ?as =
      (let as = filter
                 (%a. ~ (case a of Less real list => False
                         | Eq r cs => r = 0 & (ALL c:set cs. c = 0)))
                 ?as
       in case filter
                (%a. case a of Less real list => False | Eq x [] => False
                     | Eq x (c # xa) => c ~= 0)
                as of
          [] => ?qe as
          | eq # eqs =>
              let ineqs =
                    filter
                     (%a. ~ (case a of Less real list => False
                             | Eq x [] => False | Eq x (c # xa) => c ~= 0))
                     as
              in list_conj (map (Atom o subst\<^sub>0 eq) (eqs @ ineqs)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 18, t_empty), t_empty),
             template_hole 8),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_var 0)),
         t_empty)))]
