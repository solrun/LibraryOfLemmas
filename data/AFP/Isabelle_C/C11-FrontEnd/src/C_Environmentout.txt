Loading theory "Draft.C_Lexer_Language" (required by "Draft.C_EnvironmentTemplates" via "Draft.C_Environment")
Loading theory "Draft.C_Ast" (required by "Draft.C_EnvironmentTemplates" via "Draft.C_Environment")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.C_EnvironmentTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.C_EnvironmentTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
val fresh_ident0 = fn: unit -> string
structure C_Scan:
  sig
    datatype ('a, 'b) either = Left of 'a | Right of 'b
    val opt: ('a -> 'b list * 'a) -> 'a -> 'b list * 'a
  end
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
structure C_Symbol:
  sig
    val is_ascii_blank_no_line: string -> bool
    val is_ascii_digit1: string -> bool
    val is_ascii_identifier: string -> bool
    val is_ascii_letdig: string -> bool
    val is_ascii_oct: string -> bool
    val is_ascii_quasi: string -> bool
    val is_identletter: string -> bool
  end
structure C_Position: sig type reports_text = Position.report_text list end
structure CodeType: sig eqtype mlInt eqtype 'a mlMonad end
structure CodeConst:
  sig
    structure Monad:
      sig
        val bind: 'a option -> ('a -> 'b option) -> 'b option
        val return: 'a -> 'a option
      end
    structure Printf:
      sig
        val sprintf0: 'a -> 'a
        val sprintf1: string -> string -> string
        val sprintf2: string -> string -> string -> string
        val sprintf3: string -> string -> string -> string -> string
        val sprintf4:
           string -> string -> string -> string -> string -> string
        val sprintf5:
           string ->
             string -> string -> string -> string -> string -> string
      end
    structure String: sig val concat: string -> string list -> string end
    structure Sys: sig val isDirectory2: string -> bool option end
    structure To: sig val nat: ('a -> int) -> 'a -> string end
    val outFile1: 'a -> 'b -> 'c option
    val outStand1: 'a -> 'b option
  end
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
structure C_Basic_Symbol_Pos:
  sig
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    val many:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val newline: Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val one':
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one_not_eof: Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val repeats_one_not_eof:
       (Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_until_nl:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_full:
       ('a ->
          ('b -> 'c) ->
            Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list)
         ->
         (string -> bool) ->
           'a ->
             ('d -> 'e * Symbol_Pos.T list) -> 'd -> 'e * Symbol_Pos.T list
    val this_string:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val unless_eof:
       (Symbol_Pos.T list -> 'a * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val ~$$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
structure C_Symbol_Pos:
  sig
    val !!! : message -> 'a Symbol_Pos.scanner -> 'a Symbol_Pos.scanner
    val !!!! :
       (unit -> string) ->
         ('a * (string * Position.T) list -> 'b) ->
           'a * (string * Position.T) list -> 'b
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    val recover_comment:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_cartouche:
       string ->
         string ->
           ((string * Position.T) list -> 'a * (string * Position.T) list)
             -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_cartouche_depth:
       ((string * Position.T) list -> 'a * (string * Position.T) list) ->
         int option * Symbol_Pos.T list ->
           Symbol_Pos.T list * (int option * Symbol_Pos.T list)
    val scan_cartouche_inline:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_cartouche_multi:
       string ->
         ((string * Position.T) list -> 'a * (string * Position.T) list) ->
           Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_comment:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_comment_no_nest:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_string_bq_inline:
       string ->
         Symbol_Pos.T list ->
           (Position.T * (Symbol_Pos.T list * Position.T)) *
           Symbol_Pos.T list
    val scan_string_bq_multi:
       string ->
         ((string * Position.T) list -> 'a * (string * Position.T) list) ->
           Symbol_Pos.T list ->
             (Position.T * (Symbol_Pos.T list * Position.T)) *
             Symbol_Pos.T list
    val scan_string_qq_inline:
       string ->
         Symbol_Pos.T list ->
           (Position.T * (Symbol_Pos.T list * Position.T)) *
           Symbol_Pos.T list
    val scan_string_qq_multi:
       string ->
         ((string * Position.T) list -> 'a * (string * Position.T) list) ->
           Symbol_Pos.T list ->
             (Position.T * (Symbol_Pos.T list * Position.T)) *
             Symbol_Pos.T list
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.488s cpu time, 0.032s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.C_EnvironmentTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### ML warning (line 323 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Lexer_Language.thy"):
### Matches are not exhaustive.
structure C_Antiquote:
  sig
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    type antiq =
       {body: Symbol_Pos.T list,
        body_begin: Symbol_Pos.T list,
        body_end: Symbol_Pos.T list,
        explicit: bool,
        range: Position.range, start: Position.T, stop: Position.T option}
    val many:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val newline: Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val one':
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one_not_eof: Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val repeats_one_not_eof:
       (Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_until_nl:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_antiq:
       Symbol_Pos.T list ->
         {body: Symbol_Pos.T list,
          body_begin: Symbol_Pos.T list,
          body_end: Symbol_Pos.T list,
          explicit: bool,
          range: Position.range, start: Position.T, stop: Position.T option}
         *
         Symbol_Pos.T list
    val scan_antiq_recover: Symbol_Pos.T list -> bool * Symbol_Pos.T list
    val scan_control:
       Symbol_Pos.T list ->
         {body: (string * Position.T) list,
          name: string * Position.T, range: Position.range}
         *
         Symbol_Pos.T list
    val scan_full:
       ('a ->
          ('b -> 'c) ->
            Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list)
         ->
         (string -> bool) ->
           'a ->
             ('d -> 'e * Symbol_Pos.T list) -> 'd -> 'e * Symbol_Pos.T list
    val this_string:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val unless_eof:
       (Symbol_Pos.T list -> 'a * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val ~$$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
structure C_Options:
  sig
    val ML_verbose: bool Config.T
    val lexer_trace: bool Config.T
    val parser_trace: bool Config.T
    val starting_env: string Config.T
    val starting_rule: string Config.T
  end
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.534s elapsed time, 1.827s cpu time, 0.583s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.C_EnvironmentTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.463s elapsed time, 1.540s cpu time, 0.551s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.C_EnvironmentTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
structure C_Lex:
  sig
    val !!! : string -> 'a Symbol_Pos.scanner -> 'a Symbol_Pos.scanner
    val !!!! :
       string ->
         ('a * (string * Position.T) list -> 'b) ->
           'a * (string * Position.T) list -> 'b
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    val @@ :
       ('a list * ('b -> 'c)) * ('a list * ('c -> 'd)) ->
         'a list * ('b -> 'd)
    val check: token list -> string list -> string list
    val check_error: token -> string list
    val content_of: token -> string
    val directive_cmds: token_kind_directive -> token list
    datatype ('a, 'b) either = Left of 'a | Right of 'b
    val end_pos_of: token -> Position.T
    val eof: token
    val err_prefix: string
    val group_list_of: token_kind_directive -> token_group list
    val is_delimiter: token -> bool
    val is_eof: token -> bool
    val is_ident: token -> bool
    val is_integer: token -> bool
    val is_keyword: token -> bool
    val keywords: string list
    val keywords2: string list
    val keywords3: string list
    val keywords_ident: string list
    val kind_of: token -> token_kind
    val lexicon: Scan.lexicon
    val many:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1_blanks_no_line:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val merge_blank:
       token list ->
         token list ->
           token list ->
             (Position.range * token list) * (Position.range * token list)
    val mk_eof: Position.T -> token
    val newline: Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val one':
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one_not_eof: token list -> token * token list
    val opt: ('a -> 'b list * 'a) -> 'a -> 'b list * 'a
    val pos_of: token -> Position.T
    val range_list_of: token list -> Position.range * token list
    val range_list_of': token list -> 'a -> Position.range * 'a
    val range_list_of0: token list -> Position.range
    val range_of: token -> Position.range
    val read: string -> token list * (string list -> string list)
    val read_bin: string list -> int
    val read_dec: string list -> int
    val read_hex: string list -> int
    val read_init: 'a list * ('b -> 'b)
    val read_oct: string list -> int
    val read_source:
       Input.source -> token list * (string list -> string list)
    val read_source':
       {language: bool -> Markup.T, symbols: bool} ->
         (bool * (string * Position.T) list ->
            token * (bool * (string * Position.T) list))
           -> Input.source -> token list * (string list -> string list)
    val recover_char:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val recover_int:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val recover_string:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_one_not_eof:
       (Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_until_nl:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_blanks1:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_char:
       Symbol_Pos.T list ->
         (token_kind_encoding * (string, Position.range * int) either list)
         *
         Symbol_Pos.T list
    val scan_clangversion:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_file: Symbol_Pos.T list -> token_kind * Symbol_Pos.T list
    val scan_float:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_full:
       ('a ->
          ('b -> 'c) ->
            Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list)
         ->
         (string -> bool) ->
           'a ->
             ('d -> 'e * Symbol_Pos.T list) -> 'd -> 'e * Symbol_Pos.T list
    val scan_ident:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_ident_sym:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_int:
       Symbol_Pos.T list ->
         (int * token_kind_int_repr * token_kind_int_flag list) *
         Symbol_Pos.T list
    val scan_string:
       Symbol_Pos.T list ->
         (token_kind_encoding * (string, Position.range * int) either list)
         *
         Symbol_Pos.T list
    val scan_string': Symbol_Pos.T list -> string option
    val set_range: Position.range -> token -> token
    val stopper: token Scan.stopper
    val this_string:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    datatype token = Token of Position.range * (token_kind * string)
    datatype token_group
    =
         Group1 of token list * token list
       | Group2 of token list * token list * token list
       | Group3 of
           (Position.range * token list * token list * token list) *
           (Position.range * token list)
    datatype token_kind
    =
         Char of token_kind_string
       | ClangC
       | Comment of token_kind_comment
       | Directive of token_kind_directive
       | EOF
       | Error of string * token_group
       | File of token_kind_string
       | Float of Symbol_Pos.T list
       | GnuC
       | Ident
       | Integer of int * token_kind_int_repr * token_kind_int_flag list
       | Keyword
       | Sharp of int
       | Space
       | String of token_kind_string
       | Type_ident
       | Unknown
    datatype token_kind_comment
    =
         Comment_formal of C_Antiquote.antiq
       | Comment_suspicious of
           (bool * string * ((Position.T * Markup.T) * string) list) option
    datatype token_kind_directive
    =
         Conditional of
             token_group * token_group list * token_group option *
             token_group
       | Cpp of token_group
       | Define of
           token_group * token_group * token_group option * token_group
       | Include of token_group
       | Inline of token_group
       | Undef of token_group
    datatype token_kind_encoding
    = Encoding_L | Encoding_default | Encoding_file of string option
    datatype token_kind_int_flag
    = Flag_imag | Flag_long | Flag_long_long | Flag_unsigned
    datatype token_kind_int_repr
    = Repr_decimal | Repr_hexadecimal | Repr_octal
    type token_kind_string =
       token_kind_encoding * (string, Position.range * int) either list
    val token_leq: token * token -> bool
    val token_list_of: token_kind_directive -> token list
    val token_report: token -> ((Position.T * Markup.T) * string) list
    val unless_eof:
       (Symbol_Pos.T list -> 'a * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val warn: token -> unit
    val ~$$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
### theory "Draft.C_Lexer_Language"
### 1.236s elapsed time, 3.820s cpu time, 1.493s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.C_EnvironmentTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.628s elapsed time, 5.366s cpu time, 1.812s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.484s elapsed time, 5.075s cpu time, 2.113s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 3.032s elapsed time, 8.924s cpu time, 3.615s GC time
Loading theory "Draft.Templates" (required by "Draft.C_EnvironmentTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.C_EnvironmentTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.107s elapsed time, 3.137s cpu time, 2.035s GC time
### ML warning (line 2616 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 2614 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 2614 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 2614 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 2613 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 2613 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 2613 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 2622 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern 3 is redundant.
### ML warning (line 2623 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern 4 is redundant.
### ML warning (line 2632 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 2649 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 2649 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 2648 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 2648 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 2656 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 2656 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 2656 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 2655 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 2655 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 2655 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 2669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 2669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 2668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 2668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3098 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3096 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3096 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3095 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3095 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3268 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3267 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3266 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3265 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3264 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3263 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3262 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3261 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3257 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3255 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3255 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3255 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3254 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3254 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3254 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3253 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3253 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3252 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3252 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3251 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3251 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3250 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3250 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3249 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3249 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3249 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3248 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3248 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3248 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3247 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3247 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3247 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3246 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3246 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3246 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3245 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3245 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3245 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3244 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3244 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3244 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3243 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3243 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3243 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3241 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3241 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3241 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3241 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3240 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3240 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3240 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3240 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3239 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3239 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3239 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3239 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3238 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3238 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3238 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3238 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3237 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3237 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3237 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3236 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3236 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3236 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3235 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3235 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3235 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3235 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3234 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3234 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3234 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3234 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3233 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3233 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3232 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3232 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3231 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3231 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3230 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3230 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3229 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3229 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3228 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3228 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3227 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3227 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3227 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3226 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3226 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3226 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3225 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3225 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3225 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3224 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3224 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3224 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3223 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3223 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3223 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3222 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3222 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3222 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3221 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3221 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3221 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3220 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3220 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3220 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3219 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3219 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3219 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3219 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3218 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3218 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3218 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3218 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3217 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3217 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3217 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3217 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3216 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3216 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3216 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3216 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3215 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3215 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3215 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3214 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3214 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3214 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3213 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3213 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3213 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3213 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3212 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3212 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3212 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3212 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3211 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3211 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3210 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3210 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3209 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3208 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3207 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3207 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3206 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3206 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3205 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3205 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3204 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3204 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3203 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3203 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3202 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3202 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3201 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3201 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3200 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3200 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3199 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3199 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3199 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3198 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3198 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3198 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3197 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3197 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3197 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3196 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3196 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3196 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3195 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3195 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3192 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3192 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3192 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3191 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3189 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3189 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3188 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3188 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3187 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3187 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3186 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3186 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3185 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3185 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3183 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3183 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3182 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3182 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3181 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3181 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3181 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3179 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3179 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3179 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3178 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3178 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3178 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3177 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3177 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3176 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3176 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3175 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3175 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3175 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3174 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3174 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3174 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3173 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3172 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3169 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3169 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3169 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3168 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3168 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3168 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3167 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3167 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3167 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3166 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3166 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3166 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3165 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3165 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3165 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3165 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3164 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3164 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3164 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3164 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3163 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3163 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3163 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3163 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3162 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3162 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3162 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3162 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3161 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3161 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3161 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3160 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3160 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3160 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3158 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3158 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3158 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3158 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3157 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3157 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3156 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x5) has not been referenced.
### ML warning (line 3156 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3155 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3155 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3155 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3154 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3154 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3154 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3153 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3153 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3153 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3152 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3152 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3152 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3151 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3151 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3151 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3151 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3150 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3150 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3150 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3150 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3149 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3149 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3149 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3149 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3148 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3148 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3148 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3148 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3147 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3147 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3147 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3146 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3146 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3146 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3145 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3145 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3145 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3145 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3144 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3144 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3144 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3144 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3143 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3143 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3142 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x6) has not been referenced.
### ML warning (line 3142 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3141 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3141 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3141 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3140 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3140 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3140 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3139 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3139 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3139 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3139 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3138 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3138 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3138 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3138 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3137 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3137 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3137 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3137 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3136 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3136 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3136 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3136 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3135 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3135 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3135 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3134 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3134 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3134 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3133 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3133 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3133 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3133 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3132 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3132 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3132 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3132 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3131 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3131 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3130 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3130 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3129 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3129 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3129 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3129 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3128 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3128 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3128 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3128 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3127 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3127 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3127 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3127 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3126 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3126 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3126 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3126 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3125 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3125 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3125 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3124 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3124 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3124 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3123 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3123 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3123 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3123 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3122 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3122 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3122 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3122 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3121 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3121 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3120 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3120 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3119 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3119 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3119 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3119 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3119 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3118 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3118 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3118 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3118 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3118 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3117 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3117 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3117 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3117 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3116 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3116 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3116 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3116 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3115 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3115 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3115 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3115 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3115 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3114 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3114 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3114 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3114 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3114 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3113 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3113 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3113 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3112 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3112 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3112 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3111 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3111 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3111 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3111 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3110 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3110 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3110 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3110 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3108 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3108 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3108 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3108 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3108 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3107 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3107 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3107 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3106 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x102) has not been referenced.
### ML warning (line 3106 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x101) has not been referenced.
### ML warning (line 3106 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3105 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3105 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3105 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3105 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3104 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3104 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3104 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3104 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3103 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3103 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3102 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3102 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3101 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3101 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3101 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3100 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3100 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3100 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 3289 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3289 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3289 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3289 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3288 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3288 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3288 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3288 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3304 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3304 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3303 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3303 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3302 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3302 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3301 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3301 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3513 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3513 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3513 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3513 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3513 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3512 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3512 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3512 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3512 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3512 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3511 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3511 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3511 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3511 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3510 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3510 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3510 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3510 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3509 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3509 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3509 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3509 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3509 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3508 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3508 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3508 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3508 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3508 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3507 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3507 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3507 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3507 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3506 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3506 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3506 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3506 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3504 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3504 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3504 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3504 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3503 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3503 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3503 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3503 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3503 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3502 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3502 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3502 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3502 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3502 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3501 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3501 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3501 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3501 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3501 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3500 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3500 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3500 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3500 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3500 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3499 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3499 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3499 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3499 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3498 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3498 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3498 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3498 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3497 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3497 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3497 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3497 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3496 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3496 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3496 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3496 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11) has not been referenced.
### ML warning (line 3495 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3495 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3495 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3495 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3495 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3494 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3494 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3494 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3494 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3494 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3493 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3493 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3493 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3478 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3478 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3478 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3477 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3477 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3477 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3477 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3476 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3476 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3476 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3476 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3473 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3473 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3473 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3472 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3472 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3472 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3471 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3471 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3471 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3470 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3470 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3470 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3469 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3469 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3469 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3469 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3468 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3468 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3468 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3468 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3467 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3467 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3467 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3467 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3467 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3465 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3465 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3465 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3465 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3465 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3464 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3464 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3464 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3464 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3464 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3463 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3463 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3463 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3463 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3463 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3462 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3462 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3462 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3462 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3462 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3461 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3461 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3461 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3461 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3460 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3460 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3460 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3460 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3459 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3459 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3459 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3459 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3459 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3458 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3458 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3458 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3458 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3458 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3457 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3457 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3457 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3457 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3456 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3456 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3456 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3456 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3455 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3455 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3455 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3455 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3454 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3454 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3454 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3454 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3453 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3453 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3453 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3453 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3453 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3452 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3452 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3452 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3452 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3452 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3451 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3451 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3451 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3451 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3451 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3450 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3450 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3450 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3450 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3450 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3449 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3449 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3449 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3449 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3448 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3448 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3448 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3448 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3447 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3447 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3447 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3447 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3446 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3446 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x33) has not been referenced.
### ML warning (line 3446 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x32) has not been referenced.
### ML warning (line 3446 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x31) has not been referenced.
### ML warning (line 3445 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3445 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3445 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3444 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3444 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3444 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3443 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3443 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3443 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3441 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3441 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3441 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3440 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3440 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3440 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3439 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3439 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3438 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3438 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3437 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3437 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3437 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3436 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3436 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3436 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3435 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3435 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3434 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3434 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3433 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3433 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3432 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3432 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3431 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3431 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3431 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3430 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3430 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3430 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3429 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3429 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3429 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3428 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3428 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3428 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3427 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3427 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3426 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3426 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3425 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3425 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3424 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3424 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 3423 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3423 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3423 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3423 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3422 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3422 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3422 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3422 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3421 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3421 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3421 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3421 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3420 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3420 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3420 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3420 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3419 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3419 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3419 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3418 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3418 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3418 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3414 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3414 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3414 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3412 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3412 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3412 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3409 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3409 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3409 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3409 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3408 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3408 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3408 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3408 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3407 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3407 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3407 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3406 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3406 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3406 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3405 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3405 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3405 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3404 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3404 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x52) has not been referenced.
### ML warning (line 3404 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x51) has not been referenced.
### ML warning (line 3403 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3403 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3403 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3403 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3402 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3402 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3402 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3402 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3401 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3401 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3401 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3400 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3400 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3400 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3399 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3399 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3399 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3399 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3398 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3398 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3398 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3398 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3397 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3397 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3397 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3396 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3396 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3396 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3395 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3395 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3395 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3394 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3394 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3394 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3393 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3393 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3393 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3393 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3392 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3392 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3392 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3392 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3391 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3391 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3391 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3391 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3390 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3390 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3390 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3390 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3389 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3389 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3389 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3388 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3388 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3388 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3387 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3387 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3387 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3386 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3386 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x62) has not been referenced.
### ML warning (line 3386 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x61) has not been referenced.
### ML warning (line 3385 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3385 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3385 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3384 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3384 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3384 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3383 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3383 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3383 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3383 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3382 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3382 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3382 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3382 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3381 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3381 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3381 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3380 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3380 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3380 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3378 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3378 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3378 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3377 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3377 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3377 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3377 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3376 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3376 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3376 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3376 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3375 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3375 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3375 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3375 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3374 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3374 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3374 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3374 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3373 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3373 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3373 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3372 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3372 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3372 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3370 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3370 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x72) has not been referenced.
### ML warning (line 3370 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x71) has not been referenced.
### ML warning (line 3369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3368 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3368 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3368 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3367 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3367 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3364 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3364 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3363 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3363 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3363 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3361 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3361 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3361 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3360 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3360 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3360 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3359 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3359 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3358 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3358 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3357 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3357 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x8) has not been referenced.
### ML warning (line 3355 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3355 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3355 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3354 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3354 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3354 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3353 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3353 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3353 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3352 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3352 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3352 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3351 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3351 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3351 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3351 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3350 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3350 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3350 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3350 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3349 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3349 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3349 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3349 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3348 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3348 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3348 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3348 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3347 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3347 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3347 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3346 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3346 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3346 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3345 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3345 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3345 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3344 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3344 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3344 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3343 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3343 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3342 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3342 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3341 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3341 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3341 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3340 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3340 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3340 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3339 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3339 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3339 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3338 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3338 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3338 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3337 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3337 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3336 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3336 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3335 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3335 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3334 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3334 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3332 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3332 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3332 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3331 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3331 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3331 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3328 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3328 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3327 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3327 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x11a) has not been referenced.
### ML warning (line 3325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x122) has not been referenced.
### ML warning (line 3320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x121) has not been referenced.
### ML warning (line 3319 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3319 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3319 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3318 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3318 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3318 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3317 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3317 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3317 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3316 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3316 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x132) has not been referenced.
### ML warning (line 3316 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x131) has not been referenced.
### ML warning (line 3315 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3315 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3314 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x15) has not been referenced.
### ML warning (line 3314 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3547 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3547 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3546 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3546 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3571 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3570 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3569 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3568 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 3668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (u) has not been referenced.
### ML warning (line 3685 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3685 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3684 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 3684 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3870 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3869 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3868 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3868 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3867 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3867 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3866 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3866 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3865 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3865 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3864 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3863 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3862 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3862 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3861 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3861 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3860 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3859 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3858 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3857 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3856 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3855 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3846 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3845 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3844 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3844 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3843 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3843 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3842 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3842 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3841 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3841 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3840 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3839 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3838 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3838 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3837 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3837 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3836 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3835 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3834 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3833 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3832 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3831 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3824 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3823 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3822 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3822 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3821 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3821 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3820 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3820 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3819 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3819 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3818 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3817 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3816 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3816 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3815 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3815 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3814 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3813 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3812 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3811 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3810 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3809 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3804 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3803 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3802 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3802 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3801 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3801 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3800 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3800 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3799 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3799 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3798 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3797 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3796 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3796 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3795 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3795 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3794 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3793 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3792 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3791 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3790 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3789 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3786 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3785 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3784 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3784 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3783 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3783 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3782 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3782 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3781 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3781 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3780 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3779 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3778 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3778 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3777 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3777 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3776 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3775 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3774 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3773 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3772 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3771 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3770 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3769 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3768 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3768 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3767 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3767 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3766 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3766 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3765 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3765 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3764 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3763 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3762 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3762 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3761 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3761 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3760 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3759 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3758 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3757 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3756 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3755 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3754 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3754 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3754 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3753 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3753 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3753 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3752 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3752 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3752 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3751 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3751 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3751 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3750 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3750 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3749 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3749 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3748 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3748 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3748 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3747 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3747 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3747 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3746 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3746 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3745 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3745 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3744 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3744 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3743 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3743 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3742 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3742 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3741 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3741 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x7) has not been referenced.
### ML warning (line 3740 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3740 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3740 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3740 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3739 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3739 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3739 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3739 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3738 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3738 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3738 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3737 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3737 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3737 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3736 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3736 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3736 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3736 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3735 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3735 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3735 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3735 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3734 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3734 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3734 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3733 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3733 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3733 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3732 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3732 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3732 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3731 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3731 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3731 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3730 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3730 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3730 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3729 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3729 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x82) has not been referenced.
### ML warning (line 3729 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x81) has not been referenced.
### ML warning (line 3728 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3728 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3728 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3727 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3727 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3727 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3726 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3726 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3726 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3726 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3725 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3725 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3725 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3725 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3724 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3724 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3724 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3722 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3722 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3722 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3721 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3721 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3721 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3720 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3720 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3720 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x92) has not been referenced.
### ML warning (line 3719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x91) has not been referenced.
### ML warning (line 3718 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3718 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3718 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3717 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3717 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3717 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3716 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3716 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3715 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3715 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3714 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3714 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3713 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3713 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3712 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3712 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3711 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3711 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x10) has not been referenced.
### ML warning (line 3710 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3710 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3710 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3709 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3709 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3709 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3708 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3708 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3708 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3707 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3707 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3707 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3706 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3706 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3706 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3705 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3705 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x112) has not been referenced.
### ML warning (line 3705 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x111) has not been referenced.
### ML warning (line 3704 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3704 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3703 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3703 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3702 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3702 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3701 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3701 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x12) has not been referenced.
### ML warning (line 3700 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3700 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3699 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x14) has not been referenced.
### ML warning (line 3699 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x13) has not been referenced.
### ML warning (line 3918 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 3926 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 3974 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3974 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3974 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3973 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3973 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3973 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3972 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3972 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x3) has not been referenced.
### ML warning (line 3971 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x3) has not been referenced.
### ML warning (line 3971 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 3970 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3970 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 3970 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x3) has not been referenced.
### ML warning (line 3969 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x3) has not been referenced.
### ML warning (line 3969 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 3969 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 4366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 4366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 4366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 4366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 4365 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 4372 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 4372 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 4372 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 4372 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 4371 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 4379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 4383 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 4396 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 4431 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4439 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ys) has not been referenced.
### ML warning (line 4438 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 4497 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 4502 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 4505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 4515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x21) has not been referenced.
### ML warning (line 4517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x22) has not been referenced.
### ML warning (line 4517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8384 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8396 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8368 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8328 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8340 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8300 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8312 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8272 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8284 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8240 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8252 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8222 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 8204 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8216 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8177 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8189 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8150 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8162 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8122 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8134 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8095 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8107 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8068 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8080 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8041 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8053 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8014 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8026 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7983 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7995 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7952 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7964 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7921 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7933 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7891 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7860 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7872 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7829 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7841 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7801 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7813 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7772 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7784 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7744 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7756 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7712 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7724 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7680 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7692 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7649 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7618 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7630 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7587 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7599 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7556 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7568 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7494 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7506 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7463 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7432 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7444 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7401 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7370 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7382 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7339 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7351 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7308 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7276 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7288 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7245 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7257 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7214 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7226 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7182 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7195 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7154 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7166 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7126 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7138 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7098 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7110 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7070 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7082 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7039 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7051 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7008 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 7020 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6977 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6989 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6946 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6958 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6915 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6927 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6896 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6853 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6865 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6822 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6834 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6791 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6803 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6751 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6763 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6711 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6683 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6633 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6645 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6565 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6532 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6499 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6455 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6467 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6422 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6434 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6389 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6401 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6368 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6335 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6291 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6303 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6256 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6268 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6223 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6235 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6191 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6203 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6158 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6128 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6140 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6097 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6066 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6078 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6035 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6047 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6004 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 6016 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5973 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5985 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5954 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5911 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5923 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5892 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5853 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5865 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5825 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5837 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5797 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5809 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5769 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5781 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5740 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5753 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5714 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5726 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5688 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5700 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5657 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5626 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5638 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5607 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5565 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5577 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5546 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5503 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5447 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5459 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5419 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5431 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5388 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5400 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5357 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5338 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5295 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5307 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5264 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5276 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5233 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5245 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5202 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5214 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5183 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5140 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5152 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5121 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5078 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5090 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5047 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5059 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5016 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 5028 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4985 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4997 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4953 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4965 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4922 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4934 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4891 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4859 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4872 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4831 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4843 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4803 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4815 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4775 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4787 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4747 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4759 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4731 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4691 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4703 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4663 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4675 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4635 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4647 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4607 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4619 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4581 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 4539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8451 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 8461 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 8482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 8487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 8509 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8546 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8559 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8573 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8572 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8571 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8570 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8569 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8568 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8565 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8564 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8591 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 8590 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 8627 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 8631 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 8648 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 8648 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 8648 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A1_) has not been referenced.
### ML warning (line 8647 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 8647 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A2_) has not been referenced.
### ML warning (line 8647 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A1_) has not been referenced.
### ML warning (line 8653 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 8657 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (y) has not been referenced.
### ML warning (line 8657 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 8693 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 8703 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (sep) has not been referenced.
### ML warning (line 8702 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (sep) has not been referenced.
### ML warning (line 8702 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 8707 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 8707 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 8711 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 8717 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 8727 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 8741 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 8853 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (k) has not been referenced.
### ML warning (line 8853 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 8877 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 8885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 8914 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8938 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8941 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 8944 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8957 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 8987 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 8991 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 9023 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9031 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 9024 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9051 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 9128 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9181 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 9595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9580 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9565 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9460 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9445 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9430 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9400 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9385 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9370 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9355 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9340 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9310 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9295 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9280 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9264 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9250 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9227 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9211 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9195 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9177 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9177 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9158 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9153 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9610 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9764 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 9794 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9779 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9808 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9813 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9842 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9980 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (statement0) has not been referenced.
### ML warning (line 9984 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9994 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 9989 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10053 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10052 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10058 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10062 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10062 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10062 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10067 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10145 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10150 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10189 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10198 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10235 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 10238 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10307 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 10321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 10324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 10357 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10357 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 10357 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 10356 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 10363 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10363 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 10363 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 10363 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 10362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 10366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_expr) has not been referenced.
### ML warning (line 10366 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_fun_ty) has not been referenced.
### ML warning (line 10380 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10380 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_expr) has not been referenced.
### ML warning (line 10380 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_fun_name) has not been referenced.
### ML warning (line 10389 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 10443 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10443 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 10443 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 10443 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 10442 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 10453 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_clause) has not been referenced.
### ML warning (line 10555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_param) has not been referenced.
### ML warning (line 10560 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10588 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10588 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_fun_ty) has not been referenced.
### ML warning (line 10588 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_fun_name) has not been referenced.
### ML warning (line 10590 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10590 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_ty) has not been referenced.
### ML warning (line 10590 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_param) has not been referenced.
### ML warning (line 10671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inh_sib_unflat) has not been referenced.
### ML warning (line 10671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inh_sib) has not been referenced.
### ML warning (line 10714 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10742 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10783 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10824 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10824 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_clause) has not been referenced.
### ML warning (line 10824 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_ty) has not been referenced.
### ML warning (line 10850 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 10889 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10889 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyRole) has not been referenced.
### ML warning (line 10889 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyMult) has not been referenced.
### ML warning (line 10895 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10946 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10946 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 10946 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 10945 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 10952 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10952 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 10952 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 10952 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 10951 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 10961 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10961 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_role_ty) has not been referenced.
### ML warning (line 10961 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_ass_switch) has not been referenced.
### ML warning (line 10963 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10963 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_role_multip) has not been referenced.
### ML warning (line 10963 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_ass_switch) has not been referenced.
### ML warning (line 10965 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10965 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_from) has not been referenced.
### ML warning (line 10965 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_arity) has not been referenced.
### ML warning (line 10965 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_id) has not been referenced.
### ML warning (line 10965 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_name) has not been referenced.
### ML warning (line 10967 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10967 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_to) has not been referenced.
### ML warning (line 10967 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_from) has not been referenced.
### ML warning (line 10967 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_arity) has not been referenced.
### ML warning (line 10967 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_id) has not been referenced.
### ML warning (line 10980 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 10992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 10992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyCollect) has not been referenced.
### ML warning (line 10992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyRole) has not been referenced.
### ML warning (line 11060 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 11171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 11171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 11171 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 11170 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 11185 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11185 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 11185 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 11185 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 11184 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 11191 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11191 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 11191 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 11191 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 11190 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 11270 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11299 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 11367 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11367 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_abstract) has not been referenced.
### ML warning (line 11367 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_own) has not been referenced.
### ML warning (line 11367 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_name) has not been referenced.
### ML warning (line 11369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_abstract) has not been referenced.
### ML warning (line 11369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_clause) has not been referenced.
### ML warning (line 11369 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_own) has not been referenced.
### ML warning (line 11392 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 11458 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 11489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 11489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 11488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 11498 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11548 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11548 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr_with) has not been referenced.
### ML warning (line 11550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_ty) has not been referenced.
### ML warning (line 11550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_name) has not been referenced.
### ML warning (line 11552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr) has not been referenced.
### ML warning (line 11552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr_with) has not been referenced.
### ML warning (line 11552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_name) has not been referenced.
### ML warning (line 11557 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 11562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr) has not been referenced.
### ML warning (line 11562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr_with) has not been referenced.
### ML warning (line 11562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_ty) has not been referenced.
### ML warning (line 11565 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 11585 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11737 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11746 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11809 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11899 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11898 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11914 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11980 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 11990 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11990 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_role_ty) has not been referenced.
### ML warning (line 11990 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_role_multip) has not been referenced.
### ML warning (line 11992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 11992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_to) has not been referenced.
### ML warning (line 11992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_from) has not been referenced.
### ML warning (line 11992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_id) has not been referenced.
### ML warning (line 11992 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_name) has not been referenced.
### ML warning (line 12002 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 12002 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_to) has not been referenced.
### ML warning (line 12002 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_arity) has not been referenced.
### ML warning (line 12002 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_id) has not been referenced.
### ML warning (line 12002 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_name) has not been referenced.
### ML warning (line 12005 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12023 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12029 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 12029 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyCollect) has not been referenced.
### ML warning (line 12029 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyMult) has not been referenced.
### ML warning (line 12050 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12086 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 12086 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 12086 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 12086 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 12085 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 12099 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 12099 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr) has not been referenced.
### ML warning (line 12099 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_ty) has not been referenced.
### ML warning (line 12099 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_name) has not been referenced.
### ML warning (line 12112 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 12112 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (k) has not been referenced.
### ML warning (line 12112 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (A_) has not been referenced.
### ML warning (line 12161 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12269 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12353 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12367 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 12379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 12379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_abstract) has not been referenced.
### ML warning (line 12379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_clause) has not been referenced.
### ML warning (line 12379 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_name) has not been referenced.
### ML warning (line 12399 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12386 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 12411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (oclAss_type) has not been referenced.
### ML warning (line 12467 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12503 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 12505 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 12534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 12534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (oclAss_relation) has not been referenced.
### ML warning (line 12645 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 12650 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 12712 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12711 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 12737 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12837 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12856 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 12897 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 12938 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 13003 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13096 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13126 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 13242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_to) has not been referenced.
### ML warning (line 13242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_from) has not been referenced.
### ML warning (line 13242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_arity) has not been referenced.
### ML warning (line 13242 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_name) has not been referenced.
### ML warning (line 13292 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13293 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13294 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13302 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 13327 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 13353 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 13423 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13423 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 13555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (lex_string) has not been referenced.
### ML warning (line 13555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (lex_list_cons) has not been referenced.
### ML warning (line 13557 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 13557 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (lex_string) has not been referenced.
### ML warning (line 13557 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (lex_bool_false) has not been referenced.
### ML warning (line 13559 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 13559 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (lex_bool_false) has not been referenced.
### ML warning (line 13559 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (lex_list_cons) has not been referenced.
### ML warning (line 13564 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13609 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 13797 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 13824 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 13843 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 13843 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inh_sib_unflat) has not been referenced.
### ML warning (line 13843 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inh) has not been referenced.
### ML warning (line 13847 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 13847 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inh_sib) has not been referenced.
### ML warning (line 13847 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inh) has not been referenced.
### ML warning (line 14161 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 14167 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 14437 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 14531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 14848 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 15079 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 15109 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 15182 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 15975 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 16020 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 16730 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 16733 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 16756 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 16787 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 16904 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 16904 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 16904 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 16904 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 16903 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 16929 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 16937 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 16937 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 16937 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 16937 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 16936 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 16943 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 16943 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 16943 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 16942 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 16956 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_sorry_dirty) has not been referenced.
### ML warning (line 16956 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_hsk_constr) has not been referenced.
### ML warning (line 16956 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_HO_type) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_accessor) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_auto_bootstrap) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_force) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_state) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_instance) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_meta) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_input_class) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_semantics) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_position) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_ocl_oid_start) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_header_thy) has not been referenced.
### ML warning (line 16955 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (d_output_disable_thy) has not been referenced.
### ML warning (line 16982 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 16995 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 17013 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17130 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17135 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17137 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17139 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17146 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17152 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17154 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17156 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17161 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17166 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17168 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17185 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17191 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17213 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17239 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17261 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17263 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17265 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17287 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 17287 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (holThyLocale_name) has not been referenced.
### ML warning (line 17289 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 17289 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (holThyLocale_header) has not been referenced.
### ML warning (line 17310 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17332 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 17355 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17360 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17362 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17364 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17374 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (uu) has not been referenced.
### ML warning (line 17398 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Matches are not exhaustive.
### ML warning (line 17408 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17412 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17412 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17412 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17436 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr) has not been referenced.
### ML warning (line 17436 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_attr_with) has not been referenced.
### ML warning (line 17436 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_ty) has not been referenced.
### ML warning (line 17436 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (inst_name) has not been referenced.
### ML warning (line 17440 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17446 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17445 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17459 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17458 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17466 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17465 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17465 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17464 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17464 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17468 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17477 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17492 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17491 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17490 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17489 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17488 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17487 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17486 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17485 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17484 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17483 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17482 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17481 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17480 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17479 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17497 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17496 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17540 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17539 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17538 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17537 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17536 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyCollect) has not been referenced.
### ML warning (line 17550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyRole) has not been referenced.
### ML warning (line 17550 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyMult) has not been referenced.
### ML warning (line 17560 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17559 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17564 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_role_ty) has not been referenced.
### ML warning (line 17564 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_role_multip) has not been referenced.
### ML warning (line 17564 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObjN_ass_switch) has not been referenced.
### ML warning (line 17573 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_to) has not been referenced.
### ML warning (line 17573 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_from) has not been referenced.
### ML warning (line 17573 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_arity) has not been referenced.
### ML warning (line 17573 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_ass_id) has not been referenced.
### ML warning (line 17573 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (tyObj_name) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17605 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17604 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17603 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17598 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17597 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17596 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17595 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17594 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17593 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17592 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17628 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17628 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17628 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17627 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17627 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17627 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17626 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17626 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17626 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17625 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17625 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17625 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17630 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17634 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (oclAss_relation) has not been referenced.
### ML warning (line 17634 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (oclAss_type) has not been referenced.
### ML warning (line 17643 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17646 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17645 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17651 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17651 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17650 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17650 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17669 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17693 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17692 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17696 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17695 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17698 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17706 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_expr) has not been referenced.
### ML warning (line 17706 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_fun_ty) has not been referenced.
### ML warning (line 17706 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_fun_name) has not been referenced.
### ML warning (line 17719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (more) has not been referenced.
### ML warning (line 17719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_clause) has not been referenced.
### ML warning (line 17719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_own) has not been referenced.
### ML warning (line 17719 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_name) has not been referenced.
### ML warning (line 17723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_abstract) has not been referenced.
### ML warning (line 17723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_clause) has not been referenced.
### ML warning (line 17723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_own) has not been referenced.
### ML warning (line 17723 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (classRaw_name) has not been referenced.
### ML warning (line 17750 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_clause) has not been referenced.
### ML warning (line 17750 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_ty) has not been referenced.
### ML warning (line 17750 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (ctxt_param) has not been referenced.
### ML warning (line 17761 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17761 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17761 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17760 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17760 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17760 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17759 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17759 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17759 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17758 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17758 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17758 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17780 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17780 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17780 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17779 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17779 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17779 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17778 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17778 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17778 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17777 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17777 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17777 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17787 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17786 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17794 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17794 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17794 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17793 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17793 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17793 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17806 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17805 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f33) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f22) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f21) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17828 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f33) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f22) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f21) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 17827 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 17886 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17886 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17886 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17886 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17886 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17886 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17886 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17885 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17884 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17883 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17883 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17883 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17883 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17883 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17883 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17883 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17882 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17882 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17882 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17882 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17882 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17882 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17882 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17881 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17881 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17881 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17881 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17881 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17881 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17881 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17880 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17879 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 17879 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 17879 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 17879 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 17879 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 17879 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17879 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17909 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17909 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17908 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17908 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 17907 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 17907 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 17911 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17949 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17963 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 17968 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 17977 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Pattern is not exhaustive.
### ML warning (line 18153 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 18153 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x3) has not been referenced.
### ML warning (line 18153 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 18155 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 18155 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x3) has not been referenced.
### ML warning (line 18155 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 18157 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x4) has not been referenced.
### ML warning (line 18157 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 18157 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 18159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x3) has not been referenced.
### ML warning (line 18159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x2) has not been referenced.
### ML warning (line 18159 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (x1) has not been referenced.
### ML warning (line 18175 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18173 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18169 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18168 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18167 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18166 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18165 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18164 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18163 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f41) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18180 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f42) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f41) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18194 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f42) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f41) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18193 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18333 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18330 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18329 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18326 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18325 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18324 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18323 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18322 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18321 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18320 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18411 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18410 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18417 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18416 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18415 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18414 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18414 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18414 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18414 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18413 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18470 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18469 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18475 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18474 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18473 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18473 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18473 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18472 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18472 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18472 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18531 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18530 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18529 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18528 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18527 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18526 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18525 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18524 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18523 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18522 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18521 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18520 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18519 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18518 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18517 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18516 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18515 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f10) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f9) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f8) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18514 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18535 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18534 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18533 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18533 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18541 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18567 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18566 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18563 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18562 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18561 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18555 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18554 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18553 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18552 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18545 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18544 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18543 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f11) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f32) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f31) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f119) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f118) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f117) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f116) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f115) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f114) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f113) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f112) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f111) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f110) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f19) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f18) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f17) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f16) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f15) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f14) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f13) has not been referenced.
### ML warning (line 18542 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f12) has not been referenced.
### ML warning (line 18570 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18569 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18600 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 18640 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18640 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18640 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18640 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18639 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18639 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18639 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18639 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18638 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18638 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18638 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18638 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18637 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18637 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18637 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18637 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18636 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18636 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18636 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18636 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18646 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 18664 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18664 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18664 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18664 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18664 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18664 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18663 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18663 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18663 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18663 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18663 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18663 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18662 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18661 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18660 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18660 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18660 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18660 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18660 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18660 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18659 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18659 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18659 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18659 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18659 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18659 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18658 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f7) has not been referenced.
### ML warning (line 18658 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f6) has not been referenced.
### ML warning (line 18658 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18658 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18658 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18658 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18668 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18667 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18667 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18666 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18666 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18674 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18674 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18674 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18674 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18673 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18673 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18673 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18673 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18672 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18672 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18672 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18672 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18671 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f5) has not been referenced.
### ML warning (line 18670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18670 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18679 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18679 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18679 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18678 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18678 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18678 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18677 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18677 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18677 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18676 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f4) has not been referenced.
### ML warning (line 18676 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f3) has not been referenced.
### ML warning (line 18676 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
### ML warning (line 18694 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f1) has not been referenced.
### ML warning (line 18693 of "$AFP/Isabelle_C/C11-FrontEnd/generated/c_ast.ML"):
### Value identifier (f2) has not been referenced.
structure C_Ast:
  sig
    datatype abbreviation = Abbreviation of semi_terma
    datatype abr_string
    =
         SS_base of string_b_a_s_e
       | String_concatWith of abr_string * abr_string list
    val activate_simp_optimization: bool
    val add_0: int -> abr_string
    val add_hierarchy:
       ('a ->
          'b ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              'c -> (abr_string * ocl_ty) list list tmp_inh -> 'd -> 'e)
         ->
         ocl_class ->
           'a ->
             'b ->
               'c ->
                 (ocl_class, 'f) inheritance_ext list tmp_inh ->
                   'g -> 'd -> 'e
    val add_hierarchya:
       ('a ->
          'b ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              'c -> (abr_string * ocl_ty) list list tmp_inh -> 'd -> 'e)
         ->
         ocl_class ->
           'a ->
             'b ->
               'c ->
                 (ocl_class, 'f) inheritance_ext list tmp_inh ->
                   'd -> 'g -> 'e
    val add_hierarchyb:
       ('a -> 'b -> 'c -> 'd -> 'e -> 'f) ->
         'a -> 'b -> 'c -> 'd tmp_inh -> 'e tmp_sub -> 'f
    datatype ('a, 'b) alist = Alist of ('a * 'b) list
    val all: (int -> bool) -> abr_string -> bool
    datatype all_meta
    =
         META_all_meta_embedding of all_meta_embedding
       | META_boot_generation_syntax of boot_generation_syntax
       | META_boot_setup_env of boot_setup_env
       | META_semi_theories of semi_theories
    datatype all_meta_embedding
    =
         META_ass_class of floor * ocl_ass_class
       | META_association of unit ocl_association_ext
       | META_class_raw of floor * unit ocl_class_raw_ext
       | META_class_synonym of ocl_class_synonym
       | META_class_tree of ocl_class_tree
       | META_ctxt of floor * unit ocl_ctxt_ext
       | META_def_base_l of ocl_def_base_l
       | META_def_state of floor * ocl_def_state
       | META_def_transition of floor * ocl_def_transition
       | META_enum of ocl_enum
       | META_flush_all of ocl_flush_all
       | META_generic of ocl_generic
       | META_haskell of isaUnit
       | META_instance of ocl_instance
    val anonymousRef: namea -> sUERef
    val ap1: ('a -> 'b list -> 'c) -> 'a -> ('d -> 'b) -> 'd -> 'c
    val ap16:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) ->
                     ('i -> 'b) ->
                       ('j -> 'b) ->
                         ('k -> 'b) ->
                           ('l -> 'b) ->
                             ('m -> 'b) ->
                               ('n -> 'b) ->
                                 ('o -> 'b) ->
                                   ('p -> 'b) ->
                                     ('q -> 'b) ->
                                       ('r -> 'b) -> ('s -> 'b) -> 'd -> ...
    val ap2:
       ('a -> 'b list -> 'c) ->
         'a -> ('d -> 'b) -> ('e -> 'b) -> 'd -> 'e -> 'c
    val ap3:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) -> ('e -> 'b) -> ('f -> 'b) -> 'd -> 'e -> 'f -> 'c
    val ap4:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) -> ('g -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'c
    val ap5:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'h -> 'c
    val ap6:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) ->
                     ('i -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'h -> 'i -> 'c
    val app: abr_string -> semi_term_0 list -> semi_term_0
    val app0: abr_string -> semi_term_0 list -> semi_term
    val app_pair: semi_term_0 -> semi_term_0 list -> semi_term_0
    val app_rev: 'a -> ('a -> 'b) -> 'b
    val append: 'a list -> 'a list -> 'a list
    val apply: semi_term_0 -> semi_term_0 list -> semi_term_0
    val apply_end: semi_method list -> semi_command_state
    val apply_optim_ass_arity: 'a ocl_ty_class_ext -> 'b -> 'b option
    val applya: semi_method list -> semi_command_proof
    val apsnd: ('a -> 'b) -> 'c * 'a -> 'c * 'b
    val ar1: ('a -> 'b list -> 'c) -> 'a -> 'b -> 'c
    val ar2: ('a -> 'b list -> 'c) -> 'a -> ('d -> 'b) -> 'd -> 'b -> 'c
    val ar3:
       ('a -> 'b list -> 'c) ->
         'a -> ('d -> 'b) -> ('e -> 'b) -> 'd -> 'e -> 'b -> 'c
    val arrange_ass:
       bool ->
         bool ->
           all_meta_embedding list ->
             ocl_enum list ->
               unit ocl_class_raw_ext list * unit ocl_association_ext list
    val ascii_of_literal: string -> int
    datatype asmblock
    =
         Asmblock of
             abr_string * (abr_string option * (abr_string * expr)) list *
             (abr_string option * (abr_string * expr)) list *
             abr_string list
    val assemblyOperand:
       'a cAssemblyOperand list ->
         (abr_string option * (abr_string * expr)) list
    val assoc: 'a equal -> 'a -> ('a * 'b) list -> 'b option
    val assoca: abr_string -> (string_b_a_s_e * 'a) list -> 'a option
    val attrs:
       nodeInfo cDeclarationSpecifier list ->
         nodeInfo cDerivedDeclarator list ->
           nodeInfo cAttribute list ->
             ((comment list * (abr_string * int, (int * int) list) alist) *
              (positiona * int) option)
             *
             (positiona * int)
               -> fnspec list
    val attrs0: nodeInfo cAttribute -> gcc_attribute
    val auto: semi_method
    val auto_simp_add: abr_string list -> semi_method
    val auto_simp_add2:
       semi_thm_attribute list -> abr_string list -> semi_method
    val auto_simp_add_split:
       semi_thm_attribute list -> abr_string list -> semi_method
    val aux_b_r_e_a_d_t_h:
       'a ->
         ('a, 'a * 'b list) print_iskindof_up_istypeof_output list ->
           ('a * ('b * bool) list) list ->
             ('b * bool) list ->
               ('a, 'a * 'b list) print_iskindof_up_istypeof_output list
    val aux_d_e_p_t_h:
       ('a * ('b * bool) list) list ->
         ('a, 'a * 'b list) print_iskindof_up_istypeof_output list
    val axiomatization: axiomatization -> all_meta
    datatype axiomatization = Axiomatization of abr_string * semi_terma
    val base255: abr_string -> abr_string
    datatype base_inttype
    = Charb | Double | Float | Inta | Long | LongLong | Short
    val basic: abr_string list -> semi_term_0
    val bin_last: inta -> bool
    val bin_rest: inta -> inta
    val bin_to_bl: nat -> inta -> bool list
    val bin_to_bl_aux: nat -> inta -> bool list -> bool list
    val binaryOp: cBinaryOp -> binoptype
    val bind: ('a -> 'b option) -> ('b list -> 'c) -> 'a list -> 'c option
    val bind2: ('a, 'b * 'c) sum -> ('b -> 'd) -> ('a, 'd * 'c) sum
    val bind3:
       ('a -> ('b, 'c * 'd) sum) -> ('c -> 'e) -> 'a -> ('b, 'e * 'd) sum
    val bind_e_r_r:
       'a print_examp_instance_draw_list_attra ->
         ('a -> 'b print_examp_instance_draw_list_attra) ->
           'b print_examp_instance_draw_list_attra
    val bind_k: ('a -> ('b, 'c * 'd) sum) -> 'e -> 'a -> ('b, 'e * 'd) sum
    val binda: 'a option -> ('a -> 'b option) -> 'b option
    val bindb: ('a -> 'b * 'c) -> ('c -> 'b -> 'd) -> 'a -> 'd
    val bindc: ('a, 'b) sum -> ('b -> ('a, 'c) sum) -> ('a, 'c) sum
    val bindd:
       ('a list -> (char list, 'b * 'a list) sum) ->
         ('b -> 'a list -> (char list, 'c * 'a list) sum) ->
           'a list -> (char list, 'c * 'a list) sum
    val binop: semi_term_0 -> abr_string -> semi_term_0 -> semi_term_0
    val binop_l: abr_string -> semi_term_0 list -> semi_term_0
    datatype binoptype
    =
         BitwiseAnd
       | BitwiseOr
       | BitwiseXOr
       | Divides
       | Equals
       | Geq
       | Gt
       | LShift
       | Leq
       | LogAnd
       | LogOr
       | Lt
       | Minus
       | Modulus
       | NotEquals
       | Plus
       | RShift
       | Times
    val binoptype_of_CAssignOp: cAssignOp -> binoptype option
    datatype 'a bit0 = Abs_bit0 of inta
    val bit_cut_integer: int -> int * bool
    val blast: Code_Numeral.natural option -> semi_method
    datatype block_item
    = BI_Decl of declaration region_Wrap | BI_Stmt of statement
    val block_item_list:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list ->
           nodeInfo -> block_item list region_Wrap
    val block_item_list0:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list ->
           (positiona * int) * (positiona * int) -> block_item list
    val block_item_list0a:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list -> nodeInfo -> block_item list
    val bogus: sourcePos
    val bogwrap: 'a -> 'a region_Wrap
    datatype boot_generation_syntax
    = Boot_generation_syntax of generation_semantics_ocl
    datatype boot_setup_env = Boot_setup_env of unit compiler_env_config_ext
    val bootstrap_floor:
       all_meta list ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val bootstrap_floora:
       ('a ->
          unit compiler_env_config_ext ->
            all_meta list * (unit compiler_env_config_ext -> 'b))
         ->
         'a ->
           unit compiler_env_config_ext ->
             (all_meta list * unit compiler_env_config_ext) *
             (unit compiler_env_config_ext -> 'b)
    val builtinPosition: positiona
    val bulkload: 'a equal -> ('a * 'b) list -> ('a, 'b) alist
    val by: semi_method list -> semi_command_final
    val cAddAssOp: cAssignOp
    val cAddOp: cBinaryOp
    val cAdrOp: cUnaryOp
    val cAlignAsExpr: 'a cExpression -> 'a -> 'a cAlignmentSpecifier
    val cAlignAsType: 'a cDeclaration -> 'a -> 'a cAlignmentSpecifier
    val cAlignSpec: 'a cAlignmentSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cAlignmentSpecifier
    =
         CAlignAsExpr0 of 'a cExpression * 'a
       | CAlignAsType0 of 'a cDeclaration * 'a
    val cAlignofExpr: 'a cExpression -> 'a -> 'a cExpression
    val cAlignofType: 'a cDeclaration -> 'a -> 'a cExpression
    val cAndAssOp: cAssignOp
    val cAndOp: cBinaryOp
    val cArrDeclr:
       'a cTypeQualifier list ->
         'a cArraySize -> 'a -> 'a cDerivedDeclarator
    val cArrDesig: 'a cExpression -> 'a -> 'a cPartDesignator
    val cArrSize: bool -> 'a cExpression -> 'a cArraySize
    datatype 'a cArraySize
    = CArrSize0 of bool * 'a cExpression | CNoArrSize0 of bool
    val cAsm: 'a cAssemblyStatement -> 'a -> 'a cStatement
    val cAsmExt: 'a cStringLiteral -> 'a -> 'a cExternalDeclaration
    val cAsmOperand:
       ident optiona ->
         'a cStringLiteral -> 'a cExpression -> 'a -> 'a cAssemblyOperand
    val cAsmStmt:
       'a cTypeQualifier optiona ->
         'a cStringLiteral ->
           'a cAssemblyOperand list ->
             'a cAssemblyOperand list ->
               'a cStringLiteral list -> 'a -> 'a cAssemblyStatement
    datatype 'a cAssemblyOperand
    =
         CAsmOperand0 of
             ident optiona * 'a cStringLiteral * 'a cExpression * 'a
    datatype 'a cAssemblyStatement
    =
         CAsmStmt0 of
             'a cTypeQualifier optiona * 'a cStringLiteral *
             'a cAssemblyOperand list * 'a cAssemblyOperand list *
             'a cStringLiteral list * 'a
    val cAssign:
       cAssignOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val cAssignOp: cAssignOp
    datatype cAssignOp
    =
         CAddAssOp0
       | CAndAssOp0
       | CAssignOp0
       | CDivAssOp0
       | CMulAssOp0
       | COrAssOp0
       | CRmdAssOp0
       | CShlAssOp0
       | CShrAssOp0
       | CSubAssOp0
       | CXorAssOp0
    val cAtomicQual: 'a -> 'a cTypeQualifier
    val cAtomicType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val cAttr: ident -> 'a cExpression list -> 'a -> 'a cAttribute
    val cAttrQual: 'a cAttribute -> 'a cTypeQualifier
    datatype 'a cAttribute = CAttr0 of ident * 'a cExpression list * 'a
    val cAuto: 'a -> 'a cStorageSpecifier
    val cBinary:
       cBinaryOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    datatype cBinaryOp
    =
         CAddOp0
       | CAndOp0
       | CDivOp0
       | CEqOp0
       | CGeqOp0
       | CGrOp0
       | CLeOp0
       | CLeqOp0
       | CLndOp0
       | CLorOp0
       | CMulOp0
       | CNeqOp0
       | COrOp0
       | CRmdOp0
       | CShlOp0
       | CShrOp0
       | CSubOp0
       | CXorOp0
    val cBlockDecl: 'a cDeclaration -> 'a cCompoundBlockItem
    val cBlockStmt: 'a cStatement -> 'a cCompoundBlockItem
    val cBoolType: 'a -> 'a cTypeSpecifier
    val cBreak: 'a -> 'a cStatement
    val cBuiltinExpr: 'a cBuiltinThing -> 'a cExpression
    val cBuiltinOffsetOf:
       'a cDeclaration -> 'a cPartDesignator list -> 'a -> 'a cBuiltinThing
    datatype 'a cBuiltinThing
    =
         CBuiltinOffsetOf0 of 'a cDeclaration * 'a cPartDesignator list * 'a
       | CBuiltinTypesCompatible0 of 'a cDeclaration * 'a cDeclaration * 'a
       | CBuiltinVaArg0 of 'a cExpression * 'a cDeclaration * 'a
    val cBuiltinTypesCompatible:
       'a cDeclaration -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val cBuiltinVaArg:
       'a cExpression -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val cCall: 'a cExpression -> 'a cExpression list -> 'a -> 'a cExpression
    val cCase: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cCases:
       'a cExpression ->
         'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cCast: 'a cDeclaration -> 'a cExpression -> 'a -> 'a cExpression
    val cChar: char -> bool -> cChar
    datatype cChar = CChar0 of char * bool | CChars0 of char list * bool
    val cCharConst: cChar -> 'a -> 'a cConstant
    val cCharType: 'a -> 'a cTypeSpecifier
    val cChars: char list -> bool -> cChar
    val cComma: 'a cExpression list -> 'a -> 'a cExpression
    val cCompOp: cUnaryOp
    val cComplexImag: 'a cExpression -> 'a -> 'a cExpression
    val cComplexReal: 'a cExpression -> 'a -> 'a cExpression
    val cComplexType: 'a -> 'a cTypeSpecifier
    val cCompound:
       ident list -> 'a cCompoundBlockItem list -> 'a -> 'a cStatement
    datatype 'a cCompoundBlockItem
    =
         CBlockDecl0 of 'a cDeclaration
       | CBlockStmt0 of 'a cStatement
       | CNestedFunDef0 of 'a cFunctionDef
    val cCompoundLit:
       'a cDeclaration ->
         ('a cPartDesignator list * 'a cInitializer) list ->
           'a -> 'a cExpression
    val cCond:
       'a cExpression ->
         'a cExpression optiona -> 'a cExpression -> 'a -> 'a cExpression
    val cConst: 'a cConstant -> 'a cExpression
    val cConstQual: 'a -> 'a cTypeQualifier
    datatype 'a cConstant
    =
         CCharConst0 of cChar * 'a
       | CFloatConst0 of cFloat * 'a
       | CIntConst0 of cInteger * 'a
       | CStrConst0 of cString * 'a
    val cCont: 'a -> 'a cStatement
    val cDecl:
       'a cDeclarationSpecifier list ->
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
           -> 'a -> 'a cDeclaration
    val cDeclExt: 'a cDeclaration -> 'a cExternalDeclaration
    datatype 'a cDeclaration
    =
         CDecl0 of
             'a cDeclarationSpecifier list *
             (('a cDeclarator optiona * 'a cInitializer optiona) *
              'a cExpression optiona
             )
             list
             *
             'a
       | CStaticAssert0 of 'a cExpression * 'a cStringLiteral * 'a
    datatype 'a cDeclarationSpecifier
    =
         CAlignSpec0 of 'a cAlignmentSpecifier
       | CFunSpec0 of 'a cFunctionSpecifier
       | CStorageSpec0 of 'a cStorageSpecifier
       | CTypeQual0 of 'a cTypeQualifier
       | CTypeSpec0 of 'a cTypeSpecifier
    datatype 'a cDeclarator
    =
         CDeclr0 of
             ident optiona * 'a cDerivedDeclarator list *
             'a cStringLiteral optiona * 'a cAttribute list * 'a
    val cDeclr:
       ident optiona ->
         'a cDerivedDeclarator list ->
           'a cStringLiteral optiona ->
             'a cAttribute list -> 'a -> 'a cDeclarator
    val cDefault: 'a cStatement -> 'a -> 'a cStatement
    datatype 'a cDerivedDeclarator
    =
         CArrDeclr0 of 'a cTypeQualifier list * 'a cArraySize * 'a
       | CFunDeclr0 of
           (ident list, 'a cDeclaration list * bool) either *
           'a cAttribute list * 'a
       | CPtrDeclr0 of 'a cTypeQualifier list * 'a
    val cDivAssOp: cAssignOp
    val cDivOp: cBinaryOp
    val cDoubleType: 'a -> 'a cTypeSpecifier
    val cEnum:
       ident optiona ->
         (ident * 'a cExpression optiona) list optiona ->
           'a cAttribute list -> 'a -> 'a cEnumeration
    val cEnumType: 'a cEnumeration -> 'a -> 'a cTypeSpecifier
    datatype 'a cEnumeration
    =
         CEnum0 of
             ident optiona * (ident * 'a cExpression optiona) list optiona *
             'a cAttribute list * 'a
    val cEqOp: cBinaryOp
    val cExpr: 'a cExpression optiona -> 'a -> 'a cStatement
    datatype 'a cExpression
    =
         CAlignofExpr0 of 'a cExpression * 'a
       | CAlignofType0 of 'a cDeclaration * 'a
       | CAssign0 of cAssignOp * 'a cExpression * 'a cExpression * 'a
       | CBinary0 of cBinaryOp * 'a cExpression * 'a cExpression * 'a
       | CBuiltinExpr0 of 'a cBuiltinThing
       | CCall0 of 'a cExpression * 'a cExpression list * 'a
       | CCast0 of 'a cDeclaration * 'a cExpression * 'a
       | CComma0 of 'a cExpression list * 'a
       | CComplexImag0 of 'a cExpression * 'a
       | CComplexReal0 of 'a cExpression * 'a
       | CCompoundLit0 of
           'a cDeclaration *
           ('a cPartDesignator list * 'a cInitializer) list * 'a
       | CCond0 of
           'a cExpression * 'a cExpression optiona * 'a cExpression * 'a
       | CConst0 of 'a cConstant
       | CGenericSelection0 of
           'a cExpression *
           ('a cDeclaration optiona * 'a cExpression) list * 'a
       | CIndex0 of 'a cExpression * 'a cExpression * 'a
       | CLabAddrExpr0 of ident * 'a
       | CMember0 of 'a cExpression * ...
       | CSizeofExpr0 of ...
       | ...
    val cExtern: 'a -> 'a cStorageSpecifier
    datatype 'a cExternalDeclaration
    =
         CAsmExt0 of 'a cStringLiteral * 'a
       | CDeclExt0 of 'a cDeclaration
       | CFDefExt0 of 'a cFunctionDef
    val cFDefExt: 'a cFunctionDef -> 'a cExternalDeclaration
    val cFloat: abr_string -> cFloat
    datatype cFloat = CFloat0 of abr_string
    val cFloatConst: cFloat -> 'a -> 'a cConstant
    val cFloatType: 'a -> 'a cTypeSpecifier
    val cFor:
       ('a cExpression optiona, 'a cDeclaration) either ->
         'a cExpression optiona ->
           'a cExpression optiona -> 'a cStatement -> 'a -> 'a cStatement
    val cFunDeclr:
       (ident list, 'a cDeclaration list * bool) either ->
         'a cAttribute list -> 'a -> 'a cDerivedDeclarator
    val cFunDef:
       'a cDeclarationSpecifier list ->
         'a cDeclarator ->
           'a cDeclaration list -> 'a cStatement -> 'a -> 'a cFunctionDef
    val cFunSpec: 'a cFunctionSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cFunctionDef
    =
         CFunDef0 of
             'a cDeclarationSpecifier list * 'a cDeclarator *
             'a cDeclaration list * 'a cStatement * 'a
    datatype 'a cFunctionSpecifier
    = CInlineQual0 of 'a | CNoreturnQual0 of 'a
    val cGenericSelection:
       'a cExpression ->
         ('a cDeclaration optiona * 'a cExpression) list ->
           'a -> 'a cExpression
    val cGeqOp: cBinaryOp
    val cGoto: ident -> 'a -> 'a cStatement
    val cGotoPtr: 'a cExpression -> 'a -> 'a cStatement
    val cGrOp: cBinaryOp
    val cIf:
       'a cExpression ->
         'a cStatement -> 'a cStatement optiona -> 'a -> 'a cStatement
    val cIndOp: cUnaryOp
    val cIndex: 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val cInitExpr: 'a cExpression -> 'a -> 'a cInitializer
    val cInitList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         'a -> 'a cInitializer
    datatype 'a cInitializer
    =
         CInitExpr0 of 'a cExpression * 'a
       | CInitList0 of ('a cPartDesignator list * 'a cInitializer) list * 'a
    val cInlineQual: 'a -> 'a cFunctionSpecifier
    val cInt128Type: 'a -> 'a cTypeSpecifier
    val cIntConst: cInteger -> 'a -> 'a cConstant
    datatype cIntFlag
    = FlagImag0 | FlagLong0 | FlagLongLong0 | FlagUnsigned0
    datatype cIntRepr = DecRepr0 | HexRepr0 | OctalRepr0
    val cIntType: 'a -> 'a cTypeSpecifier
    val cInteger: int -> cIntRepr -> cIntFlag flags -> cInteger
    datatype cInteger = CInteger0 of int * cIntRepr * cIntFlag flags
    val cLabAddrExpr: ident -> 'a -> 'a cExpression
    val cLabel:
       ident -> 'a cStatement -> 'a cAttribute list -> 'a -> 'a cStatement
    val cLeOp: cBinaryOp
    val cLeqOp: cBinaryOp
    val cLndOp: cBinaryOp
    val cLongType: 'a -> 'a cTypeSpecifier
    val cLorOp: cBinaryOp
    val cMember: 'a cExpression -> ident -> bool -> 'a -> 'a cExpression
    val cMemberDesig: ident -> 'a -> 'a cPartDesignator
    val cMinOp: cUnaryOp
    val cMulAssOp: cAssignOp
    val cMulOp: cBinaryOp
    val cNegOp: cUnaryOp
    val cNeqOp: cBinaryOp
    val cNestedFunDef: 'a cFunctionDef -> 'a cCompoundBlockItem
    val cNoArrSize: bool -> 'a cArraySize
    val cNonnullQual: 'a -> 'a cTypeQualifier
    val cNoreturnQual: 'a -> 'a cFunctionSpecifier
    val cNullableQual: 'a -> 'a cTypeQualifier
    val cOrAssOp: cAssignOp
    val cOrOp: cBinaryOp
    datatype 'a cPartDesignator
    =
         CArrDesig0 of 'a cExpression * 'a
       | CMemberDesig0 of ident * 'a
       | CRangeDesig0 of 'a cExpression * 'a cExpression * 'a
    val cPlusOp: cUnaryOp
    val cPostDecOp: cUnaryOp
    val cPostIncOp: cUnaryOp
    val cPreDecOp: cUnaryOp
    val cPreIncOp: cUnaryOp
    val cPtrDeclr: 'a cTypeQualifier list -> 'a -> 'a cDerivedDeclarator
    val cRangeDesig:
       'a cExpression -> 'a cExpression -> 'a -> 'a cPartDesignator
    val cRegister: 'a -> 'a cStorageSpecifier
    val cRestrQual: 'a -> 'a cTypeQualifier
    val cReturn: 'a cExpression optiona -> 'a -> 'a cStatement
    val cRmdAssOp: cAssignOp
    val cRmdOp: cBinaryOp
    val cSUType: 'a cStructureUnion -> 'a -> 'a cTypeSpecifier
    val cShlAssOp: cAssignOp
    val cShlOp: cBinaryOp
    val cShortType: 'a -> 'a cTypeSpecifier
    val cShrAssOp: cAssignOp
    val cShrOp: cBinaryOp
    val cSignedType: 'a -> 'a cTypeSpecifier
    val cSizeofExpr: 'a cExpression -> 'a -> 'a cExpression
    val cSizeofType: 'a cDeclaration -> 'a -> 'a cExpression
    val cStatExpr: 'a cStatement -> 'a -> 'a cExpression
    datatype 'a cStatement
    =
         CAsm0 of 'a cAssemblyStatement * 'a
       | CBreak0 of 'a
       | CCase0 of 'a cExpression * 'a cStatement * 'a
       | CCases0 of 'a cExpression * 'a cExpression * 'a cStatement * 'a
       | CCompound0 of ident list * 'a cCompoundBlockItem list * 'a
       | CCont0 of 'a
       | CDefault0 of 'a cStatement * 'a
       | CExpr0 of 'a cExpression optiona * 'a
       | CFor0 of
           ('a cExpression optiona, 'a cDeclaration) either *
           'a cExpression optiona * 'a cExpression optiona * 'a cStatement *
           'a
       | CGoto0 of ident * 'a
       | CGotoPtr0 of 'a cExpression * 'a
       | CIf0 of 'a cExpression * 'a cStatement * 'a cStatement optiona * 'a
       | CLabel0 of ident * 'a cStatement * 'a cAttribute list * 'a
       | CReturn0 of 'a cExpression optiona * 'a
       | CSwitch0 of 'a cExpression * 'a cStatement * 'a
       | CWhile0 of 'a cExpression * 'a cStatement * ...
    val cStatic: 'a -> 'a cStorageSpecifier
    val cStaticAssert:
       'a cExpression -> 'a cStringLiteral -> 'a -> 'a cDeclaration
    val cStorageSpec: 'a cStorageSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cStorageSpecifier
    =
         CAuto0 of 'a
       | CExtern0 of 'a
       | CRegister0 of 'a
       | CStatic0 of 'a
       | CThread0 of 'a
       | CTypedef0 of 'a
    val cStrConst: cString -> 'a -> 'a cConstant
    val cStrLit: cString -> 'a -> 'a cStringLiteral
    val cString: abr_string -> bool -> cString
    datatype cString = CString0 of abr_string * bool
    datatype 'a cStringLiteral = CStrLit0 of cString * 'a
    val cStruct:
       cStructTag ->
         ident optiona ->
           'a cDeclaration list optiona ->
             'a cAttribute list -> 'a -> 'a cStructureUnion
    val cStructTag: cStructTag
    datatype cStructTag = CStructTag0 | CUnionTag0
    datatype 'a cStructureUnion
    =
         CStruct0 of
             cStructTag * ident optiona * 'a cDeclaration list optiona *
             'a cAttribute list * 'a
    val cSubAssOp: cAssignOp
    val cSubOp: cBinaryOp
    val cSwitch: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cThread: 'a -> 'a cStorageSpecifier
    val cTranslUnit:
       'a cExternalDeclaration list -> 'a -> 'a cTranslationUnit
    datatype 'a cTranslationUnit
    = CTranslUnit0 of 'a cExternalDeclaration list * 'a
    val cTypeDef: ident -> 'a -> 'a cTypeSpecifier
    val cTypeOfExpr: 'a cExpression -> 'a -> 'a cTypeSpecifier
    val cTypeOfType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val cTypeQual: 'a cTypeQualifier -> 'a cDeclarationSpecifier
    datatype 'a cTypeQualifier
    =
         CAtomicQual0 of 'a
       | CAttrQual0 of 'a cAttribute
       | CConstQual0 of 'a
       | CNonnullQual0 of 'a
       | CNullableQual0 of 'a
       | CRestrQual0 of 'a
       | CVolatQual0 of 'a
    val cTypeSpec: 'a cTypeSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cTypeSpecifier
    =
         CAtomicType0 of 'a cDeclaration * 'a
       | CBoolType0 of 'a
       | CCharType0 of 'a
       | CComplexType0 of 'a
       | CDoubleType0 of 'a
       | CEnumType0 of 'a cEnumeration * 'a
       | CFloatType0 of 'a
       | CInt128Type0 of 'a
       | CIntType0 of 'a
       | CLongType0 of 'a
       | CSUType0 of 'a cStructureUnion * 'a
       | CShortType0 of 'a
       | CSignedType0 of 'a
       | CTypeDef0 of ident * 'a
       | CTypeOfExpr0 of 'a cExpression * 'a
       | CTypeOfType0 of 'a cDeclaration * 'a
       | CUnsigType0 of 'a
       | CVoidType0 of 'a
    val cTypedef: 'a -> 'a cStorageSpecifier
    val cUnary: cUnaryOp -> 'a cExpression -> 'a -> 'a cExpression
    datatype cUnaryOp
    =
         CAdrOp0
       | CCompOp0
       | CIndOp0
       | CMinOp0
       | CNegOp0
       | CPlusOp0
       | CPostDecOp0
       | CPostIncOp0
       | CPreDecOp0
       | CPreIncOp0
    val cUnionTag: cStructTag
    val cUnsigType: 'a -> 'a cTypeSpecifier
    val cVar: ident -> 'a -> 'a cExpression
    val cVoidType: 'a -> 'a cTypeSpecifier
    val cVolatQual: 'a -> 'a cTypeQualifier
    val cWhile:
       'a cExpression -> 'a cStatement -> bool -> 'a -> 'a cStatement
    val cXorAssOp: cAssignOp
    val cXorOp: cBinaryOp
    val case_tac: semi_terma -> semi_method
    val catch_error: ('a, 'b) sum -> ('a -> ('c, 'b) sum) -> ('c, 'b) sum
    datatype char
    = Chara of bool * bool * bool * bool * bool * bool * bool * bool
    val char_of_integer: int -> char
    val check_export_code:
       ('a -> unit) ->
         ('a -> unit) ->
           ('a -> unit) ->
             (abr_string -> unit) ->
               (reporting * 'a) list -> abr_string -> unit
    val check_single:
       abr_string option * (internal_oid * (internal_oid * abr_string) list)
         ->
         (ocl_multiplicity_single * ocl_multiplicity_single option) list ->
           internal_oid list -> (reporting * abr_string) list
    val check_single_ty:
       ('a -> (abr_string -> (ocl_ty * ('b * 'c)) option) * 'd) ->
         (int list, 'e * unit ocl_ty_class_ext) alist ->
           (Code_Numeral.natural -> internal_oid list list list option) ->
             (internal_oid * abr_string) list ->
               internal_oid ->
                 'a * unit ocl_multiplicity_ext ->
                   'a * unit ocl_multiplicity_ext ->
                     (reporting * abr_string) list ->
                       (reporting * abr_string) list
    val choose_0: 'a * 'b -> 'a
    val choose_1: 'a * 'b -> 'b
    val cl_name_to_string: 'a ocl_class_raw_ext -> abr_string
    val clangCVersion: abr_string -> clangCVersion
    datatype clangCVersion = ClangCVersion0 of abr_string
    val clarify: semi_method
    val classRaw_abstract: 'a ocl_class_raw_ext -> bool
    val classRaw_clause: 'a ocl_class_raw_ext -> ocl_ctxt_clause list
    val classRaw_clause_update:
       (ocl_ctxt_clause list -> ocl_ctxt_clause list) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val classRaw_name: 'a ocl_class_raw_ext -> ocl_ty_obj
    val classRaw_name_update:
       (ocl_ty_obj -> ocl_ty_obj) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val classRaw_own: 'a ocl_class_raw_ext -> (abr_string * ocl_ty) list
    val classRaw_own_update:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val class_arity: ocl_class -> Code_Numeral.natural list
    datatype 'a class_output = C_out_OclAny | C_out_simple of 'a
    val class_unflat:
       unit ocl_class_raw_ext list * 'a ocl_association_ext list ->
         ocl_class option
    val class_unflat_aux:
       (int list, (abr_string * ocl_ty) list) alist ->
         (int list, abr_string list) alist ->
           (int list, unit) alist -> abr_string -> ocl_class option
    val class_unflata:
       unit ocl_class_raw_ext list * 'a ocl_association_ext list ->
         ocl_class
    val co1: ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
    val co15:
       ('a -> 'b) ->
         ('c ->
            'd ->
              'e ->
                'f ->
                  'g ->
                    'h ->
                      'i ->
                        'j -> 'k -> 'l -> 'm -> 'n -> 'o -> 'p -> 'q -> 'a)
           ->
           'c ->
             'd ->
               'e ->
                 'f ->
                   'g ->
                     'h ->
                       'i ->
                         'j -> 'k -> 'l -> 'm -> 'n -> 'o -> 'p -> 'q -> 'b
    val co2: ('a -> 'b) -> ('c -> 'd -> 'a) -> 'c -> 'd -> 'b
    val co4:
       ('a -> 'b) ->
         ('c -> 'd -> 'e -> 'f -> 'a) -> 'c -> 'd -> 'e -> 'f -> 'b
    datatype code_reflect
    = Code_reflect of bool * abr_string * abr_string list
    val collapse_mod_attribs: fnspec list -> fnspec list
    val collect_meta_embed:
       all_meta_embedding list ->
         bool * all_meta_embedding list -> all_meta_embedding list
    datatype comment = Commenta of positiona * abr_string * commentFormat
    datatype commentFormat = MultiLine | SingleLine
    val comment_interval:
       comment list * (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> comment list
    datatype 'a comment_type
    =
         Auxupda of char list
       | Calls of char list option list
       | Dont_translate
       | End_spec of char list
       | Fnspeca of (char list * char list) list
       | Ghostupda of char list
       | Invariant of char list
       | Modifies of char list option list
       | OTHER of 'a
       | Owned_by of char list
       | Relspeca of char list
       | Speca of char list * char list
    val comp2: ('a -> 'b) -> ('c -> 'd -> 'a) -> 'c -> 'd -> 'b
    val comp3: ('a -> 'b) -> ('c -> 'd -> 'e -> 'a) -> 'c -> 'd -> 'e -> 'b
    val comp_env_input_class_bind: ('a -> 'b -> 'b) list -> 'a -> 'b -> 'b
    val comp_env_input_class_mk:
       ((unit -> unit compiler_env_config_ext * 'a) ->
          'b compiler_env_config_ext * 'c)
         ->
         (unit compiler_env_config_ext -> 'c -> 'a) ->
           ((abr_string option ->
               all_meta list ->
                 unit compiler_env_config_ext ->
                   'a -> unit compiler_env_config_ext * 'a)
              -> 'b compiler_env_config_ext * 'c -> 'd)
             ->
             (abr_string option ->
                all_meta list ->
                  unit compiler_env_config_ext ->
                    'a -> unit compiler_env_config_ext * 'a)
               -> 'b compiler_env_config_ext * 'c -> 'd
    val comp_env_input_class_rm:
       ('a -> 'b -> 'c compiler_env_config_ext * 'd) ->
         'a -> 'b -> 'c compiler_env_config_ext * 'd
    val comp_env_save:
       all_meta_embedding ->
         ('a -> 'b -> 'c compiler_env_config_ext * 'd) ->
           'a -> 'b -> 'c compiler_env_config_ext * 'd
    val comp_env_save_deep:
       all_meta_embedding ->
         ('a -> 'b -> unit compiler_env_config_ext * 'c) ->
           'a -> 'b -> unit compiler_env_config_ext * 'c
    val compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> unit compiler_env_config_ext -> 'a
    val compiler_env_config_empty:
       bool ->
         (abr_string * (abr_string list * abr_string)) option ->
           internal_oids ->
             generation_semantics_ocl ->
               generation_lemma_mode option * bool ->
                 unit compiler_env_config_ext
    datatype 'a compiler_env_config_ext
    =
         Compiler_env_config_ext of
             bool * (abr_string * (abr_string list * abr_string)) option *
             internal_oids * (Code_Numeral.natural * Code_Numeral.natural) *
             generation_semantics_ocl * ocl_class option *
             all_meta_embedding list *
             (string_b_a_s_e *
              (unit ocl_instance_single_ext * internal_oids)
             )
             list
             *
             (string_b_a_s_e *
              (internal_oids *
               (abr_string * unit ocl_instance_single_ext)
               ocl_def_state_core
              )
              list
             )
             list
             *
             bool * bool * (string_b_a_s_e list * string_b_a_s_e list) *
             string_b_a_s_e list * string_b_a_s_e list *
             (generation_lemma_mode option * bool) * 'a
    val compiler_env_config_more_map:
       ('a -> 'b) ->
         'a compiler_env_config_ext -> 'b compiler_env_config_ext
    val compiler_env_config_rec:
       (bool ->
          (abr_string * (abr_string list * abr_string)) option ->
            internal_oids ->
              Code_Numeral.natural * Code_Numeral.natural ->
                generation_semantics_ocl ->
                  ocl_class option ->
                    all_meta_embedding list ->
                      (string_b_a_s_e *
                       (unit ocl_instance_single_ext * internal_oids)
                      )
                      list
                        ->
                        (string_b_a_s_e *
                         (internal_oids *
                          (abr_string * unit ocl_instance_single_ext)
                          ocl_def_state_core
                         )
                         list
                        )
                        list
                          ->
                          bool ->
                            bool ->
                              string_b_a_s_e list * string_b_a_s_e list ->
                                string_b_a_s_e list ->
                                  string_b_a_s_e list ->
                                    generation_lemma_mode option * bool ->
                                      'a -> 'b)
         -> 'a compiler_env_config_ext -> 'b
    val compiler_env_config_rec0:
       (bool ->
          (abr_string * (abr_string list * abr_string)) option ->
            internal_oids ->
              Code_Numeral.natural * Code_Numeral.natural ->
                generation_semantics_ocl ->
                  ocl_class option ->
                    all_meta_embedding list ->
                      (string_b_a_s_e *
                       (unit ocl_instance_single_ext * internal_oids)
                      )
                      list
                        ->
                        (string_b_a_s_e *
                         (internal_oids *
                          (abr_string * unit ocl_instance_single_ext)
                          ocl_def_state_core
                         )
                         list
                        )
                        list
                          ->
                          bool ->
                            bool ->
                              string_b_a_s_e list * string_b_a_s_e list ->
                                string_b_a_s_e list ->
                                  string_b_a_s_e list ->
                                    generation_lemma_mode option * bool ->
                                      'a)
         -> 'b compiler_env_config_ext -> 'a
    val compiler_env_config_reset_all:
       'a compiler_env_config_ext ->
         unit compiler_env_config_ext * all_meta_embedding list
    val compiler_env_config_reset_no_env:
       'a compiler_env_config_ext -> unit compiler_env_config_ext
    val compiler_env_config_update:
       (unit compiler_env_config_ext -> unit compiler_env_config_ext) ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val compiler_env_configa:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> 'a
    val concat: 'a list list -> 'a list
    val concatWith:
       (abr_string -> string) -> abr_string list -> string -> string
    val concat_map: ('a -> 'b list) -> 'a list -> 'b list
    val const_mixfix: abr_string -> abr_string -> abr_string
    val const_oclany: abr_string
    val const_oclastype: abr_string
    val const_ocliskindof: abr_string
    val const_oclistypeof: abr_string
    val const_oid: abr_string
    val const_oid_of: abr_string -> abr_string
    val constant: 'a cConstant -> literalconstant_node region_Wrap
    val consts: consts -> all_meta
    datatype consts = Consts of abr_string * semi_typ * abr_string
    val consts_raw0:
       abr_string ->
         semi_typ -> abr_string -> Code_Numeral.natural option -> consts
    val consts_value: abr_string
    val constsa: abr_string -> semi_typ -> abr_string -> consts
    val cross_abs:
       (abr_string -> semi_terma -> semi_terma) ->
         nat -> terma -> semi_terma
    val cross_abs_aux:
       (abr_string -> semi_terma -> semi_terma) ->
         abr_string list -> nat * terma -> semi_terma
    val ctxt_clause: 'a ocl_ctxt_ext -> ocl_ctxt_clause list
    val ctxt_clause_update:
       (ocl_ctxt_clause list -> ocl_ctxt_clause list) ->
         'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val ctxt_expr: 'a ocl_ctxt_pre_post_ext -> ocl_ctxt_term_pp list
    val ctxt_expr_update:
       (ocl_ctxt_term_pp list -> ocl_ctxt_term_pp list) ->
         'a ocl_ctxt_pre_post_ext -> 'a ocl_ctxt_pre_post_ext
    val ctxt_fun_name: 'a ocl_ctxt_pre_post_ext -> abr_string
    val ctxt_fun_ty: 'a ocl_ctxt_pre_post_ext -> ocl_ty
    val ctxt_fun_ty_arg:
       'a ocl_ctxt_pre_post_ext -> (abr_string * ocl_ty) list
    val ctxt_fun_ty_out: 'a ocl_ctxt_pre_post_ext -> ocl_ty option
    val ctxt_param: 'a ocl_ctxt_ext -> abr_string list
    val ctxt_ty: 'a ocl_ctxt_ext -> ocl_ty_obj
    datatype 'a ctype
    =
         Array of 'a ctype * 'a option
       | Bitfield of bool * 'a
       | Bool
       | EnumTy of abr_string option
       | Function of 'a ctype * 'a ctype list
       | Identa of abr_string
       | PlainChar
       | Ptr of 'a ctype
       | Signed of base_inttype
       | StructTy of abr_string
       | UnionTy of abr_string
       | Unsigned of base_inttype
       | Void
    val current_parsing_style: parsing_style
    val d_hsk_constr: 'a compiler_env_config_ext -> string_b_a_s_e list
    val d_hsk_constr_update:
       (string_b_a_s_e list -> string_b_a_s_e list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_class: 'a compiler_env_config_ext -> ocl_class option
    val d_input_class_update:
       (ocl_class option -> ocl_class option) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_instance:
       'a compiler_env_config_ext ->
         (string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
         list
    val d_input_instance_update:
       ((string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
        list
          ->
          (string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
          list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_meta: 'a compiler_env_config_ext -> all_meta_embedding list
    val d_input_meta_update:
       (all_meta_embedding list -> all_meta_embedding list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_state:
       'a compiler_env_config_ext ->
         (string_b_a_s_e *
          (internal_oids *
           (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
          )
          list
         )
         list
    val d_input_state_update:
       ((string_b_a_s_e *
         (internal_oids *
          (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
         )
         list
        )
        list
          ->
          (string_b_a_s_e *
           (internal_oids *
            (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
           )
           list
          )
          list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_HO_type: 'a compiler_env_config_ext -> string_b_a_s_e list
    val d_ocl_HO_type_update:
       (string_b_a_s_e list -> string_b_a_s_e list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_accessor:
       'a compiler_env_config_ext ->
         string_b_a_s_e list * string_b_a_s_e list
    val d_ocl_accessor_update:
       (string_b_a_s_e list * string_b_a_s_e list ->
          string_b_a_s_e list * string_b_a_s_e list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_oid_start: 'a compiler_env_config_ext -> internal_oids
    val d_ocl_oid_start_update:
       (internal_oids -> internal_oids) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_semantics:
       'a compiler_env_config_ext -> generation_semantics_ocl
    val d_ocl_semantics_update:
       (generation_semantics_ocl -> generation_semantics_ocl) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_auto_bootstrap: 'a compiler_env_config_ext -> bool
    val d_output_auto_bootstrap_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_disable_thy: 'a compiler_env_config_ext -> bool
    val d_output_disable_thy_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_header_force: 'a compiler_env_config_ext -> bool
    val d_output_header_force_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_header_thy:
       'a compiler_env_config_ext ->
         (abr_string * (abr_string list * abr_string)) option
    val d_output_header_thy_update:
       ((abr_string * (abr_string list * abr_string)) option ->
          (abr_string * (abr_string list * abr_string)) option)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_position:
       'a compiler_env_config_ext ->
         Code_Numeral.natural * Code_Numeral.natural
    val d_output_position_update:
       (Code_Numeral.natural * Code_Numeral.natural ->
          Code_Numeral.natural * Code_Numeral.natural)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_sorry_dirty:
       'a compiler_env_config_ext -> generation_lemma_mode option * bool
    val d_output_sorry_dirty_update:
       (generation_lemma_mode option * bool ->
          generation_lemma_mode option * bool)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val datatype_constr_name: abr_string
    val datatype_constr_namea: abr_string
    val datatype_ext_constr_name: abr_string
    val datatype_ext_constr_namea: abr_string
    val datatype_ext_name: abr_string
    val datatype_ext_namea: abr_string
    val datatype_ext_nameb: abr_string
    val datatype_in: abr_string
    val datatype_name: abr_string
    val datatype_namea: abr_string
    val datatypea: datatypea -> all_meta
    datatype datatypea
    =
         Datatypea of
             semi_datatype_version *
             ((abr_string * abr_string list) *
              (abr_string * semi_typ list) list
             )
             list
    val datatypeb:
       abr_string -> (abr_string * semi_typ list) list -> datatypea
    val decRepr: cIntRepr
    val decl_spec:
       nodeInfo cDeclarationSpecifier list ->
         ((nodeInfo cDeclarator optiona * nodeInfo cInitializer optiona) *
          'a
         )
         list
         *
         (positiona * int)
           ->
           ((comment list * (abr_string * int, (int * int) list) alist) *
            (positiona * int) option)
           *
           (positiona * int)
             -> declaration list
    val decl_spec0:
       'a cDeclarationSpecifier list ->
         ((nodeInfo cDeclarator optiona * 'b) * 'c) list * (positiona * int)
           ->
           (ident optiona *
            ('d ctype option *
             (nodeInfo cDerivedDeclarator list *
              ('b *
               ((positiona * int) *
                ((positiona * int) * nodeInfo cAttribute list)))))
            ,
           abr_string *
           ((cStructTag *
             ('a cDeclaration list * ('a cAttribute list * 'a)))
            *
            (abr_string *
             (cStructTag *
              (('a cDeclarator optiona * 'a cInitializer optiona) *
               'a cExpression optiona
              )
              list)
             ,
            'a cDeclarationSpecifier list *
            (('a cDeclarator optiona * 'a cInitializer optiona) *
             'a cExpression optiona
            )
            list
            )
            sum
            list)
           ,
           abr_string *
           (cStructTag * ('a cDeclaration list * ('a cAttribute list * 'a)))
           ,
           ident optiona *
           ('d ctype option * nodeInfo cDerivedDeclarator list)
           ,
           ident optiona *
           (nodeInfo cDerivedDeclarator list *
            (((ident list, nodeInfo cDeclaration list * bool) either *
              (nodeInfo cAttribute list * nodeInfo))
             *
             (nodeInfo cDerivedDeclarator list * nodeInfo cAttribute list)))
           ,
           abr_string option region_Wrap * (abr_string * expr option) list)
           declaration0
           list
    val decl_spec_ty: 'a cDeclarationSpecifier list -> 'b ctype
    val decl_spec_ty_tag: cStructTag -> abr_string -> 'a ctype
    val declaration:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         ->
         (declaration region_Wrap -> 'a) -> nodeInfo cDeclaration -> 'a list
    datatype declaration
    =
         EnumDecl of
             abr_string option region_Wrap *
             (abr_string region_Wrap * expr option) list
       | ExtFnDecl of
           expr ctype * abr_string region_Wrap *
           (expr ctype * abr_string option) list * fnspec list
       | StructDecl of
           abr_string region_Wrap *
           (expr ctype * abr_string region_Wrap) list
       | TypeDecl of (expr ctype * abr_string region_Wrap) list
       | VarDecl of
           expr ctype *
           (abr_string region_Wrap *
            (storage_class list *
             (initializer option * gcc_attribute list)))
    datatype ('a, 'b, 'c, 'd, 'e, 'f) declaration0
    =
         EnumDecl0 of 'f
       | ExtFnDecl0 of 'e
       | StructDecl0_child of 'c
       | StructDecl0_root of 'b
       | TypeDecl0 of 'd
       | VarDecl0 of 'a
    val definition: definition -> all_meta
    datatype definition
    =
         Definition_where1 of
             abr_string * (semi_terma * Code_Numeral.natural) * semi_terma
       | Definition_where2 of abr_string * semi_terma * semi_terma
       | Definitiona of semi_terma
    val definitiona: definition -> semi_theory
    val deref_assocs_list:
       'a equal -> ('b -> 'a list * 'c list) -> 'a -> 'b list -> 'c list
    val deriv_decl_spec:
       'a cDerivedDeclarator list ->
         'a cDeclarationSpecifier list -> expr ctype
    val deriv_decl_spec0:
       'a cDerivedDeclarator list -> expr ctype -> expr ctype
    datatype designator = DesignE of expr | DesignFld of abr_string
    val divide_int: inta -> inta -> inta
    val divide_integer: int -> int -> int
    val divide_nat: nat -> nat -> nat
    val divmod_integer: int -> int -> int * int
    datatype doBlockFragment
    =
         DoGenerator of term * term
       | DoLetStmt of (term * term) list
       | DoQualifier of term
    val done: semi_command_final
    val dot_astype: abr_string -> abr_string
    val dot_iskindof: abr_string -> abr_string
    val dot_istypeof: abr_string -> abr_string
    val dot_oclastype: abr_string
    val dot_ocliskindof: abr_string
    val dot_oclistypeof: abr_string
    val drop: nat -> 'a list -> 'a list
    val dropWhile: ('a -> bool) -> 'a list -> 'a list
    val drule: semi_thm_attribute -> semi_method
    val ebogwrap: expr_node -> expr
    datatype ('a, 'b) either = Left of 'a | Right of 'b
    val elim: semi_thm_attribute -> semi_method
    datatype ('a, 'b) embedding
    =
         Embed_locale of
             ('a -> 'b -> all_meta list * 'b) embedding_fun list *
             ('a -> 'b -> unit semi_locale_ext * 'b) *
             ('a -> 'b -> semi_theory list * 'b) list *
             ('a -> 'b -> all_meta list * 'b) embedding_fun list
       | Embed_theories of
           ('a -> 'b -> all_meta list * 'b) embedding_fun list
    datatype 'a embedding_fun
    = Embedding_fun_info of abr_string * 'a | Embedding_fun_simple of 'a
    val empty: ('a, 'b) alist
    val emptya: ('a, 'b) alist
    val end_comment: char list -> (char list, char list * char list) sum
    val entries: ('a, 'b) alist -> ('a * 'b) list
    val entriesa: (int list, 'a) alist -> (abr_string * 'a) list
    val enumerate: nat -> 'a list -> (nat * 'a) list
    val eoi: 'a show -> 'a list -> (char list, unit * 'a list) sum
    val eq: 'a equal -> 'a -> 'a -> bool
    val equal: abr_string -> abr_string -> bool
    type 'a equal
    val equal_CAssignOp: cAssignOp -> cAssignOp -> bool
    val equal_Region: region -> region -> bool
    val equal_Region_Wrap:
       'a equal -> 'a region_Wrap -> 'a region_Wrap -> bool
    val equal_SourcePos: sourcePos -> sourcePos -> bool
    val equal_StringCvt_radix: stringCvt_radix -> stringCvt_radix -> bool
    val equal_Unsynchronized_ref:
       'a equal -> 'a unsynchronized_ref -> 'a unsynchronized_ref -> bool
    val equal_abr_string: abr_string equal
    val equal_abr_stringa: abr_string -> abr_string -> bool
    val equal_base_inttype: base_inttype -> base_inttype -> bool
    val equal_binoptype: binoptype -> binoptype -> bool
    val equal_bool: bool -> bool -> bool
    val equal_char: char equal
    val equal_chara: char -> char -> bool
    val equal_ctype: 'a equal -> 'a ctype equal
    val equal_ctypea: 'a equal -> 'a ctype -> 'a ctype -> bool
    val equal_designator: designator equal
    val equal_designatora: designator -> designator -> bool
    val equal_expr: expr equal
    val equal_expr_node: expr_node equal
    val equal_expr_nodea: expr_node -> expr_node -> bool
    val equal_expra: expr -> expr -> bool
    val equal_gcc_attribute: gcc_attribute equal
    val equal_gcc_attributea: gcc_attribute -> gcc_attribute -> bool
    val equal_generation_lemma_mode: generation_lemma_mode equal
    val equal_generation_lemma_modea:
       generation_lemma_mode -> generation_lemma_mode -> bool
    val equal_generation_semantics_ocl:
       generation_semantics_ocl -> generation_semantics_ocl -> bool
    val equal_initializer: initializer equal
    val equal_initializera: initializer -> initializer -> bool
    val equal_int: inta -> inta -> bool
    val equal_integer: int equal
    val equal_internal_oid: internal_oid equal
    val equal_internal_oida: internal_oid -> internal_oid -> bool
    val equal_list: 'a equal -> 'a list equal
    val equal_lista: 'a equal -> 'a list -> 'a list -> bool
    val equal_literal: string equal
    val equal_literalconstant_node: literalconstant_node equal
    val equal_literalconstant_nodea:
       literalconstant_node -> literalconstant_node -> bool
    val equal_more_info: more_info equal
    val equal_more_infoa: more_info -> more_info -> bool
    val equal_nat: nat equal
    val equal_nata: nat -> nat -> bool
    val equal_natural: Code_Numeral.natural equal
    val equal_naturala: Code_Numeral.natural -> Code_Numeral.natural -> bool
    val equal_ocl_association_type:
       ocl_association_type -> ocl_association_type -> bool
    val equal_ocl_class: ocl_class equal
    val equal_ocl_classa: ocl_class -> ocl_class -> bool
    val equal_ocl_collection: ocl_collection equal
    val equal_ocl_collectiona: ocl_collection -> ocl_collection -> bool
    val equal_ocl_ctxt_prefix: ocl_ctxt_prefix -> ocl_ctxt_prefix -> bool
    val equal_ocl_multiplicity_ext:
       'a equal ->
         'a ocl_multiplicity_ext -> 'a ocl_multiplicity_ext -> bool
    val equal_ocl_multiplicity_single: ocl_multiplicity_single equal
    val equal_ocl_multiplicity_singlea:
       ocl_multiplicity_single -> ocl_multiplicity_single -> bool
    val equal_ocl_ty: ocl_ty equal
    val equal_ocl_ty_class_ext:
       'a equal -> 'a ocl_ty_class_ext -> 'a ocl_ty_class_ext -> bool
    val equal_ocl_ty_class_node_ext:
       'a equal ->
         'a ocl_ty_class_node_ext -> 'a ocl_ty_class_node_ext -> bool
    val equal_ocl_ty_obj: ocl_ty_obj -> ocl_ty_obj -> bool
    val equal_ocl_ty_obj_core: ocl_ty_obj_core equal
    val equal_ocl_ty_obj_corea: ocl_ty_obj_core -> ocl_ty_obj_core -> bool
    val equal_ocl_tya: ocl_ty -> ocl_ty -> bool
    val equal_opt_attr_type: opt_attr_type equal
    val equal_opt_attr_typea: opt_attr_type -> opt_attr_type -> bool
    val equal_opt_ident: opt_ident equal
    val equal_opt_identa: opt_ident -> opt_ident -> bool
    val equal_option: 'a equal -> 'a option equal
    val equal_optiona: 'a equal -> 'a option -> 'a option -> bool
    val equal_position: position -> position -> bool
    val equal_prod: 'a equal -> 'b equal -> ('a * 'b) equal
    val equal_proda: 'a equal -> 'b equal -> 'a * 'b -> 'a * 'b -> bool
    val equal_string_b_a_s_e: string_b_a_s_e -> string_b_a_s_e -> bool
    val equal_unit: unit equal
    val equal_unita: unit -> unit -> bool
    val equal_unoptype: unoptype -> unoptype -> bool
    val equala: 'a equal -> 'a -> 'a -> bool
    val err_expecting:
       'a show -> char list -> 'a list -> (char list, 'b * 'a list) sum
    val errora: abr_string -> 'a
    val errorb: char list -> 'a list -> (char list, 'b * 'a list) sum
    val erule: semi_thm_attribute -> semi_method
    val escape_sml: abr_string -> abr_string
    val exactly:
       char list -> char list -> (char list, char list * char list) sum
    val exactly_aux:
       'a equal * 'a show ->
         char list ->
           'a list ->
             'a list -> 'a list -> (char list, char list * 'a list) sum
    val explode: string -> char list
    datatype expr = E of expr_node region_Wrap
    val expr_int: int -> expr
    datatype expr_node
    =
         Arbitrary of expr ctype
       | ArrayDeref of expr * expr
       | BinOp of binoptype * expr * expr
       | CompLiteral of expr ctype * (designator list * initializer) list
       | CondExp of expr * expr * expr
       | Constant of literalconstant_node region_Wrap
       | Deref of expr
       | EFnCall of expr * expr list
       | MKBOOL of expr
       | Sizeof of expr
       | SizeofTy of expr ctype region_Wrap
       | StructDot of expr * abr_string
       | TypeCast of expr ctype region_Wrap * expr
       | UnOp of unoptype * expr
       | Vara of abr_string * ... option unsynchronized_ref
    val expression: 'a cExpression -> expr
    val expression0: 'a cExpression -> expr_node
    datatype ext_decl
    =
         Decl of declaration region_Wrap
       | FnDefn of
           (expr ctype * abr_string region_Wrap) *
           (expr ctype * abr_string region_Wrap) list * fnspec list *
           block_item list region_Wrap
    val extend:
       unit compiler_env_config_ext -> 'a -> 'a compiler_env_config_ext
    val external_declaration:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         -> nodeInfo cExternalDeclaration -> ext_decl list
    val extract:
       ('a -> bool) -> 'a list -> ('a list * ('a * 'a list)) option
    val f_less2: 'a list -> ('a * 'a) list
    val fill_blank:
       ('a ->
          (('b ->
              Code_Numeral.natural ->
                ('b * ('c * 'd) option) list ->
                  ('b * ('c * 'd) option) list)
             -> 'e list -> 'f list
          )
          option)
         ->
         ('a * (('c * ('g * opt_ident)) * 'd) list) list ->
           ('a * 'f list) list
    val filter: ('a -> bool) -> 'a list -> 'a list
    val filter_auxupd: comment list -> statement_node option
    val filter_fnspec: comment list -> fnspec list
    val filter_gen:
       (abr_string comment_type -> char list option) ->
         (abr_string -> 'a) -> comment list -> 'a option
    val filter_invariant: comment list -> abr_string region_Wrap option
    val filter_locale_interp:
       (internal_oids * 'a ocl_instance_single_ext) list list ->
         semi_terma list * semi_terma list list
    val filter_ocl_exn:
       abr_string ->
         'a print_examp_instance_draw_list_attra ->
           'a print_examp_instance_draw_list_attra
    val filter_owned_by: comment list -> gcc_attribute option
    val filter_statement:
       comment list ->
         (block_item, (abr_string * abr_string, abr_string) sum) sum list
    val filtera: ('a -> bool) -> 'a list -> 'a list
    val find: ('a -> bool) -> 'a list -> 'a option
    val find_class_ass:
       'a compiler_env_config_ext ->
         all_meta_embedding list * all_meta_embedding list
    val find_inh: abr_string -> ocl_class -> abr_string list
    type 'a finite
    val fix: abr_string list -> semi_command_proof
    val fix_let:
       abr_string list ->
         (semi_terma * semi_terma) list ->
           (semi_terma list * semi_terma list) option ->
             semi_command_state list -> semi_command_proof
    val flagImag: cIntFlag
    val flagLong: cIntFlag
    val flagLongLong: cIntFlag
    val flagUnsigned: cIntFlag
    val flags: int -> 'a flags
    datatype 'a flags = Flags0 of int
    val flatten: 'a list list -> 'a list
    val flattena: abr_string list -> abr_string
    val flattenb: abr_string -> abr_string -> abr_string
    val flip: 'a * 'b -> 'b * 'a
    datatype floor = Floor1 | Floor2 | Floor3
    val floor1_PRINT_ctxt:
       (unit ocl_ctxt_ext ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor1_PRINT_examp_def_st1:
       (ocl_def_state ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor1_PRINT_examp_def_st_typecheck_var:
       (ocl_def_state -> 'a -> all_meta list * 'a) embedding_fun
    val floor1_PRINT_transition:
       (ocl_def_transition ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_inv:
       ('a ocl_ctxt_ext ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_pre_post:
       ('a ocl_ctxt_ext ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_thm:
       ('a ocl_ctxt_ext -> 'b -> all_meta list * 'b) embedding_fun
    val floor2_PRINT_examp_def_st_def_interp:
       (ocl_def_state ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_transition_def_interp:
       (ocl_def_transition ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_transition_lemmas_oid:
       (ocl_def_transition ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    datatype fnspec
    =
         Didnt_translate
       | Fn_modifies of abr_string list
       | Fnspec of abr_string region_Wrap
       | Gcc_attribs of gcc_attribute list
       | Relspec of abr_string region_Wrap
    val fold: ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val foldM: ('a -> 'b -> 'b * 'c) -> 'a list -> 'b -> 'b * 'c list
    val foldM_o:
       ('a -> 'b -> 'b * 'c) -> 'a optiona -> 'b -> 'b * 'c optiona
    val fold_Const: ('a -> abr_string -> 'a) -> 'a -> terma -> 'a
    val fold_Free: ('a -> abr_string -> 'a) -> 'a -> terma -> 'a
    datatype fold_all_input
    = Fold_custom of all_meta list | Fold_meta of all_meta_embedding
    val fold_class:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              ocl_class list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a -> 'b * 'a)
         -> 'a -> ocl_class -> 'b list * 'a
    val fold_class_gen:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                ocl_class list tmp_sub ->
                  ocl_class list -> 'a -> 'b list * 'a)
         -> 'a -> ocl_class -> 'b list * 'a
    val fold_class_gen_aux:
       (ocl_class, unit) inheritance_ext list ->
         ((abr_string -> abr_string) ->
            abr_string ->
              (abr_string * ocl_ty) list ->
                (ocl_class, unit) inheritance_ext list tmp_inh ->
                  ocl_class list tmp_sub -> ocl_class list -> 'a -> 'a)
           -> 'a -> ocl_class -> 'a
    val fold_data_shallow:
       (abr_string -> 'a) ->
         (internal_oid -> 'a) ->
           ('a -> 'b -> 'b) -> ocl_data_shallow -> 'b -> 'b
    val fold_e_r_r:
       (print_examp_instance_draw_list_attr_err -> 'a -> 'a) ->
         print_examp_instance_draw_list_attr_err -> 'a -> 'a
    val fold_instance_single:
       (abr_string ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
            -> 'a -> 'a)
         -> 'b ocl_instance_single_ext -> 'a -> 'a
    val fold_instance_single_name:
       'a ocl_instance_single_ext -> semi_terma list -> semi_terma list
    val fold_instance_singlea:
       (abr_string option ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
            -> 'a -> 'a)
         -> 'b ocl_instance_single_ext -> 'a -> 'a
    val fold_invariant:
       (ocl_ctxt_term_inv -> 'a -> 'a) -> 'b ocl_ctxt_ext -> 'a -> 'a
    val fold_invarianta:
       'a ocl_ctxt_ext -> (abr_string * ocl_ctxt_term) list
    val fold_less2:
       ('a -> 'a) -> ('b -> 'b -> 'a -> 'a) -> 'b list -> 'a -> 'a
    val fold_less_gen:
       ('a -> 'b list -> 'c -> 'd) ->
         ('d -> 'c) -> ('b -> 'a) -> 'b list -> 'd -> 'd
    val fold_list_attr:
       abr_string option ->
         (abr_string option -> 'a -> 'b -> 'b) ->
           'a ocl_list_attr -> 'b -> 'b
    val fold_max:
       (Code_Numeral.natural * 'a ->
          (Code_Numeral.natural * 'a) list -> 'b -> 'b)
         -> 'a list -> 'b -> 'b
    val fold_max_aux:
       ('a -> 'a list -> 'b -> 'b) -> 'a list -> 'a list -> 'b -> 'b
    val fold_pair_var:
       (abr_string * ocl_ty -> 'a -> 'a) -> ocl_ty -> 'a -> 'a option
    val fold_pre_post:
       ((ocl_ctxt_prefix * (abr_string option * ocl_ctxt_term)) list ->
          unit ocl_ctxt_pre_post_ext -> 'a -> 'a)
         -> 'b ocl_ctxt_ext -> 'a -> 'a
    val fold_thy:
       (all_meta_embedding ->
          ((abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext ->
                  'a -> unit compiler_env_config_ext * 'a)
             ->
             unit compiler_env_config_ext * 'a ->
               unit compiler_env_config_ext * 'a)
            ->
            (abr_string option ->
               all_meta list ->
                 'b compiler_env_config_ext ->
                   'c -> 'b compiler_env_config_ext * 'c)
              ->
              'b compiler_env_config_ext * 'c ->
                'b compiler_env_config_ext * 'c)
         ->
         ((unit -> unit compiler_env_config_ext * 'a) ->
            unit compiler_env_config_ext * 'a)
           ->
           (unit compiler_env_config_ext -> 'a -> 'a) ->
             (abr_string option ->
                all_meta list ->
                  'b compiler_env_config_ext ->
                    'c -> 'b compiler_env_config_ext * 'c)
               ->
               fold_all_input ->
                 'b compiler_env_config_ext * 'c ->
                   'b compiler_env_config_ext * 'c
    val fold_thy0:
       'a ->
         ('a, 'b compiler_env_config_ext) embedding ->
           (abr_string option ->
              all_meta list ->
                'b compiler_env_config_ext ->
                  'c -> 'b compiler_env_config_ext * 'c)
             ->
             'b compiler_env_config_ext * 'c ->
               'b compiler_env_config_ext * 'c
    val fold_thy_deep:
       fold_all_input ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val fold_thy_shallow:
       ((unit -> unit compiler_env_config_ext * 'a) ->
          unit compiler_env_config_ext * 'a)
         ->
         (unit compiler_env_config_ext -> 'a -> 'a) ->
           (abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext * 'a ->
                  unit compiler_env_config_ext * 'a)
             ->
             fold_all_input ->
               unit compiler_env_config_ext * 'a ->
                 unit compiler_env_config_ext * 'a
    val fold_thya:
       (all_meta_embedding ->
          ((abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext ->
                  'a -> unit compiler_env_config_ext * 'a)
             ->
             unit compiler_env_config_ext * 'a ->
               unit compiler_env_config_ext * 'a)
            ->
            (abr_string option ->
               all_meta list ->
                 'b compiler_env_config_ext ->
                   'c -> 'b compiler_env_config_ext * 'c)
              ->
              'b compiler_env_config_ext * 'c ->
                'b compiler_env_config_ext * 'c)
         ->
         ((unit -> unit compiler_env_config_ext * 'a) ->
            unit compiler_env_config_ext * 'a)
           ->
           (unit compiler_env_config_ext -> 'a -> 'a) ->
             (abr_string option ->
                all_meta list ->
                  'b compiler_env_config_ext ->
                    'c -> 'b compiler_env_config_ext * 'c)
               ->
               all_meta_embedding list ->
                 'b compiler_env_config_ext * 'c ->
                   'b compiler_env_config_ext * 'c
    val fold_tree: ('a -> 'a -> 'b -> 'b) -> 'a tree -> 'b -> 'b
    val folda: ('a -> 'b -> 'c -> 'c) -> ('a, 'b) alist -> 'c -> 'c
    val foldb:
       (abr_string -> 'a -> 'b -> 'b) -> (int list, 'a) alist -> 'b -> 'b
    val foldl: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val foldl_one: ('a -> int -> 'a) -> 'a -> string -> 'a
    val foldla: ('a -> int -> 'a) -> 'a -> abr_string -> 'a
    val foldlb: ('a -> int -> 'a) -> 'a -> string_b_a_s_e -> 'a
    val foldr: ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val fresh_ident: unit -> abr_string
    val fst: 'a * 'b -> 'a
    val fun_upd: 'a equal -> ('a -> 'b) -> 'a -> 'b -> 'a -> 'b
    val function: (semi_term_0 * semi_term_0) list -> semi_term_0
    datatype function_Kind = Definition | Fun | Function_Sorry | Primrec
    datatype function_Stmt
    =
         Function_Stmt of
             function_Kind * typeSign list *
             ((name * term list) * term) list
    val function_definition:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         -> nodeInfo cFunctionDef -> ext_decl
    val function_definition_params:
       (abr_string -> 'a) -> 'b cDeclaration list -> (expr ctype * 'a) list
    val function_definition_params0:
       ('a cDeclaration -> 'b) -> 'a cDeclaration list -> 'b list
    datatype gcc_attribute
    =
         GCC_AttribFn of abr_string * expr list
       | GCC_AttribID of abr_string
       | OWNED_BY of abr_string
    val gen_length: nat -> 'a list -> nat
    datatype gen_meta
    =
         Gen_apply_hol of abr_string
       | Gen_apply_sml of abr_string
       | Gen_apply_sml_cmd of abr_string * abr_string
       | Gen_no_apply
    val gen_pre_post:
       (abr_string -> abr_string) ->
         ((semi_terma list -> semi_terma) ->
            (semi_terma -> semi_terma) -> abr_string -> semi_terma)
           ->
           (abr_string ->
              semi_terma -> abr_string -> abr_string -> abr_string -> lemma)
             -> semi_method list -> lemma list
    val gen_pre_post0:
       (abr_string -> abr_string) ->
         (abr_string * (bool * semi_terma)) list ->
           ((semi_terma list -> semi_terma) ->
              (semi_terma -> semi_terma) -> abr_string -> semi_terma)
             ->
             (abr_string ->
                (abr_string * (bool * semi_terma)) list ->
                  semi_terma ->
                    abr_string -> abr_string -> abr_string -> lemma)
               -> semi_method list -> lemma list
    val gen_zero: abr_string -> abr_string
    datatype generation_lemma_mode = Gen_no_dirty | Gen_sorry
    datatype generation_semantics_ocl
    = Gen_default | Gen_only_analysis | Gen_only_design
    val get_class_hierarchy:
       ocl_class -> (abr_string * (abr_string * ocl_ty) list) list
    val get_class_hierarchy_aux:
       ocl_class list -> ocl_class -> ocl_class list
    val get_class_hierarchy_strict: ocl_class list -> ocl_class list
    val get_class_hierarchy_strict_aux:
       ocl_class list -> ocl_class list -> ocl_class list
    val get_class_hierarchya: ocl_class -> ocl_class list
    val get_column:
       'a equal ->
         'b plus * 'b ord -> ('a, ('b * 'b) list) alist -> 'a -> 'b -> 'b
    val get_hierarchy_map:
       ('a -> 'b -> 'c -> 'd) ->
         (abr_string list -> 'a list * ('b list * 'c list)) ->
           ocl_class -> 'd list
    val get_state:
       (abr_string *
        (internal_oids *
         (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
        )
        list
          ->
          abr_string *
          (internal_oids *
           (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
          )
          list
            ->
            (abr_string *
             (internal_oids *
              (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
             )
             list
            )
            list
              -> 'a compiler_env_config_ext -> 'b)
         -> ocl_def_transition -> 'a compiler_env_config_ext -> 'b
    val groupBy: ('a -> 'a -> bool) -> 'a list -> 'a list list
    val group_spec:
       (block_item, (abr_string * abr_string, abr_string) sum) sum list ->
         block_item list
    val group_spec_aux1:
       block_item list list ->
         (block_item list, (abr_string * abr_string, abr_string) sum list)
         sum
         list
           -> block_item list
    val group_spec_aux2:
       block_item list list ->
         abr_string * abr_string ->
           block_item list ->
             abr_string ->
               (block_item list,
               (abr_string * abr_string, abr_string) sum list)
               sum
               list
                 -> block_item list
    val has_err_ty: print_examp_instance_draw_list_attr_err -> bool
    val has_invalid: print_examp_instance_draw_list_attr_err -> bool
    val have:
       abr_string -> semi_terma -> semi_command_final -> semi_command_proof
    val have0:
       abr_string ->
         bool -> semi_terma -> semi_command_final -> semi_command_proof
    val hd: 'a list -> 'a
    val head: asmblock -> abr_string
    val hexRepr: cIntRepr
    datatype hide_const = Hide_const of bool * abr_string list
    val holThyLocale_header:
       'a semi_locale_ext ->
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
    val holThyLocale_name: 'a semi_locale_ext -> abr_string
    val hol_definition: abr_string -> abr_string
    val hol_split: abr_string -> abr_string
    val hol_to_sml: semi_terma -> semi_term_0
    val hsk_literal: (abr_string -> semi_terma) -> literal -> semi_terma
    val hsk_name:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_name0:
       (abr_string -> abr_string -> abr_string) ->
         (abr_string * abr_string option) list -> name -> abr_string
    val hsk_namea:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_nameb:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_stmt:
       semi_datatype_version ->
         (abr_string * abr_string option) list ->
           gen_meta -> stmt list -> all_meta list * abr_string list
    val hsk_term:
       'a lexical_ext ->
         (abr_string * abr_string option) list -> term -> semi_terma
    val hsk_term_app:
       'a lexical_ext ->
         (abr_string * abr_string option) list ->
           semi_terma list -> term -> semi_terma
    val hsk_type: (abr_string * abr_string option) list -> typea -> semi_typ
    val hsk_typespec:
       (abr_string * abr_string option) list ->
         typeSpec -> abr_string * abr_string list
    val i: ('a -> semi_theory) -> 'a -> all_meta
    val id: 'a -> 'a
    val ident: ident -> abr_string
    datatype ident = Ident0 of abr_string * int * nodeInfo
    val ident_current: 'a * 'b -> 'b
    val ident_empty: 'a zero -> ('b, 'c) alist * 'a
    val ident_fresh:
       'a equal ->
         'a -> ('a, nat) alist * nat -> nat * (('a, nat) alist * nat)
    val ident_option: ident optiona -> abr_string option
    val ident_struct_const: ident -> abr_string
    val ident_struct_type: ident -> abr_string
    val ident_struct_type0: abr_string -> abr_string
    val identa: ident -> abr_string
    val identb: ident -> 'a ctype
    val identc: abr_string -> int -> nodeInfo -> ident
    val ignore_meta_header: all_meta_embedding -> bool
    val impl_of: ('a, 'b) alist -> ('a * 'b) list
    val in_safe_monad: ('a -> ('b, 'c) sum) -> 'a -> 'c
    val inh: ('a, 'b) inheritance_ext -> 'a
    val inh_sib: ('a, 'b) inheritance_ext -> ('a * 'a list) list
    val inh_sib_unflat: ('a, 'b) inheritance_ext -> 'a list
    datatype ('a, 'b) inheritance_ext
    = Inheritance_ext of 'a * ('a * 'a list) list * 'a list * 'b
    val init_map_class:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           'c ocl_instance_single_ext list ->
             (abr_string ->
                bool *
                ((abr_string ->
                    (ocl_ty * (opt_attr_type * opt_ident)) option)
                 *
                 (opt_attr_type ->
                    ((unit ocl_ty_class_ext option -> 'a -> 'd -> 'd) ->
                       'd -> 'd
                    )
                    option)))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
    val init_map_class2:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           'c ocl_instance_single_ext list ->
             (abr_string ->
                bool *
                ((abr_string ->
                    (ocl_ty * (opt_attr_type * opt_ident)) option)
                 *
                 (opt_attr_type ->
                    ((unit ocl_ty_class_ext option -> 'a -> 'd -> 'd) ->
                       'd -> 'd
                    )
                    option)))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
    val initializer: 'a cInitializer -> initializer
    datatype initializer
    = InitE of expr | InitList of (designator list * initializer) list
    val initializer0:
       ('a cExpression -> 'a cExpression) -> 'a cInitializer -> initializer
    val initializerList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         (designator list * initializer) list
    val insert: 'a equal -> 'a -> 'b -> ('a, 'b) alist -> ('a, 'b) alist
    val insert2:
       'a equal ->
         'b equal ->
           'a * 'b ->
             'c -> ('a, ('b, 'c) alist) alist -> ('a, ('b, 'c) alist) alist
    val insert2a:
       abr_string * abr_string ->
         'a ->
           (int list, (int list, 'a) alist) alist ->
             (int list, (int list, 'a) alist) alist
    val inserta:
       abr_string -> 'a -> (int list, 'a) alist -> (int list, 'a) alist
    val insertb: semi_thm_attribute list -> semi_method
    val inst_attr:
       'a ocl_instance_single_ext ->
         ((abr_string * abr_string) option * (abr_string * ocl_data_shallow)
         )
         list
         ocl_list_attr
    val inst_attr_update:
       (((abr_string * abr_string) option * (abr_string * ocl_data_shallow))
        list
        ocl_list_attr
          ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
          ocl_list_attr)
         -> 'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val inst_attr_with: 'a ocl_instance_single_ext -> abr_string option
    val inst_name: 'a ocl_instance_single_ext -> abr_string
    val inst_name_update:
       (abr_string option -> abr_string option) ->
         'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val inst_namea: 'a ocl_instance_single_ext -> abr_string option
    val inst_ty: 'a ocl_instance_single_ext -> abr_string
    val inst_ty0: 'a ocl_instance_single_ext -> abr_string option
    val inst_tya: 'a ocl_instance_single_ext -> abr_string option
    val instantiation: instantiation -> all_meta
    datatype instantiation
    = Instantiation of abr_string * abr_string * semi_terma
    datatype inta = Int_of_integer of int
    val integer_escape: int
    val integer_of_char: char -> int
    val integer_of_int: inta -> int
    val integer_of_nat: nat -> int
    val integer_to_digit16: int -> abr_string
    val internalPosition: positiona
    datatype internal_oid = Oid of Code_Numeral.natural
    datatype internal_oids
    =
         Oids of
             Code_Numeral.natural * Code_Numeral.natural *
             Code_Numeral.natural
    val interpretation: interpretation -> all_meta
    datatype interpretation
    =
         Interpretation of
             abr_string * abr_string * semi_terma list * semi_command_final
    val interpretationa: interpretation -> semi_theory
    val intro: semi_thm_attribute list -> semi_method
    val is_digit: int -> bool
    val is_empty: abr_string -> bool
    val is_emptya: ('a, 'b) alist -> bool
    val is_emptyb: string_b_a_s_e -> bool
    val is_higher_order: ocl_ty -> bool
    val is_letter: int -> bool
    val is_none: 'a option -> bool
    val is_sequence: 'a ocl_multiplicity_ext -> bool
    val is_special: int -> bool
    datatype isaUnit
    =
         IsaUnit of
             (bool * Code_Numeral.natural) *
             (abr_string * abr_string option) list * gen_meta * abr_string *
             (module list * bool)
    val isabelle_apply: abr_string -> abr_string list -> abr_string
    val isabelle_of_compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> 'a
    val isub: abr_string -> abr_string
    val isup: abr_string -> abr_string
    datatype 'a itself = Type
    val k: 'a -> 'b -> 'a
    val keys: ('a, 'b) alist -> 'a list
    val keys_empty: ('a list -> 'b) -> bool * ('a, 'c) alist -> 'b list
    val keys_emptya:
       ('a list -> 'b) -> bool * ('a list * ('c, 'd) alist) -> 'b list
    val l_fold:
       (('a -> 'b -> all_meta list * 'b) embedding_fun -> 'c -> 'c) ->
         ('a, 'b) embedding -> 'c -> 'c
    val last: 'a list -> 'a
    val lemma: lemma -> all_meta
    datatype lemma
    =
         Lemma of
             abr_string * semi_terma list * semi_method list list *
             semi_command_final
       | Lemma_assumes of
           abr_string * (abr_string * (bool * semi_terma)) list *
           semi_terma * semi_command_proof list * semi_command_final
    val lemmaa: lemma -> semi_theory
    val lemmas: lemmas -> all_meta
    datatype lemmas
    =
         Lemmas_simp_thm of bool * abr_string * semi_thm_attribute list
       | Lemmas_simp_thms of abr_string * abr_string list
    val lemmas_nosimp: abr_string -> semi_thm_attribute list -> lemmas
    val lemmas_simp: abr_string -> semi_thm_attribute list -> lemmas
    val lemmasa: lemmas -> semi_theory
    type 'a len0
    val len0_bit0: 'a len0 -> 'a bit0 len0
    val len0_num1: num1 len0
    val len_of: 'a len0 -> 'a itself -> nat
    val len_of_bit0: 'a len0 -> 'a bit0 itself -> nat
    val len_of_num1: num1 itself -> nat
    val length: abr_string -> nat
    val less: 'a ord -> 'a -> 'a -> bool
    val less_eq: 'a ord -> 'a -> 'a -> bool
    val less_eq_nat: nat -> nat -> bool
    val less_eq_natural:
       Code_Numeral.natural -> Code_Numeral.natural -> bool
    val less_int: inta -> inta -> bool
    val less_nat: nat -> nat -> bool
    val less_natural: Code_Numeral.natural -> Code_Numeral.natural -> bool
    val let_open: abr_string -> semi_term_0 -> semi_term_0
    val letb: semi_terma -> semi_terma -> semi_command_proof
    val lex_bool_false: 'a lexical_ext -> abr_string
    val lex_list_cons: 'a lexical_ext -> abr_string
    val lex_string: 'a lexical_ext -> abr_string -> semi_terma
    datatype 'a lexical_ext
    =
         Lexical_ext of
             abr_string * abr_string * (abr_string -> semi_terma) * 'a
    datatype listComprFragment = Generator of term * term | Guard of term
    val list_all: ('a -> bool) -> 'a list -> bool
    val list_bind_e_r_r:
       ('a -> 'b print_examp_instance_draw_list_attra) ->
         ('b list -> 'c) ->
           'a list -> 'c print_examp_instance_draw_list_attra
    val list_ex: ('a -> bool) -> 'a list -> bool
    val list_iterM: ('a -> unit option) -> 'a list -> unit option
    val lista: semi_term_0 list -> semi_term_0
    val listb: ('a -> semi_term_0) -> 'a list -> semi_term_0
    datatype literal = Int of Code_Numeral.natural | Stringa of abr_string
    datatype literalconstant_node
    =
         NUMCONST of int * abr_string * stringCvt_radix
       | STRING_LIT of abr_string
    val lookup: 'a equal -> ('a, 'b) alist -> 'a -> 'b option
    val lookup2:
       'a equal ->
         'b equal -> ('a, ('b, 'c) alist) alist -> 'a * 'b -> 'c option
    val lookup2a:
       (int list, (int list, 'a) alist) alist ->
         abr_string * abr_string -> 'a option
    val lookupa: 'a equal -> ('a, 'b) alist -> 'a -> 'b option
    val lookupb: (int list, 'a) alist -> abr_string -> 'a option
    val lowercase: abr_string -> abr_string
    val m_class:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'a list -> 'b list)
           ->
           (position ->
              (abr_string -> abr_string) *
              (abr_string * (abr_string * ocl_ty) list)
                -> ocl_class -> 'a list)
             -> ocl_class -> 'b list
    val m_class3_GE:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           (abr_string -> abr_string -> abr_string -> 'a) ->
             ocl_class -> 'b list
    val m_class_default: 'a -> 'b -> 'c -> 'd -> 'd
    val m_class_gen2:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'a list -> 'b list)
           ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  position ->
                    (abr_string -> abr_string) *
                    (abr_string * (abr_string * ocl_ty) list)
                      -> ocl_class -> 'a list)
             -> ocl_class -> 'b list
    val m_class_gen3:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  abr_string -> abr_string -> abr_string -> 'a)
             -> ocl_class -> 'b list
    val m_class_gen3_GE:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  abr_string -> abr_string -> abr_string -> 'a)
             -> ocl_class -> 'b list
    val m_classa:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (position ->
            (abr_string -> abr_string) *
            (abr_string * (abr_string * ocl_ty) list)
              -> ocl_class -> 'a)
           -> ocl_class -> 'a list
    val main:
       nodeInfo cTranslationUnit * (comment list * int list) ->
         ext_decl list
    val make:
       ocl_ty_obj ->
         (abr_string * ocl_ty) list ->
           ocl_ctxt_clause list -> bool -> unit ocl_class_raw_ext
    val make_ctxt_free_var:
       ocl_ctxt_prefix -> 'a ocl_ctxt_pre_post_ext -> abr_string list
    val make_tree: nat list -> nat -> nat -> nat list tree
    val make_treea:
       nat list ->
         nat -> nat -> nat -> nat list tree list -> nat list tree list
    val makea:
       bool ->
         (abr_string * (abr_string list * abr_string)) option ->
           internal_oids ->
             Code_Numeral.natural * Code_Numeral.natural ->
               generation_semantics_ocl ->
                 ocl_class option ->
                   all_meta_embedding list ->
                     (string_b_a_s_e *
                      (unit ocl_instance_single_ext * internal_oids)
                     )
                     list
                       ->
                       (string_b_a_s_e *
                        (internal_oids *
                         (abr_string * unit ocl_instance_single_ext)
                         ocl_def_state_core
                        )
                        list
                       )
                       list
                         ->
                         bool ->
                           bool ->
                             string_b_a_s_e list * string_b_a_s_e list ->
                               string_b_a_s_e list ->
                                 string_b_a_s_e list ->
                                   generation_lemma_mode option * bool ->
                                     unit compiler_env_config_ext
    val many:
       (char -> bool) -> char list -> (char list, char list * char list) sum
    val many1:
       (char -> bool) -> char list -> (char list, char list * char list) sum
    val many_c_a_t_c_h_a_l_l:
       ('a list -> (char list, 'b * 'a list) sum) ->
         'a list -> (char list, 'b list * 'a list) sum
    val many_c_a_t_c_h_a_l_l_aux:
       'a list ->
         ('b list -> (char list, 'a * 'b list) sum) ->
           'b list -> (char list, 'a list * 'b list) sum
    val many_m_a_x:
       ('a list -> (char list, 'b * 'a list) sum) ->
         'a list -> (char list, 'b list * 'a list) sum
    val many_m_a_x_aux:
       'a list ->
         ('b list -> (char list, 'a * 'b list) sum) ->
           'b list -> (char list, 'a list * 'b list) sum
    val manyof1:
       char list -> char list -> (char list, char list * char list) sum
    val map: ('a -> 'b) -> 'a list -> 'b list
    val map2_ctxt_term:
       (ocl_ctxt_term -> ocl_ctxt_term) ->
         all_meta_embedding -> all_meta_embedding
    val mapM: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_Const: (abr_string -> typ -> abr_string) -> terma -> terma
    val map_Region_Wrap: ('a -> 'b) -> 'a region_Wrap -> 'b region_Wrap
    val map_class:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a)
         -> ocl_class -> 'a list
    val map_class_arg_only:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string * ocl_ty) list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_only0:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string * ocl_ty) list -> 'a list)
         ->
         ((abr_string -> abr_string) ->
            abr_string ->
              (abr_string * ocl_ty) list *
              (ocl_class list tmp_inh * ocl_class list tmp_sub)
                -> 'a list)
           -> ocl_class -> 'a list
    val map_class_arg_only_var:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) ->
                    (semi_terma -> semi_terma) -> 'a list)
           -> ocl_class -> 'a list
    val map_class_arg_only_var0:
       ('a -> abr_string list -> 'b) ->
         ('c ->
            'd ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'e list)
           ->
           ('f -> (abr_string * ocl_ty) list list) ->
             'c -> 'd -> 'f -> 'e list
    val map_class_arg_only_var_gen:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           ->
           ((abr_string -> abr_string) ->
              abr_string ->
                abr_string * abr_string ->
                  ocl_ty ->
                    (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
             -> ocl_class -> 'c list
    val map_class_arg_only_var_gena:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           -> ocl_class -> 'c list
    val map_class_arg_only_var_genb:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           -> ocl_class -> 'c list
    val map_class_arg_only_vara:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_only_varb:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_onlya:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list *
            (ocl_class list tmp_inh * ocl_class list tmp_sub)
              -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                ocl_class list tmp_sub -> ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_h:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              (abr_string * ocl_ty) list ->
                (abr_string * ocl_ty) list list tmp_inh ->
                  ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_h_inh:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string -> position) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_ha:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              (abr_string * ocl_ty) list ->
                (abr_string * ocl_ty) list list tmp_inh ->
                  abr_string list tmp_sub -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_hb:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list ->
                ocl_class list -> ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_inh:
       (ocl_class, 'a) inheritance_ext list tmp_inh ->
         (abr_string * ocl_ty) list list
    val map_class_nupl2_inh:
       (abr_string -> abr_string -> 'a) -> ocl_class -> 'a list
    val map_class_nupl2_inh_large:
       (abr_string -> abr_string -> 'a) -> ocl_class -> 'a list
    val map_class_nupl2_inha:
       (abr_string -> abr_string -> (ocl_class * bool) list -> 'a) ->
         ocl_class -> 'a list
    val map_class_nupl2l_inh:
       (abr_string ->
          ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list) list
            -> 'a)
         -> ocl_class -> 'a list
    val map_class_nupl2l_inh_gen:
       (ocl_class list ->
          abr_string ->
            ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list)
            list
              -> 'a)
         -> ocl_class -> 'a list
    val map_class_nupl3_GE_inh:
       (abr_string -> abr_string -> abr_string -> 'a) ->
         ocl_class -> 'a list
    val map_class_nupl3_LE_inh:
       (abr_string ->
          abr_string ->
            ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list)
            list
              -> 'a)
         -> ocl_class -> 'a list
    val map_class_one:
       (((abr_string -> abr_string) *
         (abr_string *
          ((abr_string * ocl_ty) list *
           (ocl_class list tmp_inh *
            (abr_string list tmp_sub * ocl_class list))))
        )
        list
          -> ('a * ('b * ('c * ('d * ('e * 'f))))) list)
         -> ('a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g) -> ocl_class -> 'g
    val map_class_top:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              ocl_class list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a)
         -> ocl_class -> 'a
    val map_comment_type: ('a -> 'b) -> 'a comment_type -> 'b comment_type
    val map_ctype: ('a -> 'b) -> 'a ctype -> 'b ctype
    val map_data_shallow_self:
       (internal_oid -> ocl_data_shallow) ->
         ocl_data_shallow -> ocl_data_shallow
    val map_e_r_r:
       ('a -> 'b) ->
         'a print_examp_instance_draw_list_attra ->
           'b print_examp_instance_draw_list_attra
    val map_entry:
       'a equal -> 'a -> ('b -> 'b) -> ('a * 'b) list -> ('a * 'b) list
    val map_entrya:
       'a equal -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val map_entryb:
       'a equal -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val map_entryc:
       abr_string ->
         ('a -> 'a) -> (int list, 'a) alist -> (int list, 'a) alist
    val map_enum_syn:
       ocl_enum list -> ocl_class_synonym list -> ocl_ty -> ocl_ty
    val map_filter: ('a -> 'b option) -> 'a list -> 'b list
    val map_find: ('a -> 'a option) -> 'a list -> 'a list
    val map_find_aux: 'a list -> ('a -> 'a option) -> 'a list -> 'a list
    val map_gen:
       (abr_string -> string option -> abr_string -> abr_string) ->
         (int -> abr_string) -> abr_string -> abr_string
    val map_gena:
       (abr_string -> string option -> abr_string -> abr_string) ->
         (int -> abr_string) -> string_b_a_s_e -> abr_string
    val map_inh: ('a -> 'b) -> 'a tmp_inh -> 'b tmp_inh
    val map_inst_single_self:
       (internal_oid -> ocl_data_shallow) ->
         'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val map_instance_single:
       ((abr_string * abr_string) option * (abr_string * ocl_data_shallow)
          ->
          (abr_string * abr_string) option *
          (abr_string * ocl_data_shallow))
         -> 'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val map_invariant:
       (ocl_ctxt_term_inv -> ocl_ctxt_term_inv) ->
         'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val map_lemma: (lemma -> lemma) -> semi_theory -> semi_theory
    val map_linh:
       ('a -> 'b) -> ('a, 'c) inheritance_ext -> ('b, unit) inheritance_ext
    val map_list_attr: ('a -> 'b) -> 'a ocl_list_attr -> 'b ocl_list_attr
    val map_of: 'a equal -> ('a * 'b) list -> 'a -> 'b option
    val map_of_list: 'a equal -> ('a * 'b list) list -> 'a -> 'b list option
    val map_option: ('a -> 'b) -> 'a optiona -> 'b option
    val map_optiona: ('a -> 'b) -> 'a option -> 'b option
    val map_pre_post:
       (ocl_ctxt_prefix ->
          unit ocl_ctxt_pre_post_ext -> ocl_ctxt_term -> ocl_ctxt_term)
         -> 'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val map_prod: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val map_semi_theory:
       (semi_theory -> semi_theory) -> all_meta -> all_meta
    val map_sum: ('a -> 'b) -> ('c -> 'd) -> ('a, 'c) sum -> ('b, 'd) sum
    val map_tail:
       ('a -> 'b list) ->
         (internal_oids * 'a) list list -> (semi_terma * 'b list) list
    val mapa: ('a -> 'b) -> 'a list -> 'b list
    val mapb: (int -> int) -> abr_string -> abr_string
    val mapc:
       'a equal -> ('a -> 'b -> 'c) -> ('a, 'b) alist -> ('a, 'c) alist
    val mapi: (Code_Numeral.natural -> 'a -> 'b) -> 'a list -> 'b list
    val maps: ('a -> 'b list) -> 'a list -> 'b list
    val mapsa: ('a -> 'b list) -> 'a list -> 'b list
    val max: 'a ord -> 'a -> 'a -> 'a
    val member: 'a equal -> 'a list -> 'a -> bool
    val membera: string_b_a_s_e list -> abr_string -> bool
    val merge_unique:
       'a equal ->
         ('b -> ('a * 'c) option) -> 'b list list -> ('a * 'c) list
    val merge_unique_gen:
       'a equal ->
         ('b -> ('a * 'c) option) -> 'b list list -> ('a, 'c) alist
    val merge_uniquea:
       'a equal ->
         ('b -> 'a) ->
           (internal_oids * 'b) list list -> (internal_oids * 'b) list list
    val merge_uniqueb:
       (internal_oids * (abr_string * 'a) ocl_def_state_core) list list ->
         (internal_oids * 'a) list list
    val meta_of_logic: abr_string -> string
    val meth_gen_simp: semi_method_simp
    val meth_gen_simp_add2:
       semi_thm_attribute list -> abr_string list -> semi_method_simp
    val meth_gen_simp_add_del:
       abr_string list -> abr_string list -> semi_method_simp
    val meth_gen_simp_add_split:
       semi_thm_attribute list ->
         semi_thm_attribute list -> semi_method_simp
    val meth_gen_simp_only: semi_thm_attribute list -> semi_method_simp
    val meth_gen_simp_onlya: semi_thm_attribute list -> semi_method_simp
    val method_simp_add_del:
       semi_thm list -> semi_thm list -> semi_method_simp
    val method_subst_l: abr_string list -> semi_thm_attribute -> semi_method
    val metis: semi_thm_attribute list -> semi_method
    val metis0: abr_string list -> semi_thm_attribute list -> semi_method
    val minus_int: inta -> inta -> inta
    val minus_nat: nat -> nat -> nat
    val mk_constr_name: abr_string -> abr_string -> abr_string
    val mk_dot: abr_string -> abr_string -> abr_string
    val mk_dot_comment: abr_string -> abr_string -> abr_string -> abr_string
    val mk_dot_par: abr_string -> abr_string -> abr_string
    val mk_dot_par_gen: abr_string -> abr_string list -> abr_string
    val mk_instance_single_cpt:
       (abr_string -> internal_oids option) ->
         'a ocl_instance_single_ext list ->
           'b compiler_env_config_ext ->
             ('a ocl_instance_single_ext * internal_oids) list
    val mk_instance_single_cpt0:
       (abr_string -> internal_oids option) ->
         'a ocl_instance_single_ext list ->
           'b compiler_env_config_ext ->
             ('a ocl_instance_single_ext * internal_oids) list *
             internal_oids
    val mk_quote: abr_string -> abr_string
    val mk_tree:
       nat ->
         nat -> nat -> (abr_string class_output * abr_string) list * nat
    val ml: ml -> all_meta
    datatype ml = SMLa of semi_term
    val mla: ml -> semi_theory
    val mod1: asmblock -> (abr_string option * (abr_string * expr)) list
    val mod2: asmblock -> (abr_string option * (abr_string * expr)) list
    val mod3: asmblock -> abr_string list
    val modify_def:
       'a equal ->
         'b -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val modify_defa:
       'a ->
         abr_string ->
           ('a -> 'a) -> (int list, 'a) alist -> (int list, 'a) alist
    datatype module = Module of thyName * thyName list * stmt list * bool
    val modulo_int: inta -> inta -> inta
    val modulo_integer: int -> int -> int
    val modulo_nat: nat -> nat -> nat
    val more: 'a ocl_ctxt_ext -> 'a
    datatype more_info
    = EnumC | FunctionName | MungedVar of abr_string * abr_string option
    val morea: 'a ocl_ty_class_ext -> 'a
    val moreb: 'a ocl_class_raw_ext -> 'a
    val morec: 'a ocl_association_ext -> 'a
    val mored: 'a ocl_multiplicity_ext -> 'a
    val moree: 'a ocl_ctxt_pre_post_ext -> 'a
    val moref: 'a ocl_ty_class_node_ext -> 'a
    val moreg: 'a compiler_env_config_ext -> 'a
    val moreh: 'a ocl_instance_single_ext -> 'a
    val n_lists: nat -> 'a list -> 'a list list
    val name: int -> namea
    datatype name = Name of abr_string | QName of thyName * abr_string
    datatype namea = Name0 of int
    val namedRef: ident -> sUERef
    datatype nat = Nat of int
    val nat_of_integer: int -> nat
    val nat_of_natural: Code_Numeral.natural -> nat
    val nat_to_digit10: nat -> abr_string
    val nat_to_digit10_aux: nat list -> nat -> nat list
    val nat_to_digit26: nat -> abr_string
    val nat_to_digit26_aux: nat list -> nat -> nat list
    val natural_of_nat: nat -> Code_Numeral.natural
    val natural_to_digit10: Code_Numeral.natural -> abr_string
    val nb_class: ocl_class -> nat
    val noPosition: positiona
    val nodeInfo: positiona -> positiona * int -> namea -> nodeInfo
    datatype nodeInfo
    =
         NodeInfo0 of positiona * (positiona * int) * namea
       | OnlyPos0 of positiona * (positiona * int)
    val normalize0: 'a equal -> ('b -> 'a) -> 'b list -> 'b list
    val not_yet_supported: abr_string -> unit
    datatype ('a, 'b) nsplit = Nsplit_sep of 'b | Nsplit_text of 'a
    val nsplit_f: 'a list -> ('a -> bool) -> ('a list, 'a) nsplit list
    val nth: 'a list -> nat -> 'a
    val null: 'a list -> bool
    datatype num = Bit0 of num | Bit1 of num | One
    datatype num1 = One_num1
    val oF_l:
       semi_thm_attribute -> semi_thm_attribute list -> semi_thm_attribute
    val oclAss_relation:
       'a ocl_association_ext ->
         (ocl_ty_obj * unit ocl_multiplicity_ext) list
    val oclAss_relationa: 'a ocl_association_ext -> ocl_association_relation
    val oclAss_type: 'a ocl_association_ext -> ocl_association_type
    val oclTy_class: unit ocl_ty_class_ext -> ocl_ty
    val oclTy_class_pre: abr_string -> ocl_ty
    datatype ocl_ass_class
    = OclAssClass of unit ocl_association_ext * unit ocl_class_raw_ext
    datatype 'a ocl_association_ext
    =
         Ocl_association_ext of
             ocl_association_type * ocl_association_relation * 'a
    val ocl_association_rec:
       (ocl_association_type -> ocl_association_relation -> 'a -> 'b) ->
         'a ocl_association_ext -> 'b
    val ocl_association_rec0:
       (ocl_association_type -> ocl_association_relation -> 'a) ->
         'b ocl_association_ext -> 'a
    datatype ocl_association_relation
    = OclAssRel of (ocl_ty_obj * unit ocl_multiplicity_ext) list
    datatype ocl_association_type
    =
         OclAssTy_aggregation
       | OclAssTy_association
       | OclAssTy_composition
       | OclAssTy_native_attribute
    datatype ocl_class
    = OclClass of abr_string * (abr_string * ocl_ty) list * ocl_class list
    datatype 'a ocl_class_raw_ext
    =
         Ocl_class_raw_ext of
             ocl_ty_obj * (abr_string * ocl_ty) list *
             ocl_ctxt_clause list * bool * 'a
    val ocl_class_raw_rec:
       (ocl_ty_obj ->
          (abr_string * ocl_ty) list ->
            ocl_ctxt_clause list -> bool -> 'a -> 'b)
         -> 'a ocl_class_raw_ext -> 'b
    val ocl_class_raw_rec0:
       (ocl_ty_obj ->
          (abr_string * ocl_ty) list -> ocl_ctxt_clause list -> bool -> 'a)
         -> 'b ocl_class_raw_ext -> 'a
    datatype ocl_class_synonym = OclClassSynonym of abr_string * ocl_ty
    datatype ocl_class_tree
    = OclClassTree of Code_Numeral.natural * Code_Numeral.natural
    datatype ocl_collection
    =
         Derived0
       | Nonunique0
       | Ordered0
       | Qualifier0
       | Redefines0
       | Sequence
       | Set
       | Subsets0
       | Union0
    datatype ocl_ctxt_clause
    = Ctxt_inv of ocl_ctxt_term_inv | Ctxt_pp of unit ocl_ctxt_pre_post_ext
    datatype 'a ocl_ctxt_ext
    =
         Ocl_ctxt_ext of
             abr_string list * ocl_ty_obj * ocl_ctxt_clause list * 'a
    datatype 'a ocl_ctxt_pre_post_ext
    =
         Ocl_ctxt_pre_post_ext of
             abr_string * ocl_ty * ocl_ctxt_term_pp list * 'a
    val ocl_ctxt_pre_post_rec:
       (abr_string -> ocl_ty -> ocl_ctxt_term_pp list -> 'a -> 'b) ->
         'a ocl_ctxt_pre_post_ext -> 'b
    val ocl_ctxt_pre_post_rec0:
       (abr_string -> ocl_ty -> ocl_ctxt_term_pp list -> 'a) ->
         'b ocl_ctxt_pre_post_ext -> 'a
    datatype ocl_ctxt_prefix = OclCtxtPost | OclCtxtPre
    val ocl_ctxt_rec:
       (abr_string list -> ocl_ty_obj -> ocl_ctxt_clause list -> 'a -> 'b)
         -> 'a ocl_ctxt_ext -> 'b
    val ocl_ctxt_rec0:
       (abr_string list -> ocl_ty_obj -> ocl_ctxt_clause list -> 'a) ->
         'b ocl_ctxt_ext -> 'a
    datatype ocl_ctxt_term
    =
         T_lambda of abr_string * ocl_ctxt_term
       | T_pure of terma * abr_string option
       | T_to_be_parsed of abr_string * abr_string
    datatype ocl_ctxt_term_inv = T_inv of bool * ocl_prop
    datatype ocl_ctxt_term_pp
    = T_invariant of ocl_ctxt_term_inv | T_pp of ocl_ctxt_prefix * ocl_prop
    datatype ocl_data_shallow
    =
         ShallB_list of ocl_data_shallow list
       | ShallB_self of internal_oid
       | ShallB_str of abr_string
       | ShallB_term of ocl_def_base
    datatype ocl_def_base
    =
         OclDefInteger of abr_string
       | OclDefReal of abr_string * abr_string
       | OclDefString of abr_string
    datatype ocl_def_base_l = OclDefBase of ocl_def_base list
    datatype ocl_def_pp_core
    =
         OclDefPPCoreAdd of abr_string ocl_def_state_core list
       | OclDefPPCoreBinding of abr_string
    datatype ocl_def_state
    = OclDefSt of abr_string * abr_string ocl_def_state_core list
    datatype 'a ocl_def_state_core
    =
         OclDefCoreAdd of unit ocl_instance_single_ext
       | OclDefCoreBinding of 'a
    datatype ocl_def_transition
    =
         OclDefPP of
             abr_string option * ocl_def_pp_core * ocl_def_pp_core option
    datatype ocl_enum = OclEnum of abr_string * abr_string list
    datatype ocl_flush_all = OclFlushAll
    datatype ocl_generic = OclGeneric of abr_string
    datatype ocl_instance = OclInstance of unit ocl_instance_single_ext list
    val ocl_instance_single_empty: unit ocl_instance_single_ext
    datatype 'a ocl_instance_single_ext
    =
         Ocl_instance_single_ext of
             abr_string option * abr_string option * abr_string option *
             ((abr_string * abr_string) option *
              (abr_string * ocl_data_shallow)
             )
             list
             ocl_list_attr
             *
             'a
    val ocl_instance_single_rec:
       (abr_string option ->
          abr_string option ->
            abr_string option ->
              ((abr_string * abr_string) option *
               (abr_string * ocl_data_shallow)
              )
              list
              ocl_list_attr
                -> 'a -> 'b)
         -> 'a ocl_instance_single_ext -> 'b
    val ocl_instance_single_rec0:
       (abr_string option ->
          abr_string option ->
            abr_string option ->
              ((abr_string * abr_string) option *
               (abr_string * ocl_data_shallow)
              )
              list
              ocl_list_attr
                -> 'a)
         -> 'b ocl_instance_single_ext -> 'a
    datatype 'a ocl_list_attr
    =
         OclAttrCast of abr_string * 'a ocl_list_attr * 'a
       | OclAttrNoCast of 'a
    datatype 'a ocl_multiplicity_ext
    =
         Ocl_multiplicity_ext of
             (ocl_multiplicity_single * ocl_multiplicity_single option) list
             *
             abr_string option * ocl_collection list * 'a
    val ocl_multiplicity_rec:
       ((ocl_multiplicity_single * ocl_multiplicity_single option) list ->
          abr_string option -> ocl_collection list -> 'a -> 'b)
         -> 'a ocl_multiplicity_ext -> 'b
    val ocl_multiplicity_rec0:
       ((ocl_multiplicity_single * ocl_multiplicity_single option) list ->
          abr_string option -> ocl_collection list -> 'a)
         -> 'b ocl_multiplicity_ext -> 'a
    datatype ocl_multiplicity_single
    = Mult_infinity | Mult_nat of Code_Numeral.natural | Mult_star
    datatype ocl_prop = OclProp_ctxt of abr_string option * ocl_ctxt_term
    datatype ocl_ty
    =
         OclTy_arrow of ocl_ty * ocl_ty
       | OclTy_base_boolean
       | OclTy_base_integer
       | OclTy_base_real
       | OclTy_base_string
       | OclTy_base_unlimitednatural
       | OclTy_base_void
       | OclTy_binding of abr_string option * ocl_ty
       | OclTy_class_syn of abr_string
       | OclTy_collection of unit ocl_multiplicity_ext * ocl_ty
       | OclTy_enum of abr_string
       | OclTy_object of ocl_ty_obj
       | OclTy_pair of ocl_ty * ocl_ty
       | OclTy_raw of abr_string
    datatype 'a ocl_ty_class_ext
    =
         Ocl_ty_class_ext of
             abr_string * Code_Numeral.natural * Code_Numeral.natural *
             unit ocl_ty_class_node_ext * unit ocl_ty_class_node_ext * 'a
    datatype 'a ocl_ty_class_node_ext
    =
         Ocl_ty_class_node_ext of
             Code_Numeral.natural * unit ocl_multiplicity_ext * abr_string *
             'a
    val ocl_ty_class_node_rec:
       (Code_Numeral.natural ->
          unit ocl_multiplicity_ext -> abr_string -> 'a -> 'b)
         -> 'a ocl_ty_class_node_ext -> 'b
    val ocl_ty_class_node_rec0:
       (Code_Numeral.natural ->
          unit ocl_multiplicity_ext -> abr_string -> 'a)
         -> 'b ocl_ty_class_node_ext -> 'a
    val ocl_ty_class_rec:
       (abr_string ->
          Code_Numeral.natural ->
            Code_Numeral.natural ->
              unit ocl_ty_class_node_ext ->
                unit ocl_ty_class_node_ext -> 'a -> 'b)
         -> 'a ocl_ty_class_ext -> 'b
    val ocl_ty_class_rec0:
       (abr_string ->
          Code_Numeral.natural ->
            Code_Numeral.natural ->
              unit ocl_ty_class_node_ext ->
                unit ocl_ty_class_node_ext -> 'a)
         -> 'b ocl_ty_class_ext -> 'a
    datatype ocl_ty_obj
    = OclTyObj of ocl_ty_obj_core * ocl_ty_obj_core list list
    datatype ocl_ty_obj_core
    = OclTyCore of unit ocl_ty_class_ext | OclTyCore_pre of abr_string
    val octalRepr: cIntRepr
    val of_Cons: abr_string
    val of_Consa: abr_string
    val of_Function_Kind: (abr_string -> 'a) -> function_Kind -> 'a
    val of_Function_Stmt:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) ->
                   (abr_string -> 'a) -> function_Stmt -> 'a
    val of_IsaUnit:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> isaUnit -> 'a
    val of_Literal:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           -> ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> literal -> 'a
    val of_ML: (abr_string -> string) -> 'a -> ml -> string
    val of_Module:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   ('a -> 'a list -> 'a) ->
                     (abr_string -> 'a) -> module -> 'a
    val of_Name:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> name -> 'a
    val of_Nil: abr_string
    val of_Nila: abr_string
    val of_None: abr_string
    val of_Nonea: abr_string
    val of_Pair: abr_string
    val of_Paira: abr_string
    val of_Pat:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> term -> 'a
    val of_Some: abr_string
    val of_Somea: abr_string
    val of_Sort:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> name list -> 'a
    val of_Stmt:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> stmt -> 'a
    val of_TLD_aux:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ((literal -> 'a) ->
                    (name -> 'a) ->
                      (name -> 'b -> 'a -> 'a) ->
                        ('c -> 'd -> 'a -> 'a -> 'a) ->
                          ('e -> 'f -> 'g -> 'a -> 'a -> 'a -> 'a) ->
                            ((('h * 'a) * ('i * 'a)) list -> 'j -> 'a -> 'a)
                              ->
                              ('k ->
                                 (('l * 'a) * ('m * 'a)) list -> 'a -> 'a)
                                ->
                                ('n -> ('o * 'a) list -> 'a -> 'a) ->
                                  (name -> (name * ...) list -> 'a) ->
                                    ('p -> ... list -> 'a -> 'a) ->
                                      (abr_string -> ... list -> ...) ->
  ('q -> ...) -> ... -> ...)
                   -> ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> 'r
    val of_Term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> term -> 'a
    val of_ThyName:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> thyName -> 'a
    val of_Type:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typea -> 'a
    val of_TypeSign:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             abr_string ->
               ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typeSign -> 'a
    val of_TypeSpec:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typeSpec -> 'a
    val of_abbreviation:
       (abr_string -> string) -> 'a -> abbreviation -> string
    val of_all_meta:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> all_meta -> string
    val of_all_meta_embedding:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> all_meta_embedding -> 'a
    val of_all_meta_embeddinga:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> all_meta_embedding -> string
    val of_all_meta_lists:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           bool compiler_env_config_ext ->
             (abr_string option * all_meta list) list -> string list
    val of_axiomatization:
       (abr_string -> string) -> 'a -> axiomatization -> string
    val of_bool: (abr_string -> 'a) -> bool -> 'a
    val of_boola: 'a zero_neq_one -> bool -> 'a
    val of_boolb: (abr_string -> 'a) -> bool -> 'a
    val of_boot_generation_syntax: 'a -> boot_generation_syntax -> string
    val of_boot_setup_env:
       (abr_string -> string) -> 'a -> boot_setup_env -> string
    val of_code_reflect:
       (abr_string -> string) -> 'a -> code_reflect -> string
    val of_compiler_env_config:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> string_b_a_s_e -> 'a)
             ->
             (('a -> 'a list -> 'a) ->
                (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
               ->
               ((abr_string -> 'a) -> unit -> 'a) ->
                 ((abr_string -> 'a) -> bool -> 'a) ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           abr_string ->
                             ('a -> 'a list -> 'a) ->
                               (abr_string -> 'a) ->
                                 (('a -> 'a list -> 'a) ->
                                    (abr_string -> 'a) -> 'b -> 'a)
                                   -> 'b compiler_env_config_ext -> 'a
    val of_consts: (abr_string -> string) -> 'a -> consts -> string
    val of_ctxt2_term: (abr_string -> string) -> ocl_ctxt_term -> string
    val of_ctxt2_term_aux:
       (abr_string -> string) -> abr_string list -> ocl_ctxt_term -> string
    val of_datatype: (abr_string -> string) -> 'a -> datatypea -> string
    val of_definition:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> definition -> string
    val of_e_n_v_section:
       (abr_string -> string) ->
         'a compiler_env_config_ext -> section -> string
    val of_e_n_v_semi_theories:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> semi_theories -> string
    val of_e_n_v_semi_theory:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> semi_theory -> string
    val of_floor: 'a -> (abr_string -> 'b) -> floor -> 'b
    val of_floora: floor -> string
    val of_gen_meta:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> gen_meta -> 'a
    val of_generation_lemma_mode:
       'a -> (abr_string -> 'b) -> generation_lemma_mode -> 'b
    val of_generation_semantics_ocl:
       'a -> (abr_string -> 'b) -> generation_semantics_ocl -> 'b
    val of_hide_const: (abr_string -> string) -> 'a -> hide_const -> string
    val of_inh: 'a tmp_inh -> 'a
    val of_instantiation:
       (abr_string -> string) -> 'a -> instantiation -> string
    val of_internal_oid:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> internal_oid -> 'a
    val of_internal_oids:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> internal_oids -> 'a
    val of_interpretation:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> interpretation -> string
    val of_lemma:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> lemma -> string
    val of_lemmas: (abr_string -> string) -> 'a -> lemmas -> string
    val of_linh: ('a, 'b) inheritance_ext list -> 'a list
    val of_linh_sib: ('a, 'b) inheritance_ext list -> 'a list
    val of_list:
       abr_string ->
         abr_string ->
           ('a -> 'a list -> 'a) ->
             (abr_string -> 'a) -> ('b -> 'a) -> 'b list -> 'a
    val of_lista:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> ('b -> 'a) -> 'b list -> 'a
    val of_nat: 'a -> (abr_string -> 'b) -> Code_Numeral.natural -> 'b
    val of_nata: 'a -> (abr_string -> 'b) -> Code_Numeral.natural -> 'b
    val of_ocl_ass_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> ocl_ass_class -> 'a
    val of_ocl_association:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_association_ext -> 'a
    val of_ocl_association_relation:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             ocl_association_relation -> 'a
    val of_ocl_association_type:
       'a -> (abr_string -> 'b) -> ocl_association_type -> 'b
    val of_ocl_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_class -> 'a
    val of_ocl_class_raw:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_class_raw_ext -> 'a
    val of_ocl_class_synonym:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_class_synonym -> 'a
    val of_ocl_class_tree:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_class_tree -> 'a
    val of_ocl_collection: (abr_string -> 'a) -> ocl_collection -> 'a
    val of_ocl_ctxt:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_ctxt_ext -> 'a
    val of_ocl_ctxt_clause:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> ocl_ctxt_clause -> 'a
    val of_ocl_ctxt_pre_post:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_ctxt_pre_post_ext -> 'a
    val of_ocl_ctxt_prefix:
       'a -> (abr_string -> 'b) -> ocl_ctxt_prefix -> 'b
    val of_ocl_ctxt_term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     ('a -> 'a list -> 'a) ->
                       (abr_string -> 'a) -> ocl_ctxt_term -> 'a
    val of_ocl_ctxt_term_inv:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> ocl_ctxt_term_inv -> 'a
    val of_ocl_ctxt_term_pp:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> ocl_ctxt_term_pp -> 'a
    val of_ocl_ctxta:
       (abr_string -> string) -> 'a -> string -> 'b ocl_ctxt_ext -> string
    val of_ocl_data_shallow:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) ->
                   (abr_string -> 'a) -> ocl_data_shallow -> 'a
    val of_ocl_data_shallowa:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> ocl_data_shallow -> string
    val of_ocl_def_base:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_def_base -> 'a
    val of_ocl_def_base_l:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             abr_string ->
               ('a -> 'a list -> 'a) ->
                 (abr_string -> 'a) -> ocl_def_base_l -> 'a
    val of_ocl_def_basea: (abr_string -> string) -> ocl_def_base -> string
    val of_ocl_def_pp_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_pp_core -> 'a
    val of_ocl_def_pp_corea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> ocl_def_pp_core -> string
    val of_ocl_def_state:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_state -> 'a
    val of_ocl_def_state_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             ('b -> 'a) -> 'b ocl_def_state_core -> 'a
    val of_ocl_def_state_corea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           abr_string ocl_def_state_core list -> string
    val of_ocl_def_statea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> string -> ocl_def_state -> string
    val of_ocl_def_transition:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_transition -> 'a
    val of_ocl_def_transitiona:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> string -> ocl_def_transition -> string
    val of_ocl_enum:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_enum -> 'a
    val of_ocl_flush_all: 'a -> (abr_string -> 'b) -> ocl_flush_all -> 'b
    val of_ocl_generic:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_generic -> 'a
    val of_ocl_generica:
       (abr_string -> string) -> 'a -> ocl_generic -> string
    val of_ocl_instance:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_instance -> 'a
    val of_ocl_instance_single:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) ->
                           (('a -> 'a list -> 'a) ->
                              (abr_string -> 'a) -> 'b -> 'a)
                             -> 'b ocl_instance_single_ext -> 'a
    val of_ocl_instance_singlea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a ocl_instance_single_ext -> string
    val of_ocl_instancea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> ocl_instance -> string
    val of_ocl_list_attr:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) ->
           (abr_string -> 'a) -> ('b -> 'a) -> 'b ocl_list_attr -> 'a
    val of_ocl_list_attra:
       (abr_string -> string) ->
         ('a -> string) -> 'a ocl_list_attr -> string
    val of_ocl_multiplicity:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) ->
                           (('a -> 'a list -> 'a) ->
                              (abr_string -> 'a) -> 'b -> 'a)
                             -> 'b ocl_multiplicity_ext -> 'a
    val of_ocl_multiplicity_single:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) ->
           (abr_string -> 'a) -> ocl_multiplicity_single -> 'a
    val of_ocl_prop:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     ('a -> 'a list -> 'a) ->
                       (abr_string -> 'a) -> ocl_prop -> 'a
    val of_ocl_ty:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty -> 'a
    val of_ocl_ty_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_ty_class_ext -> 'a
    val of_ocl_ty_class_node:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_ty_class_node_ext -> 'a
    val of_ocl_ty_obj:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty_obj -> 'a
    val of_ocl_ty_obj_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty_obj_core -> 'a
    val of_option:
       abr_string ->
         abr_string ->
           ('a -> 'b list -> 'a) ->
             (abr_string -> 'a) -> ('c -> 'b) -> 'c option -> 'a
    val of_optiona:
       ('a -> 'b list -> 'a) ->
         (abr_string -> 'a) -> ('c -> 'b) -> 'c option -> 'a
    val of_overloading:
       (abr_string -> string) -> 'a -> overloading -> string
    val of_pair:
       abr_string ->
         ('a -> 'b list -> 'c) ->
           (abr_string -> 'a) -> ('d -> 'b) -> ('e -> 'b) -> 'd * 'e -> 'c
    val of_paira:
       ('a -> 'b list -> 'c) ->
         (abr_string -> 'a) -> ('d -> 'b) -> ('e -> 'b) -> 'd * 'e -> 'c
    val of_pure_class:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a
    val of_pure_indexname:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             ('a -> 'a list -> 'a) ->
               (abr_string -> 'a) -> abr_string * Code_Numeral.natural -> 'a
    val of_pure_sort:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) ->
               (abr_string -> 'a) -> abr_string list -> 'a
    val of_pure_term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> terma -> 'a
    val of_pure_terma:
       (abr_string -> string) -> bool -> string list -> terma -> string
    val of_pure_typ:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typ -> 'a
    val of_pure_typa: (abr_string -> string) -> typ -> string
    val of_section: (abr_string -> string) -> 'a -> section -> string
    val of_semi_attrib:
       (abr_string -> string) -> string -> semi_thm list -> string
    val of_semi_attrib1:
       (abr_string -> string) -> string -> abr_string list -> string
    val of_semi_attrib_genA:
       (semi_thm list -> string) -> string -> semi_thm list -> string
    val of_semi_attrib_genB:
       (abr_string list -> string) -> string -> abr_string list -> string
    val of_semi_command_final:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_final -> string
    val of_semi_command_proof:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_proof -> string
    val of_semi_command_state:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_state -> string
    val of_semi_method:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_method -> string
    val of_semi_method_simp:
       (abr_string -> string) -> string -> semi_method_simp -> string
    val of_semi_term: (abr_string -> string) -> semi_term -> string
    val of_semi_term_0: (abr_string -> string) -> semi_term_0 -> string
    val of_semi_term_1: (abr_string -> string) -> semi_term_1 -> string
    val of_semi_terma: (abr_string -> string) -> semi_terma -> string
    val of_semi_theories0:
       (abr_string -> string) ->
         ('a -> semi_theory -> string) -> 'a -> semi_theories -> string
    val of_semi_theory:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> semi_theory -> string
    val of_semi_thm: (abr_string -> string) -> semi_thm -> string
    val of_semi_thm_attribute:
       (abr_string -> string) -> semi_thm_attribute -> string
    val of_semi_thm_attribute_aux:
       (abr_string -> string) ->
         (string * string) list -> semi_thm_attribute -> string
    val of_semi_thm_attribute_aux_gen:
       (abr_string -> string) ->
         string * string -> (string * string) list -> abr_string -> string
    val of_semi_thm_attribute_aux_gen_of:
       (abr_string -> string) -> semi_terma list -> string * string
    val of_semi_thm_attribute_aux_gen_where:
       (abr_string -> string) ->
         (abr_string * semi_terma) list -> string * string
    val of_semi_thm_attribute_l:
       (abr_string -> string) -> semi_thm_attribute list -> string
    val of_semi_thm_attribute_l1:
       (abr_string -> string) -> semi_thm_attribute list -> string
    val of_semi_thm_l: (abr_string -> string) -> semi_thm list -> string
    val of_semi_typ: (abr_string -> string) -> semi_typ -> string
    val of_semi_typa:
       (abr_string -> string) -> abr_string * abr_string list -> string
    val of_semi_val_fun: semi_val_fun -> string
    val of_setup: (abr_string -> string) -> 'a -> setup -> string
    val of_string: 'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_string_b_a_s_e: 'a -> (abr_string -> 'b) -> string_b_a_s_e -> 'b
    val of_string_b_a_s_ea: 'a -> (abr_string -> 'b) -> string_b_a_s_e -> 'b
    val of_string_gen:
       abr_string ->
         (abr_string -> abr_string) ->
           (abr_string -> abr_string) ->
             'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_stringa: 'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_sub: 'a tmp_sub -> 'a
    val of_text: (abr_string -> string) -> 'a -> text -> string
    val of_text_raw: (abr_string -> string) -> 'a -> text_raw -> string
    val of_thm: (abr_string -> string) -> 'a -> thm -> string
    val of_type_notation:
       (abr_string -> string) -> 'a -> type_notation -> string
    val of_type_synonym:
       (abr_string -> string) -> 'a -> type_synonym -> string
    val of_unit: (abr_string -> 'a) -> unit -> 'a
    val of_unita: (abr_string -> 'a) -> unit -> 'a
    val ofa: semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val oid: abr_string -> internal_oid -> semi_term_0
    val oidGetAssoc: internal_oids -> internal_oid
    val oidGetInh: internal_oids -> internal_oid
    val oidInit: internal_oid -> internal_oids
    val oidReinitAll: internal_oids -> internal_oids
    val oidSucAssoc: internal_oids -> internal_oids
    val oidSucInh: internal_oids -> internal_oids
    val one: 'a one -> 'a
    type 'a one
    val one_int: inta one
    val one_inta: inta
    val one_integer: int one
    val one_integera: int
    val one_nat: nat
    val one_natural: Code_Numeral.natural one
    val one_power: 'a power -> 'a one
    val one_zero_neq_one: 'a zero_neq_one -> 'a one
    val oneof:
       char list list -> char list -> (char list, char list * char list) sum
    val oneof_aux:
       char list list ->
         char list list ->
           char list -> (char list, char list * char list) sum
    val oneof_b_i_n_d:
       ('a list -> (char list, 'b * 'a list) sum) list ->
         'a list -> (char list, 'b * 'a list) sum
    val onlyPos: positiona -> positiona * int -> nodeInfo
    val opt: abr_string -> semi_typ
    datatype opt_attr_type = OptInh | OptOwn
    datatype opt_ident = OptIdent of Code_Numeral.natural
    val optiona: semi_method list -> semi_method
    datatype 'a optiona = None | Some of 'a
    val or:
       ('a -> ('b, 'c) sum) -> ('a -> ('d, 'c) sum) -> 'a -> ('d, 'c) sum
    type 'a ord
    val ord_integer: int ord
    val overloading: overloading -> all_meta
    datatype overloading
    = Overloading of abr_string * semi_terma * abr_string * semi_terma
    val overloadinga:
       abr_string -> semi_typ -> abr_string -> semi_terma -> overloading
    val pRINT_access_choose:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_choose_ml:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_def_mono:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_deref_assocs:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_deref_oid:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_dot_consts:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_dot_cp_lemmas:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_access_dot_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_eval_extract:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_access_is_repr:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_oid_uniq:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_oid_uniq_ml:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_repr_allinst:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_select:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_select_obj:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_allinst_astype:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_def_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_exec:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_iskindof_eq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_iskindof_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_istypeof:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_allinst_istypeof_pre:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_allinst_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_d_up_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_lemma_const:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_const:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_id2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_up_d_cast0:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_enum: (ocl_enum -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_examp_def_st_defs:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_examp_instance:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc_typecheck:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc_typecheck_var:
       (ocl_instance -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_examp_oclbase:
       (ocl_def_base_l -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_haskell:
       (isaUnit ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_class_1:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_class_2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_equiv_1of2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_equiv_2of1:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_universe:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_enum_syn:
       ('a ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_enum_synonym:
       ('a ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_instantiation_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_instantiation_universe:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_type_synonym_class:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_infra_type_synonym_class_higher:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_type_synonym_class_rec:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_instantia_def_strictrefeq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_instantia_lemmas_strictrefeq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_defineda:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemma_cp:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemma_strict:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_eq_asty:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_istypeof:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_istypeof_unfold:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_up_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_defineda:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_up_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val p_first_of_NodeInfo: nodeInfo -> positiona * int
    val p_last_of_NodeInfo: nodeInfo -> positiona * int
    val pair: semi_term_0 -> semi_term_0 -> semi_term_0
    val pair0: semi_term_0 list -> semi_term_0
    val paren: abr_string -> abr_string -> semi_term_0 -> semi_term_0
    val parenthesis: semi_term_0 -> semi_term_0
    val parse_comment: comment -> abr_string comment_type list
    val parse_commenta:
       char list -> (char list, char list comment_type list * char list) sum
    val parse_id_list:
       char list list ->
         char list -> (char list, char list option list * char list) sum
    val parse_id_m_a_y_b_e:
       char list list ->
         char list ->
           (char list, (char list * char list option) * char list) sum
    val parse_id_o_n_e:
       char list list -> char list -> (char list, char list * char list) sum
    val parse_str: char list -> (char list, char list * char list) sum
    val parse_str_aux:
       char list list -> char list -> (char list, char list * char list) sum
    datatype parsing_style = Style_Haskell | Style_ML
    val partDesignator: 'a cPartDesignator -> designator
    val partition: ('a -> bool) -> 'a list -> 'a list * 'a list
    val plus: semi_method list -> semi_method
    type 'a plus
    val plus_integer: int plus
    val plus_nat: nat -> nat -> nat
    val plus_natural: Code_Numeral.natural plus
    val plusa: 'a plus -> 'a -> 'a -> 'a
    val pos_in_interval:
       (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_in_interval_haskell:
       (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_in_interval_ml:
       'a -> (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_of_CBlockItem: 'a cCompoundBlockItem -> 'a
    val pos_of_CBuiltin: 'a cBuiltinThing -> 'a
    val pos_of_CConst: 'a cConstant -> 'a
    val pos_of_CDecl: 'a cDeclaration -> 'a
    val pos_of_CExpr: 'a cExpression -> 'a
    val pos_of_CExtDecl: 'a cExternalDeclaration -> 'a
    val pos_of_CFunDef: 'a cFunctionDef -> 'a
    val pos_of_CStat: 'a cStatement -> 'a
    val position: int -> abr_string -> int -> int -> positiona
    datatype position = EQ | GT | LT | UN
    datatype positiona
    =
         BuiltinPosition0
       | InternalPosition0
       | NoPosition0
       | Position0 of int * abr_string * int * int
    val power: 'a power -> 'a -> nat -> 'a
    type 'a power
    val power_int: inta power
    val pref_constr_enum: abr_string -> abr_string
    val pref_generic_enum: abr_string -> abr_string
    val pref_ident: abr_string -> abr_string
    val pref_ty_enum: abr_string -> abr_string
    val pref_ty_syn: abr_string -> abr_string
    val prev_was_stop: all_meta_embedding list -> bool
    val print:
       ((abr_string -> string) -> (Code_Numeral.natural -> string) -> 'a) ->
         'a
    val print_access_choose:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_choose_ml:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_choose_mlname:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural -> abr_string
    val print_access_choose_name:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural -> abr_string
    val print_access_choose_switch:
       ('a -> 'b -> 'c) ->
         (Code_Numeral.natural -> 'd) ->
           ocl_class ->
             (Code_Numeral.natural ->
                Code_Numeral.natural -> Code_Numeral.natural -> 'a)
               ->
               ('d list -> 'e) ->
                 (('e * 'f) list -> 'b) -> ('d -> 'd -> 'f) -> 'c list
    val print_access_def_mono:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_def_mono_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_deref_assocs:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_deref_assocs_name:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_deref_assocs_namea:
       Code_Numeral.natural ->
         (abr_string -> abr_string) ->
           (abr_string -> abr_string) -> abr_string
    val print_access_deref_oid: ocl_class -> 'a -> all_meta list * 'a
    val print_access_deref_oid_name: (abr_string -> 'a) -> 'a
    val print_access_dot:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_dot_aux:
       (abr_string option -> semi_terma list -> semi_terma) ->
         ocl_ty -> semi_terma
    val print_access_dot_consts:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_dot_consts_ty: ocl_ty -> semi_typ
    val print_access_dot_cp_lemmas: 'a -> 'b -> all_meta list * 'b
    val print_access_dot_cp_lemmas_set: abr_string list
    val print_access_dot_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemma_cp_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_dot_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemmas_id_name: abr_string
    val print_access_dot_lemmas_id_set: ocl_class -> abr_string list
    val print_access_dot_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_eval_extract: 'a -> 'b -> all_meta list * 'b
    val print_access_is_repr:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_is_repr_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_access_lemma_strict_name:
       (abr_string -> abr_string) ->
         abr_string ->
           ocl_ty -> (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_oid_uniq:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_oid_uniq_gen:
       ('a -> 'b) ->
         ('c compiler_env_config_ext -> internal_oids -> 'd) ->
           (Code_Numeral.natural ->
              abr_string ->
                (abr_string -> abr_string) ->
                  abr_string -> internal_oid -> 'a)
             -> ocl_class -> 'c compiler_env_config_ext -> 'b list * 'd
    val print_access_oid_uniq_ml:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_oid_uniq_mlname:
       Code_Numeral.natural -> abr_string -> abr_string -> abr_string
    val print_access_oid_uniq_name:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_oid_uniq_namea:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_repr_allinst:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select_name: ('a -> 'b) -> (abr_string -> 'a) -> 'b
    val print_access_select_obj:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select_obj_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_allinst_astype: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_astype_name: (abr_string -> abr_string) -> abr_string
    val print_allinst_def_id: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_exec: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_iskindof_eq: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_iskindof_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_istypeof:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_allinst_istypeof_pre: 'a -> 'b -> all_meta list * 'b
    val print_allinst_istypeof_pre_name1: abr_string
    val print_allinst_istypeof_pre_name2: abr_string
    val print_allinst_istypeof_single:
       (abr_string -> abr_string) ->
         abr_string ->
           ('a -> abr_string) ->
             abr_string ->
               'a ->
                 (abr_string -> abr_string) ->
                   (abr_string list -> abr_string list) ->
                     (abr_string list -> abr_string list) -> lemma list
    val print_allinst_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_d_up_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_from_universe_name: abr_string -> abr_string
    val print_astype_lemma_const: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_astype_lemma_cp_set2:
       ocl_class ->
         ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
           (((abr_string -> abr_string) * abr_string) *
            ((abr_string -> abr_string) * abr_string)
           )
           list
    val print_astype_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_const: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_id2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast0: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast0_name: abr_string -> abr_string -> abr_string
    val print_astype_up_d_cast_name: abr_string -> abr_string -> abr_string
    val print_ctxt:
       unit ocl_ctxt_ext ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_ctxt_const:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           ('b compiler_env_config_ext * all_meta list) * all_meta list
    val print_ctxt_const_name:
       abr_string -> abr_string -> abr_string option -> abr_string
    val print_ctxt_inv:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_ctxt_inv_name:
       abr_string -> abr_string -> abr_string -> abr_string
    val print_ctxt_is_name_at_gen:
       abr_string -> abr_string -> abr_string option
    val print_ctxt_is_name_at_post: abr_string -> abr_string option
    val print_ctxt_is_name_at_pre: abr_string -> abr_string option
    val print_ctxt_pre_post:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_ctxt_pre_post_interp:
       generation_lemma_mode option * bool ->
         abr_string ->
           'a ocl_ctxt_pre_post_ext ->
             semi_terma ->
               ocl_ctxt_prefix * semi_terma ->
                 ocl_ctxt_prefix * semi_terma -> all_meta option
    val print_ctxt_pre_post_name:
       abr_string -> abr_string -> abr_string option -> abr_string
    val print_ctxt_thm: 'a ocl_ctxt_ext -> 'b -> all_meta list * 'b
    val print_ctxt_to_ocl_gen:
       string_b_a_s_e list ->
         (abr_string -> abr_string option) ->
           abr_string -> ocl_ctxt_term -> ocl_ctxt_term
    val print_ctxt_to_ocl_gen_split: abr_string -> int list option
    val print_ctxt_to_ocl_post:
       'a compiler_env_config_ext -> ocl_ctxt_term -> ocl_ctxt_term
    val print_ctxt_to_ocl_pre:
       'a compiler_env_config_ext -> ocl_ctxt_term -> ocl_ctxt_term
    val print_enum: ocl_enum -> 'a -> all_meta list * 'a
    val print_examp_def_st0:
       abr_string ->
         abr_string ocl_def_state_core list ->
           unit ocl_instance_single_ext list *
           abr_string ocl_def_state_core list
    val print_examp_def_st1:
       ocl_def_state ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_examp_def_st1_gen:
       ocl_def_state ->
         unit compiler_env_config_ext ->
           (all_meta list * unit compiler_env_config_ext) *
           (unit compiler_env_config_ext -> unit compiler_env_config_ext)
    val print_examp_def_st2:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_examp_def_st_allinst:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_assoc:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list -> semi_terma
    val print_examp_def_st_assoc_build_rbt:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list ->
               (int list,
               (int list,
               internal_oid list list list * unit ocl_ty_class_ext)
               alist
               )
               alist
    val print_examp_def_st_assoc_build_rbt2:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list ->
               (int list,
               internal_oid list list list * unit ocl_ty_class_ext)
               alist
    val print_examp_def_st_assoc_build_rbt_gen:
       (abr_string ->
          ((int list, internal_oid list list list * unit ocl_ty_class_ext)
           alist
             ->
             (int list, internal_oid list list list * unit ocl_ty_class_ext)
             alist)
            -> ('a, 'b) alist -> ('a, 'b) alist)
         ->
         (abr_string -> (abr_string -> (ocl_ty * ('c * 'd)) option) * 'e) ->
           (internal_oid -> internal_oids option) ->
             (abr_string -> internal_oids option) ->
               ('f ocl_instance_single_ext * internal_oids) list ->
                 ('a, 'b) alist
    val print_examp_def_st_assoc_build_rbt_gen_typecheck:
       ('a ocl_instance_single_ext ->
          'b -> 'c print_examp_instance_draw_list_attra)
         ->
         (abr_string -> bool) ->
           (abr_string -> abr_string -> 'd option) ->
             (internal_oid -> 'e option) ->
               (abr_string -> 'e option) ->
                 ocl_enum list ->
                   ('a ocl_instance_single_ext * 'b) list ->
                     (reporting * abr_string) list ->
                       (reporting * abr_string) list
    val print_examp_def_st_def_interp:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_def_st_defassoc_typecheck:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_examp_def_st_defassoc_typecheck_gen:
       abr_string ocl_def_state_core list ->
         'a compiler_env_config_ext -> ml list
    val print_examp_def_st_defs: 'a -> 'b -> all_meta list * 'b
    val print_examp_def_st_dom:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_dom_lemmas:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_dom_name: abr_string -> abr_string
    val print_examp_def_st_locale:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           unit semi_locale_ext * 'a compiler_env_config_ext
    val print_examp_def_st_locale_aux:
       (internal_oids * 'a ocl_instance_single_ext) list list ->
         semi_terma list *
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
    val print_examp_def_st_locale_distinct: abr_string
    val print_examp_def_st_locale_make:
       abr_string ->
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
           ->
           (internal_oids * 'a ocl_instance_single_ext) list list ->
             unit semi_locale_ext
    val print_examp_def_st_locale_metis: semi_method
    val print_examp_def_st_locale_name: abr_string -> abr_string
    val print_examp_def_st_locale_sort:
       'a compiler_env_config_ext ->
         abr_string ocl_def_state_core list ->
           (internal_oids * unit ocl_instance_single_ext) list list
    val print_examp_def_st_mapsto:
       (internal_oids *
        (abr_string * 'a ocl_instance_single_ext) ocl_def_state_core
       )
       list
         -> semi_terma list option
    val print_examp_def_st_mapsto_gen:
       ('a * (abr_string * 'b ocl_instance_single_ext) ocl_def_state_core ->
          'b ocl_instance_single_ext -> semi_terma option -> 'c)
         ->
         ('a * (abr_string * 'b ocl_instance_single_ext) ocl_def_state_core)
         list
           -> 'c list
    val print_examp_def_st_perm:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_perm_name: abr_string -> abr_string
    val print_examp_def_st_typecheck_var:
       ocl_def_state -> 'a -> all_meta list * 'a
    val print_examp_increase_oid:
       unit ocl_instance_single_ext list ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val print_examp_instance:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_app_constr2_notmp:
       (opt_attr_type *
        (unit ocl_ty_class_ext option *
         (ocl_ty * ((abr_string * abr_string) option * ocl_data_shallow))
         option
        )
        list
       )
       list
       ocl_list_attr
         ->
         (abr_string -> abr_string) ->
           internal_oids ->
             ((abr_string -> abr_string) ->
                internal_oids ->
                  (unit ocl_ty_class_ext ->
                     semi_terma print_examp_instance_draw_list_attra)
                  *
                  (ocl_ty * ocl_data_shallow ->
                     semi_terma print_examp_instance_draw_list_attra))
               -> semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_app_constr2_notmp_norec:
       (abr_string ->
          (abr_string -> ('a * (opt_attr_type * opt_ident)) option) *
          (opt_attr_type ->
             (('b ->
                 Code_Numeral.natural ->
                   ('b *
                    ('a *
                     ((abr_string * abr_string) option * ocl_data_shallow)
                    )
                    option
                   )
                   list
                     ->
                     ('b *
                      ('a *
                       ((abr_string * abr_string) option * ocl_data_shallow)
                      )
                      option
                     )
                     list)
                ->
                'c list ->
                  (unit ocl_ty_class_ext option *
                   (ocl_ty *
                    ((abr_string * abr_string) option * ocl_data_shallow)
                   )
                   option
                  )
                  list
             )
             option))
       *
       ((internal_oid -> internal_oids option) *
        (abr_string -> internal_oids option))
         ->
         semi_terma ->
           'd ocl_instance_single_ext ->
             (abr_string -> abr_string) ->
               internal_oids ->
                 semi_terma print_examp_instance_draw_list_attra *
                 (semi_terma -> semi_terma)
    val print_examp_instance_app_constr2_notmpa:
       'a ocl_list_attr -> semi_terma -> semi_terma
    val print_examp_instance_app_constr_notmp:
       (unit ocl_ty_class_ext ->
          semi_terma print_examp_instance_draw_list_attra)
       *
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         (abr_string -> abr_string) ->
           semi_terma ->
             (unit ocl_ty_class_ext option *
              (ocl_ty *
               ((abr_string * abr_string) option * ocl_data_shallow)
              )
              option
             )
             list
               -> semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_defassoc:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_defassoc_gen:
       semi_terma ->
         ('a ocl_instance_single_ext * internal_oids) list ->
           'b compiler_env_config_ext ->
             (abr_string ->
                'c * ((abr_string -> (ocl_ty * ('d * 'e)) option) * 'f))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
               -> definition list
    val print_examp_instance_defassoc_typecheck:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_defassoc_typecheck_gen:
       unit ocl_instance_single_ext option list ->
         'a compiler_env_config_ext -> ml list
    val print_examp_instance_defassoc_typecheck_var:
       ocl_instance -> 'a -> all_meta list * 'a
    val print_examp_instance_draw_list_attr:
       (unit ocl_ty_class_ext ->
          semi_terma print_examp_instance_draw_list_attra)
       *
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         (unit ocl_ty_class_ext option *
          (ocl_ty * ((abr_string * abr_string) option * ocl_data_shallow))
          option
         )
         list
           -> semi_terma list print_examp_instance_draw_list_attra
    datatype print_examp_instance_draw_list_attr
    = Return_exp of semi_terma | Return_obj of unit ocl_ty_class_ext
    val print_examp_instance_draw_list_attr_aux:
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         ocl_ty * ocl_data_shallow ->
           semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_draw_list_attr_aux_base:
       ocl_ty * ocl_data_shallow ->
         semi_terma print_examp_instance_draw_list_attra
    datatype print_examp_instance_draw_list_attr_err
    =
         Return_err_l of print_examp_instance_draw_list_attr_err list
       | Return_err_ty of ocl_ty * ocl_data_shallow
       | Return_err_ty_auto
       | Return_object_variable of abr_string
       | Return_ocl_invalid
       | Return_ocl_null
    datatype 'a print_examp_instance_draw_list_attra
    =
         Return_err of print_examp_instance_draw_list_attr_err
       | Return_val of 'a
    val print_examp_instance_name: 'a -> 'a
    val print_examp_instance_oid:
       (definition -> 'a) ->
         ('b ocl_instance_single_ext * internal_oids) list ->
           'c compiler_env_config_ext -> 'a list
    val print_examp_oclbase: ocl_def_base_l -> 'a -> all_meta list * 'a
    val print_examp_oclbase_gen: ocl_def_base -> semi_terma * definition
    val print_haskell:
       isaUnit ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_class_1:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_class_2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_1of2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_1of2_name: abr_string
    val print_infra_datatype_equiv_1of2_name_aux: abr_string
    val print_infra_datatype_equiv_1of2_name_get_oid_inh: abr_string
    val print_infra_datatype_equiv_2of1:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_2of1_name: abr_string
    val print_infra_datatype_equiv_2of1_name_aux: abr_string
    val print_infra_datatype_universe: ocl_class -> 'a -> all_meta list * 'a
    val print_infra_enum_syn:
       'a ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_infra_enum_synonym:
       'a ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_infra_instantiation_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_instantiation_universe:
       ocl_class -> 'a -> all_meta list * 'a
    val print_infra_type_synonym_class: 'a -> 'b -> all_meta list * 'b
    val print_infra_type_synonym_class_higher:
       ocl_class -> 'a -> all_meta list * 'a
    val print_infra_type_synonym_class_rec:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_type_synonym_class_rec_aux:
       ocl_ty -> abr_string * semi_typ
    val print_infra_type_synonym_class_rec_aux0:
       ocl_ty -> abr_string * semi_typ
    val print_infra_type_synonym_class_sequence_name:
       abr_string -> abr_string
    val print_infra_type_synonym_class_set_name: abr_string -> abr_string
    val print_instantia_def_strictrefeq:
       ocl_class -> 'a -> all_meta list * 'a
    val print_instantia_def_strictrefeq_name:
       (abr_string list -> 'a) -> abr_string -> 'a
    val print_instantia_lemmas_strictrefeq:
       ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_class_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_defined_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_defined_namea:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_defineda:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemma_cp:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_iskindof_lemma_strict:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_eq_asty: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_eq_asty_name: abr_string -> abr_string
    val print_iskindof_up_istypeof: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_istypeof_erule:
       abr_string ->
         ocl_class list -> abr_string -> abr_string -> semi_method
    val print_iskindof_up_istypeof_name:
       abr_string -> abr_string -> abr_string
    datatype ('a, 'b) print_iskindof_up_istypeof_output
    =
         M_erule of 'b
       | M_simp_b_r_e_a_d_t_h
       | M_simp_d_e_p_t_h_1
       | M_simp_d_e_p_t_h_2
       | M_simp_only of 'a
    val print_iskindof_up_istypeof_unfold:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_up_istypeof_unfold_name:
       abr_string -> abr_string -> abr_string
    val print_iskindof_up_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_larger_name:
       abr_string -> abr_string -> abr_string
    val print_istypeof_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_defined_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_istypeof_defined_namea:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_istypeof_defineda:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_istypeof_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_strict_set:
       ocl_class -> (abr_string * (abr_string * abr_string)) list
    val print_istypeof_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_up_d_cast_name:
       abr_string -> abr_string -> abr_string -> abr_string
    val print_istypeof_up_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_up_larger_name:
       abr_string -> abr_string -> abr_string
    val print_meta_setup_def_state:
       ocl_def_state ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val print_meta_setup_def_transition:
       ocl_def_transition ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val print_transition:
       ocl_def_transition ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_transition_def_interp:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_transition_def_state:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_gen:
       ocl_def_transition ->
         unit compiler_env_config_ext ->
           (all_meta list * unit compiler_env_config_ext) *
           (unit compiler_env_config_ext -> unit compiler_env_config_ext)
    val print_transition_interp:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_lemmas_oid:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_transition_locale:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           unit semi_locale_ext * 'a compiler_env_config_ext
    val print_transition_locale_aux:
       (internal_oids *
        (abr_string * 'a ocl_instance_single_ext) ocl_def_state_core
       )
       list
         -> semi_terma list
    val print_transition_locale_name: abr_string -> abr_string -> abr_string
    val print_transition_wff:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_where:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val pure_typ0:
       (abr_string -> string) -> bool -> abr_string -> typ -> string
    val raise_ml: (reporting * abr_string) list -> abr_string -> ml
    val raise_ml_unbound:
       (Code_Numeral.natural -> 'a -> abr_string) ->
         ('a * ocl_ctxt_term) list -> ('b -> all_meta list) list
    val raw: abr_string -> semi_typ
    val rbt_of_class:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           abr_string ->
             bool *
             ((abr_string -> (ocl_ty * (opt_attr_type * opt_ident)) option)
              *
              (opt_attr_type ->
                 ((unit ocl_ty_class_ext option -> 'a -> 'c -> 'c) ->
                    'c -> 'c
                 )
                 option))
    val rec_DoBlockFragment:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) ->
   doBlockFragment -> 'c
    val rec_Function_Kind: 'a -> 'a -> 'a -> 'a -> function_Kind -> 'a
    val rec_Function_Stmt:
       (function_Kind ->
          typeSign list -> ((name * term list) * term) list -> 'a)
         -> function_Stmt -> 'a
    val rec_IsaUnit:
       (bool * Code_Numeral.natural ->
          (abr_string * abr_string option) list ->
            gen_meta -> abr_string -> module list * bool -> 'a)
         -> isaUnit -> 'a
    val rec_ListComprFragment:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) ->
   listComprFragment -> 'b
    val rec_Literal:
       (Code_Numeral.natural -> 'a) -> (abr_string -> 'a) -> literal -> 'a
    val rec_Module:
       (thyName -> thyName list -> stmt list -> bool -> 'a) -> module -> 'a
    val rec_Name:
       (thyName -> abr_string -> 'a) -> (abr_string -> 'a) -> name -> 'a
    val rec_Region: 'a -> (sourcePos -> sourcePos -> 'a) -> region -> 'a
    val rec_Region_Wrap: ('a -> region -> 'b) -> 'a region_Wrap -> 'b
    val rec_SourcePos: (int -> abr_string -> int -> 'a) -> sourcePos -> 'a
    val rec_Stmt:
       ((typeSpec * (name * typea list) list) list -> 'a) ->
         (typeSpec -> (name * typea) list -> 'a) ->
           ((typeSpec * typea) list -> 'a) ->
             (function_Stmt -> 'a) ->
               (name -> name list -> typeSign list -> 'a) ->
                 (name ->
                    name ->
                      (name * name list) list -> function_Stmt list -> 'a)
                   ->
                   (abr_string -> 'a) -> (function_Stmt -> 'a) -> stmt -> 'a
    val rec_StringCvt_radix: 'a -> 'a -> 'a -> 'a -> stringCvt_radix -> 'a
    val rec_Term:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) -> term -> 'a
    val rec_ThyName: (abr_string -> 'a) -> thyName -> 'a
    val rec_Type:
       (name -> (typea * 'a) list -> 'a) ->
         (typea -> typea -> 'a -> 'a -> 'a) ->
           (name -> 'a) -> 'a -> typea -> 'a
    val rec_TypeSign:
       (name -> (name * name list) list -> typea -> 'a) -> typeSign -> 'a
    val rec_TypeSpec: (name list -> name -> 'a) -> typeSpec -> 'a
    val rec_Unsynchronized_ref: ('a -> 'b) -> 'a unsynchronized_ref -> 'b
    val rec_all_meta_embedding:
       (ocl_enum -> 'a) ->
         (floor -> unit ocl_class_raw_ext -> 'a) ->
           (unit ocl_association_ext -> 'a) ->
             (floor -> ocl_ass_class -> 'a) ->
               (floor -> unit ocl_ctxt_ext -> 'a) ->
                 (isaUnit -> 'a) ->
                   (ocl_class_synonym -> 'a) ->
                     (ocl_instance -> 'a) ->
                       (ocl_def_base_l -> 'a) ->
                         (floor -> ocl_def_state -> 'a) ->
                           (floor -> ocl_def_transition -> 'a) ->
                             (ocl_class_tree -> 'a) ->
                               (ocl_flush_all -> 'a) ->
                                 (ocl_generic -> 'a) ->
                                   all_meta_embedding -> 'a
    val rec_base_inttype:
       'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> base_inttype -> 'a
    val rec_binoptype:
       'a ->
         'a ->
           'a ->
             'a ->
               'a ->
                 'a ->
                   'a ->
                     'a ->
                       'a ->
                         'a ->
                           'a ->
                             'a ->
                               'a ->
                                 'a ->
                                   'a -> 'a -> 'a -> 'a -> binoptype -> 'a
    val rec_block_item:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_ctype:
       (base_inttype -> 'a) ->
         (base_inttype -> 'a) ->
           'a ->
             'a ->
               (abr_string -> 'a) ->
                 (abr_string -> 'a) ->
                   (abr_string option -> 'a) ->
                     ('b ctype -> 'a -> 'a) ->
                       ('b ctype -> 'b option -> 'a -> 'a) ->
                         (bool -> 'b -> 'a) ->
                           (abr_string -> 'a) ->
                             ('b ctype -> ('b ctype * 'a) list -> 'a -> 'a)
                               -> 'a -> 'b ctype -> 'a
    val rec_declaration:
       (expr ctype *
        (abr_string region_Wrap *
         (storage_class list * (initializer option * gcc_attribute list)))
          -> 'a)
         ->
         (abr_string region_Wrap ->
            (expr ctype * abr_string region_Wrap) list -> 'a)
           ->
           ((expr ctype * abr_string region_Wrap) list -> 'a) ->
             (expr ctype ->
                abr_string region_Wrap ->
                  (expr ctype * abr_string option) list ->
                    fnspec list -> 'a)
               ->
               (abr_string option region_Wrap ->
                  (abr_string region_Wrap * expr option) list -> 'a)
                 -> declaration -> 'a
    val rec_designator:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_expr:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_expr_node:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_ext_decl:
       (expr ctype * abr_string region_Wrap ->
          (expr ctype * abr_string region_Wrap) list ->
            fnspec list -> block_item list region_Wrap -> 'a)
         -> (declaration region_Wrap -> 'a) -> ext_decl -> 'a
    val rec_floor: 'a -> 'a -> 'a -> floor -> 'a
    val rec_fnspec:
       (abr_string region_Wrap -> 'a) ->
         (abr_string region_Wrap -> 'a) ->
           (abr_string list -> 'a) ->
             'a -> (gcc_attribute list -> 'a) -> fnspec -> 'a
    val rec_gcc_attribute:
       (abr_string -> 'a) ->
         (abr_string -> expr list -> 'a) ->
           (abr_string -> 'a) -> gcc_attribute -> 'a
    val rec_gen_meta:
       (abr_string -> 'a) ->
         (abr_string -> 'a) ->
           (abr_string -> abr_string -> 'a) -> 'a -> gen_meta -> 'a
    val rec_generation_lemma_mode: 'a -> 'a -> generation_lemma_mode -> 'a
    val rec_generation_semantics_ocl:
       'a -> 'a -> 'a -> generation_semantics_ocl -> 'a
    val rec_initializer:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_internal_oid: (Code_Numeral.natural -> 'a) -> internal_oid -> 'a
    val rec_internal_oids:
       (Code_Numeral.natural ->
          Code_Numeral.natural -> Code_Numeral.natural -> 'a)
         -> internal_oids -> 'a
    val rec_list: 'a -> ('b -> 'b list -> 'a -> 'a) -> 'b list -> 'a
    val rec_literalconstant_node:
       (int -> abr_string -> stringCvt_radix -> 'a) ->
         (abr_string -> 'a) -> literalconstant_node -> 'a
    val rec_more_info:
       (abr_string -> abr_string option -> 'a) ->
         'a -> 'a -> more_info -> 'a
    val rec_ocl_ass_class:
       (unit ocl_association_ext -> unit ocl_class_raw_ext -> 'a) ->
         ocl_ass_class -> 'a
    val rec_ocl_association_relation:
       ((ocl_ty_obj * unit ocl_multiplicity_ext) list -> 'a) ->
         ocl_association_relation -> 'a
    val rec_ocl_association_type:
       'a -> 'a -> 'a -> 'a -> ocl_association_type -> 'a
    val rec_ocl_class:
       (abr_string ->
          (abr_string * ocl_ty) list -> (ocl_class * 'a) list -> 'a)
         -> ocl_class -> 'a
    val rec_ocl_class_synonym:
       (abr_string -> ocl_ty -> 'a) -> ocl_class_synonym -> 'a
    val rec_ocl_class_tree:
       (Code_Numeral.natural -> Code_Numeral.natural -> 'a) ->
         ocl_class_tree -> 'a
    val rec_ocl_collection:
       'a ->
         'a ->
           'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> ocl_collection -> 'a
    val rec_ocl_ctxt_clause:
       (unit ocl_ctxt_pre_post_ext -> 'a) ->
         (ocl_ctxt_term_inv -> 'a) -> ocl_ctxt_clause -> 'a
    val rec_ocl_ctxt_prefix: 'a -> 'a -> ocl_ctxt_prefix -> 'a
    val rec_ocl_ctxt_term:
       (terma -> abr_string option -> 'a) ->
         (abr_string -> abr_string -> 'a) ->
           (abr_string -> ocl_ctxt_term -> 'a -> 'a) -> ocl_ctxt_term -> 'a
    val rec_ocl_ctxt_term_inv:
       (bool -> ocl_prop -> 'a) -> ocl_ctxt_term_inv -> 'a
    val rec_ocl_ctxt_term_pp:
       (ocl_ctxt_prefix -> ocl_prop -> 'a) ->
         (ocl_ctxt_term_inv -> 'a) -> ocl_ctxt_term_pp -> 'a
    val rec_ocl_data_shallow:
       (ocl_def_base -> 'a) ->
         (abr_string -> 'a) ->
           (internal_oid -> 'a) ->
             ((ocl_data_shallow * 'a) list -> 'a) -> ocl_data_shallow -> 'a
    val rec_ocl_def_base:
       (abr_string -> 'a) ->
         (abr_string * abr_string -> 'a) ->
           (abr_string -> 'a) -> ocl_def_base -> 'a
    val rec_ocl_def_base_l:
       (ocl_def_base list -> 'a) -> ocl_def_base_l -> 'a
    val rec_ocl_def_pp_core:
       (abr_string ocl_def_state_core list -> 'a) ->
         (abr_string -> 'a) -> ocl_def_pp_core -> 'a
    val rec_ocl_def_state:
       (abr_string -> abr_string ocl_def_state_core list -> 'a) ->
         ocl_def_state -> 'a
    val rec_ocl_def_state_core:
       (unit ocl_instance_single_ext -> 'a) ->
         ('b -> 'a) -> 'b ocl_def_state_core -> 'a
    val rec_ocl_def_transition:
       (abr_string option ->
          ocl_def_pp_core -> ocl_def_pp_core option -> 'a)
         -> ocl_def_transition -> 'a
    val rec_ocl_enum:
       (abr_string -> abr_string list -> 'a) -> ocl_enum -> 'a
    val rec_ocl_flush_all: 'a -> ocl_flush_all -> 'a
    val rec_ocl_generic: (abr_string -> 'a) -> ocl_generic -> 'a
    val rec_ocl_instance:
       (unit ocl_instance_single_ext list -> 'a) -> ocl_instance -> 'a
    val rec_ocl_list_attr:
       ('a -> 'b) ->
         (abr_string -> 'a ocl_list_attr -> 'a -> 'b -> 'b) ->
           'a ocl_list_attr -> 'b
    val rec_ocl_multiplicity_single:
       (Code_Numeral.natural -> 'a) ->
         'a -> 'a -> ocl_multiplicity_single -> 'a
    val rec_ocl_prop:
       (abr_string option -> ocl_ctxt_term -> 'a) -> ocl_prop -> 'a
    val rec_ocl_ty:
       'a ->
         'a ->
           'a ->
             'a ->
               'a ->
                 'a ->
                   (ocl_ty_obj -> 'a) ->
                     (unit ocl_multiplicity_ext -> ocl_ty -> 'a -> 'a) ->
                       (ocl_ty -> ocl_ty -> 'a -> 'a -> 'a) ->
                         (abr_string option * (ocl_ty * 'a) -> 'a) ->
                           (ocl_ty -> ocl_ty -> 'a -> 'a -> 'a) ->
                             (abr_string -> 'a) ->
                               (abr_string -> 'a) ->
                                 (abr_string -> 'a) -> ocl_ty -> 'a
    val rec_ocl_ty_obj:
       (ocl_ty_obj_core -> ocl_ty_obj_core list list -> 'a) ->
         ocl_ty_obj -> 'a
    val rec_ocl_ty_obj_core:
       (abr_string -> 'a) ->
         (unit ocl_ty_class_ext -> 'a) -> ocl_ty_obj_core -> 'a
    val rec_option: 'a -> ('b -> 'a) -> 'b option -> 'a
    val rec_statement:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_statement_node:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_storage_class: 'a -> 'a -> 'a -> 'a -> 'a -> storage_class -> 'a
    val rec_term:
       (abr_string -> typ -> 'a) ->
         (abr_string -> typ -> 'a) ->
           (abr_string * Code_Numeral.natural -> typ -> 'a) ->
             (Code_Numeral.natural -> 'a) ->
               (abr_string -> typ -> terma -> 'a -> 'a) ->
                 (terma -> terma -> 'a -> 'a -> 'a) -> terma -> 'a
    val rec_trappable: 'a -> 'a -> trappable -> 'a
    val rec_typ:
       (abr_string -> (typ * 'a) list -> 'a) ->
         (abr_string -> abr_string list -> 'a) ->
           (abr_string * Code_Numeral.natural -> abr_string list -> 'a) ->
             typ -> 'a
    val rec_unoptype: 'a -> 'a -> 'a -> 'a -> unoptype -> 'a
    datatype region = Bogus | T of sourcePos * sourcePos
    datatype 'a region_Wrap = Tb of 'a * region
    val remove_binding: ocl_ty -> ocl_ty
    val remove_last_break: 'a cStatement -> 'a cStatement option
    val rename_tac: abr_string list -> semi_method
    val replace_gen:
       (('a list, 'a) nsplit list -> 'b) ->
         'a list -> ('a -> bool) -> 'a list -> 'b
    val replace_integers:
       (int -> abr_string) ->
         abr_string -> string option -> abr_string -> abr_string
    val replace_integersa: (int -> abr_string) -> abr_string -> abr_string
    datatype reporting = Error | Warning | Writeln
    val return: 'a -> 'b -> 'b * 'a
    val returna: 'a -> 'b list -> (char list, 'a * 'b list) sum
    val rev: 'a list -> 'a list
    val rev_map: ('a -> 'b) -> 'a list -> 'b list
    val rewrite: semi_term_0 -> abr_string -> semi_term_0 -> semi_term_0
    val rewrite_val: semi_term_0 -> abr_string -> semi_term_0 -> semi_term
    val rule: semi_thm_attribute -> semi_method
    val rulea: semi_method
    datatype sUERef = AnonymousRef0 of namea | NamedRef0 of ident
    val sbogwrap: statement_node -> statement
    val scan_upto_b_i_n_d:
       ('a list -> ('b, 'c * 'a list) sum) ->
         'a list -> (char list, ('a list * 'c) * 'a list) sum
    val section: abr_string -> 'a -> 'b -> all_meta list * 'b
    datatype section = Section of Code_Numeral.natural * abr_string
    val section_aux:
       Code_Numeral.natural -> abr_string -> 'a -> 'b -> all_meta list * 'b
    val sectiona:
       abr_string -> ('a -> 'b -> all_meta list * 'b) embedding_fun
    val sectionb: section -> all_meta
    datatype semi_command_final
    = Command_by of semi_method list | Command_done | Command_sorry
    datatype semi_command_proof
    =
         Command_apply of semi_method list
       | Command_fix_let of
           abr_string list * (semi_terma * semi_terma) list *
           (semi_terma list * semi_terma list) option *
           semi_command_state list
       | Command_have of abr_string * bool * semi_terma * semi_command_final
       | Command_let of semi_terma * semi_terma
       | Command_unfolding of semi_thm list
       | Command_using of semi_thm list
    datatype semi_command_state = Command_apply_end of semi_method list
    datatype semi_datatype_version
    =
         Datatype_new
       | Datatype_old
       | Datatype_old_atomic
       | Datatype_old_atomic_sub
    datatype 'a semi_locale_ext
    =
         Semi_locale_ext of
             abr_string *
             ((semi_terma * semi_typ) list *
              (abr_string * semi_terma) option
             )
             list
             *
             'a
    datatype semi_method
    =
         Method_all of semi_method_simp
       | Method_auto_simp_add_split of semi_thm list * abr_string list
       | Method_blast of Code_Numeral.natural option
       | Method_case_tac of semi_terma
       | Method_clarify
       | Method_drule of semi_thm_attribute
       | Method_elim of semi_thm_attribute
       | Method_erule of semi_thm_attribute
       | Method_insert of semi_thm list
       | Method_intro of semi_thm_attribute list
       | Method_metis of abr_string list * semi_thm_attribute list
       | Method_one of semi_method_simp
       | Method_option of semi_method list
       | Method_or of semi_method list
       | Method_plus of semi_method list
       | Method_rename_tac of abr_string list
       | Method_rule of semi_thm_attribute option
       | Method_subst of ...
    datatype semi_method_simp
    =
         Method_simp_add_del_split of
             semi_thm list * semi_thm list * semi_thm list
       | Method_simp_only of semi_thm list
    datatype semi_term = SML_top of semi_term_1 list
    datatype semi_term_0
    =
         SML_annot of semi_term_0 * abr_string
       | SML_apply of semi_term_0 * semi_term_0 list
       | SML_basic of abr_string list
       | SML_binop of semi_term_0 * abr_string * semi_term_0
       | SML_function of (semi_term_0 * semi_term_0) list
       | SML_let of semi_term * semi_term_0
       | SML_paren of abr_string * abr_string * semi_term_0
       | SML_rewrite of semi_term_0 * abr_string * semi_term_0
       | SML_string of abr_string
    datatype semi_term_1
    =
         SML_open of abr_string
       | SML_val_fun of semi_val_fun option * semi_term_0
    datatype semi_terma
    =
         Term_annot of semi_terma * semi_typ
       | Term_apply of semi_terma * semi_terma list
       | Term_basic of abr_string list
       | Term_bind of abr_string * semi_terma * semi_terma
       | Term_fun_case of semi_terma option * (semi_terma * semi_terma) list
       | Term_if_then_else of semi_terma * semi_terma * semi_terma
       | Term_let of (semi_terma * semi_terma) list * semi_terma
       | Term_paren of abr_string * abr_string * semi_terma
       | Term_rewrite of semi_terma * abr_string * semi_terma
       | Term_term of abr_string list * terma
    datatype semi_theories
    =
         Theories_locale of unit semi_locale_ext * semi_theory list list
       | Theories_one of semi_theory
    datatype semi_theory
    =
         Theory_ML of ml
       | Theory_abbreviation of abbreviation
       | Theory_axiomatization of axiomatization
       | Theory_code_reflect of code_reflect
       | Theory_consts of consts
       | Theory_datatype of datatypea
       | Theory_definition of definition
       | Theory_hide_const of hide_const
       | Theory_instantiation of instantiation
       | Theory_interpretation of interpretation
       | Theory_lemma of lemma
       | Theory_lemmas of lemmas
       | Theory_overloading of overloading
       | Theory_section of section
       | Theory_setup of setup
       | Theory_text of text
       | Theory_text_raw of text_raw
       | Theory_thm of thm
       | ...
    datatype semi_thm
    = Thms_mult of semi_thm_attribute | Thms_single of semi_thm_attribute
    datatype semi_thm_attribute
    =
         Thm_OF of semi_thm_attribute * semi_thm_attribute
       | Thm_THEN of semi_thm_attribute * semi_thm_attribute
       | Thm_of of semi_thm_attribute * semi_terma list
       | Thm_simplified of semi_thm_attribute * semi_thm_attribute
       | Thm_symmetric of semi_thm_attribute
       | Thm_thm of abr_string
       | Thm_thms of abr_string
       | Thm_where of semi_thm_attribute * (abr_string * semi_terma) list
    datatype semi_typ
    =
         Typ_apply of semi_typ * semi_typ list
       | Typ_apply_bin of abr_string * semi_typ * semi_typ
       | Typ_apply_paren of abr_string * abr_string * semi_typ
       | Typ_base of abr_string
    datatype semi_val_fun = Sfun | Sval
    datatype setup = Setup of semi_term
    type 'a show
    val show_char: char show
    val show_intFlag: cIntFlag -> abr_string
    val shows_list: 'a show -> 'a list -> char list -> char list
    val shows_list_char: char list -> char list -> char list
    val shows_list_gen:
       ('a -> char list -> char list) ->
         char list ->
           char list ->
             char list -> char list -> 'a list -> char list -> char list
    val shows_list_list: 'a show -> 'a list list -> char list -> char list
    val shows_prec: 'a show -> nat -> 'a -> char list -> char list
    val shows_prec_char: nat -> char -> char list -> char list
    val shows_prec_list: 'a show -> nat -> 'a list -> char list -> char list
    val shows_quote: (char list -> char list) -> char list -> char list
    val shows_sep:
       ('a -> char list -> char list) ->
         (char list -> char list) -> 'a list -> char list -> char list
    val shows_string: char list -> char list -> char list
    val showsp_list:
       (nat -> 'a -> char list -> char list) ->
         nat -> 'a list -> char list -> char list
    val simp: semi_method
    val simp_add: abr_string list -> semi_method
    val simp_add2: semi_thm_attribute list -> abr_string list -> semi_method
    val simp_add_del: abr_string list -> abr_string list -> semi_method
    val simp_add_split:
       semi_thm_attribute list -> semi_thm_attribute list -> semi_method
    val simp_all: semi_method
    val simp_all_add: abr_string list -> semi_method
    val simp_all_only: semi_thm_attribute list -> semi_method
    val simp_only: semi_thm_attribute list -> semi_method
    val simp_onlya: semi_thm_attribute list -> semi_method
    val simplified:
       semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val simplified_l:
       semi_thm_attribute -> semi_thm_attribute list -> semi_thm_attribute
    val single_multip: 'a ocl_multiplicity_ext -> bool
    val size_list: 'a list -> nat
    val sml_apply: abr_string -> abr_string list -> abr_string
    val sml_escape: abr_string -> abr_string
    val sml_of_compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> unit compiler_env_config_ext -> 'a
    val snd: 'a * 'b -> 'b
    val sorry: semi_command_final
    datatype sourcePos = Ta of int * abr_string * int
    val split: ('a * 'b) list -> 'a list * 'b list
    val split_at: ('a -> bool) -> 'a list -> 'a list * ('a option * 'a list)
    val split_inh_own:
       (abr_string ->
          ('a -> ('b * (opt_attr_type * opt_ident)) option) *
          (opt_attr_type ->
             (('c ->
                 Code_Numeral.natural ->
                   ('c * ('b * ('d * 'e)) option) list ->
                     ('c * ('b * ('d * 'e)) option) list)
                -> 'f list -> 'g list
             )
             option))
         ->
         abr_string ->
           ('d * ('a * 'e)) list ocl_list_attr ->
             (opt_attr_type * 'g list) list ocl_list_attr
    val split_ty: abr_string -> abr_string list
    val stars1: char list -> (char list, char list * char list) sum
    val start_m:
       ('a -> 'b) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'c list -> 'a list)
           ->
           (position ->
              (abr_string -> abr_string) *
              (abr_string * (abr_string * ocl_ty) list)
                -> ocl_class -> 'c list)
             ->
             ocl_class ->
               'd compiler_env_config_ext ->
                 'b list * 'd compiler_env_config_ext
    val start_m_3_gen:
       ('a -> 'b) ->
         ((ocl_class, unit) inheritance_ext list ->
            ocl_class list ->
              ocl_class list ->
                abr_string -> abr_string -> abr_string -> 'a)
           ->
           ocl_class ->
             'c compiler_env_config_ext ->
               'b list * 'c compiler_env_config_ext
    val start_m_gen:
       ('a -> 'b) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'c list -> 'a list)
           ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  position ->
                    (abr_string -> abr_string) *
                    (abr_string * (abr_string * ocl_ty) list)
                      -> ocl_class -> 'c list)
             ->
             ocl_class ->
               'd compiler_env_config_ext ->
                 'b list * 'd compiler_env_config_ext
    val start_ma:
       ('a -> 'b) ->
         (position ->
            (abr_string -> abr_string) *
            (abr_string * (abr_string * ocl_ty) list)
              -> ocl_class -> 'a)
           ->
           ocl_class ->
             'c compiler_env_config_ext ->
               'b list * 'c compiler_env_config_ext
    val start_map: ('a -> 'b) -> 'a list -> 'c -> 'b list * 'c
    val start_mapa: ('a -> 'b) -> 'a -> 'c -> 'b * 'c
    val start_mapb:
       ('a -> 'b) ->
         ((('c * ocl_ty) list -> ('c * ocl_ty) list) ->
            (('c * ocl_ty) list * ('c * ocl_ty) list list ->
               ('c * ocl_ty) list * ('c * ocl_ty) list list)
              ->
              (('c * ocl_ty) list * ('c * ocl_ty) list ->
                 ('c * ocl_ty) list * ('c * ocl_ty) list)
                -> 'a list)
           ->
           'd compiler_env_config_ext ->
             'b list * 'd compiler_env_config_ext
    val start_mapc:
       ('a -> 'b) ->
         (generation_semantics_ocl ->
            (('c * ocl_ty) list -> ('c * ocl_ty) list) ->
              (('c * ocl_ty) list * ('c * ocl_ty) list list ->
                 ('c * ocl_ty) list * ('c * ocl_ty) list list)
                ->
                (('c * ocl_ty) list * ('c * ocl_ty) list ->
                   ('c * ocl_ty) list * ('c * ocl_ty) list)
                  -> 'a list)
           ->
           'd compiler_env_config_ext ->
             'b list * 'd compiler_env_config_ext
    val start_mapd:
       ('a -> 'b) ->
         (generation_semantics_ocl -> 'a list) ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    val start_mape:
       ('a -> 'b) ->
         (generation_lemma_mode option * bool ->
            generation_semantics_ocl -> 'a list)
           ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    val start_mapf:
       ('a -> 'b) ->
         ((abr_string -> abr_string) -> generation_semantics_ocl -> 'a list)
           ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    datatype statement = Stmt of statement_node region_Wrap
    val statement0:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cStatement -> statement
    val statement0_case:
       'a cExpression list ->
         'a cStatement -> bool * ('a cExpression list * 'a cStatement)
    val statement_For:
       (nodeInfo cExpression optiona, nodeInfo cDeclaration) either ->
         nodeInfo cExpression optiona ->
           nodeInfo cExpression optiona ->
             statement * nodeInfo ->
               nodeInfo *
               (comment list * (abr_string * int, (int * int) list) alist)
                 -> statement_node
    val statement_If:
       ('a -> statement) ->
         'b cExpression -> 'a -> 'a optiona -> statement_node
    val statement_Switch:
       'a ->
         (nodeInfo cCompoundBlockItem list ->
            (positiona * int) * (positiona * int) -> block_item list)
           ->
           'b cExpression ->
             nodeInfo cCompoundBlockItem list -> nodeInfo -> statement_node
    val statement_While:
       nodeInfo cExpression ->
         statement * nodeInfo ->
           bool ->
             nodeInfo *
             (comment list * (abr_string * int, (int * int) list) alist)
               -> statement_node
    datatype statement_node
    =
         AsmStmt of bool * asmblock
       | Assign of expr * expr
       | AssignFnCall of expr option * expr * expr list
       | Auxupd of abr_string
       | Block of block_item list
       | Break
       | Chaos of expr
       | Continue
       | EmbFnCall of expr * expr * expr list
       | EmptyStmt
       | Ghostupd of abr_string
       | IfStmt of expr * statement * statement
       | LocalInit of expr
       | Return of expr option
       | ReturnFnCall of expr * expr list
       | Spec of (abr_string * abr_string) * ...
       | Switch of expr * ... list
       | Trap of ...
       | ...
    val statement_node_of_expression: nodeInfo cExpression -> statement_node
    val statement_node_of_expressiona:
       nodeInfo cExpression optiona ->
         (nodeInfo *
          (comment list * (abr_string * int, (int * int) list) alist)
         )
         option
           -> statement_node
    val statement_of_expression_CAssign:
       cAssignOp ->
         nodeInfo cExpression -> nodeInfo cExpression -> statement_node
    val statement_of_expression_CAssign_fun: 'a cExpression -> bool
    datatype stmt
    =
         Class of name * name list * typeSign list
       | Comment of abr_string
       | Datatype of (typeSpec * (name * typea list) list) list
       | Functiona of function_Stmt
       | Instance of
           name * name * (name * name list) list * function_Stmt list
       | Record of typeSpec * (name * typea) list
       | SML of function_Stmt
       | TypeSynonym of (typeSpec * typea) list
    val stmt_out_of_expr:
       nodeInfo cExpression -> 'a -> 'a * nodeInfo cExpression
    val stmt_out_of_expra: nodeInfo cExpression -> nodeInfo cExpression
    datatype storage_class
    = SC_AUTO | SC_EXTERN | SC_REGISTER | SC_STATIC | SC_THRD_LOCAL
    val str_hol_of_ty_all:
       ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_ty -> 'a
    val str_of_data_shallow: ocl_data_shallow -> abr_string
    val str_of_def_base: ocl_def_base -> abr_string
    val str_of_ty: ocl_ty -> abr_string
    datatype stringCvt_radix = BIN | DEC | HEX | OCT
    val stringLiteral: 'a cStringLiteral -> abr_string
    datatype string_b_a_s_e = ST of string | STa of int list
    val string_concat_map: string -> ('a -> string) -> 'a list -> string
    val string_implode: char list -> abr_string
    val stringa: abr_string -> semi_term_0
    val struct_conv:
       (abr_string, 'a, 'b, 'c) struct_tree ->
         abr_string * (abr_string, 'a, 'b, 'c) struct_flat list
    datatype ('a, 'b, 'c, 'd) struct_flat
    =
         Struct_leaf of ('a * 'b, 'd) sum
       | Struct_root of 'a * 'b * ('a * 'c, 'd) sum list
    datatype ('a, 'b, 'c, 'd) struct_tree
    =
         Struct_tree of
             'a option * 'b *
             (('a, 'b, 'c, 'd) struct_tree * 'c, 'd) sum list
    val subsection: abr_string -> 'a -> 'b -> all_meta list * 'b
    val subsectiona:
       abr_string -> ('a -> 'b -> all_meta list * 'b) embedding_fun
    val subst: semi_thm_attribute -> semi_method
    val subst_l: abr_string list -> semi_thm_attribute -> semi_method
    val suc: nat -> nat
    val succ: 'a one * 'a plus -> 'a -> 'a
    datatype ('a, 'b) sum = Inl of 'a | Inr of 'b
    val symmetric: semi_thm_attribute -> semi_thm_attribute
    val t_lambdas: abr_string list -> ocl_ctxt_term -> ocl_ctxt_term
    val take: nat -> 'a list -> 'a list
    val takeWhile: ('a -> bool) -> 'a list -> 'a list
    val take_first: nat -> 'a list -> 'a list
    val take_last: nat -> 'a list -> 'a list
    val takea: ('a list -> 'a list) -> nat -> 'a list -> 'a list
    datatype term
    =
         Abs of name * term
       | App of term * term
       | Case of term * (term * term) list
       | Const of name
       | DoBlock of abr_string * doBlockFragment list * abr_string
       | If of term * term * term
       | Let of (term * term) list * term
       | ListCompr of term * listComprFragment list
       | Literal of literal
       | Parenthesized of term
       | RecConstr of name * (name * term) list
       | RecUpdate of term * (name * term) list
    val term_And: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_annot: semi_terma -> abr_string -> semi_terma
    val term_annot_ocl: semi_terma -> abr_string -> semi_terma
    val term_app: abr_string -> semi_terma list -> semi_terma
    val term_applys: semi_terma -> semi_terma list -> semi_terma
    val term_applys0: semi_terma -> semi_terma list -> semi_terma
    val term_basety: semi_terma
    val term_binop: semi_terma -> abr_string -> semi_terma -> semi_terma
    val term_binopa: abr_string -> semi_terma list -> semi_terma
    val term_binopb: abr_string -> semi_terma list -> semi_terma
    val term_case:
       semi_terma -> (semi_terma * semi_terma) list -> semi_terma
    val term_exists: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_function: (semi_terma * semi_terma) list -> semi_terma
    val term_lam: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_lambda: abr_string -> semi_terma -> semi_terma
    val term_lambdas: abr_string list -> semi_terma -> semi_terma
    val term_lambdas0: semi_terma -> semi_terma -> semi_terma
    val term_list: semi_terma list -> semi_terma
    val term_lista: ('a -> semi_terma) -> 'a list -> semi_terma
    val term_oclset: semi_terma list -> semi_terma
    val term_oid: abr_string -> internal_oid -> semi_terma
    val term_pair: semi_terma -> semi_terma -> semi_terma
    val term_paira: semi_terma list -> semi_terma
    val term_pairs: ('a -> semi_terma) -> 'a list -> semi_terma
    val term_parenthesis: semi_terma -> semi_terma
    val term_pat: abr_string -> semi_terma
    val term_postunary: semi_terma -> semi_terma -> semi_terma
    val term_preunary: semi_terma -> semi_terma -> semi_terma
    val term_set: semi_terma list -> semi_terma
    val term_some: semi_terma -> semi_terma
    val term_string: abr_string -> semi_terma
    val term_stringa: abr_string -> semi_terma
    val term_stringb: semi_terma -> abr_string -> semi_terma
    val term_warning_parenthesis: semi_terma -> semi_terma
    datatype terma
    =
         Absa of abr_string * typ * terma
       | Appa of terma * terma
       | Bound of Code_Numeral.natural
       | Consta of abr_string * typ
       | Free of abr_string * typ
       | Var of (abr_string * Code_Numeral.natural) * typ
    val text: text -> all_meta
    datatype text = Text of abr_string
    val text2_of_str: abr_string -> abr_string
    val text_of_str: abr_string -> abr_string
    val text_raw: text_raw -> all_meta
    datatype text_raw = Text_raw of abr_string
    val textstr_of_str:
       (abr_string -> abr_string) ->
         (int -> abr_string) ->
           (abr_string -> abr_string) -> abr_string -> abr_string
    val thena:
       semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val thm: thm -> all_meta
    datatype thm = Thm of semi_thm_attribute list
    val thma: abr_string -> semi_thm_attribute
    val thms: abr_string -> semi_thm_attribute
    datatype thyName = ThyName of abr_string
    val thy_association: ('a, 'b) embedding
    val thy_class: (ocl_class, unit compiler_env_config_ext) embedding
    val thy_class_flat: ('a, 'b) embedding
    val thy_class_synonym: ('a, 'b) embedding
    val thy_class_tree: ('a, 'b) embedding
    val thy_ctxt:
       floor -> (unit ocl_ctxt_ext, unit compiler_env_config_ext) embedding
    val thy_def_base_l:
       (ocl_def_base_l, unit compiler_env_config_ext) embedding
    val thy_def_state:
       floor -> (ocl_def_state, unit compiler_env_config_ext) embedding
    val thy_def_transition:
       floor -> (ocl_def_transition, unit compiler_env_config_ext) embedding
    val thy_enum: (ocl_enum, unit compiler_env_config_ext) embedding
    val thy_enum_flat: ('a, 'b) embedding
    val thy_flush_all: ('a, 'b) embedding
    val thy_generic: ('a, 'b) embedding
    val thy_haskell: (isaUnit, unit compiler_env_config_ext) embedding
    val thy_instance: (ocl_instance, unit compiler_env_config_ext) embedding
    val times: 'a times -> 'a -> 'a -> 'a
    type 'a times
    val times_int: inta times
    val times_inta: inta -> inta -> inta
    val times_nat: nat -> nat -> nat
    val times_power: 'a power -> 'a times
    val tl: 'a list -> 'a list
    datatype 'a tmp_inh = Tinh of 'a
    datatype 'a tmp_sub = Tsub of 'a
    datatype 'a tmp_univ = Tuniv of 'a
    val to_String: string_b_a_s_e -> abr_string
    val to_String_b_a_s_e: abr_string -> string_b_a_s_e
    val to_bl: 'a len0 -> 'a word -> bool list
    val to_bold_number: abr_string -> abr_string
    val to_list: abr_string -> int list
    val to_lista: string_b_a_s_e -> int list
    val to_oid: (Code_Numeral.natural -> string) -> internal_oid -> string
    val translation_unit:
       nodeInfo cTranslationUnit * (comment list * int list) ->
         ext_decl list
    datatype trappable = BreakT | ContinueT
    datatype 'a tree = Tree of 'a * 'a tree list
    val tree_of_decl_spec:
       'a cStructureUnion ->
         (abr_string,
         cStructTag * ('a cDeclaration list * ('a cAttribute list * 'a)),
         cStructTag *
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
         ,
         'a cDeclarationSpecifier list *
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
         )
         struct_tree
    val trim: char list -> char list
    val truncate: 'a compiler_env_config_ext -> unit compiler_env_config_ext
    val txt:
       ((abr_string -> abr_string) ->
          generation_semantics_ocl -> abr_string)
         ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_a:
       abr_string list ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_aa:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_d:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw:
       ((abr_string -> abr_string) ->
          generation_semantics_ocl -> abr_string)
         ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw_a:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw_d:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txta:
       abr_string ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txtb:
       abr_string list ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val tyCollect: 'a ocl_multiplicity_ext -> ocl_collection list
    val tyMult:
       'a ocl_multiplicity_ext ->
         (ocl_multiplicity_single * ocl_multiplicity_single option) list
    val tyObjN_ass_switch: 'a ocl_ty_class_node_ext -> Code_Numeral.natural
    val tyObjN_role_multip:
       'a ocl_ty_class_node_ext -> unit ocl_multiplicity_ext
    val tyObjN_role_name: 'a ocl_ty_class_node_ext -> abr_string option
    val tyObjN_role_ty: 'a ocl_ty_class_node_ext -> abr_string
    val tyObj_ass_arity: 'a ocl_ty_class_ext -> Code_Numeral.natural
    val tyObj_ass_id: 'a ocl_ty_class_ext -> Code_Numeral.natural
    val tyObj_from: 'a ocl_ty_class_ext -> unit ocl_ty_class_node_ext
    val tyObj_name: 'a ocl_ty_class_ext -> abr_string
    val tyObj_to: 'a ocl_ty_class_ext -> unit ocl_ty_class_node_ext
    val tyRole: 'a ocl_multiplicity_ext -> abr_string option
    val tyRole_update:
       (abr_string option -> abr_string option) ->
         'a ocl_multiplicity_ext -> 'a ocl_multiplicity_ext
    val ty_arrow: semi_typ -> semi_typ -> semi_typ
    val ty_arrowa: semi_typ list -> semi_typ
    val ty_arrowb: semi_typ -> semi_typ
    val ty_boolean: abr_string
    val ty_integer: abr_string
    val ty_obj_to_string: ocl_ty_obj -> abr_string
    val ty_paren: semi_typ -> semi_typ
    val ty_real: abr_string
    val ty_string: abr_string
    val ty_times: semi_typ -> semi_typ -> semi_typ
    val ty_void: abr_string
    datatype typ
    =
         TFree of abr_string * abr_string list
       | TVara of (abr_string * Code_Numeral.natural) * abr_string list
       | Typeb of abr_string * typ list
    datatype typeSign = TypeSign of name * (name * name list) list * typea
    datatype typeSpec = TypeSpec of name list * name
    val type_notation: type_notation -> all_meta
    datatype type_notation = Type_notation of abr_string * abr_string
    val type_synonym: type_synonym -> all_meta
    datatype type_synonym
    = Type_synonym of (abr_string * abr_string list) * semi_typ
    val type_synonyma: abr_string -> semi_typ -> type_synonym
    val type_synonymb:
       abr_string ->
         abr_string list -> (abr_string list -> semi_typ) -> type_synonym
    datatype typea
    =
         Func of typea * typea
       | NoType
       | TVar of name
       | Typea of name * typea list
    val uint: 'a len0 -> 'a word -> inta
    val unaryOp: cUnaryOp -> unoptype
    val unfolding: semi_thm_attribute list -> semi_command_proof
    val union:
       'a equal -> ('a, 'b) alist -> ('a, 'b) alist -> ('a, 'b) alist
    val union_load:
       'a equal ->
         'a list -> 'b * ('a, unit) alist -> bool * ('a, unit) alist
    val union_loada:
       'a equal ->
         'a list ->
           bool * ('a list * ('a, unit) alist) ->
             bool * ('a list * ('a, unit) alist)
    val unique: 'a equal -> ('b -> 'a) -> ('b * 'c) list -> ('b * 'c) list
    datatype unoptype = Addr | BitNegate | Negate | Not
    val unsupported: abr_string -> 'a -> 'a * nodeInfo cExpression
    datatype 'a unsynchronized_ref = Unsynchronized_ref of 'a
    val update: 'a equal -> 'a -> 'b -> ('a * 'b) list -> ('a * 'b) list
    val update_D_ocl_accessor_post: ('a -> 'b) -> 'c * 'a -> 'c * 'b
    val update_D_ocl_accessor_pre: ('a -> 'b) -> 'a * 'c -> 'b * 'c
    val updatea: 'a equal -> 'a -> 'b -> ('a, 'b) alist -> ('a, 'b) alist
    val uppercase: abr_string -> abr_string
    val upt: nat -> nat -> nat list
    val upto_aux: inta -> inta -> inta list -> inta list
    val uptoa: inta -> inta -> inta list
    val uptob:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural list
    val using: semi_thm_attribute list -> semi_command_proof
    val var_Abs_Set: abr_string
    val var_Abs_Set_inverse: abr_string
    val var_Abs_Void: abr_string
    val var_OclForall_set: abr_string
    val var_OclInteger: abr_string
    val var_OclReal: abr_string
    val var_OclString: abr_string
    val var_Pair_base: abr_string
    val var_Sequence_base: abr_string
    val var_Set_base: abr_string
    val var_assocs: abr_string
    val var_at_when_hol_post: abr_string
    val var_at_when_hol_pre: abr_string
    val var_at_when_ocl_post: abr_string
    val var_at_when_ocl_pre: abr_string
    val var_deref: abr_string
    val var_deref_assocs: abr_string
    val var_deref_assocs_list: abr_string
    val var_deref_oid: abr_string
    val var_eval_extract: abr_string
    val var_in_post_state: abr_string
    val var_in_pre_state: abr_string
    val var_inst_assoc: abr_string
    val var_map_of_list: abr_string
    val var_oid_uniq: abr_string
    val var_reconst_basetype: abr_string
    val var_reconst_basetype_void: abr_string
    val var_result: abr_string
    val var_select: abr_string
    val var_select_object_pair: abr_string
    val var_select_object_sequence: abr_string
    val var_select_object_sequence_any: abr_string
    val var_select_object_sequence_any_exec: abr_string
    val var_select_object_set: abr_string
    val var_select_object_set_any: abr_string
    val var_select_object_set_any_exec: abr_string
    val var_self: abr_string
    val var_switch: abr_string
    val var_ty_list: abr_string
    val var_ty_prod: abr_string
    val var_val: abr_string
    val wherea:
       semi_thm_attribute ->
         (abr_string * semi_terma) list -> semi_thm_attribute
    val wildcard: abr_string
    datatype 'a word = Word of inta
    val word_of_int: 'a len0 -> inta -> 'a word
    val wrap: 'a -> sourcePos -> sourcePos -> 'a region_Wrap
    val wrap_oclty: abr_string -> abr_string
    val write_file:
       (all_meta_embedding list * abr_string option) compiler_env_config_ext
         -> unit option
    val write_file0:
       (all_meta_embedding list * abr_string option) compiler_env_config_ext
         ->
         (((string -> string -> unit option) -> unit option) -> unit option)
         *
         string list
    val write_file0a:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             ->
             (((string -> string -> unit option) -> unit option) ->
                unit option)
             *
             string list
    val write_filea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> unit option
    val zero: 'a zero -> 'a
    type 'a zero
    val zero_integer: int zero
    val zero_nat: nat zero
    val zero_nata: nat
    val zero_natural: Code_Numeral.natural zero
    type 'a zero_neq_one
    val zero_neq_one_integer: int zero_neq_one
    val zero_zero_neq_one: 'a zero_neq_one -> 'a zero
    val zip: 'a list -> 'b list -> ('a * 'b) list
  end
### ML warning (line 165 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Value identifier (Name) has not been referenced.
structure C_Ast:
  sig
    val AnonymousRef: namea -> sUERef
    val BuiltinPosition: positiona
    val CAddAssOp: cAssignOp
    val CAddOp: cBinaryOp
    val CAdrOp: cUnaryOp
    val CAlignAsExpr: 'a cExpression -> 'a -> 'a cAlignmentSpecifier
    val CAlignAsType: 'a cDeclaration -> 'a -> 'a cAlignmentSpecifier
    val CAlignSpec: 'a cAlignmentSpecifier -> 'a cDeclarationSpecifier
    val CAlignofExpr: 'a cExpression -> 'a -> 'a cExpression
    val CAlignofType: 'a cDeclaration -> 'a -> 'a cExpression
    val CAndAssOp: cAssignOp
    val CAndOp: cBinaryOp
    val CArrDeclr:
       'a cTypeQualifier list ->
         'a cArraySize -> 'a -> 'a cDerivedDeclarator
    val CArrDesig: 'a cExpression -> 'a -> 'a cPartDesignator
    val CArrSize: bool -> 'a cExpression -> 'a cArraySize
    val CAsm: 'a cAssemblyStatement -> 'a -> 'a cStatement
    val CAsmExt: 'a cStringLiteral -> 'a -> 'a cExternalDeclaration
    val CAsmOperand:
       ident optiona ->
         'a cStringLiteral -> 'a cExpression -> 'a -> 'a cAssemblyOperand
    val CAsmStmt:
       'a cTypeQualifier optiona ->
         'a cStringLiteral ->
           'a cAssemblyOperand list ->
             'a cAssemblyOperand list ->
               'a cStringLiteral list -> 'a -> 'a cAssemblyStatement
    val CAssign:
       cAssignOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val CAssignOp: cAssignOp
    val CAtomicQual: 'a -> 'a cTypeQualifier
    val CAtomicType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val CAttr: ident -> 'a cExpression list -> 'a -> 'a cAttribute
    val CAttrQual: 'a cAttribute -> 'a cTypeQualifier
    val CAuto: 'a -> 'a cStorageSpecifier
    val CBinary:
       cBinaryOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val CBlockDecl: 'a cDeclaration -> 'a cCompoundBlockItem
    val CBlockStmt: 'a cStatement -> 'a cCompoundBlockItem
    val CBoolType: 'a -> 'a cTypeSpecifier
    val CBreak: 'a -> 'a cStatement
    val CBuiltinExpr: 'a cBuiltinThing -> 'a cExpression
    val CBuiltinOffsetOf:
       'a cDeclaration -> 'a cPartDesignator list -> 'a -> 'a cBuiltinThing
    val CBuiltinTypesCompatible:
       'a cDeclaration -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val CBuiltinVaArg:
       'a cExpression -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val CCall: 'a cExpression -> 'a cExpression list -> 'a -> 'a cExpression
    val CCase: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val CCases:
       'a cExpression ->
         'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val CCast: 'a cDeclaration -> 'a cExpression -> 'a -> 'a cExpression
    val CChar: char -> bool -> cChar
    val CCharConst: cChar -> 'a -> 'a cConstant
    val CCharType: 'a -> 'a cTypeSpecifier
    val CChars: char list -> bool -> cChar
    val CComma: 'a cExpression list -> 'a -> 'a cExpression
    val CCompOp: cUnaryOp
    val CComplexImag: 'a cExpression -> 'a -> 'a cExpression
    val CComplexReal: 'a cExpression -> 'a -> 'a cExpression
    val CComplexType: 'a -> 'a cTypeSpecifier
    val CCompound:
       ident list -> 'a cCompoundBlockItem list -> 'a -> 'a cStatement
    val CCompoundLit:
       'a cDeclaration ->
         ('a cPartDesignator list * 'a cInitializer) list ->
           'a -> 'a cExpression
    val CCond:
       'a cExpression ->
         'a cExpression optiona -> 'a cExpression -> 'a -> 'a cExpression
    val CConst: 'a cConstant -> 'a cExpression
    val CConstQual: 'a -> 'a cTypeQualifier
    val CCont: 'a -> 'a cStatement
    val CDecl:
       'a cDeclarationSpecifier list ->
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
           -> 'a -> 'a cDeclaration
    val CDeclExt: 'a cDeclaration -> 'a cExternalDeclaration
    val CDeclr:
       ident optiona ->
         'a cDerivedDeclarator list ->
           'a cStringLiteral optiona ->
             'a cAttribute list -> 'a -> 'a cDeclarator
    val CDefault: 'a cStatement -> 'a -> 'a cStatement
    val CDivAssOp: cAssignOp
    val CDivOp: cBinaryOp
    val CDoubleType: 'a -> 'a cTypeSpecifier
    val CEnum:
       ident optiona ->
         (ident * 'a cExpression optiona) list optiona ->
           'a cAttribute list -> 'a -> 'a cEnumeration
    val CEnumType: 'a cEnumeration -> 'a -> 'a cTypeSpecifier
    val CEqOp: cBinaryOp
    val CExpr: 'a cExpression optiona -> 'a -> 'a cStatement
    val CExtern: 'a -> 'a cStorageSpecifier
    val CFDefExt: 'a cFunctionDef -> 'a cExternalDeclaration
    val CFloat: abr_string -> cFloat
    val CFloatConst: cFloat -> 'a -> 'a cConstant
    val CFloatType: 'a -> 'a cTypeSpecifier
    val CFor:
       ('a cExpression optiona, 'a cDeclaration) either ->
         'a cExpression optiona ->
           'a cExpression optiona -> 'a cStatement -> 'a -> 'a cStatement
    val CFunDeclr:
       (ident list, 'a cDeclaration list * bool) either ->
         'a cAttribute list -> 'a -> 'a cDerivedDeclarator
    val CFunDef:
       'a cDeclarationSpecifier list ->
         'a cDeclarator ->
           'a cDeclaration list -> 'a cStatement -> 'a -> 'a cFunctionDef
    val CFunSpec: 'a cFunctionSpecifier -> 'a cDeclarationSpecifier
    val CGenericSelection:
       'a cExpression ->
         ('a cDeclaration optiona * 'a cExpression) list ->
           'a -> 'a cExpression
    val CGeqOp: cBinaryOp
    val CGoto: ident -> 'a -> 'a cStatement
    val CGotoPtr: 'a cExpression -> 'a -> 'a cStatement
    val CGrOp: cBinaryOp
    val CIf:
       'a cExpression ->
         'a cStatement -> 'a cStatement optiona -> 'a -> 'a cStatement
    val CIndOp: cUnaryOp
    val CIndex: 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val CInitExpr: 'a cExpression -> 'a -> 'a cInitializer
    val CInitList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         'a -> 'a cInitializer
    val CInlineQual: 'a -> 'a cFunctionSpecifier
    val CInt128Type: 'a -> 'a cTypeSpecifier
    val CIntConst: cInteger -> 'a -> 'a cConstant
    val CIntType: 'a -> 'a cTypeSpecifier
    val CInteger: int -> cIntRepr -> cIntFlag flags -> cInteger
    val CLabAddrExpr: ident -> 'a -> 'a cExpression
    val CLabel:
       ident -> 'a cStatement -> 'a cAttribute list -> 'a -> 'a cStatement
    val CLeOp: cBinaryOp
    val CLeqOp: cBinaryOp
    val CLndOp: cBinaryOp
    val CLongType: 'a -> 'a cTypeSpecifier
    val CLorOp: cBinaryOp
    val CMember: 'a cExpression -> ident -> bool -> 'a -> 'a cExpression
    val CMemberDesig: ident -> 'a -> 'a cPartDesignator
    val CMinOp: cUnaryOp
    val CMulAssOp: cAssignOp
    val CMulOp: cBinaryOp
    val CNegOp: cUnaryOp
    val CNeqOp: cBinaryOp
    val CNestedFunDef: 'a cFunctionDef -> 'a cCompoundBlockItem
    val CNoArrSize: bool -> 'a cArraySize
    val CNonnullQual: 'a -> 'a cTypeQualifier
    val CNoreturnQual: 'a -> 'a cFunctionSpecifier
    val CNullableQual: 'a -> 'a cTypeQualifier
    val COrAssOp: cAssignOp
    val COrOp: cBinaryOp
    val CPlusOp: cUnaryOp
    val CPostDecOp: cUnaryOp
    val CPostIncOp: cUnaryOp
    val CPreDecOp: cUnaryOp
    val CPreIncOp: cUnaryOp
    val CPtrDeclr: 'a cTypeQualifier list -> 'a -> 'a cDerivedDeclarator
    val CRangeDesig:
       'a cExpression -> 'a cExpression -> 'a -> 'a cPartDesignator
    val CRegister: 'a -> 'a cStorageSpecifier
    val CRestrQual: 'a -> 'a cTypeQualifier
    val CReturn: 'a cExpression optiona -> 'a -> 'a cStatement
    val CRmdAssOp: cAssignOp
    val CRmdOp: cBinaryOp
    val CSUType: 'a cStructureUnion -> 'a -> 'a cTypeSpecifier
    val CShlAssOp: cAssignOp
    val CShlOp: cBinaryOp
    val CShortType: 'a -> 'a cTypeSpecifier
    val CShrAssOp: cAssignOp
    val CShrOp: cBinaryOp
    val CSignedType: 'a -> 'a cTypeSpecifier
    val CSizeofExpr: 'a cExpression -> 'a -> 'a cExpression
    val CSizeofType: 'a cDeclaration -> 'a -> 'a cExpression
    val CStatExpr: 'a cStatement -> 'a -> 'a cExpression
    val CStatic: 'a -> 'a cStorageSpecifier
    val CStaticAssert:
       'a cExpression -> 'a cStringLiteral -> 'a -> 'a cDeclaration
    val CStorageSpec: 'a cStorageSpecifier -> 'a cDeclarationSpecifier
    val CStrConst: cString -> 'a -> 'a cConstant
    val CStrLit: cString -> 'a -> 'a cStringLiteral
    val CStruct:
       cStructTag ->
         ident optiona ->
           'a cDeclaration list optiona ->
             'a cAttribute list -> 'a -> 'a cStructureUnion
    val CStructTag: cStructTag
    val CSubAssOp: cAssignOp
    val CSubOp: cBinaryOp
    val CSwitch: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val CThread: 'a -> 'a cStorageSpecifier
    val CTranslUnit:
       'a cExternalDeclaration list -> 'a -> 'a cTranslationUnit
    val CTypeDef: ident -> 'a -> 'a cTypeSpecifier
    val CTypeOfExpr: 'a cExpression -> 'a -> 'a cTypeSpecifier
    val CTypeOfType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val CTypeQual: 'a cTypeQualifier -> 'a cDeclarationSpecifier
    val CTypeSpec: 'a cTypeSpecifier -> 'a cDeclarationSpecifier
    val CTypedef: 'a -> 'a cStorageSpecifier
    val CUnary: cUnaryOp -> 'a cExpression -> 'a -> 'a cExpression
    val CUnionTag: cStructTag
    val CUnsigType: 'a -> 'a cTypeSpecifier
    val CVar: ident -> 'a -> 'a cExpression
    val CVoidType: 'a -> 'a cTypeSpecifier
    val CVolatQual: 'a -> 'a cTypeQualifier
    val CWhile:
       'a cExpression -> 'a cStatement -> bool -> 'a -> 'a cStatement
    val CXorAssOp: cAssignOp
    val CXorOp: cBinaryOp
    val DecRepr: cIntRepr
    val FlagImag: cIntFlag
    val FlagLong: cIntFlag
    val FlagLongLong: cIntFlag
    val FlagUnsigned: cIntFlag
    val Flags: int -> 'a flags
    val HexRepr: cIntRepr
    val InternalPosition: positiona
    val NamedRef: ident -> sUERef
    val NoPosition: positiona
    val NodeInfo: positiona -> positiona * int -> namea -> nodeInfo
    val OctalRepr: cIntRepr
    val OnlyPos: positiona -> positiona * int -> nodeInfo
    val Position: int -> abr_string -> int -> int -> positiona
    datatype abbreviation = Abbreviation of semi_terma
    datatype abr_string
    =
         SS_base of string_b_a_s_e
       | String_concatWith of abr_string * abr_string list
    val activate_simp_optimization: bool
    val add_0: int -> abr_string
    val add_hierarchy:
       ('a ->
          'b ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              'c -> (abr_string * ocl_ty) list list tmp_inh -> 'd -> 'e)
         ->
         ocl_class ->
           'a ->
             'b ->
               'c ->
                 (ocl_class, 'f) inheritance_ext list tmp_inh ->
                   'g -> 'd -> 'e
    val add_hierarchya:
       ('a ->
          'b ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              'c -> (abr_string * ocl_ty) list list tmp_inh -> 'd -> 'e)
         ->
         ocl_class ->
           'a ->
             'b ->
               'c ->
                 (ocl_class, 'f) inheritance_ext list tmp_inh ->
                   'd -> 'g -> 'e
    val add_hierarchyb:
       ('a -> 'b -> 'c -> 'd -> 'e -> 'f) ->
         'a -> 'b -> 'c -> 'd tmp_inh -> 'e tmp_sub -> 'f
    datatype ('a, 'b) alist = Alist of ('a * 'b) list
    val all: (int -> bool) -> abr_string -> bool
    datatype all_meta
    =
         META_all_meta_embedding of all_meta_embedding
       | META_boot_generation_syntax of boot_generation_syntax
       | META_boot_setup_env of boot_setup_env
       | META_semi_theories of semi_theories
    datatype all_meta_embedding
    =
         META_ass_class of floor * ocl_ass_class
       | META_association of unit ocl_association_ext
       | META_class_raw of floor * unit ocl_class_raw_ext
       | META_class_synonym of ocl_class_synonym
       | META_class_tree of ocl_class_tree
       | META_ctxt of floor * unit ocl_ctxt_ext
       | META_def_base_l of ocl_def_base_l
       | META_def_state of floor * ocl_def_state
       | META_def_transition of floor * ocl_def_transition
       | META_enum of ocl_enum
       | META_flush_all of ocl_flush_all
       | META_generic of ocl_generic
       | META_haskell of isaUnit
       | META_instance of ocl_instance
    val anonymousRef: namea -> sUERef
    val ap1: ('a -> 'b list -> 'c) -> 'a -> ('d -> 'b) -> 'd -> 'c
    val ap16:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) ->
                     ('i -> 'b) ->
                       ('j -> 'b) ->
                         ('k -> 'b) ->
                           ('l -> 'b) ->
                             ('m -> 'b) ->
                               ('n -> 'b) ->
                                 ('o -> 'b) ->
                                   ('p -> 'b) ->
                                     ('q -> 'b) ->
                                       ('r -> 'b) -> ('s -> 'b) -> 'd -> ...
    val ap2:
       ('a -> 'b list -> 'c) ->
         'a -> ('d -> 'b) -> ('e -> 'b) -> 'd -> 'e -> 'c
    val ap3:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) -> ('e -> 'b) -> ('f -> 'b) -> 'd -> 'e -> 'f -> 'c
    val ap4:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) -> ('g -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'c
    val ap5:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'h -> 'c
    val ap6:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) ->
                     ('i -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'h -> 'i -> 'c
    val app: abr_string -> semi_term_0 list -> semi_term_0
    val app0: abr_string -> semi_term_0 list -> semi_term
    val app_pair: semi_term_0 -> semi_term_0 list -> semi_term_0
    val app_rev: 'a -> ('a -> 'b) -> 'b
    val append: 'a list -> 'a list -> 'a list
    val apply: semi_term_0 -> semi_term_0 list -> semi_term_0
    val apply_end: semi_method list -> semi_command_state
    val apply_optim_ass_arity: 'a ocl_ty_class_ext -> 'b -> 'b option
    val applya: semi_method list -> semi_command_proof
    val apsnd: ('a -> 'b) -> 'c * 'a -> 'c * 'b
    val ar1: ('a -> 'b list -> 'c) -> 'a -> 'b -> 'c
    val ar2: ('a -> 'b list -> 'c) -> 'a -> ('d -> 'b) -> 'd -> 'b -> 'c
    val ar3:
       ('a -> 'b list -> 'c) ->
         'a -> ('d -> 'b) -> ('e -> 'b) -> 'd -> 'e -> 'b -> 'c
    val arrange_ass:
       bool ->
         bool ->
           all_meta_embedding list ->
             ocl_enum list ->
               unit ocl_class_raw_ext list * unit ocl_association_ext list
    val ascii_of_literal: string -> int
    datatype asmblock
    =
         Asmblock of
             abr_string * (abr_string option * (abr_string * expr)) list *
             (abr_string option * (abr_string * expr)) list *
             abr_string list
    val assemblyOperand:
       'a cAssemblyOperand list ->
         (abr_string option * (abr_string * expr)) list
    val assoc: 'a equal -> 'a -> ('a * 'b) list -> 'b option
    val assoca: abr_string -> (string_b_a_s_e * 'a) list -> 'a option
    val attrs:
       nodeInfo cDeclarationSpecifier list ->
         nodeInfo cDerivedDeclarator list ->
           nodeInfo cAttribute list ->
             ((comment list * (abr_string * int, (int * int) list) alist) *
              (positiona * int) option)
             *
             (positiona * int)
               -> fnspec list
    val attrs0: nodeInfo cAttribute -> gcc_attribute
    val auto: semi_method
    val auto_simp_add: abr_string list -> semi_method
    val auto_simp_add2:
       semi_thm_attribute list -> abr_string list -> semi_method
    val auto_simp_add_split:
       semi_thm_attribute list -> abr_string list -> semi_method
    val aux_b_r_e_a_d_t_h:
       'a ->
         ('a, 'a * 'b list) print_iskindof_up_istypeof_output list ->
           ('a * ('b * bool) list) list ->
             ('b * bool) list ->
               ('a, 'a * 'b list) print_iskindof_up_istypeof_output list
    val aux_d_e_p_t_h:
       ('a * ('b * bool) list) list ->
         ('a, 'a * 'b list) print_iskindof_up_istypeof_output list
    val axiomatization: axiomatization -> all_meta
    datatype axiomatization = Axiomatization of abr_string * semi_terma
    val base255: abr_string -> abr_string
    datatype base_inttype
    = Charb | Double | Float | Inta | Long | LongLong | Short
    val basic: abr_string list -> semi_term_0
    val bin_last: inta -> bool
    val bin_rest: inta -> inta
    val bin_to_bl: nat -> inta -> bool list
    val bin_to_bl_aux: nat -> inta -> bool list -> bool list
    val binaryOp: cBinaryOp -> binoptype
    val bind: ('a -> 'b option) -> ('b list -> 'c) -> 'a list -> 'c option
    val bind2: ('a, 'b * 'c) sum -> ('b -> 'd) -> ('a, 'd * 'c) sum
    val bind3:
       ('a -> ('b, 'c * 'd) sum) -> ('c -> 'e) -> 'a -> ('b, 'e * 'd) sum
    val bind_e_r_r:
       'a print_examp_instance_draw_list_attra ->
         ('a -> 'b print_examp_instance_draw_list_attra) ->
           'b print_examp_instance_draw_list_attra
    val bind_k: ('a -> ('b, 'c * 'd) sum) -> 'e -> 'a -> ('b, 'e * 'd) sum
    val binda: 'a option -> ('a -> 'b option) -> 'b option
    val bindb: ('a -> 'b * 'c) -> ('c -> 'b -> 'd) -> 'a -> 'd
    val bindc: ('a, 'b) sum -> ('b -> ('a, 'c) sum) -> ('a, 'c) sum
    val bindd:
       ('a list -> (char list, 'b * 'a list) sum) ->
         ('b -> 'a list -> (char list, 'c * 'a list) sum) ->
           'a list -> (char list, 'c * 'a list) sum
    val binop: semi_term_0 -> abr_string -> semi_term_0 -> semi_term_0
    val binop_l: abr_string -> semi_term_0 list -> semi_term_0
    datatype binoptype
    =
         BitwiseAnd
       | BitwiseOr
       | BitwiseXOr
       | Divides
       | Equals
       | Geq
       | Gt
       | LShift
       | Leq
       | LogAnd
       | LogOr
       | Lt
       | Minus
       | Modulus
       | NotEquals
       | Plus
       | RShift
       | Times
    val binoptype_of_CAssignOp: cAssignOp -> binoptype option
    datatype 'a bit0 = Abs_bit0 of inta
    val bit_cut_integer: int -> int * bool
    val blast: Code_Numeral.natural option -> semi_method
    datatype block_item
    = BI_Decl of declaration region_Wrap | BI_Stmt of statement
    val block_item_list:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list ->
           nodeInfo -> block_item list region_Wrap
    val block_item_list0:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list ->
           (positiona * int) * (positiona * int) -> block_item list
    val block_item_list0a:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list -> nodeInfo -> block_item list
    val bogus: sourcePos
    val bogwrap: 'a -> 'a region_Wrap
    datatype boot_generation_syntax
    = Boot_generation_syntax of generation_semantics_ocl
    datatype boot_setup_env = Boot_setup_env of unit compiler_env_config_ext
    val bootstrap_floor:
       all_meta list ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val bootstrap_floora:
       ('a ->
          unit compiler_env_config_ext ->
            all_meta list * (unit compiler_env_config_ext -> 'b))
         ->
         'a ->
           unit compiler_env_config_ext ->
             (all_meta list * unit compiler_env_config_ext) *
             (unit compiler_env_config_ext -> 'b)
    val builtinPosition: positiona
    val bulkload: 'a equal -> ('a * 'b) list -> ('a, 'b) alist
    val by: semi_method list -> semi_command_final
    val cAddAssOp: cAssignOp
    val cAddOp: cBinaryOp
    val cAdrOp: cUnaryOp
    val cAlignAsExpr: 'a cExpression -> 'a -> 'a cAlignmentSpecifier
    val cAlignAsType: 'a cDeclaration -> 'a -> 'a cAlignmentSpecifier
    val cAlignSpec: 'a cAlignmentSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cAlignmentSpecifier
    =
         CAlignAsExpr0 of 'a cExpression * 'a
       | CAlignAsType0 of 'a cDeclaration * 'a
    val cAlignofExpr: 'a cExpression -> 'a -> 'a cExpression
    val cAlignofType: 'a cDeclaration -> 'a -> 'a cExpression
    val cAndAssOp: cAssignOp
    val cAndOp: cBinaryOp
    val cArrDeclr:
       'a cTypeQualifier list ->
         'a cArraySize -> 'a -> 'a cDerivedDeclarator
    val cArrDesig: 'a cExpression -> 'a -> 'a cPartDesignator
    val cArrSize: bool -> 'a cExpression -> 'a cArraySize
    datatype 'a cArraySize
    = CArrSize0 of bool * 'a cExpression | CNoArrSize0 of bool
    val cAsm: 'a cAssemblyStatement -> 'a -> 'a cStatement
    val cAsmExt: 'a cStringLiteral -> 'a -> 'a cExternalDeclaration
    val cAsmOperand:
       ident optiona ->
         'a cStringLiteral -> 'a cExpression -> 'a -> 'a cAssemblyOperand
    val cAsmStmt:
       'a cTypeQualifier optiona ->
         'a cStringLiteral ->
           'a cAssemblyOperand list ->
             'a cAssemblyOperand list ->
               'a cStringLiteral list -> 'a -> 'a cAssemblyStatement
    datatype 'a cAssemblyOperand
    =
         CAsmOperand0 of
             ident optiona * 'a cStringLiteral * 'a cExpression * 'a
    datatype 'a cAssemblyStatement
    =
         CAsmStmt0 of
             'a cTypeQualifier optiona * 'a cStringLiteral *
             'a cAssemblyOperand list * 'a cAssemblyOperand list *
             'a cStringLiteral list * 'a
    val cAssign:
       cAssignOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val cAssignOp: cAssignOp
    datatype cAssignOp
    =
         CAddAssOp0
       | CAndAssOp0
       | CAssignOp0
       | CDivAssOp0
       | CMulAssOp0
       | COrAssOp0
       | CRmdAssOp0
       | CShlAssOp0
       | CShrAssOp0
       | CSubAssOp0
       | CXorAssOp0
    val cAtomicQual: 'a -> 'a cTypeQualifier
    val cAtomicType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val cAttr: ident -> 'a cExpression list -> 'a -> 'a cAttribute
    val cAttrQual: 'a cAttribute -> 'a cTypeQualifier
    datatype 'a cAttribute = CAttr0 of ident * 'a cExpression list * 'a
    val cAuto: 'a -> 'a cStorageSpecifier
    val cBinary:
       cBinaryOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    datatype cBinaryOp
    =
         CAddOp0
       | CAndOp0
       | CDivOp0
       | CEqOp0
       | CGeqOp0
       | CGrOp0
       | CLeOp0
       | CLeqOp0
       | CLndOp0
       | CLorOp0
       | CMulOp0
       | CNeqOp0
       | COrOp0
       | CRmdOp0
       | CShlOp0
       | CShrOp0
       | CSubOp0
       | CXorOp0
    val cBlockDecl: 'a cDeclaration -> 'a cCompoundBlockItem
    val cBlockStmt: 'a cStatement -> 'a cCompoundBlockItem
    val cBoolType: 'a -> 'a cTypeSpecifier
    val cBreak: 'a -> 'a cStatement
    val cBuiltinExpr: 'a cBuiltinThing -> 'a cExpression
    val cBuiltinOffsetOf:
       'a cDeclaration -> 'a cPartDesignator list -> 'a -> 'a cBuiltinThing
    datatype 'a cBuiltinThing
    =
         CBuiltinOffsetOf0 of 'a cDeclaration * 'a cPartDesignator list * 'a
       | CBuiltinTypesCompatible0 of 'a cDeclaration * 'a cDeclaration * 'a
       | CBuiltinVaArg0 of 'a cExpression * 'a cDeclaration * 'a
    val cBuiltinTypesCompatible:
       'a cDeclaration -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val cBuiltinVaArg:
       'a cExpression -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val cCall: 'a cExpression -> 'a cExpression list -> 'a -> 'a cExpression
    val cCase: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cCases:
       'a cExpression ->
         'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cCast: 'a cDeclaration -> 'a cExpression -> 'a -> 'a cExpression
    val cChar: char -> bool -> cChar
    datatype cChar = CChar0 of char * bool | CChars0 of char list * bool
    val cCharConst: cChar -> 'a -> 'a cConstant
    val cCharType: 'a -> 'a cTypeSpecifier
    val cChars: char list -> bool -> cChar
    val cComma: 'a cExpression list -> 'a -> 'a cExpression
    val cCompOp: cUnaryOp
    val cComplexImag: 'a cExpression -> 'a -> 'a cExpression
    val cComplexReal: 'a cExpression -> 'a -> 'a cExpression
    val cComplexType: 'a -> 'a cTypeSpecifier
    val cCompound:
       ident list -> 'a cCompoundBlockItem list -> 'a -> 'a cStatement
    datatype 'a cCompoundBlockItem
    =
         CBlockDecl0 of 'a cDeclaration
       | CBlockStmt0 of 'a cStatement
       | CNestedFunDef0 of 'a cFunctionDef
    val cCompoundLit:
       'a cDeclaration ->
         ('a cPartDesignator list * 'a cInitializer) list ->
           'a -> 'a cExpression
    val cCond:
       'a cExpression ->
         'a cExpression optiona -> 'a cExpression -> 'a -> 'a cExpression
    val cConst: 'a cConstant -> 'a cExpression
    val cConstQual: 'a -> 'a cTypeQualifier
    datatype 'a cConstant
    =
         CCharConst0 of cChar * 'a
       | CFloatConst0 of cFloat * 'a
       | CIntConst0 of cInteger * 'a
       | CStrConst0 of cString * 'a
    val cCont: 'a -> 'a cStatement
    val cDecl:
       'a cDeclarationSpecifier list ->
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
           -> 'a -> 'a cDeclaration
    val cDeclExt: 'a cDeclaration -> 'a cExternalDeclaration
    datatype 'a cDeclaration
    =
         CDecl0 of
             'a cDeclarationSpecifier list *
             (('a cDeclarator optiona * 'a cInitializer optiona) *
              'a cExpression optiona
             )
             list
             *
             'a
       | CStaticAssert0 of 'a cExpression * 'a cStringLiteral * 'a
    datatype 'a cDeclarationSpecifier
    =
         CAlignSpec0 of 'a cAlignmentSpecifier
       | CFunSpec0 of 'a cFunctionSpecifier
       | CStorageSpec0 of 'a cStorageSpecifier
       | CTypeQual0 of 'a cTypeQualifier
       | CTypeSpec0 of 'a cTypeSpecifier
    datatype 'a cDeclarator
    =
         CDeclr0 of
             ident optiona * 'a cDerivedDeclarator list *
             'a cStringLiteral optiona * 'a cAttribute list * 'a
    val cDeclr:
       ident optiona ->
         'a cDerivedDeclarator list ->
           'a cStringLiteral optiona ->
             'a cAttribute list -> 'a -> 'a cDeclarator
    val cDefault: 'a cStatement -> 'a -> 'a cStatement
    datatype 'a cDerivedDeclarator
    =
         CArrDeclr0 of 'a cTypeQualifier list * 'a cArraySize * 'a
       | CFunDeclr0 of
           (ident list, 'a cDeclaration list * bool) either *
           'a cAttribute list * 'a
       | CPtrDeclr0 of 'a cTypeQualifier list * 'a
    val cDivAssOp: cAssignOp
    val cDivOp: cBinaryOp
    val cDoubleType: 'a -> 'a cTypeSpecifier
    val cEnum:
       ident optiona ->
         (ident * 'a cExpression optiona) list optiona ->
           'a cAttribute list -> 'a -> 'a cEnumeration
    val cEnumType: 'a cEnumeration -> 'a -> 'a cTypeSpecifier
    datatype 'a cEnumeration
    =
         CEnum0 of
             ident optiona * (ident * 'a cExpression optiona) list optiona *
             'a cAttribute list * 'a
    val cEqOp: cBinaryOp
    val cExpr: 'a cExpression optiona -> 'a -> 'a cStatement
    datatype 'a cExpression
    =
         CAlignofExpr0 of 'a cExpression * 'a
       | CAlignofType0 of 'a cDeclaration * 'a
       | CAssign0 of cAssignOp * 'a cExpression * 'a cExpression * 'a
       | CBinary0 of cBinaryOp * 'a cExpression * 'a cExpression * 'a
       | CBuiltinExpr0 of 'a cBuiltinThing
       | CCall0 of 'a cExpression * 'a cExpression list * 'a
       | CCast0 of 'a cDeclaration * 'a cExpression * 'a
       | CComma0 of 'a cExpression list * 'a
       | CComplexImag0 of 'a cExpression * 'a
       | CComplexReal0 of 'a cExpression * 'a
       | CCompoundLit0 of
           'a cDeclaration *
           ('a cPartDesignator list * 'a cInitializer) list * 'a
       | CCond0 of
           'a cExpression * 'a cExpression optiona * 'a cExpression * 'a
       | CConst0 of 'a cConstant
       | CGenericSelection0 of
           'a cExpression *
           ('a cDeclaration optiona * 'a cExpression) list * 'a
       | CIndex0 of 'a cExpression * 'a cExpression * 'a
       | CLabAddrExpr0 of ident * 'a
       | CMember0 of 'a cExpression * ...
       | CSizeofExpr0 of ...
       | ...
    val cExtern: 'a -> 'a cStorageSpecifier
    datatype 'a cExternalDeclaration
    =
         CAsmExt0 of 'a cStringLiteral * 'a
       | CDeclExt0 of 'a cDeclaration
       | CFDefExt0 of 'a cFunctionDef
    val cFDefExt: 'a cFunctionDef -> 'a cExternalDeclaration
    val cFloat: abr_string -> cFloat
    datatype cFloat = CFloat0 of abr_string
    val cFloatConst: cFloat -> 'a -> 'a cConstant
    val cFloatType: 'a -> 'a cTypeSpecifier
    val cFor:
       ('a cExpression optiona, 'a cDeclaration) either ->
         'a cExpression optiona ->
           'a cExpression optiona -> 'a cStatement -> 'a -> 'a cStatement
    val cFunDeclr:
       (ident list, 'a cDeclaration list * bool) either ->
         'a cAttribute list -> 'a -> 'a cDerivedDeclarator
    val cFunDef:
       'a cDeclarationSpecifier list ->
         'a cDeclarator ->
           'a cDeclaration list -> 'a cStatement -> 'a -> 'a cFunctionDef
    val cFunSpec: 'a cFunctionSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cFunctionDef
    =
         CFunDef0 of
             'a cDeclarationSpecifier list * 'a cDeclarator *
             'a cDeclaration list * 'a cStatement * 'a
    datatype 'a cFunctionSpecifier
    = CInlineQual0 of 'a | CNoreturnQual0 of 'a
    val cGenericSelection:
       'a cExpression ->
         ('a cDeclaration optiona * 'a cExpression) list ->
           'a -> 'a cExpression
    val cGeqOp: cBinaryOp
    val cGoto: ident -> 'a -> 'a cStatement
    val cGotoPtr: 'a cExpression -> 'a -> 'a cStatement
    val cGrOp: cBinaryOp
    val cIf:
       'a cExpression ->
         'a cStatement -> 'a cStatement optiona -> 'a -> 'a cStatement
    val cIndOp: cUnaryOp
    val cIndex: 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val cInitExpr: 'a cExpression -> 'a -> 'a cInitializer
    val cInitList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         'a -> 'a cInitializer
    datatype 'a cInitializer
    =
         CInitExpr0 of 'a cExpression * 'a
       | CInitList0 of ('a cPartDesignator list * 'a cInitializer) list * 'a
    val cInlineQual: 'a -> 'a cFunctionSpecifier
    val cInt128Type: 'a -> 'a cTypeSpecifier
    val cIntConst: cInteger -> 'a -> 'a cConstant
    datatype cIntFlag
    = FlagImag0 | FlagLong0 | FlagLongLong0 | FlagUnsigned0
    datatype cIntRepr = DecRepr0 | HexRepr0 | OctalRepr0
    val cIntType: 'a -> 'a cTypeSpecifier
    val cInteger: int -> cIntRepr -> cIntFlag flags -> cInteger
    datatype cInteger = CInteger0 of int * cIntRepr * cIntFlag flags
    val cLabAddrExpr: ident -> 'a -> 'a cExpression
    val cLabel:
       ident -> 'a cStatement -> 'a cAttribute list -> 'a -> 'a cStatement
    val cLeOp: cBinaryOp
    val cLeqOp: cBinaryOp
    val cLndOp: cBinaryOp
    val cLongType: 'a -> 'a cTypeSpecifier
    val cLorOp: cBinaryOp
    val cMember: 'a cExpression -> ident -> bool -> 'a -> 'a cExpression
    val cMemberDesig: ident -> 'a -> 'a cPartDesignator
    val cMinOp: cUnaryOp
    val cMulAssOp: cAssignOp
    val cMulOp: cBinaryOp
    val cNegOp: cUnaryOp
    val cNeqOp: cBinaryOp
    val cNestedFunDef: 'a cFunctionDef -> 'a cCompoundBlockItem
    val cNoArrSize: bool -> 'a cArraySize
    val cNonnullQual: 'a -> 'a cTypeQualifier
    val cNoreturnQual: 'a -> 'a cFunctionSpecifier
    val cNullableQual: 'a -> 'a cTypeQualifier
    val cOrAssOp: cAssignOp
    val cOrOp: cBinaryOp
    datatype 'a cPartDesignator
    =
         CArrDesig0 of 'a cExpression * 'a
       | CMemberDesig0 of ident * 'a
       | CRangeDesig0 of 'a cExpression * 'a cExpression * 'a
    val cPlusOp: cUnaryOp
    val cPostDecOp: cUnaryOp
    val cPostIncOp: cUnaryOp
    val cPreDecOp: cUnaryOp
    val cPreIncOp: cUnaryOp
    val cPtrDeclr: 'a cTypeQualifier list -> 'a -> 'a cDerivedDeclarator
    val cRangeDesig:
       'a cExpression -> 'a cExpression -> 'a -> 'a cPartDesignator
    val cRegister: 'a -> 'a cStorageSpecifier
    val cRestrQual: 'a -> 'a cTypeQualifier
    val cReturn: 'a cExpression optiona -> 'a -> 'a cStatement
    val cRmdAssOp: cAssignOp
    val cRmdOp: cBinaryOp
    val cSUType: 'a cStructureUnion -> 'a -> 'a cTypeSpecifier
    val cShlAssOp: cAssignOp
    val cShlOp: cBinaryOp
    val cShortType: 'a -> 'a cTypeSpecifier
    val cShrAssOp: cAssignOp
    val cShrOp: cBinaryOp
    val cSignedType: 'a -> 'a cTypeSpecifier
    val cSizeofExpr: 'a cExpression -> 'a -> 'a cExpression
    val cSizeofType: 'a cDeclaration -> 'a -> 'a cExpression
    val cStatExpr: 'a cStatement -> 'a -> 'a cExpression
    datatype 'a cStatement
    =
         CAsm0 of 'a cAssemblyStatement * 'a
       | CBreak0 of 'a
       | CCase0 of 'a cExpression * 'a cStatement * 'a
       | CCases0 of 'a cExpression * 'a cExpression * 'a cStatement * 'a
       | CCompound0 of ident list * 'a cCompoundBlockItem list * 'a
       | CCont0 of 'a
       | CDefault0 of 'a cStatement * 'a
       | CExpr0 of 'a cExpression optiona * 'a
       | CFor0 of
           ('a cExpression optiona, 'a cDeclaration) either *
           'a cExpression optiona * 'a cExpression optiona * 'a cStatement *
           'a
       | CGoto0 of ident * 'a
       | CGotoPtr0 of 'a cExpression * 'a
       | CIf0 of 'a cExpression * 'a cStatement * 'a cStatement optiona * 'a
       | CLabel0 of ident * 'a cStatement * 'a cAttribute list * 'a
       | CReturn0 of 'a cExpression optiona * 'a
       | CSwitch0 of 'a cExpression * 'a cStatement * 'a
       | CWhile0 of 'a cExpression * 'a cStatement * ...
    val cStatic: 'a -> 'a cStorageSpecifier
    val cStaticAssert:
       'a cExpression -> 'a cStringLiteral -> 'a -> 'a cDeclaration
    val cStorageSpec: 'a cStorageSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cStorageSpecifier
    =
         CAuto0 of 'a
       | CExtern0 of 'a
       | CRegister0 of 'a
       | CStatic0 of 'a
       | CThread0 of 'a
       | CTypedef0 of 'a
    val cStrConst: cString -> 'a -> 'a cConstant
    val cStrLit: cString -> 'a -> 'a cStringLiteral
    val cString: abr_string -> bool -> cString
    datatype cString = CString0 of abr_string * bool
    datatype 'a cStringLiteral = CStrLit0 of cString * 'a
    val cStruct:
       cStructTag ->
         ident optiona ->
           'a cDeclaration list optiona ->
             'a cAttribute list -> 'a -> 'a cStructureUnion
    val cStructTag: cStructTag
    datatype cStructTag = CStructTag0 | CUnionTag0
    datatype 'a cStructureUnion
    =
         CStruct0 of
             cStructTag * ident optiona * 'a cDeclaration list optiona *
             'a cAttribute list * 'a
    val cSubAssOp: cAssignOp
    val cSubOp: cBinaryOp
    val cSwitch: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cThread: 'a -> 'a cStorageSpecifier
    val cTranslUnit:
       'a cExternalDeclaration list -> 'a -> 'a cTranslationUnit
    datatype 'a cTranslationUnit
    = CTranslUnit0 of 'a cExternalDeclaration list * 'a
    val cTypeDef: ident -> 'a -> 'a cTypeSpecifier
    val cTypeOfExpr: 'a cExpression -> 'a -> 'a cTypeSpecifier
    val cTypeOfType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val cTypeQual: 'a cTypeQualifier -> 'a cDeclarationSpecifier
    datatype 'a cTypeQualifier
    =
         CAtomicQual0 of 'a
       | CAttrQual0 of 'a cAttribute
       | CConstQual0 of 'a
       | CNonnullQual0 of 'a
       | CNullableQual0 of 'a
       | CRestrQual0 of 'a
       | CVolatQual0 of 'a
    val cTypeSpec: 'a cTypeSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cTypeSpecifier
    =
         CAtomicType0 of 'a cDeclaration * 'a
       | CBoolType0 of 'a
       | CCharType0 of 'a
       | CComplexType0 of 'a
       | CDoubleType0 of 'a
       | CEnumType0 of 'a cEnumeration * 'a
       | CFloatType0 of 'a
       | CInt128Type0 of 'a
       | CIntType0 of 'a
       | CLongType0 of 'a
       | CSUType0 of 'a cStructureUnion * 'a
       | CShortType0 of 'a
       | CSignedType0 of 'a
       | CTypeDef0 of ident * 'a
       | CTypeOfExpr0 of 'a cExpression * 'a
       | CTypeOfType0 of 'a cDeclaration * 'a
       | CUnsigType0 of 'a
       | CVoidType0 of 'a
    val cTypedef: 'a -> 'a cStorageSpecifier
    val cUnary: cUnaryOp -> 'a cExpression -> 'a -> 'a cExpression
    datatype cUnaryOp
    =
         CAdrOp0
       | CCompOp0
       | CIndOp0
       | CMinOp0
       | CNegOp0
       | CPlusOp0
       | CPostDecOp0
       | CPostIncOp0
       | CPreDecOp0
       | CPreIncOp0
    val cUnionTag: cStructTag
    val cUnsigType: 'a -> 'a cTypeSpecifier
    val cVar: ident -> 'a -> 'a cExpression
    val cVoidType: 'a -> 'a cTypeSpecifier
    val cVolatQual: 'a -> 'a cTypeQualifier
    val cWhile:
       'a cExpression -> 'a cStatement -> bool -> 'a -> 'a cStatement
    val cXorAssOp: cAssignOp
    val cXorOp: cBinaryOp
    val case_tac: semi_terma -> semi_method
    val catch_error: ('a, 'b) sum -> ('a -> ('c, 'b) sum) -> ('c, 'b) sum
    datatype char
    = Chara of bool * bool * bool * bool * bool * bool * bool * bool
    val char_of_integer: int -> char
    val check_export_code:
       ('a -> unit) ->
         ('a -> unit) ->
           ('a -> unit) ->
             (abr_string -> unit) ->
               (reporting * 'a) list -> abr_string -> unit
    val check_single:
       abr_string option * (internal_oid * (internal_oid * abr_string) list)
         ->
         (ocl_multiplicity_single * ocl_multiplicity_single option) list ->
           internal_oid list -> (reporting * abr_string) list
    val check_single_ty:
       ('a -> (abr_string -> (ocl_ty * ('b * 'c)) option) * 'd) ->
         (int list, 'e * unit ocl_ty_class_ext) alist ->
           (Code_Numeral.natural -> internal_oid list list list option) ->
             (internal_oid * abr_string) list ->
               internal_oid ->
                 'a * unit ocl_multiplicity_ext ->
                   'a * unit ocl_multiplicity_ext ->
                     (reporting * abr_string) list ->
                       (reporting * abr_string) list
    val choose_0: 'a * 'b -> 'a
    val choose_1: 'a * 'b -> 'b
    val cl_name_to_string: 'a ocl_class_raw_ext -> abr_string
    val clangCVersion: abr_string -> clangCVersion
    datatype clangCVersion = ClangCVersion0 of abr_string
    val clarify: semi_method
    val classRaw_abstract: 'a ocl_class_raw_ext -> bool
    val classRaw_clause: 'a ocl_class_raw_ext -> ocl_ctxt_clause list
    val classRaw_clause_update:
       (ocl_ctxt_clause list -> ocl_ctxt_clause list) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val classRaw_name: 'a ocl_class_raw_ext -> ocl_ty_obj
    val classRaw_name_update:
       (ocl_ty_obj -> ocl_ty_obj) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val classRaw_own: 'a ocl_class_raw_ext -> (abr_string * ocl_ty) list
    val classRaw_own_update:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val class_arity: ocl_class -> Code_Numeral.natural list
    datatype 'a class_output = C_out_OclAny | C_out_simple of 'a
    val class_unflat:
       unit ocl_class_raw_ext list * 'a ocl_association_ext list ->
         ocl_class option
    val class_unflat_aux:
       (int list, (abr_string * ocl_ty) list) alist ->
         (int list, abr_string list) alist ->
           (int list, unit) alist -> abr_string -> ocl_class option
    val class_unflata:
       unit ocl_class_raw_ext list * 'a ocl_association_ext list ->
         ocl_class
    val co1: ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
    val co15:
       ('a -> 'b) ->
         ('c ->
            'd ->
              'e ->
                'f ->
                  'g ->
                    'h ->
                      'i ->
                        'j -> 'k -> 'l -> 'm -> 'n -> 'o -> 'p -> 'q -> 'a)
           ->
           'c ->
             'd ->
               'e ->
                 'f ->
                   'g ->
                     'h ->
                       'i ->
                         'j -> 'k -> 'l -> 'm -> 'n -> 'o -> 'p -> 'q -> 'b
    val co2: ('a -> 'b) -> ('c -> 'd -> 'a) -> 'c -> 'd -> 'b
    val co4:
       ('a -> 'b) ->
         ('c -> 'd -> 'e -> 'f -> 'a) -> 'c -> 'd -> 'e -> 'f -> 'b
    datatype code_reflect
    = Code_reflect of bool * abr_string * abr_string list
    val collapse_mod_attribs: fnspec list -> fnspec list
    val collect_meta_embed:
       all_meta_embedding list ->
         bool * all_meta_embedding list -> all_meta_embedding list
    datatype comment = Commenta of positiona * abr_string * commentFormat
    datatype commentFormat = MultiLine | SingleLine
    val comment_interval:
       comment list * (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> comment list
    datatype 'a comment_type
    =
         Auxupda of char list
       | Calls of char list option list
       | Dont_translate
       | End_spec of char list
       | Fnspeca of (char list * char list) list
       | Ghostupda of char list
       | Invariant of char list
       | Modifies of char list option list
       | OTHER of 'a
       | Owned_by of char list
       | Relspeca of char list
       | Speca of char list * char list
    val comp2: ('a -> 'b) -> ('c -> 'd -> 'a) -> 'c -> 'd -> 'b
    val comp3: ('a -> 'b) -> ('c -> 'd -> 'e -> 'a) -> 'c -> 'd -> 'e -> 'b
    val comp_env_input_class_bind: ('a -> 'b -> 'b) list -> 'a -> 'b -> 'b
    val comp_env_input_class_mk:
       ((unit -> unit compiler_env_config_ext * 'a) ->
          'b compiler_env_config_ext * 'c)
         ->
         (unit compiler_env_config_ext -> 'c -> 'a) ->
           ((abr_string option ->
               all_meta list ->
                 unit compiler_env_config_ext ->
                   'a -> unit compiler_env_config_ext * 'a)
              -> 'b compiler_env_config_ext * 'c -> 'd)
             ->
             (abr_string option ->
                all_meta list ->
                  unit compiler_env_config_ext ->
                    'a -> unit compiler_env_config_ext * 'a)
               -> 'b compiler_env_config_ext * 'c -> 'd
    val comp_env_input_class_rm:
       ('a -> 'b -> 'c compiler_env_config_ext * 'd) ->
         'a -> 'b -> 'c compiler_env_config_ext * 'd
    val comp_env_save:
       all_meta_embedding ->
         ('a -> 'b -> 'c compiler_env_config_ext * 'd) ->
           'a -> 'b -> 'c compiler_env_config_ext * 'd
    val comp_env_save_deep:
       all_meta_embedding ->
         ('a -> 'b -> unit compiler_env_config_ext * 'c) ->
           'a -> 'b -> unit compiler_env_config_ext * 'c
    val compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> unit compiler_env_config_ext -> 'a
    val compiler_env_config_empty:
       bool ->
         (abr_string * (abr_string list * abr_string)) option ->
           internal_oids ->
             generation_semantics_ocl ->
               generation_lemma_mode option * bool ->
                 unit compiler_env_config_ext
    datatype 'a compiler_env_config_ext
    =
         Compiler_env_config_ext of
             bool * (abr_string * (abr_string list * abr_string)) option *
             internal_oids * (Code_Numeral.natural * Code_Numeral.natural) *
             generation_semantics_ocl * ocl_class option *
             all_meta_embedding list *
             (string_b_a_s_e *
              (unit ocl_instance_single_ext * internal_oids)
             )
             list
             *
             (string_b_a_s_e *
              (internal_oids *
               (abr_string * unit ocl_instance_single_ext)
               ocl_def_state_core
              )
              list
             )
             list
             *
             bool * bool * (string_b_a_s_e list * string_b_a_s_e list) *
             string_b_a_s_e list * string_b_a_s_e list *
             (generation_lemma_mode option * bool) * 'a
    val compiler_env_config_more_map:
       ('a -> 'b) ->
         'a compiler_env_config_ext -> 'b compiler_env_config_ext
    val compiler_env_config_rec:
       (bool ->
          (abr_string * (abr_string list * abr_string)) option ->
            internal_oids ->
              Code_Numeral.natural * Code_Numeral.natural ->
                generation_semantics_ocl ->
                  ocl_class option ->
                    all_meta_embedding list ->
                      (string_b_a_s_e *
                       (unit ocl_instance_single_ext * internal_oids)
                      )
                      list
                        ->
                        (string_b_a_s_e *
                         (internal_oids *
                          (abr_string * unit ocl_instance_single_ext)
                          ocl_def_state_core
                         )
                         list
                        )
                        list
                          ->
                          bool ->
                            bool ->
                              string_b_a_s_e list * string_b_a_s_e list ->
                                string_b_a_s_e list ->
                                  string_b_a_s_e list ->
                                    generation_lemma_mode option * bool ->
                                      'a -> 'b)
         -> 'a compiler_env_config_ext -> 'b
    val compiler_env_config_rec0:
       (bool ->
          (abr_string * (abr_string list * abr_string)) option ->
            internal_oids ->
              Code_Numeral.natural * Code_Numeral.natural ->
                generation_semantics_ocl ->
                  ocl_class option ->
                    all_meta_embedding list ->
                      (string_b_a_s_e *
                       (unit ocl_instance_single_ext * internal_oids)
                      )
                      list
                        ->
                        (string_b_a_s_e *
                         (internal_oids *
                          (abr_string * unit ocl_instance_single_ext)
                          ocl_def_state_core
                         )
                         list
                        )
                        list
                          ->
                          bool ->
                            bool ->
                              string_b_a_s_e list * string_b_a_s_e list ->
                                string_b_a_s_e list ->
                                  string_b_a_s_e list ->
                                    generation_lemma_mode option * bool ->
                                      'a)
         -> 'b compiler_env_config_ext -> 'a
    val compiler_env_config_reset_all:
       'a compiler_env_config_ext ->
         unit compiler_env_config_ext * all_meta_embedding list
    val compiler_env_config_reset_no_env:
       'a compiler_env_config_ext -> unit compiler_env_config_ext
    val compiler_env_config_update:
       (unit compiler_env_config_ext -> unit compiler_env_config_ext) ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val compiler_env_configa:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> 'a
    val concat: 'a list list -> 'a list
    val concatWith:
       (abr_string -> string) -> abr_string list -> string -> string
    val concat_map: ('a -> 'b list) -> 'a list -> 'b list
    val const_mixfix: abr_string -> abr_string -> abr_string
    val const_oclany: abr_string
    val const_oclastype: abr_string
    val const_ocliskindof: abr_string
    val const_oclistypeof: abr_string
    val const_oid: abr_string
    val const_oid_of: abr_string -> abr_string
    val constant: 'a cConstant -> literalconstant_node region_Wrap
    val consts: consts -> all_meta
    datatype consts = Consts of abr_string * semi_typ * abr_string
    val consts_raw0:
       abr_string ->
         semi_typ -> abr_string -> Code_Numeral.natural option -> consts
    val consts_value: abr_string
    val constsa: abr_string -> semi_typ -> abr_string -> consts
    val cross_abs:
       (abr_string -> semi_terma -> semi_terma) ->
         nat -> terma -> semi_terma
    val cross_abs_aux:
       (abr_string -> semi_terma -> semi_terma) ->
         abr_string list -> nat * terma -> semi_terma
    val ctxt_clause: 'a ocl_ctxt_ext -> ocl_ctxt_clause list
    val ctxt_clause_update:
       (ocl_ctxt_clause list -> ocl_ctxt_clause list) ->
         'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val ctxt_expr: 'a ocl_ctxt_pre_post_ext -> ocl_ctxt_term_pp list
    val ctxt_expr_update:
       (ocl_ctxt_term_pp list -> ocl_ctxt_term_pp list) ->
         'a ocl_ctxt_pre_post_ext -> 'a ocl_ctxt_pre_post_ext
    val ctxt_fun_name: 'a ocl_ctxt_pre_post_ext -> abr_string
    val ctxt_fun_ty: 'a ocl_ctxt_pre_post_ext -> ocl_ty
    val ctxt_fun_ty_arg:
       'a ocl_ctxt_pre_post_ext -> (abr_string * ocl_ty) list
    val ctxt_fun_ty_out: 'a ocl_ctxt_pre_post_ext -> ocl_ty option
    val ctxt_param: 'a ocl_ctxt_ext -> abr_string list
    val ctxt_ty: 'a ocl_ctxt_ext -> ocl_ty_obj
    datatype 'a ctype
    =
         Array of 'a ctype * 'a option
       | Bitfield of bool * 'a
       | Bool
       | EnumTy of abr_string option
       | Function of 'a ctype * 'a ctype list
       | Identa of abr_string
       | PlainChar
       | Ptr of 'a ctype
       | Signed of base_inttype
       | StructTy of abr_string
       | UnionTy of abr_string
       | Unsigned of base_inttype
       | Void
    val current_parsing_style: parsing_style
    val d_hsk_constr: 'a compiler_env_config_ext -> string_b_a_s_e list
    val d_hsk_constr_update:
       (string_b_a_s_e list -> string_b_a_s_e list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_class: 'a compiler_env_config_ext -> ocl_class option
    val d_input_class_update:
       (ocl_class option -> ocl_class option) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_instance:
       'a compiler_env_config_ext ->
         (string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
         list
    val d_input_instance_update:
       ((string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
        list
          ->
          (string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
          list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_meta: 'a compiler_env_config_ext -> all_meta_embedding list
    val d_input_meta_update:
       (all_meta_embedding list -> all_meta_embedding list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_state:
       'a compiler_env_config_ext ->
         (string_b_a_s_e *
          (internal_oids *
           (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
          )
          list
         )
         list
    val d_input_state_update:
       ((string_b_a_s_e *
         (internal_oids *
          (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
         )
         list
        )
        list
          ->
          (string_b_a_s_e *
           (internal_oids *
            (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
           )
           list
          )
          list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_HO_type: 'a compiler_env_config_ext -> string_b_a_s_e list
    val d_ocl_HO_type_update:
       (string_b_a_s_e list -> string_b_a_s_e list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_accessor:
       'a compiler_env_config_ext ->
         string_b_a_s_e list * string_b_a_s_e list
    val d_ocl_accessor_update:
       (string_b_a_s_e list * string_b_a_s_e list ->
          string_b_a_s_e list * string_b_a_s_e list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_oid_start: 'a compiler_env_config_ext -> internal_oids
    val d_ocl_oid_start_update:
       (internal_oids -> internal_oids) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_semantics:
       'a compiler_env_config_ext -> generation_semantics_ocl
    val d_ocl_semantics_update:
       (generation_semantics_ocl -> generation_semantics_ocl) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_auto_bootstrap: 'a compiler_env_config_ext -> bool
    val d_output_auto_bootstrap_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_disable_thy: 'a compiler_env_config_ext -> bool
    val d_output_disable_thy_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_header_force: 'a compiler_env_config_ext -> bool
    val d_output_header_force_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_header_thy:
       'a compiler_env_config_ext ->
         (abr_string * (abr_string list * abr_string)) option
    val d_output_header_thy_update:
       ((abr_string * (abr_string list * abr_string)) option ->
          (abr_string * (abr_string list * abr_string)) option)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_position:
       'a compiler_env_config_ext ->
         Code_Numeral.natural * Code_Numeral.natural
    val d_output_position_update:
       (Code_Numeral.natural * Code_Numeral.natural ->
          Code_Numeral.natural * Code_Numeral.natural)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_sorry_dirty:
       'a compiler_env_config_ext -> generation_lemma_mode option * bool
    val d_output_sorry_dirty_update:
       (generation_lemma_mode option * bool ->
          generation_lemma_mode option * bool)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val datatype_constr_name: abr_string
    val datatype_constr_namea: abr_string
    val datatype_ext_constr_name: abr_string
    val datatype_ext_constr_namea: abr_string
    val datatype_ext_name: abr_string
    val datatype_ext_namea: abr_string
    val datatype_ext_nameb: abr_string
    val datatype_in: abr_string
    val datatype_name: abr_string
    val datatype_namea: abr_string
    val datatypea: datatypea -> all_meta
    datatype datatypea
    =
         Datatypea of
             semi_datatype_version *
             ((abr_string * abr_string list) *
              (abr_string * semi_typ list) list
             )
             list
    val datatypeb:
       abr_string -> (abr_string * semi_typ list) list -> datatypea
    val decRepr: cIntRepr
    val decl_spec:
       nodeInfo cDeclarationSpecifier list ->
         ((nodeInfo cDeclarator optiona * nodeInfo cInitializer optiona) *
          'a
         )
         list
         *
         (positiona * int)
           ->
           ((comment list * (abr_string * int, (int * int) list) alist) *
            (positiona * int) option)
           *
           (positiona * int)
             -> declaration list
    val decl_spec0:
       'a cDeclarationSpecifier list ->
         ((nodeInfo cDeclarator optiona * 'b) * 'c) list * (positiona * int)
           ->
           (ident optiona *
            ('d ctype option *
             (nodeInfo cDerivedDeclarator list *
              ('b *
               ((positiona * int) *
                ((positiona * int) * nodeInfo cAttribute list)))))
            ,
           abr_string *
           ((cStructTag *
             ('a cDeclaration list * ('a cAttribute list * 'a)))
            *
            (abr_string *
             (cStructTag *
              (('a cDeclarator optiona * 'a cInitializer optiona) *
               'a cExpression optiona
              )
              list)
             ,
            'a cDeclarationSpecifier list *
            (('a cDeclarator optiona * 'a cInitializer optiona) *
             'a cExpression optiona
            )
            list
            )
            sum
            list)
           ,
           abr_string *
           (cStructTag * ('a cDeclaration list * ('a cAttribute list * 'a)))
           ,
           ident optiona *
           ('d ctype option * nodeInfo cDerivedDeclarator list)
           ,
           ident optiona *
           (nodeInfo cDerivedDeclarator list *
            (((ident list, nodeInfo cDeclaration list * bool) either *
              (nodeInfo cAttribute list * nodeInfo))
             *
             (nodeInfo cDerivedDeclarator list * nodeInfo cAttribute list)))
           ,
           abr_string option region_Wrap * (abr_string * expr option) list)
           declaration0
           list
    val decl_spec_ty: 'a cDeclarationSpecifier list -> 'b ctype
    val decl_spec_ty_tag: cStructTag -> abr_string -> 'a ctype
    val declaration:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         ->
         (declaration region_Wrap -> 'a) -> nodeInfo cDeclaration -> 'a list
    datatype declaration
    =
         EnumDecl of
             abr_string option region_Wrap *
             (abr_string region_Wrap * expr option) list
       | ExtFnDecl of
           expr ctype * abr_string region_Wrap *
           (expr ctype * abr_string option) list * fnspec list
       | StructDecl of
           abr_string region_Wrap *
           (expr ctype * abr_string region_Wrap) list
       | TypeDecl of (expr ctype * abr_string region_Wrap) list
       | VarDecl of
           expr ctype *
           (abr_string region_Wrap *
            (storage_class list *
             (initializer option * gcc_attribute list)))
    datatype ('a, 'b, 'c, 'd, 'e, 'f) declaration0
    =
         EnumDecl0 of 'f
       | ExtFnDecl0 of 'e
       | StructDecl0_child of 'c
       | StructDecl0_root of 'b
       | TypeDecl0 of 'd
       | VarDecl0 of 'a
    val definition: definition -> all_meta
    datatype definition
    =
         Definition_where1 of
             abr_string * (semi_terma * Code_Numeral.natural) * semi_terma
       | Definition_where2 of abr_string * semi_terma * semi_terma
       | Definitiona of semi_terma
    val definitiona: definition -> semi_theory
    val deref_assocs_list:
       'a equal -> ('b -> 'a list * 'c list) -> 'a -> 'b list -> 'c list
    val deriv_decl_spec:
       'a cDerivedDeclarator list ->
         'a cDeclarationSpecifier list -> expr ctype
    val deriv_decl_spec0:
       'a cDerivedDeclarator list -> expr ctype -> expr ctype
    datatype designator = DesignE of expr | DesignFld of abr_string
    val divide_int: inta -> inta -> inta
    val divide_integer: int -> int -> int
    val divide_nat: nat -> nat -> nat
    val divmod_integer: int -> int -> int * int
    datatype doBlockFragment
    =
         DoGenerator of term * term
       | DoLetStmt of (term * term) list
       | DoQualifier of term
    val done: semi_command_final
    val dot_astype: abr_string -> abr_string
    val dot_iskindof: abr_string -> abr_string
    val dot_istypeof: abr_string -> abr_string
    val dot_oclastype: abr_string
    val dot_ocliskindof: abr_string
    val dot_oclistypeof: abr_string
    val drop: nat -> 'a list -> 'a list
    val dropWhile: ('a -> bool) -> 'a list -> 'a list
    val drule: semi_thm_attribute -> semi_method
    val ebogwrap: expr_node -> expr
    datatype ('a, 'b) either = Left of 'a | Right of 'b
    val elim: semi_thm_attribute -> semi_method
    datatype ('a, 'b) embedding
    =
         Embed_locale of
             ('a -> 'b -> all_meta list * 'b) embedding_fun list *
             ('a -> 'b -> unit semi_locale_ext * 'b) *
             ('a -> 'b -> semi_theory list * 'b) list *
             ('a -> 'b -> all_meta list * 'b) embedding_fun list
       | Embed_theories of
           ('a -> 'b -> all_meta list * 'b) embedding_fun list
    datatype 'a embedding_fun
    = Embedding_fun_info of abr_string * 'a | Embedding_fun_simple of 'a
    val empty: ('a, 'b) alist
    val emptya: ('a, 'b) alist
    val end_comment: char list -> (char list, char list * char list) sum
    val entries: ('a, 'b) alist -> ('a * 'b) list
    val entriesa: (int list, 'a) alist -> (abr_string * 'a) list
    val enumerate: nat -> 'a list -> (nat * 'a) list
    val eoi: 'a show -> 'a list -> (char list, unit * 'a list) sum
    val eq: 'a equal -> 'a -> 'a -> bool
    val equal: abr_string -> abr_string -> bool
    type 'a equal = {equala: 'a -> 'a -> bool}
    val equal_CAssignOp: cAssignOp -> cAssignOp -> bool
    val equal_Region: region -> region -> bool
    val equal_Region_Wrap:
       'a equal -> 'a region_Wrap -> 'a region_Wrap -> bool
    val equal_SourcePos: sourcePos -> sourcePos -> bool
    val equal_StringCvt_radix: stringCvt_radix -> stringCvt_radix -> bool
    val equal_Unsynchronized_ref:
       'a equal -> 'a unsynchronized_ref -> 'a unsynchronized_ref -> bool
    val equal_abr_string: abr_string equal
    val equal_abr_stringa: abr_string -> abr_string -> bool
    val equal_base_inttype: base_inttype -> base_inttype -> bool
    val equal_binoptype: binoptype -> binoptype -> bool
    val equal_bool: bool -> bool -> bool
    val equal_char: char equal
    val equal_chara: char -> char -> bool
    val equal_ctype: 'a equal -> 'a ctype equal
    val equal_ctypea: 'a equal -> 'a ctype -> 'a ctype -> bool
    val equal_designator: designator equal
    val equal_designatora: designator -> designator -> bool
    val equal_expr: expr equal
    val equal_expr_node: expr_node equal
    val equal_expr_nodea: expr_node -> expr_node -> bool
    val equal_expra: expr -> expr -> bool
    val equal_gcc_attribute: gcc_attribute equal
    val equal_gcc_attributea: gcc_attribute -> gcc_attribute -> bool
    val equal_generation_lemma_mode: generation_lemma_mode equal
    val equal_generation_lemma_modea:
       generation_lemma_mode -> generation_lemma_mode -> bool
    val equal_generation_semantics_ocl:
       generation_semantics_ocl -> generation_semantics_ocl -> bool
    val equal_initializer: initializer equal
    val equal_initializera: initializer -> initializer -> bool
    val equal_int: inta -> inta -> bool
    val equal_integer: int equal
    val equal_internal_oid: internal_oid equal
    val equal_internal_oida: internal_oid -> internal_oid -> bool
    val equal_list: 'a equal -> 'a list equal
    val equal_lista: 'a equal -> 'a list -> 'a list -> bool
    val equal_literal: string equal
    val equal_literalconstant_node: literalconstant_node equal
    val equal_literalconstant_nodea:
       literalconstant_node -> literalconstant_node -> bool
    val equal_more_info: more_info equal
    val equal_more_infoa: more_info -> more_info -> bool
    val equal_nat: nat equal
    val equal_nata: nat -> nat -> bool
    val equal_natural: Code_Numeral.natural equal
    val equal_naturala: Code_Numeral.natural -> Code_Numeral.natural -> bool
    val equal_ocl_association_type:
       ocl_association_type -> ocl_association_type -> bool
    val equal_ocl_class: ocl_class equal
    val equal_ocl_classa: ocl_class -> ocl_class -> bool
    val equal_ocl_collection: ocl_collection equal
    val equal_ocl_collectiona: ocl_collection -> ocl_collection -> bool
    val equal_ocl_ctxt_prefix: ocl_ctxt_prefix -> ocl_ctxt_prefix -> bool
    val equal_ocl_multiplicity_ext:
       'a equal ->
         'a ocl_multiplicity_ext -> 'a ocl_multiplicity_ext -> bool
    val equal_ocl_multiplicity_single: ocl_multiplicity_single equal
    val equal_ocl_multiplicity_singlea:
       ocl_multiplicity_single -> ocl_multiplicity_single -> bool
    val equal_ocl_ty: ocl_ty equal
    val equal_ocl_ty_class_ext:
       'a equal -> 'a ocl_ty_class_ext -> 'a ocl_ty_class_ext -> bool
    val equal_ocl_ty_class_node_ext:
       'a equal ->
         'a ocl_ty_class_node_ext -> 'a ocl_ty_class_node_ext -> bool
    val equal_ocl_ty_obj: ocl_ty_obj -> ocl_ty_obj -> bool
    val equal_ocl_ty_obj_core: ocl_ty_obj_core equal
    val equal_ocl_ty_obj_corea: ocl_ty_obj_core -> ocl_ty_obj_core -> bool
    val equal_ocl_tya: ocl_ty -> ocl_ty -> bool
    val equal_opt_attr_type: opt_attr_type equal
    val equal_opt_attr_typea: opt_attr_type -> opt_attr_type -> bool
    val equal_opt_ident: opt_ident equal
    val equal_opt_identa: opt_ident -> opt_ident -> bool
    val equal_option: 'a equal -> 'a option equal
    val equal_optiona: 'a equal -> 'a option -> 'a option -> bool
    val equal_position: position -> position -> bool
    val equal_prod: 'a equal -> 'b equal -> ('a * 'b) equal
    val equal_proda: 'a equal -> 'b equal -> 'a * 'b -> 'a * 'b -> bool
    val equal_string_b_a_s_e: string_b_a_s_e -> string_b_a_s_e -> bool
    val equal_unit: unit equal
    val equal_unita: unit -> unit -> bool
    val equal_unoptype: unoptype -> unoptype -> bool
    val equala: 'a equal -> 'a -> 'a -> bool
    val err_expecting:
       'a show -> char list -> 'a list -> (char list, 'b * 'a list) sum
    val errora: abr_string -> 'a
    val errorb: char list -> 'a list -> (char list, 'b * 'a list) sum
    val erule: semi_thm_attribute -> semi_method
    val escape_sml: abr_string -> abr_string
    val exactly:
       char list -> char list -> (char list, char list * char list) sum
    val exactly_aux:
       'a equal * 'a show ->
         char list ->
           'a list ->
             'a list -> 'a list -> (char list, char list * 'a list) sum
    val explode: string -> char list
    datatype expr = E of expr_node region_Wrap
    val expr_int: int -> expr
    datatype expr_node
    =
         Arbitrary of expr ctype
       | ArrayDeref of expr * expr
       | BinOp of binoptype * expr * expr
       | CompLiteral of expr ctype * (designator list * initializer) list
       | CondExp of expr * expr * expr
       | Constant of literalconstant_node region_Wrap
       | Deref of expr
       | EFnCall of expr * expr list
       | MKBOOL of expr
       | Sizeof of expr
       | SizeofTy of expr ctype region_Wrap
       | StructDot of expr * abr_string
       | TypeCast of expr ctype region_Wrap * expr
       | UnOp of unoptype * expr
       | Vara of abr_string * ... option unsynchronized_ref
    val expression: 'a cExpression -> expr
    val expression0: 'a cExpression -> expr_node
    datatype ext_decl
    =
         Decl of declaration region_Wrap
       | FnDefn of
           (expr ctype * abr_string region_Wrap) *
           (expr ctype * abr_string region_Wrap) list * fnspec list *
           block_item list region_Wrap
    val extend:
       unit compiler_env_config_ext -> 'a -> 'a compiler_env_config_ext
    val external_declaration:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         -> nodeInfo cExternalDeclaration -> ext_decl list
    val extract:
       ('a -> bool) -> 'a list -> ('a list * ('a * 'a list)) option
    val f_less2: 'a list -> ('a * 'a) list
    val fill_blank:
       ('a ->
          (('b ->
              Code_Numeral.natural ->
                ('b * ('c * 'd) option) list ->
                  ('b * ('c * 'd) option) list)
             -> 'e list -> 'f list
          )
          option)
         ->
         ('a * (('c * ('g * opt_ident)) * 'd) list) list ->
           ('a * 'f list) list
    val filter: ('a -> bool) -> 'a list -> 'a list
    val filter_auxupd: comment list -> statement_node option
    val filter_fnspec: comment list -> fnspec list
    val filter_gen:
       (abr_string comment_type -> char list option) ->
         (abr_string -> 'a) -> comment list -> 'a option
    val filter_invariant: comment list -> abr_string region_Wrap option
    val filter_locale_interp:
       (internal_oids * 'a ocl_instance_single_ext) list list ->
         semi_terma list * semi_terma list list
    val filter_ocl_exn:
       abr_string ->
         'a print_examp_instance_draw_list_attra ->
           'a print_examp_instance_draw_list_attra
    val filter_owned_by: comment list -> gcc_attribute option
    val filter_statement:
       comment list ->
         (block_item, (abr_string * abr_string, abr_string) sum) sum list
    val filtera: ('a -> bool) -> 'a list -> 'a list
    val find: ('a -> bool) -> 'a list -> 'a option
    val find_class_ass:
       'a compiler_env_config_ext ->
         all_meta_embedding list * all_meta_embedding list
    val find_inh: abr_string -> ocl_class -> abr_string list
    type 'a finite = {}
    val fix: abr_string list -> semi_command_proof
    val fix_let:
       abr_string list ->
         (semi_terma * semi_terma) list ->
           (semi_terma list * semi_terma list) option ->
             semi_command_state list -> semi_command_proof
    val flagImag: cIntFlag
    val flagLong: cIntFlag
    val flagLongLong: cIntFlag
    val flagUnsigned: cIntFlag
    val flags: int -> 'a flags
    datatype 'a flags = Flags0 of int
    val flatten: 'a list list -> 'a list
    val flattena: abr_string list -> abr_string
    val flattenb: abr_string -> abr_string -> abr_string
    val flip: 'a * 'b -> 'b * 'a
    datatype floor = Floor1 | Floor2 | Floor3
    val floor1_PRINT_ctxt:
       (unit ocl_ctxt_ext ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor1_PRINT_examp_def_st1:
       (ocl_def_state ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor1_PRINT_examp_def_st_typecheck_var:
       (ocl_def_state -> 'a -> all_meta list * 'a) embedding_fun
    val floor1_PRINT_transition:
       (ocl_def_transition ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_inv:
       ('a ocl_ctxt_ext ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_pre_post:
       ('a ocl_ctxt_ext ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_thm:
       ('a ocl_ctxt_ext -> 'b -> all_meta list * 'b) embedding_fun
    val floor2_PRINT_examp_def_st_def_interp:
       (ocl_def_state ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_transition_def_interp:
       (ocl_def_transition ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_transition_lemmas_oid:
       (ocl_def_transition ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    datatype fnspec
    =
         Didnt_translate
       | Fn_modifies of abr_string list
       | Fnspec of abr_string region_Wrap
       | Gcc_attribs of gcc_attribute list
       | Relspec of abr_string region_Wrap
    val fold: ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val foldM: ('a -> 'b -> 'b * 'c) -> 'a list -> 'b -> 'b * 'c list
    val foldM_o:
       ('a -> 'b -> 'b * 'c) -> 'a optiona -> 'b -> 'b * 'c optiona
    val fold_Const: ('a -> abr_string -> 'a) -> 'a -> terma -> 'a
    val fold_Free: ('a -> abr_string -> 'a) -> 'a -> terma -> 'a
    datatype fold_all_input
    = Fold_custom of all_meta list | Fold_meta of all_meta_embedding
    val fold_class:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              ocl_class list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a -> 'b * 'a)
         -> 'a -> ocl_class -> 'b list * 'a
    val fold_class_gen:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                ocl_class list tmp_sub ->
                  ocl_class list -> 'a -> 'b list * 'a)
         -> 'a -> ocl_class -> 'b list * 'a
    val fold_class_gen_aux:
       (ocl_class, unit) inheritance_ext list ->
         ((abr_string -> abr_string) ->
            abr_string ->
              (abr_string * ocl_ty) list ->
                (ocl_class, unit) inheritance_ext list tmp_inh ->
                  ocl_class list tmp_sub -> ocl_class list -> 'a -> 'a)
           -> 'a -> ocl_class -> 'a
    val fold_data_shallow:
       (abr_string -> 'a) ->
         (internal_oid -> 'a) ->
           ('a -> 'b -> 'b) -> ocl_data_shallow -> 'b -> 'b
    val fold_e_r_r:
       (print_examp_instance_draw_list_attr_err -> 'a -> 'a) ->
         print_examp_instance_draw_list_attr_err -> 'a -> 'a
    val fold_instance_single:
       (abr_string ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
            -> 'a -> 'a)
         -> 'b ocl_instance_single_ext -> 'a -> 'a
    val fold_instance_single_name:
       'a ocl_instance_single_ext -> semi_terma list -> semi_terma list
    val fold_instance_singlea:
       (abr_string option ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
            -> 'a -> 'a)
         -> 'b ocl_instance_single_ext -> 'a -> 'a
    val fold_invariant:
       (ocl_ctxt_term_inv -> 'a -> 'a) -> 'b ocl_ctxt_ext -> 'a -> 'a
    val fold_invarianta:
       'a ocl_ctxt_ext -> (abr_string * ocl_ctxt_term) list
    val fold_less2:
       ('a -> 'a) -> ('b -> 'b -> 'a -> 'a) -> 'b list -> 'a -> 'a
    val fold_less_gen:
       ('a -> 'b list -> 'c -> 'd) ->
         ('d -> 'c) -> ('b -> 'a) -> 'b list -> 'd -> 'd
    val fold_list_attr:
       abr_string option ->
         (abr_string option -> 'a -> 'b -> 'b) ->
           'a ocl_list_attr -> 'b -> 'b
    val fold_max:
       (Code_Numeral.natural * 'a ->
          (Code_Numeral.natural * 'a) list -> 'b -> 'b)
         -> 'a list -> 'b -> 'b
    val fold_max_aux:
       ('a -> 'a list -> 'b -> 'b) -> 'a list -> 'a list -> 'b -> 'b
    val fold_pair_var:
       (abr_string * ocl_ty -> 'a -> 'a) -> ocl_ty -> 'a -> 'a option
    val fold_pre_post:
       ((ocl_ctxt_prefix * (abr_string option * ocl_ctxt_term)) list ->
          unit ocl_ctxt_pre_post_ext -> 'a -> 'a)
         -> 'b ocl_ctxt_ext -> 'a -> 'a
    val fold_thy:
       (all_meta_embedding ->
          ((abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext ->
                  'a -> unit compiler_env_config_ext * 'a)
             ->
             unit compiler_env_config_ext * 'a ->
               unit compiler_env_config_ext * 'a)
            ->
            (abr_string option ->
               all_meta list ->
                 'b compiler_env_config_ext ->
                   'c -> 'b compiler_env_config_ext * 'c)
              ->
              'b compiler_env_config_ext * 'c ->
                'b compiler_env_config_ext * 'c)
         ->
         ((unit -> unit compiler_env_config_ext * 'a) ->
            unit compiler_env_config_ext * 'a)
           ->
           (unit compiler_env_config_ext -> 'a -> 'a) ->
             (abr_string option ->
                all_meta list ->
                  'b compiler_env_config_ext ->
                    'c -> 'b compiler_env_config_ext * 'c)
               ->
               fold_all_input ->
                 'b compiler_env_config_ext * 'c ->
                   'b compiler_env_config_ext * 'c
    val fold_thy0:
       'a ->
         ('a, 'b compiler_env_config_ext) embedding ->
           (abr_string option ->
              all_meta list ->
                'b compiler_env_config_ext ->
                  'c -> 'b compiler_env_config_ext * 'c)
             ->
             'b compiler_env_config_ext * 'c ->
               'b compiler_env_config_ext * 'c
    val fold_thy_deep:
       fold_all_input ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val fold_thy_shallow:
       ((unit -> unit compiler_env_config_ext * 'a) ->
          unit compiler_env_config_ext * 'a)
         ->
         (unit compiler_env_config_ext -> 'a -> 'a) ->
           (abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext * 'a ->
                  unit compiler_env_config_ext * 'a)
             ->
             fold_all_input ->
               unit compiler_env_config_ext * 'a ->
                 unit compiler_env_config_ext * 'a
    val fold_thya:
       (all_meta_embedding ->
          ((abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext ->
                  'a -> unit compiler_env_config_ext * 'a)
             ->
             unit compiler_env_config_ext * 'a ->
               unit compiler_env_config_ext * 'a)
            ->
            (abr_string option ->
               all_meta list ->
                 'b compiler_env_config_ext ->
                   'c -> 'b compiler_env_config_ext * 'c)
              ->
              'b compiler_env_config_ext * 'c ->
                'b compiler_env_config_ext * 'c)
         ->
         ((unit -> unit compiler_env_config_ext * 'a) ->
            unit compiler_env_config_ext * 'a)
           ->
           (unit compiler_env_config_ext -> 'a -> 'a) ->
             (abr_string option ->
                all_meta list ->
                  'b compiler_env_config_ext ->
                    'c -> 'b compiler_env_config_ext * 'c)
               ->
               all_meta_embedding list ->
                 'b compiler_env_config_ext * 'c ->
                   'b compiler_env_config_ext * 'c
    val fold_tree: ('a -> 'a -> 'b -> 'b) -> 'a tree -> 'b -> 'b
    val folda: ('a -> 'b -> 'c -> 'c) -> ('a, 'b) alist -> 'c -> 'c
    val foldb:
       (abr_string -> 'a -> 'b -> 'b) -> (int list, 'a) alist -> 'b -> 'b
    val foldl: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val foldl_one: ('a -> int -> 'a) -> 'a -> string -> 'a
    val foldla: ('a -> int -> 'a) -> 'a -> abr_string -> 'a
    val foldlb: ('a -> int -> 'a) -> 'a -> string_b_a_s_e -> 'a
    val foldr: ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val fresh_ident: unit -> abr_string
    val fst: 'a * 'b -> 'a
    val fun_upd: 'a equal -> ('a -> 'b) -> 'a -> 'b -> 'a -> 'b
    val function: (semi_term_0 * semi_term_0) list -> semi_term_0
    datatype function_Kind = Definition | Fun | Function_Sorry | Primrec
    datatype function_Stmt
    =
         Function_Stmt of
             function_Kind * typeSign list *
             ((name * term list) * term) list
    val function_definition:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         -> nodeInfo cFunctionDef -> ext_decl
    val function_definition_params:
       (abr_string -> 'a) -> 'b cDeclaration list -> (expr ctype * 'a) list
    val function_definition_params0:
       ('a cDeclaration -> 'b) -> 'a cDeclaration list -> 'b list
    datatype gcc_attribute
    =
         GCC_AttribFn of abr_string * expr list
       | GCC_AttribID of abr_string
       | OWNED_BY of abr_string
    val gen_length: nat -> 'a list -> nat
    datatype gen_meta
    =
         Gen_apply_hol of abr_string
       | Gen_apply_sml of abr_string
       | Gen_apply_sml_cmd of abr_string * abr_string
       | Gen_no_apply
    val gen_pre_post:
       (abr_string -> abr_string) ->
         ((semi_terma list -> semi_terma) ->
            (semi_terma -> semi_terma) -> abr_string -> semi_terma)
           ->
           (abr_string ->
              semi_terma -> abr_string -> abr_string -> abr_string -> lemma)
             -> semi_method list -> lemma list
    val gen_pre_post0:
       (abr_string -> abr_string) ->
         (abr_string * (bool * semi_terma)) list ->
           ((semi_terma list -> semi_terma) ->
              (semi_terma -> semi_terma) -> abr_string -> semi_terma)
             ->
             (abr_string ->
                (abr_string * (bool * semi_terma)) list ->
                  semi_terma ->
                    abr_string -> abr_string -> abr_string -> lemma)
               -> semi_method list -> lemma list
    val gen_zero: abr_string -> abr_string
    datatype generation_lemma_mode = Gen_no_dirty | Gen_sorry
    datatype generation_semantics_ocl
    = Gen_default | Gen_only_analysis | Gen_only_design
    val get_class_hierarchy:
       ocl_class -> (abr_string * (abr_string * ocl_ty) list) list
    val get_class_hierarchy_aux:
       ocl_class list -> ocl_class -> ocl_class list
    val get_class_hierarchy_strict: ocl_class list -> ocl_class list
    val get_class_hierarchy_strict_aux:
       ocl_class list -> ocl_class list -> ocl_class list
    val get_class_hierarchya: ocl_class -> ocl_class list
    val get_column:
       'a equal ->
         'b plus * 'b ord -> ('a, ('b * 'b) list) alist -> 'a -> 'b -> 'b
    val get_hierarchy_map:
       ('a -> 'b -> 'c -> 'd) ->
         (abr_string list -> 'a list * ('b list * 'c list)) ->
           ocl_class -> 'd list
    val get_state:
       (abr_string *
        (internal_oids *
         (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
        )
        list
          ->
          abr_string *
          (internal_oids *
           (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
          )
          list
            ->
            (abr_string *
             (internal_oids *
              (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
             )
             list
            )
            list
              -> 'a compiler_env_config_ext -> 'b)
         -> ocl_def_transition -> 'a compiler_env_config_ext -> 'b
    val groupBy: ('a -> 'a -> bool) -> 'a list -> 'a list list
    val group_spec:
       (block_item, (abr_string * abr_string, abr_string) sum) sum list ->
         block_item list
    val group_spec_aux1:
       block_item list list ->
         (block_item list, (abr_string * abr_string, abr_string) sum list)
         sum
         list
           -> block_item list
    val group_spec_aux2:
       block_item list list ->
         abr_string * abr_string ->
           block_item list ->
             abr_string ->
               (block_item list,
               (abr_string * abr_string, abr_string) sum list)
               sum
               list
                 -> block_item list
    val has_err_ty: print_examp_instance_draw_list_attr_err -> bool
    val has_invalid: print_examp_instance_draw_list_attr_err -> bool
    val have:
       abr_string -> semi_terma -> semi_command_final -> semi_command_proof
    val have0:
       abr_string ->
         bool -> semi_terma -> semi_command_final -> semi_command_proof
    val hd: 'a list -> 'a
    val head: asmblock -> abr_string
    val hexRepr: cIntRepr
    datatype hide_const = Hide_const of bool * abr_string list
    val holThyLocale_header:
       'a semi_locale_ext ->
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
    val holThyLocale_name: 'a semi_locale_ext -> abr_string
    val hol_definition: abr_string -> abr_string
    val hol_split: abr_string -> abr_string
    val hol_to_sml: semi_terma -> semi_term_0
    val hsk_literal: (abr_string -> semi_terma) -> literal -> semi_terma
    val hsk_name:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_name0:
       (abr_string -> abr_string -> abr_string) ->
         (abr_string * abr_string option) list -> name -> abr_string
    val hsk_namea:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_nameb:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_stmt:
       semi_datatype_version ->
         (abr_string * abr_string option) list ->
           gen_meta -> stmt list -> all_meta list * abr_string list
    val hsk_term:
       'a lexical_ext ->
         (abr_string * abr_string option) list -> term -> semi_terma
    val hsk_term_app:
       'a lexical_ext ->
         (abr_string * abr_string option) list ->
           semi_terma list -> term -> semi_terma
    val hsk_type: (abr_string * abr_string option) list -> typea -> semi_typ
    val hsk_typespec:
       (abr_string * abr_string option) list ->
         typeSpec -> abr_string * abr_string list
    val i: ('a -> semi_theory) -> 'a -> all_meta
    val id: 'a -> 'a
    val ident: ident -> abr_string
    datatype ident = Ident0 of abr_string * int * nodeInfo
    val ident_current: 'a * 'b -> 'b
    val ident_empty: 'a zero -> ('b, 'c) alist * 'a
    val ident_fresh:
       'a equal ->
         'a -> ('a, nat) alist * nat -> nat * (('a, nat) alist * nat)
    val ident_option: ident optiona -> abr_string option
    val ident_struct_const: ident -> abr_string
    val ident_struct_type: ident -> abr_string
    val ident_struct_type0: abr_string -> abr_string
    val identa: ident -> abr_string
    val identb: ident -> 'a ctype
    val identc: abr_string -> int -> nodeInfo -> ident
    val ignore_meta_header: all_meta_embedding -> bool
    val impl_of: ('a, 'b) alist -> ('a * 'b) list
    val in_safe_monad: ('a -> ('b, 'c) sum) -> 'a -> 'c
    val inh: ('a, 'b) inheritance_ext -> 'a
    val inh_sib: ('a, 'b) inheritance_ext -> ('a * 'a list) list
    val inh_sib_unflat: ('a, 'b) inheritance_ext -> 'a list
    datatype ('a, 'b) inheritance_ext
    = Inheritance_ext of 'a * ('a * 'a list) list * 'a list * 'b
    val init_map_class:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           'c ocl_instance_single_ext list ->
             (abr_string ->
                bool *
                ((abr_string ->
                    (ocl_ty * (opt_attr_type * opt_ident)) option)
                 *
                 (opt_attr_type ->
                    ((unit ocl_ty_class_ext option -> 'a -> 'd -> 'd) ->
                       'd -> 'd
                    )
                    option)))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
    val init_map_class2:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           'c ocl_instance_single_ext list ->
             (abr_string ->
                bool *
                ((abr_string ->
                    (ocl_ty * (opt_attr_type * opt_ident)) option)
                 *
                 (opt_attr_type ->
                    ((unit ocl_ty_class_ext option -> 'a -> 'd -> 'd) ->
                       'd -> 'd
                    )
                    option)))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
    val initializer: 'a cInitializer -> initializer
    datatype initializer
    = InitE of expr | InitList of (designator list * initializer) list
    val initializer0:
       ('a cExpression -> 'a cExpression) -> 'a cInitializer -> initializer
    val initializerList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         (designator list * initializer) list
    val insert: 'a equal -> 'a -> 'b -> ('a, 'b) alist -> ('a, 'b) alist
    val insert2:
       'a equal ->
         'b equal ->
           'a * 'b ->
             'c -> ('a, ('b, 'c) alist) alist -> ('a, ('b, 'c) alist) alist
    val insert2a:
       abr_string * abr_string ->
         'a ->
           (int list, (int list, 'a) alist) alist ->
             (int list, (int list, 'a) alist) alist
    val inserta:
       abr_string -> 'a -> (int list, 'a) alist -> (int list, 'a) alist
    val insertb: semi_thm_attribute list -> semi_method
    val inst_attr:
       'a ocl_instance_single_ext ->
         ((abr_string * abr_string) option * (abr_string * ocl_data_shallow)
         )
         list
         ocl_list_attr
    val inst_attr_update:
       (((abr_string * abr_string) option * (abr_string * ocl_data_shallow))
        list
        ocl_list_attr
          ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
          ocl_list_attr)
         -> 'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val inst_attr_with: 'a ocl_instance_single_ext -> abr_string option
    val inst_name: 'a ocl_instance_single_ext -> abr_string
    val inst_name_update:
       (abr_string option -> abr_string option) ->
         'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val inst_namea: 'a ocl_instance_single_ext -> abr_string option
    val inst_ty: 'a ocl_instance_single_ext -> abr_string
    val inst_ty0: 'a ocl_instance_single_ext -> abr_string option
    val inst_tya: 'a ocl_instance_single_ext -> abr_string option
    val instantiation: instantiation -> all_meta
    datatype instantiation
    = Instantiation of abr_string * abr_string * semi_terma
    datatype inta = Int_of_integer of int
    val integer_escape: int
    val integer_of_char: char -> int
    val integer_of_int: inta -> int
    val integer_of_nat: nat -> int
    val integer_to_digit16: int -> abr_string
    val internalPosition: positiona
    datatype internal_oid = Oid of Code_Numeral.natural
    datatype internal_oids
    =
         Oids of
             Code_Numeral.natural * Code_Numeral.natural *
             Code_Numeral.natural
    val interpretation: interpretation -> all_meta
    datatype interpretation
    =
         Interpretation of
             abr_string * abr_string * semi_terma list * semi_command_final
    val interpretationa: interpretation -> semi_theory
    val intro: semi_thm_attribute list -> semi_method
    val is_digit: int -> bool
    val is_empty: abr_string -> bool
    val is_emptya: ('a, 'b) alist -> bool
    val is_emptyb: string_b_a_s_e -> bool
    val is_higher_order: ocl_ty -> bool
    val is_letter: int -> bool
    val is_none: 'a option -> bool
    val is_sequence: 'a ocl_multiplicity_ext -> bool
    val is_special: int -> bool
    datatype isaUnit
    =
         IsaUnit of
             (bool * Code_Numeral.natural) *
             (abr_string * abr_string option) list * gen_meta * abr_string *
             (module list * bool)
    val isabelle_apply: abr_string -> abr_string list -> abr_string
    val isabelle_of_compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> 'a
    val isub: abr_string -> abr_string
    val isup: abr_string -> abr_string
    datatype 'a itself = Type
    val k: 'a -> 'b -> 'a
    val keys: ('a, 'b) alist -> 'a list
    val keys_empty: ('a list -> 'b) -> bool * ('a, 'c) alist -> 'b list
    val keys_emptya:
       ('a list -> 'b) -> bool * ('a list * ('c, 'd) alist) -> 'b list
    val l_fold:
       (('a -> 'b -> all_meta list * 'b) embedding_fun -> 'c -> 'c) ->
         ('a, 'b) embedding -> 'c -> 'c
    val last: 'a list -> 'a
    val lemma: lemma -> all_meta
    datatype lemma
    =
         Lemma of
             abr_string * semi_terma list * semi_method list list *
             semi_command_final
       | Lemma_assumes of
           abr_string * (abr_string * (bool * semi_terma)) list *
           semi_terma * semi_command_proof list * semi_command_final
    val lemmaa: lemma -> semi_theory
    val lemmas: lemmas -> all_meta
    datatype lemmas
    =
         Lemmas_simp_thm of bool * abr_string * semi_thm_attribute list
       | Lemmas_simp_thms of abr_string * abr_string list
    val lemmas_nosimp: abr_string -> semi_thm_attribute list -> lemmas
    val lemmas_simp: abr_string -> semi_thm_attribute list -> lemmas
    val lemmasa: lemmas -> semi_theory
    type 'a len0 = {len_of: 'a itself -> nat}
    val len0_bit0: 'a len0 -> 'a bit0 len0
    val len0_num1: num1 len0
    val len_of: 'a len0 -> 'a itself -> nat
    val len_of_bit0: 'a len0 -> 'a bit0 itself -> nat
    val len_of_num1: num1 itself -> nat
    val length: abr_string -> nat
    val less: 'a ord -> 'a -> 'a -> bool
    val less_eq: 'a ord -> 'a -> 'a -> bool
    val less_eq_nat: nat -> nat -> bool
    val less_eq_natural:
       Code_Numeral.natural -> Code_Numeral.natural -> bool
    val less_int: inta -> inta -> bool
    val less_nat: nat -> nat -> bool
    val less_natural: Code_Numeral.natural -> Code_Numeral.natural -> bool
    val let_open: abr_string -> semi_term_0 -> semi_term_0
    val letb: semi_terma -> semi_terma -> semi_command_proof
    val lex_bool_false: 'a lexical_ext -> abr_string
    val lex_list_cons: 'a lexical_ext -> abr_string
    val lex_string: 'a lexical_ext -> abr_string -> semi_terma
    datatype 'a lexical_ext
    =
         Lexical_ext of
             abr_string * abr_string * (abr_string -> semi_terma) * 'a
    datatype listComprFragment = Generator of term * term | Guard of term
    val list_all: ('a -> bool) -> 'a list -> bool
    val list_bind_e_r_r:
       ('a -> 'b print_examp_instance_draw_list_attra) ->
         ('b list -> 'c) ->
           'a list -> 'c print_examp_instance_draw_list_attra
    val list_ex: ('a -> bool) -> 'a list -> bool
    val list_iterM: ('a -> unit option) -> 'a list -> unit option
    val lista: semi_term_0 list -> semi_term_0
    val listb: ('a -> semi_term_0) -> 'a list -> semi_term_0
    datatype literal = Int of Code_Numeral.natural | Stringa of abr_string
    datatype literalconstant_node
    =
         NUMCONST of int * abr_string * stringCvt_radix
       | STRING_LIT of abr_string
    val lookup: 'a equal -> ('a, 'b) alist -> 'a -> 'b option
    val lookup2:
       'a equal ->
         'b equal -> ('a, ('b, 'c) alist) alist -> 'a * 'b -> 'c option
    val lookup2a:
       (int list, (int list, 'a) alist) alist ->
         abr_string * abr_string -> 'a option
    val lookupa: 'a equal -> ('a, 'b) alist -> 'a -> 'b option
    val lookupb: (int list, 'a) alist -> abr_string -> 'a option
    val lowercase: abr_string -> abr_string
    val m_class:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'a list -> 'b list)
           ->
           (position ->
              (abr_string -> abr_string) *
              (abr_string * (abr_string * ocl_ty) list)
                -> ocl_class -> 'a list)
             -> ocl_class -> 'b list
    val m_class3_GE:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           (abr_string -> abr_string -> abr_string -> 'a) ->
             ocl_class -> 'b list
    val m_class_default: 'a -> 'b -> 'c -> 'd -> 'd
    val m_class_gen2:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'a list -> 'b list)
           ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  position ->
                    (abr_string -> abr_string) *
                    (abr_string * (abr_string * ocl_ty) list)
                      -> ocl_class -> 'a list)
             -> ocl_class -> 'b list
    val m_class_gen3:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  abr_string -> abr_string -> abr_string -> 'a)
             -> ocl_class -> 'b list
    val m_class_gen3_GE:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  abr_string -> abr_string -> abr_string -> 'a)
             -> ocl_class -> 'b list
    val m_classa:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (position ->
            (abr_string -> abr_string) *
            (abr_string * (abr_string * ocl_ty) list)
              -> ocl_class -> 'a)
           -> ocl_class -> 'a list
    val main:
       nodeInfo cTranslationUnit * (comment list * int list) ->
         ext_decl list
    val make:
       ocl_ty_obj ->
         (abr_string * ocl_ty) list ->
           ocl_ctxt_clause list -> bool -> unit ocl_class_raw_ext
    val make_ctxt_free_var:
       ocl_ctxt_prefix -> 'a ocl_ctxt_pre_post_ext -> abr_string list
    val make_tree: nat list -> nat -> nat -> nat list tree
    val make_treea:
       nat list ->
         nat -> nat -> nat -> nat list tree list -> nat list tree list
    val makea:
       bool ->
         (abr_string * (abr_string list * abr_string)) option ->
           internal_oids ->
             Code_Numeral.natural * Code_Numeral.natural ->
               generation_semantics_ocl ->
                 ocl_class option ->
                   all_meta_embedding list ->
                     (string_b_a_s_e *
                      (unit ocl_instance_single_ext * internal_oids)
                     )
                     list
                       ->
                       (string_b_a_s_e *
                        (internal_oids *
                         (abr_string * unit ocl_instance_single_ext)
                         ocl_def_state_core
                        )
                        list
                       )
                       list
                         ->
                         bool ->
                           bool ->
                             string_b_a_s_e list * string_b_a_s_e list ->
                               string_b_a_s_e list ->
                                 string_b_a_s_e list ->
                                   generation_lemma_mode option * bool ->
                                     unit compiler_env_config_ext
    val many:
       (char -> bool) -> char list -> (char list, char list * char list) sum
    val many1:
       (char -> bool) -> char list -> (char list, char list * char list) sum
    val many_c_a_t_c_h_a_l_l:
       ('a list -> (char list, 'b * 'a list) sum) ->
         'a list -> (char list, 'b list * 'a list) sum
    val many_c_a_t_c_h_a_l_l_aux:
       'a list ->
         ('b list -> (char list, 'a * 'b list) sum) ->
           'b list -> (char list, 'a list * 'b list) sum
    val many_m_a_x:
       ('a list -> (char list, 'b * 'a list) sum) ->
         'a list -> (char list, 'b list * 'a list) sum
    val many_m_a_x_aux:
       'a list ->
         ('b list -> (char list, 'a * 'b list) sum) ->
           'b list -> (char list, 'a list * 'b list) sum
    val manyof1:
       char list -> char list -> (char list, char list * char list) sum
    val map: ('a -> 'b) -> 'a list -> 'b list
    val map2_ctxt_term:
       (ocl_ctxt_term -> ocl_ctxt_term) ->
         all_meta_embedding -> all_meta_embedding
    val mapM: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_Const: (abr_string -> typ -> abr_string) -> terma -> terma
    val map_Region_Wrap: ('a -> 'b) -> 'a region_Wrap -> 'b region_Wrap
    val map_class:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a)
         -> ocl_class -> 'a list
    val map_class_arg_only:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string * ocl_ty) list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_only0:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string * ocl_ty) list -> 'a list)
         ->
         ((abr_string -> abr_string) ->
            abr_string ->
              (abr_string * ocl_ty) list *
              (ocl_class list tmp_inh * ocl_class list tmp_sub)
                -> 'a list)
           -> ocl_class -> 'a list
    val map_class_arg_only_var:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) ->
                    (semi_terma -> semi_terma) -> 'a list)
           -> ocl_class -> 'a list
    val map_class_arg_only_var0:
       ('a -> abr_string list -> 'b) ->
         ('c ->
            'd ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'e list)
           ->
           ('f -> (abr_string * ocl_ty) list list) ->
             'c -> 'd -> 'f -> 'e list
    val map_class_arg_only_var_gen:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           ->
           ((abr_string -> abr_string) ->
              abr_string ->
                abr_string * abr_string ->
                  ocl_ty ->
                    (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
             -> ocl_class -> 'c list
    val map_class_arg_only_var_gena:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           -> ocl_class -> 'c list
    val map_class_arg_only_var_genb:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           -> ocl_class -> 'c list
    val map_class_arg_only_vara:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_only_varb:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_onlya:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list *
            (ocl_class list tmp_inh * ocl_class list tmp_sub)
              -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                ocl_class list tmp_sub -> ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_h:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              (abr_string * ocl_ty) list ->
                (abr_string * ocl_ty) list list tmp_inh ->
                  ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_h_inh:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string -> position) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_ha:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              (abr_string * ocl_ty) list ->
                (abr_string * ocl_ty) list list tmp_inh ->
                  abr_string list tmp_sub -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_hb:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list ->
                ocl_class list -> ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_inh:
       (ocl_class, 'a) inheritance_ext list tmp_inh ->
         (abr_string * ocl_ty) list list
    val map_class_nupl2_inh:
       (abr_string -> abr_string -> 'a) -> ocl_class -> 'a list
    val map_class_nupl2_inh_large:
       (abr_string -> abr_string -> 'a) -> ocl_class -> 'a list
    val map_class_nupl2_inha:
       (abr_string -> abr_string -> (ocl_class * bool) list -> 'a) ->
         ocl_class -> 'a list
    val map_class_nupl2l_inh:
       (abr_string ->
          ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list) list
            -> 'a)
         -> ocl_class -> 'a list
    val map_class_nupl2l_inh_gen:
       (ocl_class list ->
          abr_string ->
            ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list)
            list
              -> 'a)
         -> ocl_class -> 'a list
    val map_class_nupl3_GE_inh:
       (abr_string -> abr_string -> abr_string -> 'a) ->
         ocl_class -> 'a list
    val map_class_nupl3_LE_inh:
       (abr_string ->
          abr_string ->
            ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list)
            list
              -> 'a)
         -> ocl_class -> 'a list
    val map_class_one:
       (((abr_string -> abr_string) *
         (abr_string *
          ((abr_string * ocl_ty) list *
           (ocl_class list tmp_inh *
            (abr_string list tmp_sub * ocl_class list))))
        )
        list
          -> ('a * ('b * ('c * ('d * ('e * 'f))))) list)
         -> ('a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g) -> ocl_class -> 'g
    val map_class_top:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              ocl_class list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a)
         -> ocl_class -> 'a
    val map_comment_type: ('a -> 'b) -> 'a comment_type -> 'b comment_type
    val map_ctype: ('a -> 'b) -> 'a ctype -> 'b ctype
    val map_data_shallow_self:
       (internal_oid -> ocl_data_shallow) ->
         ocl_data_shallow -> ocl_data_shallow
    val map_e_r_r:
       ('a -> 'b) ->
         'a print_examp_instance_draw_list_attra ->
           'b print_examp_instance_draw_list_attra
    val map_entry:
       'a equal -> 'a -> ('b -> 'b) -> ('a * 'b) list -> ('a * 'b) list
    val map_entrya:
       'a equal -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val map_entryb:
       'a equal -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val map_entryc:
       abr_string ->
         ('a -> 'a) -> (int list, 'a) alist -> (int list, 'a) alist
    val map_enum_syn:
       ocl_enum list -> ocl_class_synonym list -> ocl_ty -> ocl_ty
    val map_filter: ('a -> 'b option) -> 'a list -> 'b list
    val map_find: ('a -> 'a option) -> 'a list -> 'a list
    val map_find_aux: 'a list -> ('a -> 'a option) -> 'a list -> 'a list
    val map_gen:
       (abr_string -> string option -> abr_string -> abr_string) ->
         (int -> abr_string) -> abr_string -> abr_string
    val map_gena:
       (abr_string -> string option -> abr_string -> abr_string) ->
         (int -> abr_string) -> string_b_a_s_e -> abr_string
    val map_inh: ('a -> 'b) -> 'a tmp_inh -> 'b tmp_inh
    val map_inst_single_self:
       (internal_oid -> ocl_data_shallow) ->
         'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val map_instance_single:
       ((abr_string * abr_string) option * (abr_string * ocl_data_shallow)
          ->
          (abr_string * abr_string) option *
          (abr_string * ocl_data_shallow))
         -> 'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val map_invariant:
       (ocl_ctxt_term_inv -> ocl_ctxt_term_inv) ->
         'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val map_lemma: (lemma -> lemma) -> semi_theory -> semi_theory
    val map_linh:
       ('a -> 'b) -> ('a, 'c) inheritance_ext -> ('b, unit) inheritance_ext
    val map_list_attr: ('a -> 'b) -> 'a ocl_list_attr -> 'b ocl_list_attr
    val map_of: 'a equal -> ('a * 'b) list -> 'a -> 'b option
    val map_of_list: 'a equal -> ('a * 'b list) list -> 'a -> 'b list option
    val map_option: ('a -> 'b) -> 'a optiona -> 'b option
    val map_optiona: ('a -> 'b) -> 'a option -> 'b option
    val map_pre_post:
       (ocl_ctxt_prefix ->
          unit ocl_ctxt_pre_post_ext -> ocl_ctxt_term -> ocl_ctxt_term)
         -> 'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val map_prod: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val map_semi_theory:
       (semi_theory -> semi_theory) -> all_meta -> all_meta
    val map_sum: ('a -> 'b) -> ('c -> 'd) -> ('a, 'c) sum -> ('b, 'd) sum
    val map_tail:
       ('a -> 'b list) ->
         (internal_oids * 'a) list list -> (semi_terma * 'b list) list
    val mapa: ('a -> 'b) -> 'a list -> 'b list
    val mapb: (int -> int) -> abr_string -> abr_string
    val mapc:
       'a equal -> ('a -> 'b -> 'c) -> ('a, 'b) alist -> ('a, 'c) alist
    val mapi: (Code_Numeral.natural -> 'a -> 'b) -> 'a list -> 'b list
    val maps: ('a -> 'b list) -> 'a list -> 'b list
    val mapsa: ('a -> 'b list) -> 'a list -> 'b list
    val max: 'a ord -> 'a -> 'a -> 'a
    val member: 'a equal -> 'a list -> 'a -> bool
    val membera: string_b_a_s_e list -> abr_string -> bool
    val merge_unique:
       'a equal ->
         ('b -> ('a * 'c) option) -> 'b list list -> ('a * 'c) list
    val merge_unique_gen:
       'a equal ->
         ('b -> ('a * 'c) option) -> 'b list list -> ('a, 'c) alist
    val merge_uniquea:
       'a equal ->
         ('b -> 'a) ->
           (internal_oids * 'b) list list -> (internal_oids * 'b) list list
    val merge_uniqueb:
       (internal_oids * (abr_string * 'a) ocl_def_state_core) list list ->
         (internal_oids * 'a) list list
    val meta_of_logic: abr_string -> string
    val meth_gen_simp: semi_method_simp
    val meth_gen_simp_add2:
       semi_thm_attribute list -> abr_string list -> semi_method_simp
    val meth_gen_simp_add_del:
       abr_string list -> abr_string list -> semi_method_simp
    val meth_gen_simp_add_split:
       semi_thm_attribute list ->
         semi_thm_attribute list -> semi_method_simp
    val meth_gen_simp_only: semi_thm_attribute list -> semi_method_simp
    val meth_gen_simp_onlya: semi_thm_attribute list -> semi_method_simp
    val method_simp_add_del:
       semi_thm list -> semi_thm list -> semi_method_simp
    val method_subst_l: abr_string list -> semi_thm_attribute -> semi_method
    val metis: semi_thm_attribute list -> semi_method
    val metis0: abr_string list -> semi_thm_attribute list -> semi_method
    val minus_int: inta -> inta -> inta
    val minus_nat: nat -> nat -> nat
    val mk_constr_name: abr_string -> abr_string -> abr_string
    val mk_dot: abr_string -> abr_string -> abr_string
    val mk_dot_comment: abr_string -> abr_string -> abr_string -> abr_string
    val mk_dot_par: abr_string -> abr_string -> abr_string
    val mk_dot_par_gen: abr_string -> abr_string list -> abr_string
    val mk_instance_single_cpt:
       (abr_string -> internal_oids option) ->
         'a ocl_instance_single_ext list ->
           'b compiler_env_config_ext ->
             ('a ocl_instance_single_ext * internal_oids) list
    val mk_instance_single_cpt0:
       (abr_string -> internal_oids option) ->
         'a ocl_instance_single_ext list ->
           'b compiler_env_config_ext ->
             ('a ocl_instance_single_ext * internal_oids) list *
             internal_oids
    val mk_quote: abr_string -> abr_string
    val mk_tree:
       nat ->
         nat -> nat -> (abr_string class_output * abr_string) list * nat
    val ml: ml -> all_meta
    datatype ml = SMLa of semi_term
    val mla: ml -> semi_theory
    val mod1: asmblock -> (abr_string option * (abr_string * expr)) list
    val mod2: asmblock -> (abr_string option * (abr_string * expr)) list
    val mod3: asmblock -> abr_string list
    val modify_def:
       'a equal ->
         'b -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val modify_defa:
       'a ->
         abr_string ->
           ('a -> 'a) -> (int list, 'a) alist -> (int list, 'a) alist
    datatype module = Module of thyName * thyName list * stmt list * bool
    val modulo_int: inta -> inta -> inta
    val modulo_integer: int -> int -> int
    val modulo_nat: nat -> nat -> nat
    val more: 'a ocl_ctxt_ext -> 'a
    datatype more_info
    = EnumC | FunctionName | MungedVar of abr_string * abr_string option
    val morea: 'a ocl_ty_class_ext -> 'a
    val moreb: 'a ocl_class_raw_ext -> 'a
    val morec: 'a ocl_association_ext -> 'a
    val mored: 'a ocl_multiplicity_ext -> 'a
    val moree: 'a ocl_ctxt_pre_post_ext -> 'a
    val moref: 'a ocl_ty_class_node_ext -> 'a
    val moreg: 'a compiler_env_config_ext -> 'a
    val moreh: 'a ocl_instance_single_ext -> 'a
    val n_lists: nat -> 'a list -> 'a list list
    val name: int -> namea
    datatype name = Name of abr_string | QName of thyName * abr_string
    datatype namea = Name0 of int
    val namedRef: ident -> sUERef
    datatype nat = Nat of int
    val nat_of_integer: int -> nat
    val nat_of_natural: Code_Numeral.natural -> nat
    val nat_to_digit10: nat -> abr_string
    val nat_to_digit10_aux: nat list -> nat -> nat list
    val nat_to_digit26: nat -> abr_string
    val nat_to_digit26_aux: nat list -> nat -> nat list
    val natural_of_nat: nat -> Code_Numeral.natural
    val natural_to_digit10: Code_Numeral.natural -> abr_string
    val nb_class: ocl_class -> nat
    val noPosition: positiona
    val nodeInfo: positiona -> positiona * int -> namea -> nodeInfo
    datatype nodeInfo
    =
         NodeInfo0 of positiona * (positiona * int) * namea
       | OnlyPos0 of positiona * (positiona * int)
    val normalize0: 'a equal -> ('b -> 'a) -> 'b list -> 'b list
    val not_yet_supported: abr_string -> unit
    datatype ('a, 'b) nsplit = Nsplit_sep of 'b | Nsplit_text of 'a
    val nsplit_f: 'a list -> ('a -> bool) -> ('a list, 'a) nsplit list
    val nth: 'a list -> nat -> 'a
    val null: 'a list -> bool
    datatype num = Bit0 of num | Bit1 of num | One
    datatype num1 = One_num1
    val oF_l:
       semi_thm_attribute -> semi_thm_attribute list -> semi_thm_attribute
    val oclAss_relation:
       'a ocl_association_ext ->
         (ocl_ty_obj * unit ocl_multiplicity_ext) list
    val oclAss_relationa: 'a ocl_association_ext -> ocl_association_relation
    val oclAss_type: 'a ocl_association_ext -> ocl_association_type
    val oclTy_class: unit ocl_ty_class_ext -> ocl_ty
    val oclTy_class_pre: abr_string -> ocl_ty
    datatype ocl_ass_class
    = OclAssClass of unit ocl_association_ext * unit ocl_class_raw_ext
    datatype 'a ocl_association_ext
    =
         Ocl_association_ext of
             ocl_association_type * ocl_association_relation * 'a
    val ocl_association_rec:
       (ocl_association_type -> ocl_association_relation -> 'a -> 'b) ->
         'a ocl_association_ext -> 'b
    val ocl_association_rec0:
       (ocl_association_type -> ocl_association_relation -> 'a) ->
         'b ocl_association_ext -> 'a
    datatype ocl_association_relation
    = OclAssRel of (ocl_ty_obj * unit ocl_multiplicity_ext) list
    datatype ocl_association_type
    =
         OclAssTy_aggregation
       | OclAssTy_association
       | OclAssTy_composition
       | OclAssTy_native_attribute
    datatype ocl_class
    = OclClass of abr_string * (abr_string * ocl_ty) list * ocl_class list
    datatype 'a ocl_class_raw_ext
    =
         Ocl_class_raw_ext of
             ocl_ty_obj * (abr_string * ocl_ty) list *
             ocl_ctxt_clause list * bool * 'a
    val ocl_class_raw_rec:
       (ocl_ty_obj ->
          (abr_string * ocl_ty) list ->
            ocl_ctxt_clause list -> bool -> 'a -> 'b)
         -> 'a ocl_class_raw_ext -> 'b
    val ocl_class_raw_rec0:
       (ocl_ty_obj ->
          (abr_string * ocl_ty) list -> ocl_ctxt_clause list -> bool -> 'a)
         -> 'b ocl_class_raw_ext -> 'a
    datatype ocl_class_synonym = OclClassSynonym of abr_string * ocl_ty
    datatype ocl_class_tree
    = OclClassTree of Code_Numeral.natural * Code_Numeral.natural
    datatype ocl_collection
    =
         Derived0
       | Nonunique0
       | Ordered0
       | Qualifier0
       | Redefines0
       | Sequence
       | Set
       | Subsets0
       | Union0
    datatype ocl_ctxt_clause
    = Ctxt_inv of ocl_ctxt_term_inv | Ctxt_pp of unit ocl_ctxt_pre_post_ext
    datatype 'a ocl_ctxt_ext
    =
         Ocl_ctxt_ext of
             abr_string list * ocl_ty_obj * ocl_ctxt_clause list * 'a
    datatype 'a ocl_ctxt_pre_post_ext
    =
         Ocl_ctxt_pre_post_ext of
             abr_string * ocl_ty * ocl_ctxt_term_pp list * 'a
    val ocl_ctxt_pre_post_rec:
       (abr_string -> ocl_ty -> ocl_ctxt_term_pp list -> 'a -> 'b) ->
         'a ocl_ctxt_pre_post_ext -> 'b
    val ocl_ctxt_pre_post_rec0:
       (abr_string -> ocl_ty -> ocl_ctxt_term_pp list -> 'a) ->
         'b ocl_ctxt_pre_post_ext -> 'a
    datatype ocl_ctxt_prefix = OclCtxtPost | OclCtxtPre
    val ocl_ctxt_rec:
       (abr_string list -> ocl_ty_obj -> ocl_ctxt_clause list -> 'a -> 'b)
         -> 'a ocl_ctxt_ext -> 'b
    val ocl_ctxt_rec0:
       (abr_string list -> ocl_ty_obj -> ocl_ctxt_clause list -> 'a) ->
         'b ocl_ctxt_ext -> 'a
    datatype ocl_ctxt_term
    =
         T_lambda of abr_string * ocl_ctxt_term
       | T_pure of terma * abr_string option
       | T_to_be_parsed of abr_string * abr_string
    datatype ocl_ctxt_term_inv = T_inv of bool * ocl_prop
    datatype ocl_ctxt_term_pp
    = T_invariant of ocl_ctxt_term_inv | T_pp of ocl_ctxt_prefix * ocl_prop
    datatype ocl_data_shallow
    =
         ShallB_list of ocl_data_shallow list
       | ShallB_self of internal_oid
       | ShallB_str of abr_string
       | ShallB_term of ocl_def_base
    datatype ocl_def_base
    =
         OclDefInteger of abr_string
       | OclDefReal of abr_string * abr_string
       | OclDefString of abr_string
    datatype ocl_def_base_l = OclDefBase of ocl_def_base list
    datatype ocl_def_pp_core
    =
         OclDefPPCoreAdd of abr_string ocl_def_state_core list
       | OclDefPPCoreBinding of abr_string
    datatype ocl_def_state
    = OclDefSt of abr_string * abr_string ocl_def_state_core list
    datatype 'a ocl_def_state_core
    =
         OclDefCoreAdd of unit ocl_instance_single_ext
       | OclDefCoreBinding of 'a
    datatype ocl_def_transition
    =
         OclDefPP of
             abr_string option * ocl_def_pp_core * ocl_def_pp_core option
    datatype ocl_enum = OclEnum of abr_string * abr_string list
    datatype ocl_flush_all = OclFlushAll
    datatype ocl_generic = OclGeneric of abr_string
    datatype ocl_instance = OclInstance of unit ocl_instance_single_ext list
    val ocl_instance_single_empty: unit ocl_instance_single_ext
    datatype 'a ocl_instance_single_ext
    =
         Ocl_instance_single_ext of
             abr_string option * abr_string option * abr_string option *
             ((abr_string * abr_string) option *
              (abr_string * ocl_data_shallow)
             )
             list
             ocl_list_attr
             *
             'a
    val ocl_instance_single_rec:
       (abr_string option ->
          abr_string option ->
            abr_string option ->
              ((abr_string * abr_string) option *
               (abr_string * ocl_data_shallow)
              )
              list
              ocl_list_attr
                -> 'a -> 'b)
         -> 'a ocl_instance_single_ext -> 'b
    val ocl_instance_single_rec0:
       (abr_string option ->
          abr_string option ->
            abr_string option ->
              ((abr_string * abr_string) option *
               (abr_string * ocl_data_shallow)
              )
              list
              ocl_list_attr
                -> 'a)
         -> 'b ocl_instance_single_ext -> 'a
    datatype 'a ocl_list_attr
    =
         OclAttrCast of abr_string * 'a ocl_list_attr * 'a
       | OclAttrNoCast of 'a
    datatype 'a ocl_multiplicity_ext
    =
         Ocl_multiplicity_ext of
             (ocl_multiplicity_single * ocl_multiplicity_single option) list
             *
             abr_string option * ocl_collection list * 'a
    val ocl_multiplicity_rec:
       ((ocl_multiplicity_single * ocl_multiplicity_single option) list ->
          abr_string option -> ocl_collection list -> 'a -> 'b)
         -> 'a ocl_multiplicity_ext -> 'b
    val ocl_multiplicity_rec0:
       ((ocl_multiplicity_single * ocl_multiplicity_single option) list ->
          abr_string option -> ocl_collection list -> 'a)
         -> 'b ocl_multiplicity_ext -> 'a
    datatype ocl_multiplicity_single
    = Mult_infinity | Mult_nat of Code_Numeral.natural | Mult_star
    datatype ocl_prop = OclProp_ctxt of abr_string option * ocl_ctxt_term
    datatype ocl_ty
    =
         OclTy_arrow of ocl_ty * ocl_ty
       | OclTy_base_boolean
       | OclTy_base_integer
       | OclTy_base_real
       | OclTy_base_string
       | OclTy_base_unlimitednatural
       | OclTy_base_void
       | OclTy_binding of abr_string option * ocl_ty
       | OclTy_class_syn of abr_string
       | OclTy_collection of unit ocl_multiplicity_ext * ocl_ty
       | OclTy_enum of abr_string
       | OclTy_object of ocl_ty_obj
       | OclTy_pair of ocl_ty * ocl_ty
       | OclTy_raw of abr_string
    datatype 'a ocl_ty_class_ext
    =
         Ocl_ty_class_ext of
             abr_string * Code_Numeral.natural * Code_Numeral.natural *
             unit ocl_ty_class_node_ext * unit ocl_ty_class_node_ext * 'a
    datatype 'a ocl_ty_class_node_ext
    =
         Ocl_ty_class_node_ext of
             Code_Numeral.natural * unit ocl_multiplicity_ext * abr_string *
             'a
    val ocl_ty_class_node_rec:
       (Code_Numeral.natural ->
          unit ocl_multiplicity_ext -> abr_string -> 'a -> 'b)
         -> 'a ocl_ty_class_node_ext -> 'b
    val ocl_ty_class_node_rec0:
       (Code_Numeral.natural ->
          unit ocl_multiplicity_ext -> abr_string -> 'a)
         -> 'b ocl_ty_class_node_ext -> 'a
    val ocl_ty_class_rec:
       (abr_string ->
          Code_Numeral.natural ->
            Code_Numeral.natural ->
              unit ocl_ty_class_node_ext ->
                unit ocl_ty_class_node_ext -> 'a -> 'b)
         -> 'a ocl_ty_class_ext -> 'b
    val ocl_ty_class_rec0:
       (abr_string ->
          Code_Numeral.natural ->
            Code_Numeral.natural ->
              unit ocl_ty_class_node_ext ->
                unit ocl_ty_class_node_ext -> 'a)
         -> 'b ocl_ty_class_ext -> 'a
    datatype ocl_ty_obj
    = OclTyObj of ocl_ty_obj_core * ocl_ty_obj_core list list
    datatype ocl_ty_obj_core
    = OclTyCore of unit ocl_ty_class_ext | OclTyCore_pre of abr_string
    val octalRepr: cIntRepr
    val of_Cons: abr_string
    val of_Consa: abr_string
    val of_Function_Kind: (abr_string -> 'a) -> function_Kind -> 'a
    val of_Function_Stmt:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) ->
                   (abr_string -> 'a) -> function_Stmt -> 'a
    val of_IsaUnit:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> isaUnit -> 'a
    val of_Literal:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           -> ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> literal -> 'a
    val of_ML: (abr_string -> string) -> 'a -> ml -> string
    val of_Module:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   ('a -> 'a list -> 'a) ->
                     (abr_string -> 'a) -> module -> 'a
    val of_Name:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> name -> 'a
    val of_Nil: abr_string
    val of_Nila: abr_string
    val of_None: abr_string
    val of_Nonea: abr_string
    val of_Pair: abr_string
    val of_Paira: abr_string
    val of_Pat:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> term -> 'a
    val of_Some: abr_string
    val of_Somea: abr_string
    val of_Sort:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> name list -> 'a
    val of_Stmt:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> stmt -> 'a
    val of_TLD_aux:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ((literal -> 'a) ->
                    (name -> 'a) ->
                      (name -> 'b -> 'a -> 'a) ->
                        ('c -> 'd -> 'a -> 'a -> 'a) ->
                          ('e -> 'f -> 'g -> 'a -> 'a -> 'a -> 'a) ->
                            ((('h * 'a) * ('i * 'a)) list -> 'j -> 'a -> 'a)
                              ->
                              ('k ->
                                 (('l * 'a) * ('m * 'a)) list -> 'a -> 'a)
                                ->
                                ('n -> ('o * 'a) list -> 'a -> 'a) ->
                                  (name -> (name * ...) list -> 'a) ->
                                    ('p -> ... list -> 'a -> 'a) ->
                                      (abr_string -> ... list -> ...) ->
  ('q -> ...) -> ... -> ...)
                   -> ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> 'r
    val of_Term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> term -> 'a
    val of_ThyName:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> thyName -> 'a
    val of_Type:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typea -> 'a
    val of_TypeSign:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             abr_string ->
               ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typeSign -> 'a
    val of_TypeSpec:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typeSpec -> 'a
    val of_abbreviation:
       (abr_string -> string) -> 'a -> abbreviation -> string
    val of_all_meta:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> all_meta -> string
    val of_all_meta_embedding:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> all_meta_embedding -> 'a
    val of_all_meta_embeddinga:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> all_meta_embedding -> string
    val of_all_meta_lists:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           bool compiler_env_config_ext ->
             (abr_string option * all_meta list) list -> string list
    val of_axiomatization:
       (abr_string -> string) -> 'a -> axiomatization -> string
    val of_bool: (abr_string -> 'a) -> bool -> 'a
    val of_boola: 'a zero_neq_one -> bool -> 'a
    val of_boolb: (abr_string -> 'a) -> bool -> 'a
    val of_boot_generation_syntax: 'a -> boot_generation_syntax -> string
    val of_boot_setup_env:
       (abr_string -> string) -> 'a -> boot_setup_env -> string
    val of_code_reflect:
       (abr_string -> string) -> 'a -> code_reflect -> string
    val of_compiler_env_config:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> string_b_a_s_e -> 'a)
             ->
             (('a -> 'a list -> 'a) ->
                (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
               ->
               ((abr_string -> 'a) -> unit -> 'a) ->
                 ((abr_string -> 'a) -> bool -> 'a) ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           abr_string ->
                             ('a -> 'a list -> 'a) ->
                               (abr_string -> 'a) ->
                                 (('a -> 'a list -> 'a) ->
                                    (abr_string -> 'a) -> 'b -> 'a)
                                   -> 'b compiler_env_config_ext -> 'a
    val of_consts: (abr_string -> string) -> 'a -> consts -> string
    val of_ctxt2_term: (abr_string -> string) -> ocl_ctxt_term -> string
    val of_ctxt2_term_aux:
       (abr_string -> string) -> abr_string list -> ocl_ctxt_term -> string
    val of_datatype: (abr_string -> string) -> 'a -> datatypea -> string
    val of_definition:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> definition -> string
    val of_e_n_v_section:
       (abr_string -> string) ->
         'a compiler_env_config_ext -> section -> string
    val of_e_n_v_semi_theories:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> semi_theories -> string
    val of_e_n_v_semi_theory:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> semi_theory -> string
    val of_floor: 'a -> (abr_string -> 'b) -> floor -> 'b
    val of_floora: floor -> string
    val of_gen_meta:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> gen_meta -> 'a
    val of_generation_lemma_mode:
       'a -> (abr_string -> 'b) -> generation_lemma_mode -> 'b
    val of_generation_semantics_ocl:
       'a -> (abr_string -> 'b) -> generation_semantics_ocl -> 'b
    val of_hide_const: (abr_string -> string) -> 'a -> hide_const -> string
    val of_inh: 'a tmp_inh -> 'a
    val of_instantiation:
       (abr_string -> string) -> 'a -> instantiation -> string
    val of_internal_oid:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> internal_oid -> 'a
    val of_internal_oids:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> internal_oids -> 'a
    val of_interpretation:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> interpretation -> string
    val of_lemma:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> lemma -> string
    val of_lemmas: (abr_string -> string) -> 'a -> lemmas -> string
    val of_linh: ('a, 'b) inheritance_ext list -> 'a list
    val of_linh_sib: ('a, 'b) inheritance_ext list -> 'a list
    val of_list:
       abr_string ->
         abr_string ->
           ('a -> 'a list -> 'a) ->
             (abr_string -> 'a) -> ('b -> 'a) -> 'b list -> 'a
    val of_lista:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> ('b -> 'a) -> 'b list -> 'a
    val of_nat: 'a -> (abr_string -> 'b) -> Code_Numeral.natural -> 'b
    val of_nata: 'a -> (abr_string -> 'b) -> Code_Numeral.natural -> 'b
    val of_ocl_ass_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> ocl_ass_class -> 'a
    val of_ocl_association:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_association_ext -> 'a
    val of_ocl_association_relation:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             ocl_association_relation -> 'a
    val of_ocl_association_type:
       'a -> (abr_string -> 'b) -> ocl_association_type -> 'b
    val of_ocl_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_class -> 'a
    val of_ocl_class_raw:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_class_raw_ext -> 'a
    val of_ocl_class_synonym:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_class_synonym -> 'a
    val of_ocl_class_tree:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_class_tree -> 'a
    val of_ocl_collection: (abr_string -> 'a) -> ocl_collection -> 'a
    val of_ocl_ctxt:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_ctxt_ext -> 'a
    val of_ocl_ctxt_clause:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> ocl_ctxt_clause -> 'a
    val of_ocl_ctxt_pre_post:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_ctxt_pre_post_ext -> 'a
    val of_ocl_ctxt_prefix:
       'a -> (abr_string -> 'b) -> ocl_ctxt_prefix -> 'b
    val of_ocl_ctxt_term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     ('a -> 'a list -> 'a) ->
                       (abr_string -> 'a) -> ocl_ctxt_term -> 'a
    val of_ocl_ctxt_term_inv:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> ocl_ctxt_term_inv -> 'a
    val of_ocl_ctxt_term_pp:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> ocl_ctxt_term_pp -> 'a
    val of_ocl_ctxta:
       (abr_string -> string) -> 'a -> string -> 'b ocl_ctxt_ext -> string
    val of_ocl_data_shallow:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) ->
                   (abr_string -> 'a) -> ocl_data_shallow -> 'a
    val of_ocl_data_shallowa:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> ocl_data_shallow -> string
    val of_ocl_def_base:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_def_base -> 'a
    val of_ocl_def_base_l:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             abr_string ->
               ('a -> 'a list -> 'a) ->
                 (abr_string -> 'a) -> ocl_def_base_l -> 'a
    val of_ocl_def_basea: (abr_string -> string) -> ocl_def_base -> string
    val of_ocl_def_pp_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_pp_core -> 'a
    val of_ocl_def_pp_corea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> ocl_def_pp_core -> string
    val of_ocl_def_state:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_state -> 'a
    val of_ocl_def_state_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             ('b -> 'a) -> 'b ocl_def_state_core -> 'a
    val of_ocl_def_state_corea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           abr_string ocl_def_state_core list -> string
    val of_ocl_def_statea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> string -> ocl_def_state -> string
    val of_ocl_def_transition:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_transition -> 'a
    val of_ocl_def_transitiona:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> string -> ocl_def_transition -> string
    val of_ocl_enum:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_enum -> 'a
    val of_ocl_flush_all: 'a -> (abr_string -> 'b) -> ocl_flush_all -> 'b
    val of_ocl_generic:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_generic -> 'a
    val of_ocl_generica:
       (abr_string -> string) -> 'a -> ocl_generic -> string
    val of_ocl_instance:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_instance -> 'a
    val of_ocl_instance_single:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) ->
                           (('a -> 'a list -> 'a) ->
                              (abr_string -> 'a) -> 'b -> 'a)
                             -> 'b ocl_instance_single_ext -> 'a
    val of_ocl_instance_singlea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a ocl_instance_single_ext -> string
    val of_ocl_instancea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> ocl_instance -> string
    val of_ocl_list_attr:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) ->
           (abr_string -> 'a) -> ('b -> 'a) -> 'b ocl_list_attr -> 'a
    val of_ocl_list_attra:
       (abr_string -> string) ->
         ('a -> string) -> 'a ocl_list_attr -> string
    val of_ocl_multiplicity:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) ->
                           (('a -> 'a list -> 'a) ->
                              (abr_string -> 'a) -> 'b -> 'a)
                             -> 'b ocl_multiplicity_ext -> 'a
    val of_ocl_multiplicity_single:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) ->
           (abr_string -> 'a) -> ocl_multiplicity_single -> 'a
    val of_ocl_prop:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     ('a -> 'a list -> 'a) ->
                       (abr_string -> 'a) -> ocl_prop -> 'a
    val of_ocl_ty:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty -> 'a
    val of_ocl_ty_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_ty_class_ext -> 'a
    val of_ocl_ty_class_node:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_ty_class_node_ext -> 'a
    val of_ocl_ty_obj:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty_obj -> 'a
    val of_ocl_ty_obj_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty_obj_core -> 'a
    val of_option:
       abr_string ->
         abr_string ->
           ('a -> 'b list -> 'a) ->
             (abr_string -> 'a) -> ('c -> 'b) -> 'c option -> 'a
    val of_optiona:
       ('a -> 'b list -> 'a) ->
         (abr_string -> 'a) -> ('c -> 'b) -> 'c option -> 'a
    val of_overloading:
       (abr_string -> string) -> 'a -> overloading -> string
    val of_pair:
       abr_string ->
         ('a -> 'b list -> 'c) ->
           (abr_string -> 'a) -> ('d -> 'b) -> ('e -> 'b) -> 'd * 'e -> 'c
    val of_paira:
       ('a -> 'b list -> 'c) ->
         (abr_string -> 'a) -> ('d -> 'b) -> ('e -> 'b) -> 'd * 'e -> 'c
    val of_pure_class:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a
    val of_pure_indexname:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             ('a -> 'a list -> 'a) ->
               (abr_string -> 'a) -> abr_string * Code_Numeral.natural -> 'a
    val of_pure_sort:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) ->
               (abr_string -> 'a) -> abr_string list -> 'a
    val of_pure_term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> terma -> 'a
    val of_pure_terma:
       (abr_string -> string) -> bool -> string list -> terma -> string
    val of_pure_typ:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typ -> 'a
    val of_pure_typa: (abr_string -> string) -> typ -> string
    val of_section: (abr_string -> string) -> 'a -> section -> string
    val of_semi_attrib:
       (abr_string -> string) -> string -> semi_thm list -> string
    val of_semi_attrib1:
       (abr_string -> string) -> string -> abr_string list -> string
    val of_semi_attrib_genA:
       (semi_thm list -> string) -> string -> semi_thm list -> string
    val of_semi_attrib_genB:
       (abr_string list -> string) -> string -> abr_string list -> string
    val of_semi_command_final:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_final -> string
    val of_semi_command_proof:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_proof -> string
    val of_semi_command_state:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_state -> string
    val of_semi_method:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_method -> string
    val of_semi_method_simp:
       (abr_string -> string) -> string -> semi_method_simp -> string
    val of_semi_term: (abr_string -> string) -> semi_term -> string
    val of_semi_term_0: (abr_string -> string) -> semi_term_0 -> string
    val of_semi_term_1: (abr_string -> string) -> semi_term_1 -> string
    val of_semi_terma: (abr_string -> string) -> semi_terma -> string
    val of_semi_theories0:
       (abr_string -> string) ->
         ('a -> semi_theory -> string) -> 'a -> semi_theories -> string
    val of_semi_theory:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> semi_theory -> string
    val of_semi_thm: (abr_string -> string) -> semi_thm -> string
    val of_semi_thm_attribute:
       (abr_string -> string) -> semi_thm_attribute -> string
    val of_semi_thm_attribute_aux:
       (abr_string -> string) ->
         (string * string) list -> semi_thm_attribute -> string
    val of_semi_thm_attribute_aux_gen:
       (abr_string -> string) ->
         string * string -> (string * string) list -> abr_string -> string
    val of_semi_thm_attribute_aux_gen_of:
       (abr_string -> string) -> semi_terma list -> string * string
    val of_semi_thm_attribute_aux_gen_where:
       (abr_string -> string) ->
         (abr_string * semi_terma) list -> string * string
    val of_semi_thm_attribute_l:
       (abr_string -> string) -> semi_thm_attribute list -> string
    val of_semi_thm_attribute_l1:
       (abr_string -> string) -> semi_thm_attribute list -> string
    val of_semi_thm_l: (abr_string -> string) -> semi_thm list -> string
    val of_semi_typ: (abr_string -> string) -> semi_typ -> string
    val of_semi_typa:
       (abr_string -> string) -> abr_string * abr_string list -> string
    val of_semi_val_fun: semi_val_fun -> string
    val of_setup: (abr_string -> string) -> 'a -> setup -> string
    val of_string: 'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_string_b_a_s_e: 'a -> (abr_string -> 'b) -> string_b_a_s_e -> 'b
    val of_string_b_a_s_ea: 'a -> (abr_string -> 'b) -> string_b_a_s_e -> 'b
    val of_string_gen:
       abr_string ->
         (abr_string -> abr_string) ->
           (abr_string -> abr_string) ->
             'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_stringa: 'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_sub: 'a tmp_sub -> 'a
    val of_text: (abr_string -> string) -> 'a -> text -> string
    val of_text_raw: (abr_string -> string) -> 'a -> text_raw -> string
    val of_thm: (abr_string -> string) -> 'a -> thm -> string
    val of_type_notation:
       (abr_string -> string) -> 'a -> type_notation -> string
    val of_type_synonym:
       (abr_string -> string) -> 'a -> type_synonym -> string
    val of_unit: (abr_string -> 'a) -> unit -> 'a
    val of_unita: (abr_string -> 'a) -> unit -> 'a
    val ofa: semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val oid: abr_string -> internal_oid -> semi_term_0
    val oidGetAssoc: internal_oids -> internal_oid
    val oidGetInh: internal_oids -> internal_oid
    val oidInit: internal_oid -> internal_oids
    val oidReinitAll: internal_oids -> internal_oids
    val oidSucAssoc: internal_oids -> internal_oids
    val oidSucInh: internal_oids -> internal_oids
    val one: 'a one -> 'a
    type 'a one = {one: 'a}
    val one_int: inta one
    val one_inta: inta
    val one_integer: int one
    val one_integera: int
    val one_nat: nat
    val one_natural: Code_Numeral.natural one
    val one_power: 'a power -> 'a one
    val one_zero_neq_one: 'a zero_neq_one -> 'a one
    val oneof:
       char list list -> char list -> (char list, char list * char list) sum
    val oneof_aux:
       char list list ->
         char list list ->
           char list -> (char list, char list * char list) sum
    val oneof_b_i_n_d:
       ('a list -> (char list, 'b * 'a list) sum) list ->
         'a list -> (char list, 'b * 'a list) sum
    val onlyPos: positiona -> positiona * int -> nodeInfo
    val opt: abr_string -> semi_typ
    datatype opt_attr_type = OptInh | OptOwn
    datatype opt_ident = OptIdent of Code_Numeral.natural
    val optiona: semi_method list -> semi_method
    datatype 'a optiona = None | Some of 'a
    val or:
       ('a -> ('b, 'c) sum) -> ('a -> ('d, 'c) sum) -> 'a -> ('d, 'c) sum
    type 'a ord = {less: 'a -> 'a -> bool, less_eq: 'a -> 'a -> bool}
    val ord_integer: int ord
    val overloading: overloading -> all_meta
    datatype overloading
    = Overloading of abr_string * semi_terma * abr_string * semi_terma
    val overloadinga:
       abr_string -> semi_typ -> abr_string -> semi_terma -> overloading
    val pRINT_access_choose:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_choose_ml:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_def_mono:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_deref_assocs:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_deref_oid:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_dot_consts:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_dot_cp_lemmas:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_access_dot_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_eval_extract:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_access_is_repr:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_oid_uniq:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_oid_uniq_ml:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_repr_allinst:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_select:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_select_obj:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_allinst_astype:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_def_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_exec:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_iskindof_eq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_iskindof_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_istypeof:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_allinst_istypeof_pre:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_allinst_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_d_up_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_lemma_const:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_const:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_id2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_up_d_cast0:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_enum: (ocl_enum -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_examp_def_st_defs:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_examp_instance:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc_typecheck:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc_typecheck_var:
       (ocl_instance -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_examp_oclbase:
       (ocl_def_base_l -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_haskell:
       (isaUnit ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_class_1:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_class_2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_equiv_1of2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_equiv_2of1:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_universe:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_enum_syn:
       ('a ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_enum_synonym:
       ('a ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_instantiation_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_instantiation_universe:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_type_synonym_class:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_infra_type_synonym_class_higher:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_type_synonym_class_rec:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_instantia_def_strictrefeq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_instantia_lemmas_strictrefeq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_defineda:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemma_cp:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemma_strict:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_eq_asty:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_istypeof:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_istypeof_unfold:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_up_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_defineda:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_up_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val p_first_of_NodeInfo: nodeInfo -> positiona * int
    val p_last_of_NodeInfo: nodeInfo -> positiona * int
    val pair: semi_term_0 -> semi_term_0 -> semi_term_0
    val pair0: semi_term_0 list -> semi_term_0
    val paren: abr_string -> abr_string -> semi_term_0 -> semi_term_0
    val parenthesis: semi_term_0 -> semi_term_0
    val parse_comment: comment -> abr_string comment_type list
    val parse_commenta:
       char list -> (char list, char list comment_type list * char list) sum
    val parse_id_list:
       char list list ->
         char list -> (char list, char list option list * char list) sum
    val parse_id_m_a_y_b_e:
       char list list ->
         char list ->
           (char list, (char list * char list option) * char list) sum
    val parse_id_o_n_e:
       char list list -> char list -> (char list, char list * char list) sum
    val parse_str: char list -> (char list, char list * char list) sum
    val parse_str_aux:
       char list list -> char list -> (char list, char list * char list) sum
    datatype parsing_style = Style_Haskell | Style_ML
    val partDesignator: 'a cPartDesignator -> designator
    val partition: ('a -> bool) -> 'a list -> 'a list * 'a list
    val plus: semi_method list -> semi_method
    type 'a plus = {plusa: 'a -> 'a -> 'a}
    val plus_integer: int plus
    val plus_nat: nat -> nat -> nat
    val plus_natural: Code_Numeral.natural plus
    val plusa: 'a plus -> 'a -> 'a -> 'a
    val pos_in_interval:
       (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_in_interval_haskell:
       (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_in_interval_ml:
       'a -> (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_of_CBlockItem: 'a cCompoundBlockItem -> 'a
    val pos_of_CBuiltin: 'a cBuiltinThing -> 'a
    val pos_of_CConst: 'a cConstant -> 'a
    val pos_of_CDecl: 'a cDeclaration -> 'a
    val pos_of_CExpr: 'a cExpression -> 'a
    val pos_of_CExtDecl: 'a cExternalDeclaration -> 'a
    val pos_of_CFunDef: 'a cFunctionDef -> 'a
    val pos_of_CStat: 'a cStatement -> 'a
    val position: int -> abr_string -> int -> int -> positiona
    datatype position = EQ | GT | LT | UN
    datatype positiona
    =
         BuiltinPosition0
       | InternalPosition0
       | NoPosition0
       | Position0 of int * abr_string * int * int
    val power: 'a power -> 'a -> nat -> 'a
    type 'a power = {one_power: 'a one, times_power: 'a times}
    val power_int: inta power
    val pref_constr_enum: abr_string -> abr_string
    val pref_generic_enum: abr_string -> abr_string
    val pref_ident: abr_string -> abr_string
    val pref_ty_enum: abr_string -> abr_string
    val pref_ty_syn: abr_string -> abr_string
    val prev_was_stop: all_meta_embedding list -> bool
    val print:
       ((abr_string -> string) -> (Code_Numeral.natural -> string) -> 'a) ->
         'a
    val print_access_choose:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_choose_ml:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_choose_mlname:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural -> abr_string
    val print_access_choose_name:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural -> abr_string
    val print_access_choose_switch:
       ('a -> 'b -> 'c) ->
         (Code_Numeral.natural -> 'd) ->
           ocl_class ->
             (Code_Numeral.natural ->
                Code_Numeral.natural -> Code_Numeral.natural -> 'a)
               ->
               ('d list -> 'e) ->
                 (('e * 'f) list -> 'b) -> ('d -> 'd -> 'f) -> 'c list
    val print_access_def_mono:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_def_mono_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_deref_assocs:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_deref_assocs_name:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_deref_assocs_namea:
       Code_Numeral.natural ->
         (abr_string -> abr_string) ->
           (abr_string -> abr_string) -> abr_string
    val print_access_deref_oid: ocl_class -> 'a -> all_meta list * 'a
    val print_access_deref_oid_name: (abr_string -> 'a) -> 'a
    val print_access_dot:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_dot_aux:
       (abr_string option -> semi_terma list -> semi_terma) ->
         ocl_ty -> semi_terma
    val print_access_dot_consts:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_dot_consts_ty: ocl_ty -> semi_typ
    val print_access_dot_cp_lemmas: 'a -> 'b -> all_meta list * 'b
    val print_access_dot_cp_lemmas_set: abr_string list
    val print_access_dot_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemma_cp_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_dot_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemmas_id_name: abr_string
    val print_access_dot_lemmas_id_set: ocl_class -> abr_string list
    val print_access_dot_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_eval_extract: 'a -> 'b -> all_meta list * 'b
    val print_access_is_repr:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_is_repr_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_access_lemma_strict_name:
       (abr_string -> abr_string) ->
         abr_string ->
           ocl_ty -> (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_oid_uniq:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_oid_uniq_gen:
       ('a -> 'b) ->
         ('c compiler_env_config_ext -> internal_oids -> 'd) ->
           (Code_Numeral.natural ->
              abr_string ->
                (abr_string -> abr_string) ->
                  abr_string -> internal_oid -> 'a)
             -> ocl_class -> 'c compiler_env_config_ext -> 'b list * 'd
    val print_access_oid_uniq_ml:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_oid_uniq_mlname:
       Code_Numeral.natural -> abr_string -> abr_string -> abr_string
    val print_access_oid_uniq_name:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_oid_uniq_namea:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_repr_allinst:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select_name: ('a -> 'b) -> (abr_string -> 'a) -> 'b
    val print_access_select_obj:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select_obj_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_allinst_astype: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_astype_name: (abr_string -> abr_string) -> abr_string
    val print_allinst_def_id: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_exec: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_iskindof_eq: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_iskindof_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_istypeof:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_allinst_istypeof_pre: 'a -> 'b -> all_meta list * 'b
    val print_allinst_istypeof_pre_name1: abr_string
    val print_allinst_istypeof_pre_name2: abr_string
    val print_allinst_istypeof_single:
       (abr_string -> abr_string) ->
         abr_string ->
           ('a -> abr_string) ->
             abr_string ->
               'a ->
                 (abr_string -> abr_string) ->
                   (abr_string list -> abr_string list) ->
                     (abr_string list -> abr_string list) -> lemma list
    val print_allinst_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_d_up_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_from_universe_name: abr_string -> abr_string
    val print_astype_lemma_const: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_astype_lemma_cp_set2:
       ocl_class ->
         ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
           (((abr_string -> abr_string) * abr_string) *
            ((abr_string -> abr_string) * abr_string)
           )
           list
    val print_astype_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_const: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_id2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast0: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast0_name: abr_string -> abr_string -> abr_string
    val print_astype_up_d_cast_name: abr_string -> abr_string -> abr_string
    val print_ctxt:
       unit ocl_ctxt_ext ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_ctxt_const:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           ('b compiler_env_config_ext * all_meta list) * all_meta list
    val print_ctxt_const_name:
       abr_string -> abr_string -> abr_string option -> abr_string
    val print_ctxt_inv:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_ctxt_inv_name:
       abr_string -> abr_string -> abr_string -> abr_string
    val print_ctxt_is_name_at_gen:
       abr_string -> abr_string -> abr_string option
    val print_ctxt_is_name_at_post: abr_string -> abr_string option
    val print_ctxt_is_name_at_pre: abr_string -> abr_string option
    val print_ctxt_pre_post:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_ctxt_pre_post_interp:
       generation_lemma_mode option * bool ->
         abr_string ->
           'a ocl_ctxt_pre_post_ext ->
             semi_terma ->
               ocl_ctxt_prefix * semi_terma ->
                 ocl_ctxt_prefix * semi_terma -> all_meta option
    val print_ctxt_pre_post_name:
       abr_string -> abr_string -> abr_string option -> abr_string
    val print_ctxt_thm: 'a ocl_ctxt_ext -> 'b -> all_meta list * 'b
    val print_ctxt_to_ocl_gen:
       string_b_a_s_e list ->
         (abr_string -> abr_string option) ->
           abr_string -> ocl_ctxt_term -> ocl_ctxt_term
    val print_ctxt_to_ocl_gen_split: abr_string -> int list option
    val print_ctxt_to_ocl_post:
       'a compiler_env_config_ext -> ocl_ctxt_term -> ocl_ctxt_term
    val print_ctxt_to_ocl_pre:
       'a compiler_env_config_ext -> ocl_ctxt_term -> ocl_ctxt_term
    val print_enum: ocl_enum -> 'a -> all_meta list * 'a
    val print_examp_def_st0:
       abr_string ->
         abr_string ocl_def_state_core list ->
           unit ocl_instance_single_ext list *
           abr_string ocl_def_state_core list
    val print_examp_def_st1:
       ocl_def_state ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_examp_def_st1_gen:
       ocl_def_state ->
         unit compiler_env_config_ext ->
           (all_meta list * unit compiler_env_config_ext) *
           (unit compiler_env_config_ext -> unit compiler_env_config_ext)
    val print_examp_def_st2:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_examp_def_st_allinst:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_assoc:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list -> semi_terma
    val print_examp_def_st_assoc_build_rbt:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list ->
               (int list,
               (int list,
               internal_oid list list list * unit ocl_ty_class_ext)
               alist
               )
               alist
    val print_examp_def_st_assoc_build_rbt2:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list ->
               (int list,
               internal_oid list list list * unit ocl_ty_class_ext)
               alist
    val print_examp_def_st_assoc_build_rbt_gen:
       (abr_string ->
          ((int list, internal_oid list list list * unit ocl_ty_class_ext)
           alist
             ->
             (int list, internal_oid list list list * unit ocl_ty_class_ext)
             alist)
            -> ('a, 'b) alist -> ('a, 'b) alist)
         ->
         (abr_string -> (abr_string -> (ocl_ty * ('c * 'd)) option) * 'e) ->
           (internal_oid -> internal_oids option) ->
             (abr_string -> internal_oids option) ->
               ('f ocl_instance_single_ext * internal_oids) list ->
                 ('a, 'b) alist
    val print_examp_def_st_assoc_build_rbt_gen_typecheck:
       ('a ocl_instance_single_ext ->
          'b -> 'c print_examp_instance_draw_list_attra)
         ->
         (abr_string -> bool) ->
           (abr_string -> abr_string -> 'd option) ->
             (internal_oid -> 'e option) ->
               (abr_string -> 'e option) ->
                 ocl_enum list ->
                   ('a ocl_instance_single_ext * 'b) list ->
                     (reporting * abr_string) list ->
                       (reporting * abr_string) list
    val print_examp_def_st_def_interp:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_def_st_defassoc_typecheck:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_examp_def_st_defassoc_typecheck_gen:
       abr_string ocl_def_state_core list ->
         'a compiler_env_config_ext -> ml list
    val print_examp_def_st_defs: 'a -> 'b -> all_meta list * 'b
    val print_examp_def_st_dom:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_dom_lemmas:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_dom_name: abr_string -> abr_string
    val print_examp_def_st_locale:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           unit semi_locale_ext * 'a compiler_env_config_ext
    val print_examp_def_st_locale_aux:
       (internal_oids * 'a ocl_instance_single_ext) list list ->
         semi_terma list *
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
    val print_examp_def_st_locale_distinct: abr_string
    val print_examp_def_st_locale_make:
       abr_string ->
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
           ->
           (internal_oids * 'a ocl_instance_single_ext) list list ->
             unit semi_locale_ext
    val print_examp_def_st_locale_metis: semi_method
    val print_examp_def_st_locale_name: abr_string -> abr_string
    val print_examp_def_st_locale_sort:
       'a compiler_env_config_ext ->
         abr_string ocl_def_state_core list ->
           (internal_oids * unit ocl_instance_single_ext) list list
    val print_examp_def_st_mapsto:
       (internal_oids *
        (abr_string * 'a ocl_instance_single_ext) ocl_def_state_core
       )
       list
         -> semi_terma list option
    val print_examp_def_st_mapsto_gen:
       ('a * (abr_string * 'b ocl_instance_single_ext) ocl_def_state_core ->
          'b ocl_instance_single_ext -> semi_terma option -> 'c)
         ->
         ('a * (abr_string * 'b ocl_instance_single_ext) ocl_def_state_core)
         list
           -> 'c list
    val print_examp_def_st_perm:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_perm_name: abr_string -> abr_string
    val print_examp_def_st_typecheck_var:
       ocl_def_state -> 'a -> all_meta list * 'a
    val print_examp_increase_oid:
       unit ocl_instance_single_ext list ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val print_examp_instance:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_app_constr2_notmp:
       (opt_attr_type *
        (unit ocl_ty_class_ext option *
         (ocl_ty * ((abr_string * abr_string) option * ocl_data_shallow))
         option
        )
        list
       )
       list
       ocl_list_attr
         ->
         (abr_string -> abr_string) ->
           internal_oids ->
             ((abr_string -> abr_string) ->
                internal_oids ->
                  (unit ocl_ty_class_ext ->
                     semi_terma print_examp_instance_draw_list_attra)
                  *
                  (ocl_ty * ocl_data_shallow ->
                     semi_terma print_examp_instance_draw_list_attra))
               -> semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_app_constr2_notmp_norec:
       (abr_string ->
          (abr_string -> ('a * (opt_attr_type * opt_ident)) option) *
          (opt_attr_type ->
             (('b ->
                 Code_Numeral.natural ->
                   ('b *
                    ('a *
                     ((abr_string * abr_string) option * ocl_data_shallow)
                    )
                    option
                   )
                   list
                     ->
                     ('b *
                      ('a *
                       ((abr_string * abr_string) option * ocl_data_shallow)
                      )
                      option
                     )
                     list)
                ->
                'c list ->
                  (unit ocl_ty_class_ext option *
                   (ocl_ty *
                    ((abr_string * abr_string) option * ocl_data_shallow)
                   )
                   option
                  )
                  list
             )
             option))
       *
       ((internal_oid -> internal_oids option) *
        (abr_string -> internal_oids option))
         ->
         semi_terma ->
           'd ocl_instance_single_ext ->
             (abr_string -> abr_string) ->
               internal_oids ->
                 semi_terma print_examp_instance_draw_list_attra *
                 (semi_terma -> semi_terma)
    val print_examp_instance_app_constr2_notmpa:
       'a ocl_list_attr -> semi_terma -> semi_terma
    val print_examp_instance_app_constr_notmp:
       (unit ocl_ty_class_ext ->
          semi_terma print_examp_instance_draw_list_attra)
       *
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         (abr_string -> abr_string) ->
           semi_terma ->
             (unit ocl_ty_class_ext option *
              (ocl_ty *
               ((abr_string * abr_string) option * ocl_data_shallow)
              )
              option
             )
             list
               -> semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_defassoc:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_defassoc_gen:
       semi_terma ->
         ('a ocl_instance_single_ext * internal_oids) list ->
           'b compiler_env_config_ext ->
             (abr_string ->
                'c * ((abr_string -> (ocl_ty * ('d * 'e)) option) * 'f))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
               -> definition list
    val print_examp_instance_defassoc_typecheck:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_defassoc_typecheck_gen:
       unit ocl_instance_single_ext option list ->
         'a compiler_env_config_ext -> ml list
    val print_examp_instance_defassoc_typecheck_var:
       ocl_instance -> 'a -> all_meta list * 'a
    val print_examp_instance_draw_list_attr:
       (unit ocl_ty_class_ext ->
          semi_terma print_examp_instance_draw_list_attra)
       *
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         (unit ocl_ty_class_ext option *
          (ocl_ty * ((abr_string * abr_string) option * ocl_data_shallow))
          option
         )
         list
           -> semi_terma list print_examp_instance_draw_list_attra
    datatype print_examp_instance_draw_list_attr
    = Return_exp of semi_terma | Return_obj of unit ocl_ty_class_ext
    val print_examp_instance_draw_list_attr_aux:
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         ocl_ty * ocl_data_shallow ->
           semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_draw_list_attr_aux_base:
       ocl_ty * ocl_data_shallow ->
         semi_terma print_examp_instance_draw_list_attra
    datatype print_examp_instance_draw_list_attr_err
    =
         Return_err_l of print_examp_instance_draw_list_attr_err list
       | Return_err_ty of ocl_ty * ocl_data_shallow
       | Return_err_ty_auto
       | Return_object_variable of abr_string
       | Return_ocl_invalid
       | Return_ocl_null
    datatype 'a print_examp_instance_draw_list_attra
    =
         Return_err of print_examp_instance_draw_list_attr_err
       | Return_val of 'a
    val print_examp_instance_name: 'a -> 'a
    val print_examp_instance_oid:
       (definition -> 'a) ->
         ('b ocl_instance_single_ext * internal_oids) list ->
           'c compiler_env_config_ext -> 'a list
    val print_examp_oclbase: ocl_def_base_l -> 'a -> all_meta list * 'a
    val print_examp_oclbase_gen: ocl_def_base -> semi_terma * definition
    val print_haskell:
       isaUnit ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_class_1:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_class_2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_1of2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_1of2_name: abr_string
    val print_infra_datatype_equiv_1of2_name_aux: abr_string
    val print_infra_datatype_equiv_1of2_name_get_oid_inh: abr_string
    val print_infra_datatype_equiv_2of1:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_2of1_name: abr_string
    val print_infra_datatype_equiv_2of1_name_aux: abr_string
    val print_infra_datatype_universe: ocl_class -> 'a -> all_meta list * 'a
    val print_infra_enum_syn:
       'a ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_infra_enum_synonym:
       'a ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_infra_instantiation_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_instantiation_universe:
       ocl_class -> 'a -> all_meta list * 'a
    val print_infra_type_synonym_class: 'a -> 'b -> all_meta list * 'b
    val print_infra_type_synonym_class_higher:
       ocl_class -> 'a -> all_meta list * 'a
    val print_infra_type_synonym_class_rec:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_type_synonym_class_rec_aux:
       ocl_ty -> abr_string * semi_typ
    val print_infra_type_synonym_class_rec_aux0:
       ocl_ty -> abr_string * semi_typ
    val print_infra_type_synonym_class_sequence_name:
       abr_string -> abr_string
    val print_infra_type_synonym_class_set_name: abr_string -> abr_string
    val print_instantia_def_strictrefeq:
       ocl_class -> 'a -> all_meta list * 'a
    val print_instantia_def_strictrefeq_name:
       (abr_string list -> 'a) -> abr_string -> 'a
    val print_instantia_lemmas_strictrefeq:
       ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_class_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_defined_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_defined_namea:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_defineda:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemma_cp:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_iskindof_lemma_strict:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_eq_asty: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_eq_asty_name: abr_string -> abr_string
    val print_iskindof_up_istypeof: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_istypeof_erule:
       abr_string ->
         ocl_class list -> abr_string -> abr_string -> semi_method
    val print_iskindof_up_istypeof_name:
       abr_string -> abr_string -> abr_string
    datatype ('a, 'b) print_iskindof_up_istypeof_output
    =
         M_erule of 'b
       | M_simp_b_r_e_a_d_t_h
       | M_simp_d_e_p_t_h_1
       | M_simp_d_e_p_t_h_2
       | M_simp_only of 'a
    val print_iskindof_up_istypeof_unfold:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_up_istypeof_unfold_name:
       abr_string -> abr_string -> abr_string
    val print_iskindof_up_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_larger_name:
       abr_string -> abr_string -> abr_string
    val print_istypeof_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_defined_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_istypeof_defined_namea:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_istypeof_defineda:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_istypeof_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_strict_set:
       ocl_class -> (abr_string * (abr_string * abr_string)) list
    val print_istypeof_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_up_d_cast_name:
       abr_string -> abr_string -> abr_string -> abr_string
    val print_istypeof_up_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_up_larger_name:
       abr_string -> abr_string -> abr_string
    val print_meta_setup_def_state:
       ocl_def_state ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val print_meta_setup_def_transition:
       ocl_def_transition ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val print_transition:
       ocl_def_transition ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_transition_def_interp:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_transition_def_state:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_gen:
       ocl_def_transition ->
         unit compiler_env_config_ext ->
           (all_meta list * unit compiler_env_config_ext) *
           (unit compiler_env_config_ext -> unit compiler_env_config_ext)
    val print_transition_interp:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_lemmas_oid:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_transition_locale:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           unit semi_locale_ext * 'a compiler_env_config_ext
    val print_transition_locale_aux:
       (internal_oids *
        (abr_string * 'a ocl_instance_single_ext) ocl_def_state_core
       )
       list
         -> semi_terma list
    val print_transition_locale_name: abr_string -> abr_string -> abr_string
    val print_transition_wff:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_where:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val pure_typ0:
       (abr_string -> string) -> bool -> abr_string -> typ -> string
    val raise_ml: (reporting * abr_string) list -> abr_string -> ml
    val raise_ml_unbound:
       (Code_Numeral.natural -> 'a -> abr_string) ->
         ('a * ocl_ctxt_term) list -> ('b -> all_meta list) list
    val raw: abr_string -> semi_typ
    val rbt_of_class:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           abr_string ->
             bool *
             ((abr_string -> (ocl_ty * (opt_attr_type * opt_ident)) option)
              *
              (opt_attr_type ->
                 ((unit ocl_ty_class_ext option -> 'a -> 'c -> 'c) ->
                    'c -> 'c
                 )
                 option))
    val rec_DoBlockFragment:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) ->
   doBlockFragment -> 'c
    val rec_Function_Kind: 'a -> 'a -> 'a -> 'a -> function_Kind -> 'a
    val rec_Function_Stmt:
       (function_Kind ->
          typeSign list -> ((name * term list) * term) list -> 'a)
         -> function_Stmt -> 'a
    val rec_IsaUnit:
       (bool * Code_Numeral.natural ->
          (abr_string * abr_string option) list ->
            gen_meta -> abr_string -> module list * bool -> 'a)
         -> isaUnit -> 'a
    val rec_ListComprFragment:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) ->
   listComprFragment -> 'b
    val rec_Literal:
       (Code_Numeral.natural -> 'a) -> (abr_string -> 'a) -> literal -> 'a
    val rec_Module:
       (thyName -> thyName list -> stmt list -> bool -> 'a) -> module -> 'a
    val rec_Name:
       (thyName -> abr_string -> 'a) -> (abr_string -> 'a) -> name -> 'a
    val rec_Region: 'a -> (sourcePos -> sourcePos -> 'a) -> region -> 'a
    val rec_Region_Wrap: ('a -> region -> 'b) -> 'a region_Wrap -> 'b
    val rec_SourcePos: (int -> abr_string -> int -> 'a) -> sourcePos -> 'a
    val rec_Stmt:
       ((typeSpec * (name * typea list) list) list -> 'a) ->
         (typeSpec -> (name * typea) list -> 'a) ->
           ((typeSpec * typea) list -> 'a) ->
             (function_Stmt -> 'a) ->
               (name -> name list -> typeSign list -> 'a) ->
                 (name ->
                    name ->
                      (name * name list) list -> function_Stmt list -> 'a)
                   ->
                   (abr_string -> 'a) -> (function_Stmt -> 'a) -> stmt -> 'a
    val rec_StringCvt_radix: 'a -> 'a -> 'a -> 'a -> stringCvt_radix -> 'a
    val rec_Term:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) -> term -> 'a
    val rec_ThyName: (abr_string -> 'a) -> thyName -> 'a
    val rec_Type:
       (name -> (typea * 'a) list -> 'a) ->
         (typea -> typea -> 'a -> 'a -> 'a) ->
           (name -> 'a) -> 'a -> typea -> 'a
    val rec_TypeSign:
       (name -> (name * name list) list -> typea -> 'a) -> typeSign -> 'a
    val rec_TypeSpec: (name list -> name -> 'a) -> typeSpec -> 'a
    val rec_Unsynchronized_ref: ('a -> 'b) -> 'a unsynchronized_ref -> 'b
    val rec_all_meta_embedding:
       (ocl_enum -> 'a) ->
         (floor -> unit ocl_class_raw_ext -> 'a) ->
           (unit ocl_association_ext -> 'a) ->
             (floor -> ocl_ass_class -> 'a) ->
               (floor -> unit ocl_ctxt_ext -> 'a) ->
                 (isaUnit -> 'a) ->
                   (ocl_class_synonym -> 'a) ->
                     (ocl_instance -> 'a) ->
                       (ocl_def_base_l -> 'a) ->
                         (floor -> ocl_def_state -> 'a) ->
                           (floor -> ocl_def_transition -> 'a) ->
                             (ocl_class_tree -> 'a) ->
                               (ocl_flush_all -> 'a) ->
                                 (ocl_generic -> 'a) ->
                                   all_meta_embedding -> 'a
    val rec_base_inttype:
       'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> base_inttype -> 'a
    val rec_binoptype:
       'a ->
         'a ->
           'a ->
             'a ->
               'a ->
                 'a ->
                   'a ->
                     'a ->
                       'a ->
                         'a ->
                           'a ->
                             'a ->
                               'a ->
                                 'a ->
                                   'a -> 'a -> 'a -> 'a -> binoptype -> 'a
    val rec_block_item:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_ctype:
       (base_inttype -> 'a) ->
         (base_inttype -> 'a) ->
           'a ->
             'a ->
               (abr_string -> 'a) ->
                 (abr_string -> 'a) ->
                   (abr_string option -> 'a) ->
                     ('b ctype -> 'a -> 'a) ->
                       ('b ctype -> 'b option -> 'a -> 'a) ->
                         (bool -> 'b -> 'a) ->
                           (abr_string -> 'a) ->
                             ('b ctype -> ('b ctype * 'a) list -> 'a -> 'a)
                               -> 'a -> 'b ctype -> 'a
    val rec_declaration:
       (expr ctype *
        (abr_string region_Wrap *
         (storage_class list * (initializer option * gcc_attribute list)))
          -> 'a)
         ->
         (abr_string region_Wrap ->
            (expr ctype * abr_string region_Wrap) list -> 'a)
           ->
           ((expr ctype * abr_string region_Wrap) list -> 'a) ->
             (expr ctype ->
                abr_string region_Wrap ->
                  (expr ctype * abr_string option) list ->
                    fnspec list -> 'a)
               ->
               (abr_string option region_Wrap ->
                  (abr_string region_Wrap * expr option) list -> 'a)
                 -> declaration -> 'a
    val rec_designator:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_expr:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_expr_node:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_ext_decl:
       (expr ctype * abr_string region_Wrap ->
          (expr ctype * abr_string region_Wrap) list ->
            fnspec list -> block_item list region_Wrap -> 'a)
         -> (declaration region_Wrap -> 'a) -> ext_decl -> 'a
    val rec_floor: 'a -> 'a -> 'a -> floor -> 'a
    val rec_fnspec:
       (abr_string region_Wrap -> 'a) ->
         (abr_string region_Wrap -> 'a) ->
           (abr_string list -> 'a) ->
             'a -> (gcc_attribute list -> 'a) -> fnspec -> 'a
    val rec_gcc_attribute:
       (abr_string -> 'a) ->
         (abr_string -> expr list -> 'a) ->
           (abr_string -> 'a) -> gcc_attribute -> 'a
    val rec_gen_meta:
       (abr_string -> 'a) ->
         (abr_string -> 'a) ->
           (abr_string -> abr_string -> 'a) -> 'a -> gen_meta -> 'a
    val rec_generation_lemma_mode: 'a -> 'a -> generation_lemma_mode -> 'a
    val rec_generation_semantics_ocl:
       'a -> 'a -> 'a -> generation_semantics_ocl -> 'a
    val rec_initializer:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_internal_oid: (Code_Numeral.natural -> 'a) -> internal_oid -> 'a
    val rec_internal_oids:
       (Code_Numeral.natural ->
          Code_Numeral.natural -> Code_Numeral.natural -> 'a)
         -> internal_oids -> 'a
    val rec_list: 'a -> ('b -> 'b list -> 'a -> 'a) -> 'b list -> 'a
    val rec_literalconstant_node:
       (int -> abr_string -> stringCvt_radix -> 'a) ->
         (abr_string -> 'a) -> literalconstant_node -> 'a
    val rec_more_info:
       (abr_string -> abr_string option -> 'a) ->
         'a -> 'a -> more_info -> 'a
    val rec_ocl_ass_class:
       (unit ocl_association_ext -> unit ocl_class_raw_ext -> 'a) ->
         ocl_ass_class -> 'a
    val rec_ocl_association_relation:
       ((ocl_ty_obj * unit ocl_multiplicity_ext) list -> 'a) ->
         ocl_association_relation -> 'a
    val rec_ocl_association_type:
       'a -> 'a -> 'a -> 'a -> ocl_association_type -> 'a
    val rec_ocl_class:
       (abr_string ->
          (abr_string * ocl_ty) list -> (ocl_class * 'a) list -> 'a)
         -> ocl_class -> 'a
    val rec_ocl_class_synonym:
       (abr_string -> ocl_ty -> 'a) -> ocl_class_synonym -> 'a
    val rec_ocl_class_tree:
       (Code_Numeral.natural -> Code_Numeral.natural -> 'a) ->
         ocl_class_tree -> 'a
    val rec_ocl_collection:
       'a ->
         'a ->
           'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> ocl_collection -> 'a
    val rec_ocl_ctxt_clause:
       (unit ocl_ctxt_pre_post_ext -> 'a) ->
         (ocl_ctxt_term_inv -> 'a) -> ocl_ctxt_clause -> 'a
    val rec_ocl_ctxt_prefix: 'a -> 'a -> ocl_ctxt_prefix -> 'a
    val rec_ocl_ctxt_term:
       (terma -> abr_string option -> 'a) ->
         (abr_string -> abr_string -> 'a) ->
           (abr_string -> ocl_ctxt_term -> 'a -> 'a) -> ocl_ctxt_term -> 'a
    val rec_ocl_ctxt_term_inv:
       (bool -> ocl_prop -> 'a) -> ocl_ctxt_term_inv -> 'a
    val rec_ocl_ctxt_term_pp:
       (ocl_ctxt_prefix -> ocl_prop -> 'a) ->
         (ocl_ctxt_term_inv -> 'a) -> ocl_ctxt_term_pp -> 'a
    val rec_ocl_data_shallow:
       (ocl_def_base -> 'a) ->
         (abr_string -> 'a) ->
           (internal_oid -> 'a) ->
             ((ocl_data_shallow * 'a) list -> 'a) -> ocl_data_shallow -> 'a
    val rec_ocl_def_base:
       (abr_string -> 'a) ->
         (abr_string * abr_string -> 'a) ->
           (abr_string -> 'a) -> ocl_def_base -> 'a
    val rec_ocl_def_base_l:
       (ocl_def_base list -> 'a) -> ocl_def_base_l -> 'a
    val rec_ocl_def_pp_core:
       (abr_string ocl_def_state_core list -> 'a) ->
         (abr_string -> 'a) -> ocl_def_pp_core -> 'a
    val rec_ocl_def_state:
       (abr_string -> abr_string ocl_def_state_core list -> 'a) ->
         ocl_def_state -> 'a
    val rec_ocl_def_state_core:
       (unit ocl_instance_single_ext -> 'a) ->
         ('b -> 'a) -> 'b ocl_def_state_core -> 'a
    val rec_ocl_def_transition:
       (abr_string option ->
          ocl_def_pp_core -> ocl_def_pp_core option -> 'a)
         -> ocl_def_transition -> 'a
    val rec_ocl_enum:
       (abr_string -> abr_string list -> 'a) -> ocl_enum -> 'a
    val rec_ocl_flush_all: 'a -> ocl_flush_all -> 'a
    val rec_ocl_generic: (abr_string -> 'a) -> ocl_generic -> 'a
    val rec_ocl_instance:
       (unit ocl_instance_single_ext list -> 'a) -> ocl_instance -> 'a
    val rec_ocl_list_attr:
       ('a -> 'b) ->
         (abr_string -> 'a ocl_list_attr -> 'a -> 'b -> 'b) ->
           'a ocl_list_attr -> 'b
    val rec_ocl_multiplicity_single:
       (Code_Numeral.natural -> 'a) ->
         'a -> 'a -> ocl_multiplicity_single -> 'a
    val rec_ocl_prop:
       (abr_string option -> ocl_ctxt_term -> 'a) -> ocl_prop -> 'a
    val rec_ocl_ty:
       'a ->
         'a ->
           'a ->
             'a ->
               'a ->
                 'a ->
                   (ocl_ty_obj -> 'a) ->
                     (unit ocl_multiplicity_ext -> ocl_ty -> 'a -> 'a) ->
                       (ocl_ty -> ocl_ty -> 'a -> 'a -> 'a) ->
                         (abr_string option * (ocl_ty * 'a) -> 'a) ->
                           (ocl_ty -> ocl_ty -> 'a -> 'a -> 'a) ->
                             (abr_string -> 'a) ->
                               (abr_string -> 'a) ->
                                 (abr_string -> 'a) -> ocl_ty -> 'a
    val rec_ocl_ty_obj:
       (ocl_ty_obj_core -> ocl_ty_obj_core list list -> 'a) ->
         ocl_ty_obj -> 'a
    val rec_ocl_ty_obj_core:
       (abr_string -> 'a) ->
         (unit ocl_ty_class_ext -> 'a) -> ocl_ty_obj_core -> 'a
    val rec_option: 'a -> ('b -> 'a) -> 'b option -> 'a
    val rec_statement:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_statement_node:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_storage_class: 'a -> 'a -> 'a -> 'a -> 'a -> storage_class -> 'a
    val rec_term:
       (abr_string -> typ -> 'a) ->
         (abr_string -> typ -> 'a) ->
           (abr_string * Code_Numeral.natural -> typ -> 'a) ->
             (Code_Numeral.natural -> 'a) ->
               (abr_string -> typ -> terma -> 'a -> 'a) ->
                 (terma -> terma -> 'a -> 'a -> 'a) -> terma -> 'a
    val rec_trappable: 'a -> 'a -> trappable -> 'a
    val rec_typ:
       (abr_string -> (typ * 'a) list -> 'a) ->
         (abr_string -> abr_string list -> 'a) ->
           (abr_string * Code_Numeral.natural -> abr_string list -> 'a) ->
             typ -> 'a
    val rec_unoptype: 'a -> 'a -> 'a -> 'a -> unoptype -> 'a
    datatype region = Bogus | T of sourcePos * sourcePos
    datatype 'a region_Wrap = Tb of 'a * region
    val remove_binding: ocl_ty -> ocl_ty
    val remove_last_break: 'a cStatement -> 'a cStatement option
    val rename_tac: abr_string list -> semi_method
    val replace_gen:
       (('a list, 'a) nsplit list -> 'b) ->
         'a list -> ('a -> bool) -> 'a list -> 'b
    val replace_integers:
       (int -> abr_string) ->
         abr_string -> string option -> abr_string -> abr_string
    val replace_integersa: (int -> abr_string) -> abr_string -> abr_string
    datatype reporting = Error | Warning | Writeln
    val return: 'a -> 'b -> 'b * 'a
    val returna: 'a -> 'b list -> (char list, 'a * 'b list) sum
    val rev: 'a list -> 'a list
    val rev_map: ('a -> 'b) -> 'a list -> 'b list
    val rewrite: semi_term_0 -> abr_string -> semi_term_0 -> semi_term_0
    val rewrite_val: semi_term_0 -> abr_string -> semi_term_0 -> semi_term
    val rule: semi_thm_attribute -> semi_method
    val rulea: semi_method
    datatype sUERef = AnonymousRef0 of namea | NamedRef0 of ident
    val sbogwrap: statement_node -> statement
    val scan_upto_b_i_n_d:
       ('a list -> ('b, 'c * 'a list) sum) ->
         'a list -> (char list, ('a list * 'c) * 'a list) sum
    val section: abr_string -> 'a -> 'b -> all_meta list * 'b
    datatype section = Section of Code_Numeral.natural * abr_string
    val section_aux:
       Code_Numeral.natural -> abr_string -> 'a -> 'b -> all_meta list * 'b
    val sectiona:
       abr_string -> ('a -> 'b -> all_meta list * 'b) embedding_fun
    val sectionb: section -> all_meta
    datatype semi_command_final
    = Command_by of semi_method list | Command_done | Command_sorry
    datatype semi_command_proof
    =
         Command_apply of semi_method list
       | Command_fix_let of
           abr_string list * (semi_terma * semi_terma) list *
           (semi_terma list * semi_terma list) option *
           semi_command_state list
       | Command_have of abr_string * bool * semi_terma * semi_command_final
       | Command_let of semi_terma * semi_terma
       | Command_unfolding of semi_thm list
       | Command_using of semi_thm list
    datatype semi_command_state = Command_apply_end of semi_method list
    datatype semi_datatype_version
    =
         Datatype_new
       | Datatype_old
       | Datatype_old_atomic
       | Datatype_old_atomic_sub
    datatype 'a semi_locale_ext
    =
         Semi_locale_ext of
             abr_string *
             ((semi_terma * semi_typ) list *
              (abr_string * semi_terma) option
             )
             list
             *
             'a
    datatype semi_method
    =
         Method_all of semi_method_simp
       | Method_auto_simp_add_split of semi_thm list * abr_string list
       | Method_blast of Code_Numeral.natural option
       | Method_case_tac of semi_terma
       | Method_clarify
       | Method_drule of semi_thm_attribute
       | Method_elim of semi_thm_attribute
       | Method_erule of semi_thm_attribute
       | Method_insert of semi_thm list
       | Method_intro of semi_thm_attribute list
       | Method_metis of abr_string list * semi_thm_attribute list
       | Method_one of semi_method_simp
       | Method_option of semi_method list
       | Method_or of semi_method list
       | Method_plus of semi_method list
       | Method_rename_tac of abr_string list
       | Method_rule of semi_thm_attribute option
       | Method_subst of ...
    datatype semi_method_simp
    =
         Method_simp_add_del_split of
             semi_thm list * semi_thm list * semi_thm list
       | Method_simp_only of semi_thm list
    datatype semi_term = SML_top of semi_term_1 list
    datatype semi_term_0
    =
         SML_annot of semi_term_0 * abr_string
       | SML_apply of semi_term_0 * semi_term_0 list
       | SML_basic of abr_string list
       | SML_binop of semi_term_0 * abr_string * semi_term_0
       | SML_function of (semi_term_0 * semi_term_0) list
       | SML_let of semi_term * semi_term_0
       | SML_paren of abr_string * abr_string * semi_term_0
       | SML_rewrite of semi_term_0 * abr_string * semi_term_0
       | SML_string of abr_string
    datatype semi_term_1
    =
         SML_open of abr_string
       | SML_val_fun of semi_val_fun option * semi_term_0
    datatype semi_terma
    =
         Term_annot of semi_terma * semi_typ
       | Term_apply of semi_terma * semi_terma list
       | Term_basic of abr_string list
       | Term_bind of abr_string * semi_terma * semi_terma
       | Term_fun_case of semi_terma option * (semi_terma * semi_terma) list
       | Term_if_then_else of semi_terma * semi_terma * semi_terma
       | Term_let of (semi_terma * semi_terma) list * semi_terma
       | Term_paren of abr_string * abr_string * semi_terma
       | Term_rewrite of semi_terma * abr_string * semi_terma
       | Term_term of abr_string list * terma
    datatype semi_theories
    =
         Theories_locale of unit semi_locale_ext * semi_theory list list
       | Theories_one of semi_theory
    datatype semi_theory
    =
         Theory_ML of ml
       | Theory_abbreviation of abbreviation
       | Theory_axiomatization of axiomatization
       | Theory_code_reflect of code_reflect
       | Theory_consts of consts
       | Theory_datatype of datatypea
       | Theory_definition of definition
       | Theory_hide_const of hide_const
       | Theory_instantiation of instantiation
       | Theory_interpretation of interpretation
       | Theory_lemma of lemma
       | Theory_lemmas of lemmas
       | Theory_overloading of overloading
       | Theory_section of section
       | Theory_setup of setup
       | Theory_text of text
       | Theory_text_raw of text_raw
       | Theory_thm of thm
       | ...
    datatype semi_thm
    = Thms_mult of semi_thm_attribute | Thms_single of semi_thm_attribute
    datatype semi_thm_attribute
    =
         Thm_OF of semi_thm_attribute * semi_thm_attribute
       | Thm_THEN of semi_thm_attribute * semi_thm_attribute
       | Thm_of of semi_thm_attribute * semi_terma list
       | Thm_simplified of semi_thm_attribute * semi_thm_attribute
       | Thm_symmetric of semi_thm_attribute
       | Thm_thm of abr_string
       | Thm_thms of abr_string
       | Thm_where of semi_thm_attribute * (abr_string * semi_terma) list
    datatype semi_typ
    =
         Typ_apply of semi_typ * semi_typ list
       | Typ_apply_bin of abr_string * semi_typ * semi_typ
       | Typ_apply_paren of abr_string * abr_string * semi_typ
       | Typ_base of abr_string
    datatype semi_val_fun = Sfun | Sval
    datatype setup = Setup of semi_term
    type 'a show =
       {shows_list: 'a list -> char list -> char list,
        shows_prec: nat -> 'a -> char list -> char list}
    val show_char: char show
    val show_intFlag: cIntFlag -> abr_string
    val shows_list: 'a show -> 'a list -> char list -> char list
    val shows_list_char: char list -> char list -> char list
    val shows_list_gen:
       ('a -> char list -> char list) ->
         char list ->
           char list ->
             char list -> char list -> 'a list -> char list -> char list
    val shows_list_list: 'a show -> 'a list list -> char list -> char list
    val shows_prec: 'a show -> nat -> 'a -> char list -> char list
    val shows_prec_char: nat -> char -> char list -> char list
    val shows_prec_list: 'a show -> nat -> 'a list -> char list -> char list
    val shows_quote: (char list -> char list) -> char list -> char list
    val shows_sep:
       ('a -> char list -> char list) ->
         (char list -> char list) -> 'a list -> char list -> char list
    val shows_string: char list -> char list -> char list
    val showsp_list:
       (nat -> 'a -> char list -> char list) ->
         nat -> 'a list -> char list -> char list
    val simp: semi_method
    val simp_add: abr_string list -> semi_method
    val simp_add2: semi_thm_attribute list -> abr_string list -> semi_method
    val simp_add_del: abr_string list -> abr_string list -> semi_method
    val simp_add_split:
       semi_thm_attribute list -> semi_thm_attribute list -> semi_method
    val simp_all: semi_method
    val simp_all_add: abr_string list -> semi_method
    val simp_all_only: semi_thm_attribute list -> semi_method
    val simp_only: semi_thm_attribute list -> semi_method
    val simp_onlya: semi_thm_attribute list -> semi_method
    val simplified:
       semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val simplified_l:
       semi_thm_attribute -> semi_thm_attribute list -> semi_thm_attribute
    val single_multip: 'a ocl_multiplicity_ext -> bool
    val size_list: 'a list -> nat
    val sml_apply: abr_string -> abr_string list -> abr_string
    val sml_escape: abr_string -> abr_string
    val sml_of_compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> unit compiler_env_config_ext -> 'a
    val snd: 'a * 'b -> 'b
    val sorry: semi_command_final
    datatype sourcePos = Ta of int * abr_string * int
    val split: ('a * 'b) list -> 'a list * 'b list
    val split_at: ('a -> bool) -> 'a list -> 'a list * ('a option * 'a list)
    val split_inh_own:
       (abr_string ->
          ('a -> ('b * (opt_attr_type * opt_ident)) option) *
          (opt_attr_type ->
             (('c ->
                 Code_Numeral.natural ->
                   ('c * ('b * ('d * 'e)) option) list ->
                     ('c * ('b * ('d * 'e)) option) list)
                -> 'f list -> 'g list
             )
             option))
         ->
         abr_string ->
           ('d * ('a * 'e)) list ocl_list_attr ->
             (opt_attr_type * 'g list) list ocl_list_attr
    val split_ty: abr_string -> abr_string list
    val stars1: char list -> (char list, char list * char list) sum
    val start_m:
       ('a -> 'b) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'c list -> 'a list)
           ->
           (position ->
              (abr_string -> abr_string) *
              (abr_string * (abr_string * ocl_ty) list)
                -> ocl_class -> 'c list)
             ->
             ocl_class ->
               'd compiler_env_config_ext ->
                 'b list * 'd compiler_env_config_ext
    val start_m_3_gen:
       ('a -> 'b) ->
         ((ocl_class, unit) inheritance_ext list ->
            ocl_class list ->
              ocl_class list ->
                abr_string -> abr_string -> abr_string -> 'a)
           ->
           ocl_class ->
             'c compiler_env_config_ext ->
               'b list * 'c compiler_env_config_ext
    val start_m_gen:
       ('a -> 'b) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'c list -> 'a list)
           ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  position ->
                    (abr_string -> abr_string) *
                    (abr_string * (abr_string * ocl_ty) list)
                      -> ocl_class -> 'c list)
             ->
             ocl_class ->
               'd compiler_env_config_ext ->
                 'b list * 'd compiler_env_config_ext
    val start_ma:
       ('a -> 'b) ->
         (position ->
            (abr_string -> abr_string) *
            (abr_string * (abr_string * ocl_ty) list)
              -> ocl_class -> 'a)
           ->
           ocl_class ->
             'c compiler_env_config_ext ->
               'b list * 'c compiler_env_config_ext
    val start_map: ('a -> 'b) -> 'a list -> 'c -> 'b list * 'c
    val start_mapa: ('a -> 'b) -> 'a -> 'c -> 'b * 'c
    val start_mapb:
       ('a -> 'b) ->
         ((('c * ocl_ty) list -> ('c * ocl_ty) list) ->
            (('c * ocl_ty) list * ('c * ocl_ty) list list ->
               ('c * ocl_ty) list * ('c * ocl_ty) list list)
              ->
              (('c * ocl_ty) list * ('c * ocl_ty) list ->
                 ('c * ocl_ty) list * ('c * ocl_ty) list)
                -> 'a list)
           ->
           'd compiler_env_config_ext ->
             'b list * 'd compiler_env_config_ext
    val start_mapc:
       ('a -> 'b) ->
         (generation_semantics_ocl ->
            (('c * ocl_ty) list -> ('c * ocl_ty) list) ->
              (('c * ocl_ty) list * ('c * ocl_ty) list list ->
                 ('c * ocl_ty) list * ('c * ocl_ty) list list)
                ->
                (('c * ocl_ty) list * ('c * ocl_ty) list ->
                   ('c * ocl_ty) list * ('c * ocl_ty) list)
                  -> 'a list)
           ->
           'd compiler_env_config_ext ->
             'b list * 'd compiler_env_config_ext
    val start_mapd:
       ('a -> 'b) ->
         (generation_semantics_ocl -> 'a list) ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    val start_mape:
       ('a -> 'b) ->
         (generation_lemma_mode option * bool ->
            generation_semantics_ocl -> 'a list)
           ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    val start_mapf:
       ('a -> 'b) ->
         ((abr_string -> abr_string) -> generation_semantics_ocl -> 'a list)
           ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    datatype statement = Stmt of statement_node region_Wrap
    val statement0:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cStatement -> statement
    val statement0_case:
       'a cExpression list ->
         'a cStatement -> bool * ('a cExpression list * 'a cStatement)
    val statement_For:
       (nodeInfo cExpression optiona, nodeInfo cDeclaration) either ->
         nodeInfo cExpression optiona ->
           nodeInfo cExpression optiona ->
             statement * nodeInfo ->
               nodeInfo *
               (comment list * (abr_string * int, (int * int) list) alist)
                 -> statement_node
    val statement_If:
       ('a -> statement) ->
         'b cExpression -> 'a -> 'a optiona -> statement_node
    val statement_Switch:
       'a ->
         (nodeInfo cCompoundBlockItem list ->
            (positiona * int) * (positiona * int) -> block_item list)
           ->
           'b cExpression ->
             nodeInfo cCompoundBlockItem list -> nodeInfo -> statement_node
    val statement_While:
       nodeInfo cExpression ->
         statement * nodeInfo ->
           bool ->
             nodeInfo *
             (comment list * (abr_string * int, (int * int) list) alist)
               -> statement_node
    datatype statement_node
    =
         AsmStmt of bool * asmblock
       | Assign of expr * expr
       | AssignFnCall of expr option * expr * expr list
       | Auxupd of abr_string
       | Block of block_item list
       | Break
       | Chaos of expr
       | Continue
       | EmbFnCall of expr * expr * expr list
       | EmptyStmt
       | Ghostupd of abr_string
       | IfStmt of expr * statement * statement
       | LocalInit of expr
       | Return of expr option
       | ReturnFnCall of expr * expr list
       | Spec of (abr_string * abr_string) * ...
       | Switch of expr * ... list
       | Trap of ...
       | ...
    val statement_node_of_expression: nodeInfo cExpression -> statement_node
    val statement_node_of_expressiona:
       nodeInfo cExpression optiona ->
         (nodeInfo *
          (comment list * (abr_string * int, (int * int) list) alist)
         )
         option
           -> statement_node
    val statement_of_expression_CAssign:
       cAssignOp ->
         nodeInfo cExpression -> nodeInfo cExpression -> statement_node
    val statement_of_expression_CAssign_fun: 'a cExpression -> bool
    datatype stmt
    =
         Class of name * name list * typeSign list
       | Comment of abr_string
       | Datatype of (typeSpec * (name * typea list) list) list
       | Functiona of function_Stmt
       | Instance of
           name * name * (name * name list) list * function_Stmt list
       | Record of typeSpec * (name * typea) list
       | SML of function_Stmt
       | TypeSynonym of (typeSpec * typea) list
    val stmt_out_of_expr:
       nodeInfo cExpression -> 'a -> 'a * nodeInfo cExpression
    val stmt_out_of_expra: nodeInfo cExpression -> nodeInfo cExpression
    datatype storage_class
    = SC_AUTO | SC_EXTERN | SC_REGISTER | SC_STATIC | SC_THRD_LOCAL
    val str_hol_of_ty_all:
       ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_ty -> 'a
    val str_of_data_shallow: ocl_data_shallow -> abr_string
    val str_of_def_base: ocl_def_base -> abr_string
    val str_of_ty: ocl_ty -> abr_string
    datatype stringCvt_radix = BIN | DEC | HEX | OCT
    val stringLiteral: 'a cStringLiteral -> abr_string
    datatype string_b_a_s_e = ST of string | STa of int list
    val string_concat_map: string -> ('a -> string) -> 'a list -> string
    val string_implode: char list -> abr_string
    val stringa: abr_string -> semi_term_0
    val struct_conv:
       (abr_string, 'a, 'b, 'c) struct_tree ->
         abr_string * (abr_string, 'a, 'b, 'c) struct_flat list
    datatype ('a, 'b, 'c, 'd) struct_flat
    =
         Struct_leaf of ('a * 'b, 'd) sum
       | Struct_root of 'a * 'b * ('a * 'c, 'd) sum list
    datatype ('a, 'b, 'c, 'd) struct_tree
    =
         Struct_tree of
             'a option * 'b *
             (('a, 'b, 'c, 'd) struct_tree * 'c, 'd) sum list
    val subsection: abr_string -> 'a -> 'b -> all_meta list * 'b
    val subsectiona:
       abr_string -> ('a -> 'b -> all_meta list * 'b) embedding_fun
    val subst: semi_thm_attribute -> semi_method
    val subst_l: abr_string list -> semi_thm_attribute -> semi_method
    val suc: nat -> nat
    val succ: 'a one * 'a plus -> 'a -> 'a
    datatype ('a, 'b) sum = Inl of 'a | Inr of 'b
    val symmetric: semi_thm_attribute -> semi_thm_attribute
    val t_lambdas: abr_string list -> ocl_ctxt_term -> ocl_ctxt_term
    val take: nat -> 'a list -> 'a list
    val takeWhile: ('a -> bool) -> 'a list -> 'a list
    val take_first: nat -> 'a list -> 'a list
    val take_last: nat -> 'a list -> 'a list
    val takea: ('a list -> 'a list) -> nat -> 'a list -> 'a list
    datatype term
    =
         Abs of name * term
       | App of term * term
       | Case of term * (term * term) list
       | Const of name
       | DoBlock of abr_string * doBlockFragment list * abr_string
       | If of term * term * term
       | Let of (term * term) list * term
       | ListCompr of term * listComprFragment list
       | Literal of literal
       | Parenthesized of term
       | RecConstr of name * (name * term) list
       | RecUpdate of term * (name * term) list
    val term_And: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_annot: semi_terma -> abr_string -> semi_terma
    val term_annot_ocl: semi_terma -> abr_string -> semi_terma
    val term_app: abr_string -> semi_terma list -> semi_terma
    val term_applys: semi_terma -> semi_terma list -> semi_terma
    val term_applys0: semi_terma -> semi_terma list -> semi_terma
    val term_basety: semi_terma
    val term_binop: semi_terma -> abr_string -> semi_terma -> semi_terma
    val term_binopa: abr_string -> semi_terma list -> semi_terma
    val term_binopb: abr_string -> semi_terma list -> semi_terma
    val term_case:
       semi_terma -> (semi_terma * semi_terma) list -> semi_terma
    val term_exists: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_function: (semi_terma * semi_terma) list -> semi_terma
    val term_lam: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_lambda: abr_string -> semi_terma -> semi_terma
    val term_lambdas: abr_string list -> semi_terma -> semi_terma
    val term_lambdas0: semi_terma -> semi_terma -> semi_terma
    val term_list: semi_terma list -> semi_terma
    val term_lista: ('a -> semi_terma) -> 'a list -> semi_terma
    val term_oclset: semi_terma list -> semi_terma
    val term_oid: abr_string -> internal_oid -> semi_terma
    val term_pair: semi_terma -> semi_terma -> semi_terma
    val term_paira: semi_terma list -> semi_terma
    val term_pairs: ('a -> semi_terma) -> 'a list -> semi_terma
    val term_parenthesis: semi_terma -> semi_terma
    val term_pat: abr_string -> semi_terma
    val term_postunary: semi_terma -> semi_terma -> semi_terma
    val term_preunary: semi_terma -> semi_terma -> semi_terma
    val term_set: semi_terma list -> semi_terma
    val term_some: semi_terma -> semi_terma
    val term_string: abr_string -> semi_terma
    val term_stringa: abr_string -> semi_terma
    val term_stringb: semi_terma -> abr_string -> semi_terma
    val term_warning_parenthesis: semi_terma -> semi_terma
    datatype terma
    =
         Absa of abr_string * typ * terma
       | Appa of terma * terma
       | Bound of Code_Numeral.natural
       | Consta of abr_string * typ
       | Free of abr_string * typ
       | Var of (abr_string * Code_Numeral.natural) * typ
    val text: text -> all_meta
    datatype text = Text of abr_string
    val text2_of_str: abr_string -> abr_string
    val text_of_str: abr_string -> abr_string
    val text_raw: text_raw -> all_meta
    datatype text_raw = Text_raw of abr_string
    val textstr_of_str:
       (abr_string -> abr_string) ->
         (int -> abr_string) ->
           (abr_string -> abr_string) -> abr_string -> abr_string
    val thena:
       semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val thm: thm -> all_meta
    datatype thm = Thm of semi_thm_attribute list
    val thma: abr_string -> semi_thm_attribute
    val thms: abr_string -> semi_thm_attribute
    datatype thyName = ThyName of abr_string
    val thy_association: ('a, 'b) embedding
    val thy_class: (ocl_class, unit compiler_env_config_ext) embedding
    val thy_class_flat: ('a, 'b) embedding
    val thy_class_synonym: ('a, 'b) embedding
    val thy_class_tree: ('a, 'b) embedding
    val thy_ctxt:
       floor -> (unit ocl_ctxt_ext, unit compiler_env_config_ext) embedding
    val thy_def_base_l:
       (ocl_def_base_l, unit compiler_env_config_ext) embedding
    val thy_def_state:
       floor -> (ocl_def_state, unit compiler_env_config_ext) embedding
    val thy_def_transition:
       floor -> (ocl_def_transition, unit compiler_env_config_ext) embedding
    val thy_enum: (ocl_enum, unit compiler_env_config_ext) embedding
    val thy_enum_flat: ('a, 'b) embedding
    val thy_flush_all: ('a, 'b) embedding
    val thy_generic: ('a, 'b) embedding
    val thy_haskell: (isaUnit, unit compiler_env_config_ext) embedding
    val thy_instance: (ocl_instance, unit compiler_env_config_ext) embedding
    val times: 'a times -> 'a -> 'a -> 'a
    type 'a times = {times: 'a -> 'a -> 'a}
    val times_int: inta times
    val times_inta: inta -> inta -> inta
    val times_nat: nat -> nat -> nat
    val times_power: 'a power -> 'a times
    val tl: 'a list -> 'a list
    datatype 'a tmp_inh = Tinh of 'a
    datatype 'a tmp_sub = Tsub of 'a
    datatype 'a tmp_univ = Tuniv of 'a
    val to_String: string_b_a_s_e -> abr_string
    val to_String_b_a_s_e: abr_string -> string_b_a_s_e
    val to_bl: 'a len0 -> 'a word -> bool list
    val to_bold_number: abr_string -> abr_string
    val to_list: abr_string -> int list
    val to_lista: string_b_a_s_e -> int list
    val to_oid: (Code_Numeral.natural -> string) -> internal_oid -> string
    val translation_unit:
       nodeInfo cTranslationUnit * (comment list * int list) ->
         ext_decl list
    datatype trappable = BreakT | ContinueT
    datatype 'a tree = Tree of 'a * 'a tree list
    val tree_of_decl_spec:
       'a cStructureUnion ->
         (abr_string,
         cStructTag * ('a cDeclaration list * ('a cAttribute list * 'a)),
         cStructTag *
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
         ,
         'a cDeclarationSpecifier list *
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
         )
         struct_tree
    val trim: char list -> char list
    val truncate: 'a compiler_env_config_ext -> unit compiler_env_config_ext
    val txt:
       ((abr_string -> abr_string) ->
          generation_semantics_ocl -> abr_string)
         ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_a:
       abr_string list ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_aa:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_d:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw:
       ((abr_string -> abr_string) ->
          generation_semantics_ocl -> abr_string)
         ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw_a:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw_d:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txta:
       abr_string ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txtb:
       abr_string list ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val tyCollect: 'a ocl_multiplicity_ext -> ocl_collection list
    val tyMult:
       'a ocl_multiplicity_ext ->
         (ocl_multiplicity_single * ocl_multiplicity_single option) list
    val tyObjN_ass_switch: 'a ocl_ty_class_node_ext -> Code_Numeral.natural
    val tyObjN_role_multip:
       'a ocl_ty_class_node_ext -> unit ocl_multiplicity_ext
    val tyObjN_role_name: 'a ocl_ty_class_node_ext -> abr_string option
    val tyObjN_role_ty: 'a ocl_ty_class_node_ext -> abr_string
    val tyObj_ass_arity: 'a ocl_ty_class_ext -> Code_Numeral.natural
    val tyObj_ass_id: 'a ocl_ty_class_ext -> Code_Numeral.natural
    val tyObj_from: 'a ocl_ty_class_ext -> unit ocl_ty_class_node_ext
    val tyObj_name: 'a ocl_ty_class_ext -> abr_string
    val tyObj_to: 'a ocl_ty_class_ext -> unit ocl_ty_class_node_ext
    val tyRole: 'a ocl_multiplicity_ext -> abr_string option
    val tyRole_update:
       (abr_string option -> abr_string option) ->
         'a ocl_multiplicity_ext -> 'a ocl_multiplicity_ext
    val ty_arrow: semi_typ -> semi_typ -> semi_typ
    val ty_arrowa: semi_typ list -> semi_typ
    val ty_arrowb: semi_typ -> semi_typ
    val ty_boolean: abr_string
    val ty_integer: abr_string
    val ty_obj_to_string: ocl_ty_obj -> abr_string
    val ty_paren: semi_typ -> semi_typ
    val ty_real: abr_string
    val ty_string: abr_string
    val ty_times: semi_typ -> semi_typ -> semi_typ
    val ty_void: abr_string
    datatype typ
    =
         TFree of abr_string * abr_string list
       | TVara of (abr_string * Code_Numeral.natural) * abr_string list
       | Typeb of abr_string * typ list
    datatype typeSign = TypeSign of name * (name * name list) list * typea
    datatype typeSpec = TypeSpec of name list * name
    val type_notation: type_notation -> all_meta
    datatype type_notation = Type_notation of abr_string * abr_string
    val type_synonym: type_synonym -> all_meta
    datatype type_synonym
    = Type_synonym of (abr_string * abr_string list) * semi_typ
    val type_synonyma: abr_string -> semi_typ -> type_synonym
    val type_synonymb:
       abr_string ->
         abr_string list -> (abr_string list -> semi_typ) -> type_synonym
    datatype typea
    =
         Func of typea * typea
       | NoType
       | TVar of name
       | Typea of name * typea list
    val uint: 'a len0 -> 'a word -> inta
    val unaryOp: cUnaryOp -> unoptype
    val unfolding: semi_thm_attribute list -> semi_command_proof
    val union:
       'a equal -> ('a, 'b) alist -> ('a, 'b) alist -> ('a, 'b) alist
    val union_load:
       'a equal ->
         'a list -> 'b * ('a, unit) alist -> bool * ('a, unit) alist
    val union_loada:
       'a equal ->
         'a list ->
           bool * ('a list * ('a, unit) alist) ->
             bool * ('a list * ('a, unit) alist)
    val unique: 'a equal -> ('b -> 'a) -> ('b * 'c) list -> ('b * 'c) list
    datatype unoptype = Addr | BitNegate | Negate | Not
    val unsupported: abr_string -> 'a -> 'a * nodeInfo cExpression
    datatype 'a unsynchronized_ref = Unsynchronized_ref of 'a
    val update: 'a equal -> 'a -> 'b -> ('a * 'b) list -> ('a * 'b) list
    val update_D_ocl_accessor_post: ('a -> 'b) -> 'c * 'a -> 'c * 'b
    val update_D_ocl_accessor_pre: ('a -> 'b) -> 'a * 'c -> 'b * 'c
    val updatea: 'a equal -> 'a -> 'b -> ('a, 'b) alist -> ('a, 'b) alist
    val uppercase: abr_string -> abr_string
    val upt: nat -> nat -> nat list
    val upto_aux: inta -> inta -> inta list -> inta list
    val uptoa: inta -> inta -> inta list
    val uptob:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural list
    val using: semi_thm_attribute list -> semi_command_proof
    val var_Abs_Set: abr_string
    val var_Abs_Set_inverse: abr_string
    val var_Abs_Void: abr_string
    val var_OclForall_set: abr_string
    val var_OclInteger: abr_string
    val var_OclReal: abr_string
    val var_OclString: abr_string
    val var_Pair_base: abr_string
    val var_Sequence_base: abr_string
    val var_Set_base: abr_string
    val var_assocs: abr_string
    val var_at_when_hol_post: abr_string
    val var_at_when_hol_pre: abr_string
    val var_at_when_ocl_post: abr_string
    val var_at_when_ocl_pre: abr_string
    val var_deref: abr_string
    val var_deref_assocs: abr_string
    val var_deref_assocs_list: abr_string
    val var_deref_oid: abr_string
    val var_eval_extract: abr_string
    val var_in_post_state: abr_string
    val var_in_pre_state: abr_string
    val var_inst_assoc: abr_string
    val var_map_of_list: abr_string
    val var_oid_uniq: abr_string
    val var_reconst_basetype: abr_string
    val var_reconst_basetype_void: abr_string
    val var_result: abr_string
    val var_select: abr_string
    val var_select_object_pair: abr_string
    val var_select_object_sequence: abr_string
    val var_select_object_sequence_any: abr_string
    val var_select_object_sequence_any_exec: abr_string
    val var_select_object_set: abr_string
    val var_select_object_set_any: abr_string
    val var_select_object_set_any_exec: abr_string
    val var_self: abr_string
    val var_switch: abr_string
    val var_ty_list: abr_string
    val var_ty_prod: abr_string
    val var_val: abr_string
    val wherea:
       semi_thm_attribute ->
         (abr_string * semi_terma) list -> semi_thm_attribute
    val wildcard: abr_string
    datatype 'a word = Word of inta
    val word_of_int: 'a len0 -> inta -> 'a word
    val wrap: 'a -> sourcePos -> sourcePos -> 'a region_Wrap
    val wrap_oclty: abr_string -> abr_string
    val write_file:
       (all_meta_embedding list * abr_string option) compiler_env_config_ext
         -> unit option
    val write_file0:
       (all_meta_embedding list * abr_string option) compiler_env_config_ext
         ->
         (((string -> string -> unit option) -> unit option) -> unit option)
         *
         string list
    val write_file0a:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             ->
             (((string -> string -> unit option) -> unit option) ->
                unit option)
             *
             string list
    val write_filea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> unit option
    val zero: 'a zero -> 'a
    type 'a zero = {zero: 'a}
    val zero_integer: int zero
    val zero_nat: nat zero
    val zero_nata: nat
    val zero_natural: Code_Numeral.natural zero
    type 'a zero_neq_one =
       {one_zero_neq_one: 'a one, zero_zero_neq_one: 'a zero}
    val zero_neq_one_integer: int zero_neq_one
    val zero_zero_neq_one: 'a zero_neq_one -> 'a zero
    val zip: 'a list -> 'b list -> ('a * 'b) list
  end
structure C_Ast:
  sig
    val ? : bool * ('a -> 'a) -> 'a -> 'a
    val AnonymousRef: namea -> sUERef
    structure Any: sig type T end
    eqtype Bool
    val BuiltinPosition: positiona
    val CAddAssOp: cAssignOp
    val CAddOp: cBinaryOp
    val CAdrOp: cUnaryOp
    val CAlignAsExpr: 'a cExpression -> 'a -> 'a cAlignmentSpecifier
    val CAlignAsType: 'a cDeclaration -> 'a -> 'a cAlignmentSpecifier
    val CAlignSpec: 'a cAlignmentSpecifier -> 'a cDeclarationSpecifier
    type CAlignSpec = NodeInfo cAlignmentSpecifier
    val CAlignofExpr: 'a cExpression -> 'a -> 'a cExpression
    val CAlignofType: 'a cDeclaration -> 'a -> 'a cExpression
    val CAndAssOp: cAssignOp
    val CAndOp: cBinaryOp
    val CArrDeclr:
       'a cTypeQualifier list ->
         'a cArraySize -> 'a -> 'a cDerivedDeclarator
    val CArrDesig: 'a cExpression -> 'a -> 'a cPartDesignator
    val CArrSize: bool -> 'a cExpression -> 'a cArraySize
    type CArrSize = NodeInfo cArraySize
    val CAsm: 'a cAssemblyStatement -> 'a -> 'a cStatement
    val CAsmExt: 'a cStringLiteral -> 'a -> 'a cExternalDeclaration
    val CAsmOperand:
       ident optiona ->
         'a cStringLiteral -> 'a cExpression -> 'a -> 'a cAssemblyOperand
    type CAsmOperand = NodeInfo cAssemblyOperand
    val CAsmStmt:
       'a cTypeQualifier optiona ->
         'a cStringLiteral ->
           'a cAssemblyOperand list ->
             'a cAssemblyOperand list ->
               'a cStringLiteral list -> 'a -> 'a cAssemblyStatement
    type CAsmStmt = NodeInfo cAssemblyStatement
    val CAssign:
       cAssignOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val CAssignOp: cAssignOp
    eqtype CAssignOp
    val CAtomicQual: 'a -> 'a cTypeQualifier
    val CAtomicType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val CAttr: ident -> 'a cExpression list -> 'a -> 'a cAttribute
    type CAttr = NodeInfo cAttribute
    val CAttrQual: 'a cAttribute -> 'a cTypeQualifier
    val CAuto: 'a -> 'a cStorageSpecifier
    val CBinary:
       cBinaryOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val CBlockDecl: 'a cDeclaration -> 'a cCompoundBlockItem
    type CBlockItem = NodeInfo cCompoundBlockItem
    val CBlockStmt: 'a cStatement -> 'a cCompoundBlockItem
    val CBoolType: 'a -> 'a cTypeSpecifier
    val CBreak: 'a -> 'a cStatement
    type CBuiltin = NodeInfo cBuiltinThing
    val CBuiltinExpr: 'a cBuiltinThing -> 'a cExpression
    val CBuiltinOffsetOf:
       'a cDeclaration -> 'a cPartDesignator list -> 'a -> 'a cBuiltinThing
    val CBuiltinTypesCompatible:
       'a cDeclaration -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val CBuiltinVaArg:
       'a cExpression -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val CCall: 'a cExpression -> 'a cExpression list -> 'a -> 'a cExpression
    val CCase: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val CCases:
       'a cExpression ->
         'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val CCast: 'a cDeclaration -> 'a cExpression -> 'a -> 'a cExpression
    val CChar: char -> bool -> cChar
    eqtype CChar
    val CCharConst: cChar -> 'a -> 'a cConstant
    val CCharType: 'a -> 'a cTypeSpecifier
    val CChars: char list -> bool -> cChar
    val CComma: 'a cExpression list -> 'a -> 'a cExpression
    val CCompOp: cUnaryOp
    val CComplexImag: 'a cExpression -> 'a -> 'a cExpression
    val CComplexReal: 'a cExpression -> 'a -> 'a cExpression
    val CComplexType: 'a -> 'a cTypeSpecifier
    val CCompound:
       ident list -> 'a cCompoundBlockItem list -> 'a -> 'a cStatement
    val CCompoundLit:
       'a cDeclaration ->
         ('a cPartDesignator list * 'a cInitializer) list ->
           'a -> 'a cExpression
    val CCond:
       'a cExpression ->
         'a cExpression optiona -> 'a cExpression -> 'a -> 'a cExpression
    val CConst: 'a cConstant -> 'a cExpression
    type CConst = NodeInfo cConstant
    val CConstQual: 'a -> 'a cTypeQualifier
    eqtype 'a CConstant
    val CCont: 'a -> 'a cStatement
    val CDecl:
       'a cDeclarationSpecifier list ->
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
           -> 'a -> 'a cDeclaration
    type CDecl = NodeInfo cDeclaration
    val CDeclExt: 'a cDeclaration -> 'a cExternalDeclaration
    type CDeclSpec = NodeInfo cDeclarationSpecifier
    val CDecl_flat:
       'a cDeclarationSpecifier list ->
         ('a cDeclarator optiona * 'a cInitializer optiona *
          'a cExpression optiona
         )
         list
           -> 'a -> 'a cDeclaration
    val CDeclr:
       ident optiona ->
         'a cDerivedDeclarator list ->
           'a cStringLiteral optiona ->
             'a cAttribute list -> 'a -> 'a cDeclarator
    type CDeclr = NodeInfo cDeclarator
    val CDeclrR:
       ident optiona ->
         NodeInfo cDerivedDeclarator list Reversed ->
           NodeInfo cStringLiteral optiona ->
             NodeInfo cAttribute list -> NodeInfo -> CDeclrR
    datatype CDeclrR
    =
         CDeclrR0 of
             ident optiona * NodeInfo cDerivedDeclarator list Reversed *
             NodeInfo cStringLiteral optiona * NodeInfo cAttribute list *
             NodeInfo
    val CDefault: 'a cStatement -> 'a -> 'a cStatement
    type CDerivedDeclr = NodeInfo cDerivedDeclarator
    type CDesignator = NodeInfo cPartDesignator
    val CDivAssOp: cAssignOp
    val CDivOp: cBinaryOp
    val CDoubleType: 'a -> 'a cTypeSpecifier
    val CEnum:
       ident optiona ->
         (ident * 'a cExpression optiona) list optiona ->
           'a cAttribute list -> 'a -> 'a cEnumeration
    type CEnum = NodeInfo cEnumeration
    val CEnumType: 'a cEnumeration -> 'a -> 'a cTypeSpecifier
    val CEqOp: cBinaryOp
    val CExpr: 'a cExpression optiona -> 'a -> 'a cStatement
    type CExpr = NodeInfo cExpression
    type CExtDecl = NodeInfo cExternalDeclaration
    val CExtern: 'a -> 'a cStorageSpecifier
    val CFDefExt: 'a cFunctionDef -> 'a cExternalDeclaration
    val CFloat: abr_string -> cFloat
    eqtype CFloat
    val CFloatConst: cFloat -> 'a -> 'a cConstant
    val CFloatType: 'a -> 'a cTypeSpecifier
    val CFor:
       ('a cExpression optiona, 'a cDeclaration) either ->
         'a cExpression optiona ->
           'a cExpression optiona -> 'a cStatement -> 'a -> 'a cStatement
    val CFunDeclr:
       (ident list, 'a cDeclaration list * bool) either ->
         'a cAttribute list -> 'a -> 'a cDerivedDeclarator
    val CFunDef:
       'a cDeclarationSpecifier list ->
         'a cDeclarator ->
           'a cDeclaration list -> 'a cStatement -> 'a -> 'a cFunctionDef
    type CFunDef = NodeInfo cFunctionDef
    val CFunSpec: 'a cFunctionSpecifier -> 'a cDeclarationSpecifier
    type CFunSpec = NodeInfo cFunctionSpecifier
    val CGenericSelection:
       'a cExpression ->
         ('a cDeclaration optiona * 'a cExpression) list ->
           'a -> 'a cExpression
    val CGeqOp: cBinaryOp
    val CGoto: ident -> 'a -> 'a cStatement
    val CGotoPtr: 'a cExpression -> 'a -> 'a cStatement
    val CGrOp: cBinaryOp
    val CIf:
       'a cExpression ->
         'a cStatement -> 'a cStatement optiona -> 'a -> 'a cStatement
    val CIndOp: cUnaryOp
    val CIndex: 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    type CInit = NodeInfo cInitializer
    val CInitExpr: 'a cExpression -> 'a -> 'a cInitializer
    val CInitList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         'a -> 'a cInitializer
    type CInitList = NodeInfo CInitializerList
    type 'a CInitializerList =
       ('a cPartDesignator list * 'a cInitializer) list
    val CInlineQual: 'a -> 'a cFunctionSpecifier
    val CInt128Type: 'a -> 'a cTypeSpecifier
    val CIntConst: cInteger -> 'a -> 'a cConstant
    eqtype CIntFlag
    eqtype CIntRepr
    val CIntType: 'a -> 'a cTypeSpecifier
    val CInteger: int -> cIntRepr -> cIntFlag flags -> cInteger
    eqtype CInteger
    val CLabAddrExpr: ident -> 'a -> 'a cExpression
    val CLabel:
       ident -> 'a cStatement -> 'a cAttribute list -> 'a -> 'a cStatement
    val CLeOp: cBinaryOp
    val CLeqOp: cBinaryOp
    val CLndOp: cBinaryOp
    val CLongType: 'a -> 'a cTypeSpecifier
    val CLorOp: cBinaryOp
    val CMember: 'a cExpression -> ident -> bool -> 'a -> 'a cExpression
    val CMemberDesig: ident -> 'a -> 'a cPartDesignator
    val CMinOp: cUnaryOp
    val CMulAssOp: cAssignOp
    val CMulOp: cBinaryOp
    val CNegOp: cUnaryOp
    val CNeqOp: cBinaryOp
    val CNestedFunDef: 'a cFunctionDef -> 'a cCompoundBlockItem
    val CNoArrSize: bool -> 'a cArraySize
    val CNonnullQual: 'a -> 'a cTypeQualifier
    val CNoreturnQual: 'a -> 'a cFunctionSpecifier
    val CNullableQual: 'a -> 'a cTypeQualifier
    val COrAssOp: cAssignOp
    val COrOp: cBinaryOp
    val CPlusOp: cUnaryOp
    val CPostDecOp: cUnaryOp
    val CPostIncOp: cUnaryOp
    val CPreDecOp: cUnaryOp
    val CPreIncOp: cUnaryOp
    val CPtrDeclr: 'a cTypeQualifier list -> 'a -> 'a cDerivedDeclarator
    val CRangeDesig:
       'a cExpression -> 'a cExpression -> 'a -> 'a cPartDesignator
    val CRegister: 'a -> 'a cStorageSpecifier
    val CRestrQual: 'a -> 'a cTypeQualifier
    val CReturn: 'a cExpression optiona -> 'a -> 'a cStatement
    val CRmdAssOp: cAssignOp
    val CRmdOp: cBinaryOp
    val CSUType: 'a cStructureUnion -> 'a -> 'a cTypeSpecifier
    val CShlAssOp: cAssignOp
    val CShlOp: cBinaryOp
    val CShortType: 'a -> 'a cTypeSpecifier
    val CShrAssOp: cAssignOp
    val CShrOp: cBinaryOp
    val CSignedType: 'a -> 'a cTypeSpecifier
    val CSizeofExpr: 'a cExpression -> 'a -> 'a cExpression
    val CSizeofType: 'a cDeclaration -> 'a -> 'a cExpression
    type CStat = NodeInfo cStatement
    val CStatExpr: 'a cStatement -> 'a -> 'a cExpression
    val CStatic: 'a -> 'a cStorageSpecifier
    val CStaticAssert:
       'a cExpression -> 'a cStringLiteral -> 'a -> 'a cDeclaration
    val CStorageSpec: 'a cStorageSpecifier -> 'a cDeclarationSpecifier
    type CStorageSpec = NodeInfo cStorageSpecifier
    val CStrConst: cString -> 'a -> 'a cConstant
    val CStrLit: cString -> 'a -> 'a cStringLiteral
    type CStrLit = NodeInfo cStringLiteral
    eqtype CString
    eqtype 'a CStringLiteral
    val CStruct:
       cStructTag ->
         ident optiona ->
           'a cDeclaration list optiona ->
             'a cAttribute list -> 'a -> 'a cStructureUnion
    val CStructTag: cStructTag
    eqtype CStructTag
    type CStructUnion = NodeInfo cStructureUnion
    val CSubAssOp: cAssignOp
    val CSubOp: cBinaryOp
    val CSwitch: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val CThread: 'a -> 'a cStorageSpecifier
    val CTranslUnit:
       'a cExternalDeclaration list -> 'a -> 'a cTranslationUnit
    type CTranslUnit = NodeInfo cTranslationUnit
    val CTypeDef: ident -> 'a -> 'a cTypeSpecifier
    val CTypeOfExpr: 'a cExpression -> 'a -> 'a cTypeSpecifier
    val CTypeOfType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val CTypeQual: 'a cTypeQualifier -> 'a cDeclarationSpecifier
    type CTypeQual = NodeInfo cTypeQualifier
    val CTypeSpec: 'a cTypeSpecifier -> 'a cDeclarationSpecifier
    type CTypeSpec = NodeInfo cTypeSpecifier
    val CTypedef: 'a -> 'a cStorageSpecifier
    val CUnary: cUnaryOp -> 'a cExpression -> 'a -> 'a cExpression
    eqtype CUnaryOp
    val CUnionTag: cStructTag
    val CUnsigType: 'a -> 'a cTypeSpecifier
    val CVar: ident -> 'a -> 'a cExpression
    val CVoidType: 'a -> 'a cTypeSpecifier
    val CVolatQual: 'a -> 'a cTypeQualifier
    val CWhile:
       'a cExpression -> 'a cStatement -> bool -> 'a -> 'a cStatement
    val CXorAssOp: cAssignOp
    val CXorOp: cBinaryOp
    eqtype ClangCVersion
    eqtype Comment
    val DecRepr: cIntRepr
    eqtype ('a, 'b) Either
    val False: bool
    val FlagImag: cIntFlag
    val FlagLong: cIntFlag
    val FlagLongLong: cIntFlag
    val FlagUnsigned: cIntFlag
    val Flags: int -> 'a flags
    val From_char_hd: string -> char
    val From_string: string -> abr_string
    val HexRepr: cIntRepr
    val I: 'a -> 'a
    val Ident: abr_string * int * nodeInfo -> ident
    eqtype Ident
    val InternalPosition: positiona
    val Just: 'a -> 'a optiona
    val K: 'a -> 'b -> 'a
    datatype 'a Located = Located of 'a * (Position * (Position * int))
    eqtype 'a Maybe
    eqtype Name
    val Namea: int -> namea
    val NamedRef: ident -> sUERef
    val NoPosition: positiona
    val NodeInfo: positiona -> positiona * int -> namea -> nodeInfo
    eqtype NodeInfo
    val Nothing: 'a optiona
    val OctalRepr: cIntRepr
    val OnlyPos: positiona -> positiona * int -> nodeInfo
    type PosLength = Position * int
    val Position: int -> abr_string -> int -> int -> positiona
    eqtype Position
    val Reversed: 'a -> 'a
    type 'a Reversed = 'a
    val True: bool
    datatype abbreviation = Abbreviation of semi_terma
    datatype abr_string
    =
         SS_base of string_b_a_s_e
       | String_concatWith of abr_string * abr_string list
    val activate_simp_optimization: bool
    val add_0: int -> abr_string
    val add_hierarchy:
       ('a ->
          'b ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              'c -> (abr_string * ocl_ty) list list tmp_inh -> 'd -> 'e)
         ->
         ocl_class ->
           'a ->
             'b ->
               'c ->
                 (ocl_class, 'f) inheritance_ext list tmp_inh ->
                   'g -> 'd -> 'e
    val add_hierarchya:
       ('a ->
          'b ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              'c -> (abr_string * ocl_ty) list list tmp_inh -> 'd -> 'e)
         ->
         ocl_class ->
           'a ->
             'b ->
               'c ->
                 (ocl_class, 'f) inheritance_ext list tmp_inh ->
                   'd -> 'g -> 'e
    val add_hierarchyb:
       ('a -> 'b -> 'c -> 'd -> 'e -> 'f) ->
         'a -> 'b -> 'c -> 'd tmp_inh -> 'e tmp_sub -> 'f
    val align_right: string -> int -> string -> string
    datatype ('a, 'b) alist = Alist of ('a * 'b) list
    val all: (int -> bool) -> abr_string -> bool
    datatype all_meta
    =
         META_all_meta_embedding of all_meta_embedding
       | META_boot_generation_syntax of boot_generation_syntax
       | META_boot_setup_env of boot_setup_env
       | META_semi_theories of semi_theories
    datatype all_meta_embedding
    =
         META_ass_class of floor * ocl_ass_class
       | META_association of unit ocl_association_ext
       | META_class_raw of floor * unit ocl_class_raw_ext
       | META_class_synonym of ocl_class_synonym
       | META_class_tree of ocl_class_tree
       | META_ctxt of floor * unit ocl_ctxt_ext
       | META_def_base_l of ocl_def_base_l
       | META_def_state of floor * ocl_def_state
       | META_def_transition of floor * ocl_def_transition
       | META_enum of ocl_enum
       | META_flush_all of ocl_flush_all
       | META_generic of ocl_generic
       | META_haskell of isaUnit
       | META_instance of ocl_instance
    val andf: ('a -> bool) * ('a -> bool) -> 'a -> bool
    val anonymousRef: namea -> sUERef
    val ap1: ('a -> 'b list -> 'c) -> 'a -> ('d -> 'b) -> 'd -> 'c
    val ap16:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) ->
                     ('i -> 'b) ->
                       ('j -> 'b) ->
                         ('k -> 'b) ->
                           ('l -> 'b) ->
                             ('m -> 'b) ->
                               ('n -> 'b) ->
                                 ('o -> 'b) ->
                                   ('p -> 'b) ->
                                     ('q -> 'b) ->
                                       ('r -> 'b) -> ('s -> 'b) -> 'd -> ...
    val ap2:
       ('a -> 'b list -> 'c) ->
         'a -> ('d -> 'b) -> ('e -> 'b) -> 'd -> 'e -> 'c
    val ap3:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) -> ('e -> 'b) -> ('f -> 'b) -> 'd -> 'e -> 'f -> 'c
    val ap4:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) -> ('g -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'c
    val ap5:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'h -> 'c
    val ap6:
       ('a -> 'b list -> 'c) ->
         'a ->
           ('d -> 'b) ->
             ('e -> 'b) ->
               ('f -> 'b) ->
                 ('g -> 'b) ->
                   ('h -> 'b) ->
                     ('i -> 'b) -> 'd -> 'e -> 'f -> 'g -> 'h -> 'i -> 'c
    val apfst: ('a -> 'b) -> 'a * 'c -> 'b * 'c
    val app: abr_string -> semi_term_0 list -> semi_term_0
    val app0: abr_string -> semi_term_0 list -> semi_term
    val app_pair: semi_term_0 -> semi_term_0 list -> semi_term_0
    val app_rev: 'a -> ('a -> 'b) -> 'b
    val append: 'a list -> 'a list -> 'a list
    val apply: semi_term_0 -> semi_term_0 list -> semi_term_0
    val apply2: ('a -> 'b) -> 'a * 'a -> 'b * 'b
    val apply_end: semi_method list -> semi_command_state
    val apply_optim_ass_arity: 'a ocl_ty_class_ext -> 'b -> 'b option
    val applya: semi_method list -> semi_command_proof
    val apsnd: ('a -> 'b) -> 'c * 'a -> 'c * 'b
    val ar1: ('a -> 'b list -> 'c) -> 'a -> 'b -> 'c
    val ar2: ('a -> 'b list -> 'c) -> 'a -> ('d -> 'b) -> 'd -> 'b -> 'c
    val ar3:
       ('a -> 'b list -> 'c) ->
         'a -> ('d -> 'b) -> ('e -> 'b) -> 'd -> 'e -> 'b -> 'c
    val arrange_ass:
       bool ->
         bool ->
           all_meta_embedding list ->
             ocl_enum list ->
               unit ocl_class_raw_ext list * unit ocl_association_ext list
    val ascii_of_literal: string -> int
    datatype asmblock
    =
         Asmblock of
             abr_string * (abr_string option * (abr_string * expr)) list *
             (abr_string option * (abr_string * expr)) list *
             abr_string list
    val assemblyOperand:
       'a cAssemblyOperand list ->
         (abr_string option * (abr_string * expr)) list
    val assoc: 'a equal -> 'a -> ('a * 'b) list -> 'b option
    val assoca: abr_string -> (string_b_a_s_e * 'a) list -> 'a option
    val attrs:
       nodeInfo cDeclarationSpecifier list ->
         nodeInfo cDerivedDeclarator list ->
           nodeInfo cAttribute list ->
             ((comment list * (abr_string * int, (int * int) list) alist) *
              (positiona * int) option)
             *
             (positiona * int)
               -> fnspec list
    val attrs0: nodeInfo cAttribute -> gcc_attribute
    val auto: semi_method
    val auto_simp_add: abr_string list -> semi_method
    val auto_simp_add2:
       semi_thm_attribute list -> abr_string list -> semi_method
    val auto_simp_add_split:
       semi_thm_attribute list -> abr_string list -> semi_method
    val aux_b_r_e_a_d_t_h:
       'a ->
         ('a, 'a * 'b list) print_iskindof_up_istypeof_output list ->
           ('a * ('b * bool) list) list ->
             ('b * bool) list ->
               ('a, 'a * 'b list) print_iskindof_up_istypeof_output list
    val aux_d_e_p_t_h:
       ('a * ('b * bool) list) list ->
         ('a, 'a * 'b list) print_iskindof_up_istypeof_output list
    val axiomatization: axiomatization -> all_meta
    datatype axiomatization = Axiomatization of abr_string * semi_terma
    val base255: abr_string -> abr_string
    datatype base_inttype
    = Charb | Double | Float | Inta | Long | LongLong | Short
    val basic: abr_string list -> semi_term_0
    val bin_last: inta -> bool
    val bin_rest: inta -> inta
    val bin_to_bl: nat -> inta -> bool list
    val bin_to_bl_aux: nat -> inta -> bool list -> bool list
    val binaryOp: cBinaryOp -> binoptype
    val bind: ('a -> 'b option) -> ('b list -> 'c) -> 'a list -> 'c option
    val bind2: ('a, 'b * 'c) sum -> ('b -> 'd) -> ('a, 'd * 'c) sum
    val bind3:
       ('a -> ('b, 'c * 'd) sum) -> ('c -> 'e) -> 'a -> ('b, 'e * 'd) sum
    val bind_e_r_r:
       'a print_examp_instance_draw_list_attra ->
         ('a -> 'b print_examp_instance_draw_list_attra) ->
           'b print_examp_instance_draw_list_attra
    val bind_k: ('a -> ('b, 'c * 'd) sum) -> 'e -> 'a -> ('b, 'e * 'd) sum
    val binda: 'a option -> ('a -> 'b option) -> 'b option
    val bindb: ('a -> 'b * 'c) -> ('c -> 'b -> 'd) -> 'a -> 'd
    val bindc: ('a, 'b) sum -> ('b -> ('a, 'c) sum) -> ('a, 'c) sum
    val bindd:
       ('a list -> (char list, 'b * 'a list) sum) ->
         ('b -> 'a list -> (char list, 'c * 'a list) sum) ->
           'a list -> (char list, 'c * 'a list) sum
    val binop: semi_term_0 -> abr_string -> semi_term_0 -> semi_term_0
    val binop_l: abr_string -> semi_term_0 list -> semi_term_0
    datatype binoptype
    =
         BitwiseAnd
       | BitwiseOr
       | BitwiseXOr
       | Divides
       | Equals
       | Geq
       | Gt
       | LShift
       | Leq
       | LogAnd
       | LogOr
       | Lt
       | Minus
       | Modulus
       | NotEquals
       | Plus
       | RShift
       | Times
    val binoptype_of_CAssignOp: cAssignOp -> binoptype option
    datatype 'a bit0 = Abs_bit0 of inta
    val bit_cut_integer: int -> int * bool
    val blast: Code_Numeral.natural option -> semi_method
    datatype block_item
    = BI_Decl of declaration region_Wrap | BI_Stmt of statement
    val block_item_list:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list ->
           nodeInfo -> block_item list region_Wrap
    val block_item_list0:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list ->
           (positiona * int) * (positiona * int) -> block_item list
    val block_item_list0a:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cCompoundBlockItem list -> nodeInfo -> block_item list
    val bogus: sourcePos
    val bogwrap: 'a -> 'a region_Wrap
    val bool_ord: bool ord
    datatype boot_generation_syntax
    = Boot_generation_syntax of generation_semantics_ocl
    datatype boot_setup_env = Boot_setup_env of unit compiler_env_config_ext
    val bootstrap_floor:
       all_meta list ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val bootstrap_floora:
       ('a ->
          unit compiler_env_config_ext ->
            all_meta list * (unit compiler_env_config_ext -> 'b))
         ->
         'a ->
           unit compiler_env_config_ext ->
             (all_meta list * unit compiler_env_config_ext) *
             (unit compiler_env_config_ext -> 'b)
    val build: ('a list -> 'a list) -> 'a list
    val build_rev: ('a list -> 'a list) -> 'a list
    val builtinPosition: positiona
    val bulkload: 'a equal -> ('a * 'b) list -> ('a, 'b) alist
    val burrow: ('a list -> 'b list) -> 'a list list -> 'b list list
    val burrow_fst: ('a list -> 'b list) -> ('a * 'c) list -> ('b * 'c) list
    val burrow_options:
       ('a list -> 'b list) -> 'a option list -> 'b option list
    val by: semi_method list -> semi_command_final
    val cAddAssOp: cAssignOp
    val cAddOp: cBinaryOp
    val cAdrOp: cUnaryOp
    val cAlignAsExpr: 'a cExpression -> 'a -> 'a cAlignmentSpecifier
    val cAlignAsType: 'a cDeclaration -> 'a -> 'a cAlignmentSpecifier
    val cAlignSpec: 'a cAlignmentSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cAlignmentSpecifier
    =
         CAlignAsExpr0 of 'a cExpression * 'a
       | CAlignAsType0 of 'a cDeclaration * 'a
    val cAlignofExpr: 'a cExpression -> 'a -> 'a cExpression
    val cAlignofType: 'a cDeclaration -> 'a -> 'a cExpression
    val cAndAssOp: cAssignOp
    val cAndOp: cBinaryOp
    val cArrDeclr:
       'a cTypeQualifier list ->
         'a cArraySize -> 'a -> 'a cDerivedDeclarator
    val cArrDesig: 'a cExpression -> 'a -> 'a cPartDesignator
    val cArrSize: bool -> 'a cExpression -> 'a cArraySize
    datatype 'a cArraySize
    = CArrSize0 of bool * 'a cExpression | CNoArrSize0 of bool
    val cAsm: 'a cAssemblyStatement -> 'a -> 'a cStatement
    val cAsmExt: 'a cStringLiteral -> 'a -> 'a cExternalDeclaration
    val cAsmOperand:
       ident optiona ->
         'a cStringLiteral -> 'a cExpression -> 'a -> 'a cAssemblyOperand
    val cAsmStmt:
       'a cTypeQualifier optiona ->
         'a cStringLiteral ->
           'a cAssemblyOperand list ->
             'a cAssemblyOperand list ->
               'a cStringLiteral list -> 'a -> 'a cAssemblyStatement
    datatype 'a cAssemblyOperand
    =
         CAsmOperand0 of
             ident optiona * 'a cStringLiteral * 'a cExpression * 'a
    datatype 'a cAssemblyStatement
    =
         CAsmStmt0 of
             'a cTypeQualifier optiona * 'a cStringLiteral *
             'a cAssemblyOperand list * 'a cAssemblyOperand list *
             'a cStringLiteral list * 'a
    val cAssign:
       cAssignOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val cAssignOp: cAssignOp
    datatype cAssignOp
    =
         CAddAssOp0
       | CAndAssOp0
       | CAssignOp0
       | CDivAssOp0
       | CMulAssOp0
       | COrAssOp0
       | CRmdAssOp0
       | CShlAssOp0
       | CShrAssOp0
       | CSubAssOp0
       | CXorAssOp0
    val cAtomicQual: 'a -> 'a cTypeQualifier
    val cAtomicType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val cAttr: ident -> 'a cExpression list -> 'a -> 'a cAttribute
    val cAttrQual: 'a cAttribute -> 'a cTypeQualifier
    datatype 'a cAttribute = CAttr0 of ident * 'a cExpression list * 'a
    val cAuto: 'a -> 'a cStorageSpecifier
    val cBinary:
       cBinaryOp -> 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    datatype cBinaryOp
    =
         CAddOp0
       | CAndOp0
       | CDivOp0
       | CEqOp0
       | CGeqOp0
       | CGrOp0
       | CLeOp0
       | CLeqOp0
       | CLndOp0
       | CLorOp0
       | CMulOp0
       | CNeqOp0
       | COrOp0
       | CRmdOp0
       | CShlOp0
       | CShrOp0
       | CSubOp0
       | CXorOp0
    val cBlockDecl: 'a cDeclaration -> 'a cCompoundBlockItem
    val cBlockStmt: 'a cStatement -> 'a cCompoundBlockItem
    val cBoolType: 'a -> 'a cTypeSpecifier
    val cBreak: 'a -> 'a cStatement
    val cBuiltinExpr: 'a cBuiltinThing -> 'a cExpression
    val cBuiltinOffsetOf:
       'a cDeclaration -> 'a cPartDesignator list -> 'a -> 'a cBuiltinThing
    datatype 'a cBuiltinThing
    =
         CBuiltinOffsetOf0 of 'a cDeclaration * 'a cPartDesignator list * 'a
       | CBuiltinTypesCompatible0 of 'a cDeclaration * 'a cDeclaration * 'a
       | CBuiltinVaArg0 of 'a cExpression * 'a cDeclaration * 'a
    val cBuiltinTypesCompatible:
       'a cDeclaration -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val cBuiltinVaArg:
       'a cExpression -> 'a cDeclaration -> 'a -> 'a cBuiltinThing
    val cCall: 'a cExpression -> 'a cExpression list -> 'a -> 'a cExpression
    val cCase: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cCases:
       'a cExpression ->
         'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cCast: 'a cDeclaration -> 'a cExpression -> 'a -> 'a cExpression
    val cChar: char -> bool -> cChar
    datatype cChar = CChar0 of char * bool | CChars0 of char list * bool
    val cCharConst: cChar -> 'a -> 'a cConstant
    val cCharType: 'a -> 'a cTypeSpecifier
    val cChars: char list -> bool -> cChar
    val cComma: 'a cExpression list -> 'a -> 'a cExpression
    val cCompOp: cUnaryOp
    val cComplexImag: 'a cExpression -> 'a -> 'a cExpression
    val cComplexReal: 'a cExpression -> 'a -> 'a cExpression
    val cComplexType: 'a -> 'a cTypeSpecifier
    val cCompound:
       ident list -> 'a cCompoundBlockItem list -> 'a -> 'a cStatement
    datatype 'a cCompoundBlockItem
    =
         CBlockDecl0 of 'a cDeclaration
       | CBlockStmt0 of 'a cStatement
       | CNestedFunDef0 of 'a cFunctionDef
    val cCompoundLit:
       'a cDeclaration ->
         ('a cPartDesignator list * 'a cInitializer) list ->
           'a -> 'a cExpression
    val cCond:
       'a cExpression ->
         'a cExpression optiona -> 'a cExpression -> 'a -> 'a cExpression
    val cConst: 'a cConstant -> 'a cExpression
    val cConstQual: 'a -> 'a cTypeQualifier
    datatype 'a cConstant
    =
         CCharConst0 of cChar * 'a
       | CFloatConst0 of cFloat * 'a
       | CIntConst0 of cInteger * 'a
       | CStrConst0 of cString * 'a
    val cCont: 'a -> 'a cStatement
    val cDecl:
       'a cDeclarationSpecifier list ->
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
           -> 'a -> 'a cDeclaration
    val cDeclExt: 'a cDeclaration -> 'a cExternalDeclaration
    datatype 'a cDeclaration
    =
         CDecl0 of
             'a cDeclarationSpecifier list *
             (('a cDeclarator optiona * 'a cInitializer optiona) *
              'a cExpression optiona
             )
             list
             *
             'a
       | CStaticAssert0 of 'a cExpression * 'a cStringLiteral * 'a
    datatype 'a cDeclarationSpecifier
    =
         CAlignSpec0 of 'a cAlignmentSpecifier
       | CFunSpec0 of 'a cFunctionSpecifier
       | CStorageSpec0 of 'a cStorageSpecifier
       | CTypeQual0 of 'a cTypeQualifier
       | CTypeSpec0 of 'a cTypeSpecifier
    datatype 'a cDeclarator
    =
         CDeclr0 of
             ident optiona * 'a cDerivedDeclarator list *
             'a cStringLiteral optiona * 'a cAttribute list * 'a
    val cDeclr:
       ident optiona ->
         'a cDerivedDeclarator list ->
           'a cStringLiteral optiona ->
             'a cAttribute list -> 'a -> 'a cDeclarator
    val cDefault: 'a cStatement -> 'a -> 'a cStatement
    datatype 'a cDerivedDeclarator
    =
         CArrDeclr0 of 'a cTypeQualifier list * 'a cArraySize * 'a
       | CFunDeclr0 of
           (ident list, 'a cDeclaration list * bool) either *
           'a cAttribute list * 'a
       | CPtrDeclr0 of 'a cTypeQualifier list * 'a
    val cDivAssOp: cAssignOp
    val cDivOp: cBinaryOp
    val cDoubleType: 'a -> 'a cTypeSpecifier
    val cEnum:
       ident optiona ->
         (ident * 'a cExpression optiona) list optiona ->
           'a cAttribute list -> 'a -> 'a cEnumeration
    val cEnumType: 'a cEnumeration -> 'a -> 'a cTypeSpecifier
    datatype 'a cEnumeration
    =
         CEnum0 of
             ident optiona * (ident * 'a cExpression optiona) list optiona *
             'a cAttribute list * 'a
    val cEqOp: cBinaryOp
    val cExpr: 'a cExpression optiona -> 'a -> 'a cStatement
    datatype 'a cExpression
    =
         CAlignofExpr0 of 'a cExpression * 'a
       | CAlignofType0 of 'a cDeclaration * 'a
       | CAssign0 of cAssignOp * 'a cExpression * 'a cExpression * 'a
       | CBinary0 of cBinaryOp * 'a cExpression * 'a cExpression * 'a
       | CBuiltinExpr0 of 'a cBuiltinThing
       | CCall0 of 'a cExpression * 'a cExpression list * 'a
       | CCast0 of 'a cDeclaration * 'a cExpression * 'a
       | CComma0 of 'a cExpression list * 'a
       | CComplexImag0 of 'a cExpression * 'a
       | CComplexReal0 of 'a cExpression * 'a
       | CCompoundLit0 of
           'a cDeclaration *
           ('a cPartDesignator list * 'a cInitializer) list * 'a
       | CCond0 of
           'a cExpression * 'a cExpression optiona * 'a cExpression * 'a
       | CConst0 of 'a cConstant
       | CGenericSelection0 of
           'a cExpression *
           ('a cDeclaration optiona * 'a cExpression) list * 'a
       | CIndex0 of 'a cExpression * 'a cExpression * 'a
       | CLabAddrExpr0 of ident * 'a
       | CMember0 of 'a cExpression * ...
       | CSizeofExpr0 of ...
       | ...
    val cExtern: 'a -> 'a cStorageSpecifier
    datatype 'a cExternalDeclaration
    =
         CAsmExt0 of 'a cStringLiteral * 'a
       | CDeclExt0 of 'a cDeclaration
       | CFDefExt0 of 'a cFunctionDef
    val cFDefExt: 'a cFunctionDef -> 'a cExternalDeclaration
    val cFloat: abr_string -> cFloat
    datatype cFloat = CFloat0 of abr_string
    val cFloatConst: cFloat -> 'a -> 'a cConstant
    val cFloatType: 'a -> 'a cTypeSpecifier
    val cFor:
       ('a cExpression optiona, 'a cDeclaration) either ->
         'a cExpression optiona ->
           'a cExpression optiona -> 'a cStatement -> 'a -> 'a cStatement
    val cFunDeclr:
       (ident list, 'a cDeclaration list * bool) either ->
         'a cAttribute list -> 'a -> 'a cDerivedDeclarator
    val cFunDef:
       'a cDeclarationSpecifier list ->
         'a cDeclarator ->
           'a cDeclaration list -> 'a cStatement -> 'a -> 'a cFunctionDef
    val cFunSpec: 'a cFunctionSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cFunctionDef
    =
         CFunDef0 of
             'a cDeclarationSpecifier list * 'a cDeclarator *
             'a cDeclaration list * 'a cStatement * 'a
    datatype 'a cFunctionSpecifier
    = CInlineQual0 of 'a | CNoreturnQual0 of 'a
    val cGenericSelection:
       'a cExpression ->
         ('a cDeclaration optiona * 'a cExpression) list ->
           'a -> 'a cExpression
    val cGeqOp: cBinaryOp
    val cGoto: ident -> 'a -> 'a cStatement
    val cGotoPtr: 'a cExpression -> 'a -> 'a cStatement
    val cGrOp: cBinaryOp
    val cIf:
       'a cExpression ->
         'a cStatement -> 'a cStatement optiona -> 'a -> 'a cStatement
    val cIndOp: cUnaryOp
    val cIndex: 'a cExpression -> 'a cExpression -> 'a -> 'a cExpression
    val cInitExpr: 'a cExpression -> 'a -> 'a cInitializer
    val cInitList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         'a -> 'a cInitializer
    datatype 'a cInitializer
    =
         CInitExpr0 of 'a cExpression * 'a
       | CInitList0 of ('a cPartDesignator list * 'a cInitializer) list * 'a
    val cInlineQual: 'a -> 'a cFunctionSpecifier
    val cInt128Type: 'a -> 'a cTypeSpecifier
    val cIntConst: cInteger -> 'a -> 'a cConstant
    datatype cIntFlag
    = FlagImag0 | FlagLong0 | FlagLongLong0 | FlagUnsigned0
    datatype cIntRepr = DecRepr0 | HexRepr0 | OctalRepr0
    val cIntType: 'a -> 'a cTypeSpecifier
    val cInteger: int -> cIntRepr -> cIntFlag flags -> cInteger
    datatype cInteger = CInteger0 of int * cIntRepr * cIntFlag flags
    val cLabAddrExpr: ident -> 'a -> 'a cExpression
    val cLabel:
       ident -> 'a cStatement -> 'a cAttribute list -> 'a -> 'a cStatement
    val cLeOp: cBinaryOp
    val cLeqOp: cBinaryOp
    val cLndOp: cBinaryOp
    val cLongType: 'a -> 'a cTypeSpecifier
    val cLorOp: cBinaryOp
    val cMember: 'a cExpression -> ident -> bool -> 'a -> 'a cExpression
    val cMemberDesig: ident -> 'a -> 'a cPartDesignator
    val cMinOp: cUnaryOp
    val cMulAssOp: cAssignOp
    val cMulOp: cBinaryOp
    val cNegOp: cUnaryOp
    val cNeqOp: cBinaryOp
    val cNestedFunDef: 'a cFunctionDef -> 'a cCompoundBlockItem
    val cNoArrSize: bool -> 'a cArraySize
    val cNonnullQual: 'a -> 'a cTypeQualifier
    val cNoreturnQual: 'a -> 'a cFunctionSpecifier
    val cNullableQual: 'a -> 'a cTypeQualifier
    val cOrAssOp: cAssignOp
    val cOrOp: cBinaryOp
    datatype 'a cPartDesignator
    =
         CArrDesig0 of 'a cExpression * 'a
       | CMemberDesig0 of ident * 'a
       | CRangeDesig0 of 'a cExpression * 'a cExpression * 'a
    val cPlusOp: cUnaryOp
    val cPostDecOp: cUnaryOp
    val cPostIncOp: cUnaryOp
    val cPreDecOp: cUnaryOp
    val cPreIncOp: cUnaryOp
    val cPtrDeclr: 'a cTypeQualifier list -> 'a -> 'a cDerivedDeclarator
    val cRangeDesig:
       'a cExpression -> 'a cExpression -> 'a -> 'a cPartDesignator
    val cRegister: 'a -> 'a cStorageSpecifier
    val cRestrQual: 'a -> 'a cTypeQualifier
    val cReturn: 'a cExpression optiona -> 'a -> 'a cStatement
    val cRmdAssOp: cAssignOp
    val cRmdOp: cBinaryOp
    val cSUType: 'a cStructureUnion -> 'a -> 'a cTypeSpecifier
    val cShlAssOp: cAssignOp
    val cShlOp: cBinaryOp
    val cShortType: 'a -> 'a cTypeSpecifier
    val cShrAssOp: cAssignOp
    val cShrOp: cBinaryOp
    val cSignedType: 'a -> 'a cTypeSpecifier
    val cSizeofExpr: 'a cExpression -> 'a -> 'a cExpression
    val cSizeofType: 'a cDeclaration -> 'a -> 'a cExpression
    val cStatExpr: 'a cStatement -> 'a -> 'a cExpression
    datatype 'a cStatement
    =
         CAsm0 of 'a cAssemblyStatement * 'a
       | CBreak0 of 'a
       | CCase0 of 'a cExpression * 'a cStatement * 'a
       | CCases0 of 'a cExpression * 'a cExpression * 'a cStatement * 'a
       | CCompound0 of ident list * 'a cCompoundBlockItem list * 'a
       | CCont0 of 'a
       | CDefault0 of 'a cStatement * 'a
       | CExpr0 of 'a cExpression optiona * 'a
       | CFor0 of
           ('a cExpression optiona, 'a cDeclaration) either *
           'a cExpression optiona * 'a cExpression optiona * 'a cStatement *
           'a
       | CGoto0 of ident * 'a
       | CGotoPtr0 of 'a cExpression * 'a
       | CIf0 of 'a cExpression * 'a cStatement * 'a cStatement optiona * 'a
       | CLabel0 of ident * 'a cStatement * 'a cAttribute list * 'a
       | CReturn0 of 'a cExpression optiona * 'a
       | CSwitch0 of 'a cExpression * 'a cStatement * 'a
       | CWhile0 of 'a cExpression * 'a cStatement * ...
    val cStatic: 'a -> 'a cStorageSpecifier
    val cStaticAssert:
       'a cExpression -> 'a cStringLiteral -> 'a -> 'a cDeclaration
    val cStorageSpec: 'a cStorageSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cStorageSpecifier
    =
         CAuto0 of 'a
       | CExtern0 of 'a
       | CRegister0 of 'a
       | CStatic0 of 'a
       | CThread0 of 'a
       | CTypedef0 of 'a
    val cStrConst: cString -> 'a -> 'a cConstant
    val cStrLit: cString -> 'a -> 'a cStringLiteral
    val cString: abr_string -> bool -> cString
    datatype cString = CString0 of abr_string * bool
    datatype 'a cStringLiteral = CStrLit0 of cString * 'a
    val cStruct:
       cStructTag ->
         ident optiona ->
           'a cDeclaration list optiona ->
             'a cAttribute list -> 'a -> 'a cStructureUnion
    val cStructTag: cStructTag
    datatype cStructTag = CStructTag0 | CUnionTag0
    datatype 'a cStructureUnion
    =
         CStruct0 of
             cStructTag * ident optiona * 'a cDeclaration list optiona *
             'a cAttribute list * 'a
    val cSubAssOp: cAssignOp
    val cSubOp: cBinaryOp
    val cSwitch: 'a cExpression -> 'a cStatement -> 'a -> 'a cStatement
    val cThread: 'a -> 'a cStorageSpecifier
    val cTranslUnit:
       'a cExternalDeclaration list -> 'a -> 'a cTranslationUnit
    datatype 'a cTranslationUnit
    = CTranslUnit0 of 'a cExternalDeclaration list * 'a
    val cTypeDef: ident -> 'a -> 'a cTypeSpecifier
    val cTypeOfExpr: 'a cExpression -> 'a -> 'a cTypeSpecifier
    val cTypeOfType: 'a cDeclaration -> 'a -> 'a cTypeSpecifier
    val cTypeQual: 'a cTypeQualifier -> 'a cDeclarationSpecifier
    datatype 'a cTypeQualifier
    =
         CAtomicQual0 of 'a
       | CAttrQual0 of 'a cAttribute
       | CConstQual0 of 'a
       | CNonnullQual0 of 'a
       | CNullableQual0 of 'a
       | CRestrQual0 of 'a
       | CVolatQual0 of 'a
    val cTypeSpec: 'a cTypeSpecifier -> 'a cDeclarationSpecifier
    datatype 'a cTypeSpecifier
    =
         CAtomicType0 of 'a cDeclaration * 'a
       | CBoolType0 of 'a
       | CCharType0 of 'a
       | CComplexType0 of 'a
       | CDoubleType0 of 'a
       | CEnumType0 of 'a cEnumeration * 'a
       | CFloatType0 of 'a
       | CInt128Type0 of 'a
       | CIntType0 of 'a
       | CLongType0 of 'a
       | CSUType0 of 'a cStructureUnion * 'a
       | CShortType0 of 'a
       | CSignedType0 of 'a
       | CTypeDef0 of ident * 'a
       | CTypeOfExpr0 of 'a cExpression * 'a
       | CTypeOfType0 of 'a cDeclaration * 'a
       | CUnsigType0 of 'a
       | CVoidType0 of 'a
    val cTypedef: 'a -> 'a cStorageSpecifier
    val cUnary: cUnaryOp -> 'a cExpression -> 'a -> 'a cExpression
    datatype cUnaryOp
    =
         CAdrOp0
       | CCompOp0
       | CIndOp0
       | CMinOp0
       | CNegOp0
       | CPlusOp0
       | CPostDecOp0
       | CPostIncOp0
       | CPreDecOp0
       | CPreIncOp0
    val cUnionTag: cStructTag
    val cUnsigType: 'a -> 'a cTypeSpecifier
    val cVar: ident -> 'a -> 'a cExpression
    val cVoidType: 'a -> 'a cTypeSpecifier
    val cVolatQual: 'a -> 'a cTypeQualifier
    val cWhile:
       'a cExpression -> 'a cStatement -> bool -> 'a -> 'a cStatement
    val cXorAssOp: cAssignOp
    val cXorOp: cBinaryOp
    val cartouche: string -> string
    val case_tac: semi_terma -> semi_method
    val cat_lines: string list -> string
    val catch_error: ('a, 'b) sum -> ('a -> ('c, 'b) sum) -> ('c, 'b) sum
    datatype char
    = Chara of bool * bool * bool * bool * bool * bool * bool * bool
    val char_of_integer: int -> char
    val check_export_code:
       ('a -> unit) ->
         ('a -> unit) ->
           ('a -> unit) ->
             (abr_string -> unit) ->
               (reporting * 'a) list -> abr_string -> unit
    val check_single:
       abr_string option * (internal_oid * (internal_oid * abr_string) list)
         ->
         (ocl_multiplicity_single * ocl_multiplicity_single option) list ->
           internal_oid list -> (reporting * abr_string) list
    val check_single_ty:
       ('a -> (abr_string -> (ocl_ty * ('b * 'c)) option) * 'd) ->
         (int list, 'e * unit ocl_ty_class_ext) alist ->
           (Code_Numeral.natural -> internal_oid list list list option) ->
             (internal_oid * abr_string) list ->
               internal_oid ->
                 'a * unit ocl_multiplicity_ext ->
                   'a * unit ocl_multiplicity_ext ->
                     (reporting * abr_string) list ->
                       (reporting * abr_string) list
    val choose_0: 'a * 'b -> 'a
    val choose_1: 'a * 'b -> 'b
    val chop: int -> 'a list -> 'a list * 'a list
    val chop_common_prefix:
       ('a * 'b -> bool) ->
         'a list * 'b list -> 'a list * ('a list * 'b list)
    val chop_groups: int -> 'a list -> 'a list list
    val chop_prefix: ('a -> bool) -> 'a list -> 'a list * 'a list
    val chop_suffix: ('a -> bool) -> 'a list -> 'a list * 'a list
    val cl_name_to_string: 'a ocl_class_raw_ext -> abr_string
    val clangCVersion: abr_string -> clangCVersion
    datatype clangCVersion = ClangCVersion0 of abr_string
    val clarify: semi_method
    val classRaw_abstract: 'a ocl_class_raw_ext -> bool
    val classRaw_clause: 'a ocl_class_raw_ext -> ocl_ctxt_clause list
    val classRaw_clause_update:
       (ocl_ctxt_clause list -> ocl_ctxt_clause list) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val classRaw_name: 'a ocl_class_raw_ext -> ocl_ty_obj
    val classRaw_name_update:
       (ocl_ty_obj -> ocl_ty_obj) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    val classRaw_own: 'a ocl_class_raw_ext -> (abr_string * ocl_ty) list
    val classRaw_own_update:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         'a ocl_class_raw_ext -> 'a ocl_class_raw_ext
    type class_Pos = Position.T * Position.T
    val class_arity: ocl_class -> Code_Numeral.natural list
    datatype 'a class_output = C_out_OclAny | C_out_simple of 'a
    val class_unflat:
       unit ocl_class_raw_ext list * 'a ocl_association_ext list ->
         ocl_class option
    val class_unflat_aux:
       (int list, (abr_string * ocl_ty) list) alist ->
         (int list, abr_string list) alist ->
           (int list, unit) alist -> abr_string -> ocl_class option
    val class_unflata:
       unit ocl_class_raw_ext list * 'a ocl_association_ext list ->
         ocl_class
    val co1: ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
    val co15:
       ('a -> 'b) ->
         ('c ->
            'd ->
              'e ->
                'f ->
                  'g ->
                    'h ->
                      'i ->
                        'j -> 'k -> 'l -> 'm -> 'n -> 'o -> 'p -> 'q -> 'a)
           ->
           'c ->
             'd ->
               'e ->
                 'f ->
                   'g ->
                     'h ->
                       'i ->
                         'j -> 'k -> 'l -> 'm -> 'n -> 'o -> 'p -> 'q -> 'b
    val co2: ('a -> 'b) -> ('c -> 'd -> 'a) -> 'c -> 'd -> 'b
    val co4:
       ('a -> 'b) ->
         ('c -> 'd -> 'e -> 'f -> 'a) -> 'c -> 'd -> 'e -> 'f -> 'b
    datatype code_reflect
    = Code_reflect of bool * abr_string * abr_string list
    val collapse_mod_attribs: fnspec list -> fnspec list
    val collect_meta_embed:
       all_meta_embedding list ->
         bool * all_meta_embedding list -> all_meta_embedding list
    val combine: ('a * 'a -> bool) -> 'a list -> 'a list -> 'a list
    val commas: string list -> string
    val commas_quote: string list -> string
    datatype comment = Commenta of positiona * abr_string * commentFormat
    datatype commentFormat = MultiLine | SingleLine
    val comment_interval:
       comment list * (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> comment list
    datatype 'a comment_type
    =
         Auxupda of char list
       | Calls of char list option list
       | Dont_translate
       | End_spec of char list
       | Fnspeca of (char list * char list) list
       | Ghostupda of char list
       | Invariant of char list
       | Modifies of char list option list
       | OTHER of 'a
       | Owned_by of char list
       | Relspeca of char list
       | Speca of char list * char list
    val comp2: ('a -> 'b) -> ('c -> 'd -> 'a) -> 'c -> 'd -> 'b
    val comp3: ('a -> 'b) -> ('c -> 'd -> 'e -> 'a) -> 'c -> 'd -> 'e -> 'b
    val comp_env_input_class_bind: ('a -> 'b -> 'b) list -> 'a -> 'b -> 'b
    val comp_env_input_class_mk:
       ((unit -> unit compiler_env_config_ext * 'a) ->
          'b compiler_env_config_ext * 'c)
         ->
         (unit compiler_env_config_ext -> 'c -> 'a) ->
           ((abr_string option ->
               all_meta list ->
                 unit compiler_env_config_ext ->
                   'a -> unit compiler_env_config_ext * 'a)
              -> 'b compiler_env_config_ext * 'c -> 'd)
             ->
             (abr_string option ->
                all_meta list ->
                  unit compiler_env_config_ext ->
                    'a -> unit compiler_env_config_ext * 'a)
               -> 'b compiler_env_config_ext * 'c -> 'd
    val comp_env_input_class_rm:
       ('a -> 'b -> 'c compiler_env_config_ext * 'd) ->
         'a -> 'b -> 'c compiler_env_config_ext * 'd
    val comp_env_save:
       all_meta_embedding ->
         ('a -> 'b -> 'c compiler_env_config_ext * 'd) ->
           'a -> 'b -> 'c compiler_env_config_ext * 'd
    val comp_env_save_deep:
       all_meta_embedding ->
         ('a -> 'b -> unit compiler_env_config_ext * 'c) ->
           'a -> 'b -> unit compiler_env_config_ext * 'c
    val compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> unit compiler_env_config_ext -> 'a
    val compiler_env_config_empty:
       bool ->
         (abr_string * (abr_string list * abr_string)) option ->
           internal_oids ->
             generation_semantics_ocl ->
               generation_lemma_mode option * bool ->
                 unit compiler_env_config_ext
    datatype 'a compiler_env_config_ext
    =
         Compiler_env_config_ext of
             bool * (abr_string * (abr_string list * abr_string)) option *
             internal_oids * (Code_Numeral.natural * Code_Numeral.natural) *
             generation_semantics_ocl * ocl_class option *
             all_meta_embedding list *
             (string_b_a_s_e *
              (unit ocl_instance_single_ext * internal_oids)
             )
             list
             *
             (string_b_a_s_e *
              (internal_oids *
               (abr_string * unit ocl_instance_single_ext)
               ocl_def_state_core
              )
              list
             )
             list
             *
             bool * bool * (string_b_a_s_e list * string_b_a_s_e list) *
             string_b_a_s_e list * string_b_a_s_e list *
             (generation_lemma_mode option * bool) * 'a
    val compiler_env_config_more_map:
       ('a -> 'b) ->
         'a compiler_env_config_ext -> 'b compiler_env_config_ext
    val compiler_env_config_rec:
       (bool ->
          (abr_string * (abr_string list * abr_string)) option ->
            internal_oids ->
              Code_Numeral.natural * Code_Numeral.natural ->
                generation_semantics_ocl ->
                  ocl_class option ->
                    all_meta_embedding list ->
                      (string_b_a_s_e *
                       (unit ocl_instance_single_ext * internal_oids)
                      )
                      list
                        ->
                        (string_b_a_s_e *
                         (internal_oids *
                          (abr_string * unit ocl_instance_single_ext)
                          ocl_def_state_core
                         )
                         list
                        )
                        list
                          ->
                          bool ->
                            bool ->
                              string_b_a_s_e list * string_b_a_s_e list ->
                                string_b_a_s_e list ->
                                  string_b_a_s_e list ->
                                    generation_lemma_mode option * bool ->
                                      'a -> 'b)
         -> 'a compiler_env_config_ext -> 'b
    val compiler_env_config_rec0:
       (bool ->
          (abr_string * (abr_string list * abr_string)) option ->
            internal_oids ->
              Code_Numeral.natural * Code_Numeral.natural ->
                generation_semantics_ocl ->
                  ocl_class option ->
                    all_meta_embedding list ->
                      (string_b_a_s_e *
                       (unit ocl_instance_single_ext * internal_oids)
                      )
                      list
                        ->
                        (string_b_a_s_e *
                         (internal_oids *
                          (abr_string * unit ocl_instance_single_ext)
                          ocl_def_state_core
                         )
                         list
                        )
                        list
                          ->
                          bool ->
                            bool ->
                              string_b_a_s_e list * string_b_a_s_e list ->
                                string_b_a_s_e list ->
                                  string_b_a_s_e list ->
                                    generation_lemma_mode option * bool ->
                                      'a)
         -> 'b compiler_env_config_ext -> 'a
    val compiler_env_config_reset_all:
       'a compiler_env_config_ext ->
         unit compiler_env_config_ext * all_meta_embedding list
    val compiler_env_config_reset_no_env:
       'a compiler_env_config_ext -> unit compiler_env_config_ext
    val compiler_env_config_update:
       (unit compiler_env_config_ext -> unit compiler_env_config_ext) ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val compiler_env_configa:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> 'a
    val concat: 'a list list -> 'a list
    val concatWith:
       (abr_string -> string) -> abr_string list -> string -> string
    val concat_map: ('a -> 'b list) -> 'a list -> 'b list
    val const_mixfix: abr_string -> abr_string -> abr_string
    val const_oclany: abr_string
    val const_oclastype: abr_string
    val const_ocliskindof: abr_string
    val const_oclistypeof: abr_string
    val const_oid: abr_string
    val const_oid_of: abr_string -> abr_string
    val constant: 'a cConstant -> literalconstant_node region_Wrap
    val consts: consts -> all_meta
    datatype consts = Consts of abr_string * semi_typ * abr_string
    val consts_raw0:
       abr_string ->
         semi_typ -> abr_string -> Code_Numeral.natural option -> consts
    val consts_value: abr_string
    val constsa: abr_string -> semi_typ -> abr_string -> consts
    val cross_abs:
       (abr_string -> semi_terma -> semi_terma) ->
         nat -> terma -> semi_terma
    val cross_abs_aux:
       (abr_string -> semi_terma -> semi_terma) ->
         abr_string list -> nat * terma -> semi_terma
    val ctxt_clause: 'a ocl_ctxt_ext -> ocl_ctxt_clause list
    val ctxt_clause_update:
       (ocl_ctxt_clause list -> ocl_ctxt_clause list) ->
         'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val ctxt_expr: 'a ocl_ctxt_pre_post_ext -> ocl_ctxt_term_pp list
    val ctxt_expr_update:
       (ocl_ctxt_term_pp list -> ocl_ctxt_term_pp list) ->
         'a ocl_ctxt_pre_post_ext -> 'a ocl_ctxt_pre_post_ext
    val ctxt_fun_name: 'a ocl_ctxt_pre_post_ext -> abr_string
    val ctxt_fun_ty: 'a ocl_ctxt_pre_post_ext -> ocl_ty
    val ctxt_fun_ty_arg:
       'a ocl_ctxt_pre_post_ext -> (abr_string * ocl_ty) list
    val ctxt_fun_ty_out: 'a ocl_ctxt_pre_post_ext -> ocl_ty option
    val ctxt_param: 'a ocl_ctxt_ext -> abr_string list
    val ctxt_ty: 'a ocl_ctxt_ext -> ocl_ty_obj
    datatype 'a ctype
    =
         Array of 'a ctype * 'a option
       | Bitfield of bool * 'a
       | Bool
       | EnumTy of abr_string option
       | Function of 'a ctype * 'a ctype list
       | Identa of abr_string
       | PlainChar
       | Ptr of 'a ctype
       | Signed of base_inttype
       | StructTy of abr_string
       | UnionTy of abr_string
       | Unsigned of base_inttype
       | Void
    val current_parsing_style: parsing_style
    val curry: ('a * 'b -> 'c) -> 'a -> 'b -> 'c
    val d_hsk_constr: 'a compiler_env_config_ext -> string_b_a_s_e list
    val d_hsk_constr_update:
       (string_b_a_s_e list -> string_b_a_s_e list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_class: 'a compiler_env_config_ext -> ocl_class option
    val d_input_class_update:
       (ocl_class option -> ocl_class option) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_instance:
       'a compiler_env_config_ext ->
         (string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
         list
    val d_input_instance_update:
       ((string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
        list
          ->
          (string_b_a_s_e * (unit ocl_instance_single_ext * internal_oids))
          list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_meta: 'a compiler_env_config_ext -> all_meta_embedding list
    val d_input_meta_update:
       (all_meta_embedding list -> all_meta_embedding list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_input_state:
       'a compiler_env_config_ext ->
         (string_b_a_s_e *
          (internal_oids *
           (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
          )
          list
         )
         list
    val d_input_state_update:
       ((string_b_a_s_e *
         (internal_oids *
          (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
         )
         list
        )
        list
          ->
          (string_b_a_s_e *
           (internal_oids *
            (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
           )
           list
          )
          list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_HO_type: 'a compiler_env_config_ext -> string_b_a_s_e list
    val d_ocl_HO_type_update:
       (string_b_a_s_e list -> string_b_a_s_e list) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_accessor:
       'a compiler_env_config_ext ->
         string_b_a_s_e list * string_b_a_s_e list
    val d_ocl_accessor_update:
       (string_b_a_s_e list * string_b_a_s_e list ->
          string_b_a_s_e list * string_b_a_s_e list)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_oid_start: 'a compiler_env_config_ext -> internal_oids
    val d_ocl_oid_start_update:
       (internal_oids -> internal_oids) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_ocl_semantics:
       'a compiler_env_config_ext -> generation_semantics_ocl
    val d_ocl_semantics_update:
       (generation_semantics_ocl -> generation_semantics_ocl) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_auto_bootstrap: 'a compiler_env_config_ext -> bool
    val d_output_auto_bootstrap_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_disable_thy: 'a compiler_env_config_ext -> bool
    val d_output_disable_thy_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_header_force: 'a compiler_env_config_ext -> bool
    val d_output_header_force_update:
       (bool -> bool) ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_header_thy:
       'a compiler_env_config_ext ->
         (abr_string * (abr_string list * abr_string)) option
    val d_output_header_thy_update:
       ((abr_string * (abr_string list * abr_string)) option ->
          (abr_string * (abr_string list * abr_string)) option)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_position:
       'a compiler_env_config_ext ->
         Code_Numeral.natural * Code_Numeral.natural
    val d_output_position_update:
       (Code_Numeral.natural * Code_Numeral.natural ->
          Code_Numeral.natural * Code_Numeral.natural)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val d_output_sorry_dirty:
       'a compiler_env_config_ext -> generation_lemma_mode option * bool
    val d_output_sorry_dirty_update:
       (generation_lemma_mode option * bool ->
          generation_lemma_mode option * bool)
         -> 'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val datatype_constr_name: abr_string
    val datatype_constr_namea: abr_string
    val datatype_ext_constr_name: abr_string
    val datatype_ext_constr_namea: abr_string
    val datatype_ext_name: abr_string
    val datatype_ext_namea: abr_string
    val datatype_ext_nameb: abr_string
    val datatype_in: abr_string
    val datatype_name: abr_string
    val datatype_namea: abr_string
    val datatypea: datatypea -> all_meta
    datatype datatypea
    =
         Datatypea of
             semi_datatype_version *
             ((abr_string * abr_string list) *
              (abr_string * semi_typ list) list
             )
             list
    val datatypeb:
       abr_string -> (abr_string * semi_typ list) list -> datatypea
    val decRepr: cIntRepr
    val decl_spec:
       nodeInfo cDeclarationSpecifier list ->
         ((nodeInfo cDeclarator optiona * nodeInfo cInitializer optiona) *
          'a
         )
         list
         *
         (positiona * int)
           ->
           ((comment list * (abr_string * int, (int * int) list) alist) *
            (positiona * int) option)
           *
           (positiona * int)
             -> declaration list
    val decl_spec0:
       'a cDeclarationSpecifier list ->
         ((nodeInfo cDeclarator optiona * 'b) * 'c) list * (positiona * int)
           ->
           (ident optiona *
            ('d ctype option *
             (nodeInfo cDerivedDeclarator list *
              ('b *
               ((positiona * int) *
                ((positiona * int) * nodeInfo cAttribute list)))))
            ,
           abr_string *
           ((cStructTag *
             ('a cDeclaration list * ('a cAttribute list * 'a)))
            *
            (abr_string *
             (cStructTag *
              (('a cDeclarator optiona * 'a cInitializer optiona) *
               'a cExpression optiona
              )
              list)
             ,
            'a cDeclarationSpecifier list *
            (('a cDeclarator optiona * 'a cInitializer optiona) *
             'a cExpression optiona
            )
            list
            )
            sum
            list)
           ,
           abr_string *
           (cStructTag * ('a cDeclaration list * ('a cAttribute list * 'a)))
           ,
           ident optiona *
           ('d ctype option * nodeInfo cDerivedDeclarator list)
           ,
           ident optiona *
           (nodeInfo cDerivedDeclarator list *
            (((ident list, nodeInfo cDeclaration list * bool) either *
              (nodeInfo cAttribute list * nodeInfo))
             *
             (nodeInfo cDerivedDeclarator list * nodeInfo cAttribute list)))
           ,
           abr_string option region_Wrap * (abr_string * expr option) list)
           declaration0
           list
    val decl_spec_ty: 'a cDeclarationSpecifier list -> 'b ctype
    val decl_spec_ty_tag: cStructTag -> abr_string -> 'a ctype
    val declaration:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         ->
         (declaration region_Wrap -> 'a) -> nodeInfo cDeclaration -> 'a list
    datatype declaration
    =
         EnumDecl of
             abr_string option region_Wrap *
             (abr_string region_Wrap * expr option) list
       | ExtFnDecl of
           expr ctype * abr_string region_Wrap *
           (expr ctype * abr_string option) list * fnspec list
       | StructDecl of
           abr_string region_Wrap *
           (expr ctype * abr_string region_Wrap) list
       | TypeDecl of (expr ctype * abr_string region_Wrap) list
       | VarDecl of
           expr ctype *
           (abr_string region_Wrap *
            (storage_class list *
             (initializer option * gcc_attribute list)))
    datatype ('a, 'b, 'c, 'd, 'e, 'f) declaration0
    =
         EnumDecl0 of 'f
       | ExtFnDecl0 of 'e
       | StructDecl0_child of 'c
       | StructDecl0_root of 'b
       | TypeDecl0 of 'd
       | VarDecl0 of 'a
    val decode_lines: string -> string
    val definition: definition -> all_meta
    datatype definition
    =
         Definition_where1 of
             abr_string * (semi_terma * Code_Numeral.natural) * semi_terma
       | Definition_where2 of abr_string * semi_terma * semi_terma
       | Definitiona of semi_terma
    val definitiona: definition -> semi_theory
    val deref_assocs_list:
       'a equal -> ('b -> 'a list * 'c list) -> 'a -> 'b list -> 'c list
    val deriv_decl_spec:
       'a cDerivedDeclarator list ->
         'a cDeclarationSpecifier list -> expr ctype
    val deriv_decl_spec0:
       'a cDerivedDeclarator list -> expr ctype -> expr ctype
    datatype designator = DesignE of expr | DesignFld of abr_string
    val dict_ord: ('a * 'b -> order) -> 'a list * 'b list -> order
    val distinct: ('a * 'a -> bool) -> 'a list -> 'a list
    val divide_and_conquer: ('a -> 'a list * ('b list -> 'b)) -> 'a -> 'b
    val divide_and_conquer':
       ('a -> 'b -> ('a list * ('c list * 'b -> 'c * 'b)) * 'b) ->
         'a -> 'b -> 'c * 'b
    val divide_int: inta -> inta -> inta
    val divide_integer: int -> int -> int
    val divide_nat: nat -> nat -> nat
    val divmod_integer: int -> int -> int * int
    datatype doBlockFragment
    =
         DoGenerator of term * term
       | DoLetStmt of (term * term) list
       | DoQualifier of term
    val done: semi_command_final
    val dot_astype: abr_string -> abr_string
    val dot_iskindof: abr_string -> abr_string
    val dot_istypeof: abr_string -> abr_string
    val dot_oclastype: abr_string
    val dot_ocliskindof: abr_string
    val dot_oclistypeof: abr_string
    val downto: int * int -> int list
    val drop: int -> 'a list -> 'a list
    val dropWhile: ('a -> bool) -> 'a list -> 'a list
    val drop_prefix: ('a -> bool) -> 'a list -> 'a list
    val drop_suffix: ('a -> bool) -> 'a list -> 'a list
    val drule: semi_thm_attribute -> semi_method
    val duplicates: ('a * 'a -> bool) -> 'a list -> 'a list
    val ebogwrap: expr_node -> expr
    datatype ('a, 'b) either = Left of 'a | Right of 'b
    val elim: semi_thm_attribute -> semi_method
    datatype ('a, 'b) embedding
    =
         Embed_locale of
             ('a -> 'b -> all_meta list * 'b) embedding_fun list *
             ('a -> 'b -> unit semi_locale_ext * 'b) *
             ('a -> 'b -> semi_theory list * 'b) list *
             ('a -> 'b -> all_meta list * 'b) embedding_fun list
       | Embed_theories of
           ('a -> 'b -> all_meta list * 'b) embedding_fun list
    datatype 'a embedding_fun
    = Embedding_fun_info of abr_string * 'a | Embedding_fun_simple of 'a
    val empty: ('a, 'b) alist
    val emptya: ('a, 'b) alist
    val enclose: string -> string -> string -> string
    val encode_lines: string -> string
    val end_comment: char list -> (char list, char list * char list) sum
    val entries: ('a, 'b) alist -> ('a * 'b) list
    val entriesa: (int list, 'a) alist -> (abr_string * 'a) list
    val enumerate: nat -> 'a list -> (nat * 'a) list
    val eoi: 'a show -> 'a list -> (char list, unit * 'a list) sum
    val eq: 'a equal -> 'a -> 'a -> bool
    val eq_fst: ('a * 'b -> bool) -> ('a * 'c) * ('b * 'd) -> bool
    val eq_list: ('a * 'a -> bool) -> 'a list * 'a list -> bool
    val eq_pair:
       ('a * 'b -> bool) ->
         ('c * 'd -> bool) -> ('a * 'c) * ('b * 'd) -> bool
    val eq_set: ('a * 'a -> bool) -> 'a list * 'a list -> bool
    val eq_snd: ('a * 'b -> bool) -> ('c * 'a) * ('d * 'b) -> bool
    val equal: ''a -> ''a -> bool
    type 'a equal = {equala: 'a -> 'a -> bool}
    val equal_CAssignOp: cAssignOp -> cAssignOp -> bool
    val equal_Region: region -> region -> bool
    val equal_Region_Wrap:
       'a equal -> 'a region_Wrap -> 'a region_Wrap -> bool
    val equal_SourcePos: sourcePos -> sourcePos -> bool
    val equal_StringCvt_radix: stringCvt_radix -> stringCvt_radix -> bool
    val equal_Unsynchronized_ref:
       'a equal -> 'a unsynchronized_ref -> 'a unsynchronized_ref -> bool
    val equal_abr_string: abr_string equal
    val equal_abr_stringa: abr_string -> abr_string -> bool
    val equal_base_inttype: base_inttype -> base_inttype -> bool
    val equal_binoptype: binoptype -> binoptype -> bool
    val equal_bool: bool -> bool -> bool
    val equal_char: char equal
    val equal_chara: char -> char -> bool
    val equal_ctype: 'a equal -> 'a ctype equal
    val equal_ctypea: 'a equal -> 'a ctype -> 'a ctype -> bool
    val equal_designator: designator equal
    val equal_designatora: designator -> designator -> bool
    val equal_expr: expr equal
    val equal_expr_node: expr_node equal
    val equal_expr_nodea: expr_node -> expr_node -> bool
    val equal_expra: expr -> expr -> bool
    val equal_gcc_attribute: gcc_attribute equal
    val equal_gcc_attributea: gcc_attribute -> gcc_attribute -> bool
    val equal_generation_lemma_mode: generation_lemma_mode equal
    val equal_generation_lemma_modea:
       generation_lemma_mode -> generation_lemma_mode -> bool
    val equal_generation_semantics_ocl:
       generation_semantics_ocl -> generation_semantics_ocl -> bool
    val equal_initializer: initializer equal
    val equal_initializera: initializer -> initializer -> bool
    val equal_int: inta -> inta -> bool
    val equal_integer: int equal
    val equal_internal_oid: internal_oid equal
    val equal_internal_oida: internal_oid -> internal_oid -> bool
    val equal_list: 'a equal -> 'a list equal
    val equal_lista: 'a equal -> 'a list -> 'a list -> bool
    val equal_literal: string equal
    val equal_literalconstant_node: literalconstant_node equal
    val equal_literalconstant_nodea:
       literalconstant_node -> literalconstant_node -> bool
    val equal_more_info: more_info equal
    val equal_more_infoa: more_info -> more_info -> bool
    val equal_nat: nat equal
    val equal_nata: nat -> nat -> bool
    val equal_natural: Code_Numeral.natural equal
    val equal_naturala: Code_Numeral.natural -> Code_Numeral.natural -> bool
    val equal_ocl_association_type:
       ocl_association_type -> ocl_association_type -> bool
    val equal_ocl_class: ocl_class equal
    val equal_ocl_classa: ocl_class -> ocl_class -> bool
    val equal_ocl_collection: ocl_collection equal
    val equal_ocl_collectiona: ocl_collection -> ocl_collection -> bool
    val equal_ocl_ctxt_prefix: ocl_ctxt_prefix -> ocl_ctxt_prefix -> bool
    val equal_ocl_multiplicity_ext:
       'a equal ->
         'a ocl_multiplicity_ext -> 'a ocl_multiplicity_ext -> bool
    val equal_ocl_multiplicity_single: ocl_multiplicity_single equal
    val equal_ocl_multiplicity_singlea:
       ocl_multiplicity_single -> ocl_multiplicity_single -> bool
    val equal_ocl_ty: ocl_ty equal
    val equal_ocl_ty_class_ext:
       'a equal -> 'a ocl_ty_class_ext -> 'a ocl_ty_class_ext -> bool
    val equal_ocl_ty_class_node_ext:
       'a equal ->
         'a ocl_ty_class_node_ext -> 'a ocl_ty_class_node_ext -> bool
    val equal_ocl_ty_obj: ocl_ty_obj -> ocl_ty_obj -> bool
    val equal_ocl_ty_obj_core: ocl_ty_obj_core equal
    val equal_ocl_ty_obj_corea: ocl_ty_obj_core -> ocl_ty_obj_core -> bool
    val equal_ocl_tya: ocl_ty -> ocl_ty -> bool
    val equal_opt_attr_type: opt_attr_type equal
    val equal_opt_attr_typea: opt_attr_type -> opt_attr_type -> bool
    val equal_opt_ident: opt_ident equal
    val equal_opt_identa: opt_ident -> opt_ident -> bool
    val equal_option: 'a equal -> 'a option equal
    val equal_optiona: 'a equal -> 'a option -> 'a option -> bool
    val equal_position: position -> position -> bool
    val equal_prod: 'a equal -> 'b equal -> ('a * 'b) equal
    val equal_proda: 'a equal -> 'b equal -> 'a * 'b -> 'a * 'b -> bool
    val equal_string_b_a_s_e: string_b_a_s_e -> string_b_a_s_e -> bool
    val equal_unit: unit equal
    val equal_unita: unit -> unit -> bool
    val equal_unoptype: unoptype -> unoptype -> bool
    val equala: 'a equal -> 'a -> 'a -> bool
    val err_expecting:
       'a show -> char list -> 'a list -> (char list, 'b * 'a list) sum
    val errora: abr_string -> 'a
    val errorb: char list -> 'a list -> (char list, 'b * 'a list) sum
    val erule: semi_thm_attribute -> semi_method
    val escape_sml: abr_string -> abr_string
    val exactly:
       char list -> char list -> (char list, char list * char list) sum
    val exactly_aux:
       'a equal * 'a show ->
         char list ->
           'a list ->
             'a list -> 'a list -> (char list, char list * 'a list) sum
    val exists: ('a -> bool) -> 'a list -> bool
    val exists_string: (string -> bool) -> string -> bool
    val explode: string -> char list
    datatype expr = E of expr_node region_Wrap
    val expr_int: int -> expr
    datatype expr_node
    =
         Arbitrary of expr ctype
       | ArrayDeref of expr * expr
       | BinOp of binoptype * expr * expr
       | CompLiteral of expr ctype * (designator list * initializer) list
       | CondExp of expr * expr * expr
       | Constant of literalconstant_node region_Wrap
       | Deref of expr
       | EFnCall of expr * expr list
       | MKBOOL of expr
       | Sizeof of expr
       | SizeofTy of expr ctype region_Wrap
       | StructDot of expr * abr_string
       | TypeCast of expr ctype region_Wrap * expr
       | UnOp of unoptype * expr
       | Vara of abr_string * ... option unsynchronized_ref
    val expression: 'a cExpression -> expr
    val expression0: 'a cExpression -> expr_node
    datatype ext_decl
    =
         Decl of declaration region_Wrap
       | FnDefn of
           (expr ctype * abr_string region_Wrap) *
           (expr ctype * abr_string region_Wrap) list * fnspec list *
           block_item list region_Wrap
    val extend:
       unit compiler_env_config_ext -> 'a -> 'a compiler_env_config_ext
    val external_declaration:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         -> nodeInfo cExternalDeclaration -> ext_decl list
    val extract:
       ('a -> bool) -> 'a list -> ('a list * ('a * 'a list)) option
    val f_less2: 'a list -> ('a * 'a) list
    val fast_string_ord: string ord
    val fill_blank:
       ('a ->
          (('b ->
              Code_Numeral.natural ->
                ('b * ('c * 'd) option) list ->
                  ('b * ('c * 'd) option) list)
             -> 'e list -> 'f list
          )
          option)
         ->
         ('a * (('c * ('g * opt_ident)) * 'd) list) list ->
           ('a * 'f list) list
    val filter: ('a -> bool) -> 'a list -> 'a list
    val filter_auxupd: comment list -> statement_node option
    val filter_fnspec: comment list -> fnspec list
    val filter_gen:
       (abr_string comment_type -> char list option) ->
         (abr_string -> 'a) -> comment list -> 'a option
    val filter_invariant: comment list -> abr_string region_Wrap option
    val filter_locale_interp:
       (internal_oids * 'a ocl_instance_single_ext) list list ->
         semi_terma list * semi_terma list list
    val filter_ocl_exn:
       abr_string ->
         'a print_examp_instance_draw_list_attra ->
           'a print_examp_instance_draw_list_attra
    val filter_out: ('a -> bool) -> 'a list -> 'a list
    val filter_owned_by: comment list -> gcc_attribute option
    val filter_statement:
       comment list ->
         (block_item, (abr_string * abr_string, abr_string) sum) sum list
    val filtera: ('a -> bool) -> 'a list -> 'a list
    val find: ('a -> bool) -> 'a list -> 'a option
    val find_class_ass:
       'a compiler_env_config_ext ->
         all_meta_embedding list * all_meta_embedding list
    val find_first: ('a -> bool) -> 'a list -> 'a option
    val find_index: ('a -> bool) -> 'a list -> int
    val find_inh: abr_string -> ocl_class -> abr_string list
    type 'a finite = {}
    val first_field: string -> string -> (string * string) option
    val fix: abr_string list -> semi_command_proof
    val fix_let:
       abr_string list ->
         (semi_terma * semi_terma) list ->
           (semi_terma list * semi_terma list) option ->
             semi_command_state list -> semi_command_proof
    val flagImag: cIntFlag
    val flagLong: cIntFlag
    val flagLongLong: cIntFlag
    val flagUnsigned: cIntFlag
    val flags: int -> 'a flags
    datatype 'a flags = Flags0 of int
    val flat: 'a list list -> 'a list
    val flat3: 'a * 'b * 'c -> ('a * 'b) * 'c
    val flatten: 'a list list -> 'a list
    val flattena: abr_string list -> abr_string
    val flattenb: abr_string -> abr_string -> abr_string
    val flip: ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
    datatype floor = Floor1 | Floor2 | Floor3
    val floor1_PRINT_ctxt:
       (unit ocl_ctxt_ext ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor1_PRINT_examp_def_st1:
       (ocl_def_state ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor1_PRINT_examp_def_st_typecheck_var:
       (ocl_def_state -> 'a -> all_meta list * 'a) embedding_fun
    val floor1_PRINT_transition:
       (ocl_def_transition ->
          unit compiler_env_config_ext ->
            all_meta list * unit compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_inv:
       ('a ocl_ctxt_ext ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_pre_post:
       ('a ocl_ctxt_ext ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_ctxt_thm:
       ('a ocl_ctxt_ext -> 'b -> all_meta list * 'b) embedding_fun
    val floor2_PRINT_examp_def_st_def_interp:
       (ocl_def_state ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_transition_def_interp:
       (ocl_def_transition ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val floor2_PRINT_transition_lemmas_oid:
       (ocl_def_transition ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    datatype fnspec
    =
         Didnt_translate
       | Fn_modifies of abr_string list
       | Fnspec of abr_string region_Wrap
       | Gcc_attribs of gcc_attribute list
       | Relspec of abr_string region_Wrap
    val fold: ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val fold2: ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
    val foldM: ('a -> 'b -> 'b * 'c) -> 'a list -> 'b -> 'b * 'c list
    val foldM_o:
       ('a -> 'b -> 'b * 'c) -> 'a optiona -> 'b -> 'b * 'c optiona
    val fold_Const: ('a -> abr_string -> 'a) -> 'a -> terma -> 'a
    val fold_Free: ('a -> abr_string -> 'a) -> 'a -> terma -> 'a
    datatype fold_all_input
    = Fold_custom of all_meta list | Fold_meta of all_meta_embedding
    val fold_burrow:
       ('a list -> 'b -> 'c list * 'd) ->
         'a list list -> 'b -> 'c list list * 'd
    val fold_class:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              ocl_class list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a -> 'b * 'a)
         -> 'a -> ocl_class -> 'b list * 'a
    val fold_class_gen:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                ocl_class list tmp_sub ->
                  ocl_class list -> 'a -> 'b list * 'a)
         -> 'a -> ocl_class -> 'b list * 'a
    val fold_class_gen_aux:
       (ocl_class, unit) inheritance_ext list ->
         ((abr_string -> abr_string) ->
            abr_string ->
              (abr_string * ocl_ty) list ->
                (ocl_class, unit) inheritance_ext list tmp_inh ->
                  ocl_class list tmp_sub -> ocl_class list -> 'a -> 'a)
           -> 'a -> ocl_class -> 'a
    val fold_data_shallow:
       (abr_string -> 'a) ->
         (internal_oid -> 'a) ->
           ('a -> 'b -> 'b) -> ocl_data_shallow -> 'b -> 'b
    val fold_e_r_r:
       (print_examp_instance_draw_list_attr_err -> 'a -> 'a) ->
         print_examp_instance_draw_list_attr_err -> 'a -> 'a
    val fold_index: (int * 'a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val fold_instance_single:
       (abr_string ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
            -> 'a -> 'a)
         -> 'b ocl_instance_single_ext -> 'a -> 'a
    val fold_instance_single_name:
       'a ocl_instance_single_ext -> semi_terma list -> semi_terma list
    val fold_instance_singlea:
       (abr_string option ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
            -> 'a -> 'a)
         -> 'b ocl_instance_single_ext -> 'a -> 'a
    val fold_invariant:
       (ocl_ctxt_term_inv -> 'a -> 'a) -> 'b ocl_ctxt_ext -> 'a -> 'a
    val fold_invarianta:
       'a ocl_ctxt_ext -> (abr_string * ocl_ctxt_term) list
    val fold_less2:
       ('a -> 'a) -> ('b -> 'b -> 'a -> 'a) -> 'b list -> 'a -> 'a
    val fold_less_gen:
       ('a -> 'b list -> 'c -> 'd) ->
         ('d -> 'c) -> ('b -> 'a) -> 'b list -> 'd -> 'd
    val fold_list_attr:
       abr_string option ->
         (abr_string option -> 'a -> 'b -> 'b) ->
           'a ocl_list_attr -> 'b -> 'b
    val fold_max:
       (Code_Numeral.natural * 'a ->
          (Code_Numeral.natural * 'a) list -> 'b -> 'b)
         -> 'a list -> 'b -> 'b
    val fold_max_aux:
       ('a -> 'a list -> 'b -> 'b) -> 'a list -> 'a list -> 'b -> 'b
    val fold_pair_var:
       (abr_string * ocl_ty -> 'a -> 'a) -> ocl_ty -> 'a -> 'a option
    val fold_pre_post:
       ((ocl_ctxt_prefix * (abr_string option * ocl_ctxt_term)) list ->
          unit ocl_ctxt_pre_post_ext -> 'a -> 'a)
         -> 'b ocl_ctxt_ext -> 'a -> 'a
    val fold_product:
       ('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c
    val fold_range: (int -> 'a -> 'a) -> int -> 'a -> 'a
    val fold_string: (string -> 'a -> 'a) -> string -> 'a -> 'a
    val fold_thy:
       (all_meta_embedding ->
          ((abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext ->
                  'a -> unit compiler_env_config_ext * 'a)
             ->
             unit compiler_env_config_ext * 'a ->
               unit compiler_env_config_ext * 'a)
            ->
            (abr_string option ->
               all_meta list ->
                 'b compiler_env_config_ext ->
                   'c -> 'b compiler_env_config_ext * 'c)
              ->
              'b compiler_env_config_ext * 'c ->
                'b compiler_env_config_ext * 'c)
         ->
         ((unit -> unit compiler_env_config_ext * 'a) ->
            unit compiler_env_config_ext * 'a)
           ->
           (unit compiler_env_config_ext -> 'a -> 'a) ->
             (abr_string option ->
                all_meta list ->
                  'b compiler_env_config_ext ->
                    'c -> 'b compiler_env_config_ext * 'c)
               ->
               fold_all_input ->
                 'b compiler_env_config_ext * 'c ->
                   'b compiler_env_config_ext * 'c
    val fold_thy0:
       'a ->
         ('a, 'b compiler_env_config_ext) embedding ->
           (abr_string option ->
              all_meta list ->
                'b compiler_env_config_ext ->
                  'c -> 'b compiler_env_config_ext * 'c)
             ->
             'b compiler_env_config_ext * 'c ->
               'b compiler_env_config_ext * 'c
    val fold_thy_deep:
       fold_all_input ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val fold_thy_shallow:
       ((unit -> unit compiler_env_config_ext * 'a) ->
          unit compiler_env_config_ext * 'a)
         ->
         (unit compiler_env_config_ext -> 'a -> 'a) ->
           (abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext * 'a ->
                  unit compiler_env_config_ext * 'a)
             ->
             fold_all_input ->
               unit compiler_env_config_ext * 'a ->
                 unit compiler_env_config_ext * 'a
    val fold_thya:
       (all_meta_embedding ->
          ((abr_string option ->
              all_meta list ->
                unit compiler_env_config_ext ->
                  'a -> unit compiler_env_config_ext * 'a)
             ->
             unit compiler_env_config_ext * 'a ->
               unit compiler_env_config_ext * 'a)
            ->
            (abr_string option ->
               all_meta list ->
                 'b compiler_env_config_ext ->
                   'c -> 'b compiler_env_config_ext * 'c)
              ->
              'b compiler_env_config_ext * 'c ->
                'b compiler_env_config_ext * 'c)
         ->
         ((unit -> unit compiler_env_config_ext * 'a) ->
            unit compiler_env_config_ext * 'a)
           ->
           (unit compiler_env_config_ext -> 'a -> 'a) ->
             (abr_string option ->
                all_meta list ->
                  'b compiler_env_config_ext ->
                    'c -> 'b compiler_env_config_ext * 'c)
               ->
               all_meta_embedding list ->
                 'b compiler_env_config_ext * 'c ->
                   'b compiler_env_config_ext * 'c
    val fold_tree: ('a -> 'a -> 'b -> 'b) -> 'a tree -> 'b -> 'b
    val folda: ('a -> 'b -> 'c -> 'c) -> ('a, 'b) alist -> 'c -> 'c
    val foldb:
       (abr_string -> 'a -> 'b -> 'b) -> (int list, 'a) alist -> 'b -> 'b
    val foldl: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val foldl1: ('a * 'a -> 'a) -> 'a list -> 'a
    val foldl_one: ('a -> int -> 'a) -> 'a -> string -> 'a
    val foldla: ('a -> int -> 'a) -> 'a -> abr_string -> 'a
    val foldlb: ('a -> int -> 'a) -> 'a -> string_b_a_s_e -> 'a
    val foldr: ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b
    val foldr1: ('a * 'a -> 'a) -> 'a list -> 'a
    val forall: ('a -> bool) -> 'a list -> bool
    val forall_string: (string -> bool) -> string -> bool
    val fresh_ident: unit -> abr_string
    val fst: 'a * 'b -> 'a
    val fun_upd: 'a equal -> ('a -> 'b) -> 'a -> 'b -> 'a -> 'b
    val function: (semi_term_0 * semi_term_0) list -> semi_term_0
    datatype function_Kind = Definition | Fun | Function_Sorry | Primrec
    datatype function_Stmt
    =
         Function_Stmt of
             function_Kind * typeSign list *
             ((name * term list) * term) list
    val function_definition:
       (comment list * (abr_string * int, (int * int) list) alist) *
       (positiona * int) option
         -> nodeInfo cFunctionDef -> ext_decl
    val function_definition_params:
       (abr_string -> 'a) -> 'b cDeclaration list -> (expr ctype * 'a) list
    val function_definition_params0:
       ('a cDeclaration -> 'b) -> 'a cDeclaration list -> 'b list
    val funpow: int -> ('a -> 'a) -> 'a -> 'a
    val funpow_yield: int -> ('a -> 'b * 'a) -> 'a -> 'b list * 'a
    datatype gcc_attribute
    =
         GCC_AttribFn of abr_string * expr list
       | GCC_AttribID of abr_string
       | OWNED_BY of abr_string
    val gen_length: nat -> 'a list -> nat
    datatype gen_meta
    =
         Gen_apply_hol of abr_string
       | Gen_apply_sml of abr_string
       | Gen_apply_sml_cmd of abr_string * abr_string
       | Gen_no_apply
    val gen_pre_post:
       (abr_string -> abr_string) ->
         ((semi_terma list -> semi_terma) ->
            (semi_terma -> semi_terma) -> abr_string -> semi_terma)
           ->
           (abr_string ->
              semi_terma -> abr_string -> abr_string -> abr_string -> lemma)
             -> semi_method list -> lemma list
    val gen_pre_post0:
       (abr_string -> abr_string) ->
         (abr_string * (bool * semi_terma)) list ->
           ((semi_terma list -> semi_terma) ->
              (semi_terma -> semi_terma) -> abr_string -> semi_terma)
             ->
             (abr_string ->
                (abr_string * (bool * semi_terma)) list ->
                  semi_terma ->
                    abr_string -> abr_string -> abr_string -> lemma)
               -> semi_method list -> lemma list
    val gen_zero: abr_string -> abr_string
    datatype generation_lemma_mode = Gen_no_dirty | Gen_sorry
    datatype generation_semantics_ocl
    = Gen_default | Gen_only_analysis | Gen_only_design
    val get_class_hierarchy:
       ocl_class -> (abr_string * (abr_string * ocl_ty) list) list
    val get_class_hierarchy_aux:
       ocl_class list -> ocl_class -> ocl_class list
    val get_class_hierarchy_strict: ocl_class list -> ocl_class list
    val get_class_hierarchy_strict_aux:
       ocl_class list -> ocl_class list -> ocl_class list
    val get_class_hierarchya: ocl_class -> ocl_class list
    val get_column:
       'a equal ->
         'b plus * 'b ?.C_Ast.C_Ast.ord ->
           ('a, ('b * 'b) list) alist -> 'a -> 'b -> 'b
    val get_first: ('a -> 'b option) -> 'a list -> 'b option
    val get_hierarchy_map:
       ('a -> 'b -> 'c -> 'd) ->
         (abr_string list -> 'a list * ('b list * 'c list)) ->
           ocl_class -> 'd list
    val get_index: ('a -> 'b option) -> 'a list -> (int * 'b) option
    val get_state:
       (abr_string *
        (internal_oids *
         (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
        )
        list
          ->
          abr_string *
          (internal_oids *
           (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
          )
          list
            ->
            (abr_string *
             (internal_oids *
              (abr_string * unit ocl_instance_single_ext) ocl_def_state_core
             )
             list
            )
            list
              -> 'a compiler_env_config_ext -> 'b)
         -> ocl_def_transition -> 'a compiler_env_config_ext -> 'b
    val getenv: string -> string
    val getenv_strict: string -> string
    val groupBy: ('a -> 'a -> bool) -> 'a list -> 'a list list
    val group_spec:
       (block_item, (abr_string * abr_string, abr_string) sum) sum list ->
         block_item list
    val group_spec_aux1:
       block_item list list ->
         (block_item list, (abr_string * abr_string, abr_string) sum list)
         sum
         list
           -> block_item list
    val group_spec_aux2:
       block_item list list ->
         abr_string * abr_string ->
           block_item list ->
             abr_string ->
               (block_item list,
               (abr_string * abr_string, abr_string) sum list)
               sum
               list
                 -> block_item list
    val grouped:
       int ->
         (('a list -> 'b list) -> 'c list list -> 'd list list) ->
           ('a -> 'b) -> 'c list -> 'd list
    val has_duplicates: ('a * 'a -> bool) -> 'a list -> bool
    val has_err_ty: print_examp_instance_draw_list_attr_err -> bool
    val has_invalid: print_examp_instance_draw_list_attr_err -> bool
    val have:
       abr_string -> semi_terma -> semi_command_final -> semi_command_proof
    val have0:
       abr_string ->
         bool -> semi_terma -> semi_command_final -> semi_command_proof
    val hd: 'a list -> 'a
    val head: asmblock -> abr_string
    val hexRepr: cIntRepr
    val hex_digit: int -> string
    datatype hide_const = Hide_const of bool * abr_string list
    val holThyLocale_header:
       'a semi_locale_ext ->
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
    val holThyLocale_name: 'a semi_locale_ext -> abr_string
    val hol_definition: abr_string -> abr_string
    val hol_split: abr_string -> abr_string
    val hol_to_sml: semi_terma -> semi_term_0
    val hsk_literal: (abr_string -> semi_terma) -> literal -> semi_terma
    val hsk_name:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_name0:
       (abr_string -> abr_string -> abr_string) ->
         (abr_string * abr_string option) list -> name -> abr_string
    val hsk_namea:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_nameb:
       (abr_string * abr_string option) list -> name -> abr_string
    val hsk_stmt:
       semi_datatype_version ->
         (abr_string * abr_string option) list ->
           gen_meta -> stmt list -> all_meta list * abr_string list
    val hsk_term:
       'a lexical_ext ->
         (abr_string * abr_string option) list -> term -> semi_terma
    val hsk_term_app:
       'a lexical_ext ->
         (abr_string * abr_string option) list ->
           semi_terma list -> term -> semi_terma
    val hsk_type: (abr_string * abr_string option) list -> typea -> semi_typ
    val hsk_typespec:
       (abr_string * abr_string option) list ->
         typeSpec -> abr_string * abr_string list
    val i: ('a -> semi_theory) -> 'a -> all_meta
    val id: 'a -> 'a
    val ident: ident -> abr_string
    datatype ident = Ident0 of abr_string * int * nodeInfo
    val ident_current: 'a * 'b -> 'b
    val ident_empty: 'a zero -> ('b, 'c) alist * 'a
    val ident_fresh:
       'a equal ->
         'a -> ('a, nat) alist * nat -> nat * (('a, nat) alist * nat)
    val ident_option: ident optiona -> abr_string option
    val ident_struct_const: ident -> abr_string
    val ident_struct_type: ident -> abr_string
    val ident_struct_type0: abr_string -> abr_string
    val identa: ident -> abr_string
    val identb: ident -> 'a ctype
    val identc: abr_string -> int -> nodeInfo -> ident
    val ignore_meta_header: all_meta_embedding -> bool
    val impl_of: ('a, 'b) alist -> ('a * 'b) list
    val in_safe_monad: ('a -> ('b, 'c) sum) -> 'a -> 'c
    val inh: ('a, 'b) inheritance_ext -> 'a
    val inh_sib: ('a, 'b) inheritance_ext -> ('a * 'a list) list
    val inh_sib_unflat: ('a, 'b) inheritance_ext -> 'a list
    datatype ('a, 'b) inheritance_ext
    = Inheritance_ext of 'a * ('a * 'a list) list * 'a list * 'b
    val init_map_class:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           'c ocl_instance_single_ext list ->
             (abr_string ->
                bool *
                ((abr_string ->
                    (ocl_ty * (opt_attr_type * opt_ident)) option)
                 *
                 (opt_attr_type ->
                    ((unit ocl_ty_class_ext option -> 'a -> 'd -> 'd) ->
                       'd -> 'd
                    )
                    option)))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
    val init_map_class2:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           'c ocl_instance_single_ext list ->
             (abr_string ->
                bool *
                ((abr_string ->
                    (ocl_ty * (opt_attr_type * opt_ident)) option)
                 *
                 (opt_attr_type ->
                    ((unit ocl_ty_class_ext option -> 'a -> 'd -> 'd) ->
                       'd -> 'd
                    )
                    option)))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
    val initializer: 'a cInitializer -> initializer
    datatype initializer
    = InitE of expr | InitList of (designator list * initializer) list
    val initializer0:
       ('a cExpression -> 'a cExpression) -> 'a cInitializer -> initializer
    val initializerList:
       ('a cPartDesignator list * 'a cInitializer) list ->
         (designator list * initializer) list
    val insert: ('a * 'a -> bool) -> 'a -> 'a list -> 'a list
    val insert2:
       'a equal ->
         'b equal ->
           'a * 'b ->
             'c -> ('a, ('b, 'c) alist) alist -> ('a, ('b, 'c) alist) alist
    val insert2a:
       abr_string * abr_string ->
         'a ->
           (int list, (int list, 'a) alist) alist ->
             (int list, (int list, 'a) alist) alist
    val inserta:
       abr_string -> 'a -> (int list, 'a) alist -> (int list, 'a) alist
    val insertb: semi_thm_attribute list -> semi_method
    val inst_attr:
       'a ocl_instance_single_ext ->
         ((abr_string * abr_string) option * (abr_string * ocl_data_shallow)
         )
         list
         ocl_list_attr
    val inst_attr_update:
       (((abr_string * abr_string) option * (abr_string * ocl_data_shallow))
        list
        ocl_list_attr
          ->
          ((abr_string * abr_string) option *
           (abr_string * ocl_data_shallow)
          )
          list
          ocl_list_attr)
         -> 'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val inst_attr_with: 'a ocl_instance_single_ext -> abr_string option
    val inst_name: 'a ocl_instance_single_ext -> abr_string
    val inst_name_update:
       (abr_string option -> abr_string option) ->
         'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val inst_namea: 'a ocl_instance_single_ext -> abr_string option
    val inst_ty: 'a ocl_instance_single_ext -> abr_string
    val inst_ty0: 'a ocl_instance_single_ext -> abr_string option
    val inst_tya: 'a ocl_instance_single_ext -> abr_string option
    val instantiation: instantiation -> all_meta
    datatype instantiation
    = Instantiation of abr_string * abr_string * semi_terma
    val int_ord: int ord
    datatype inta = Int_of_integer of int
    val integer_escape: int
    val integer_of_char: char -> int
    val integer_of_int: inta -> int
    val integer_of_nat: nat -> int
    val integer_to_digit16: int -> abr_string
    val inter: ('a * 'b -> bool) -> 'b list -> 'a list -> 'a list
    val internalPosition: positiona
    datatype internal_oid = Oid of Code_Numeral.natural
    datatype internal_oids
    =
         Oids of
             Code_Numeral.natural * Code_Numeral.natural *
             Code_Numeral.natural
    val interpretation: interpretation -> all_meta
    datatype interpretation
    =
         Interpretation of
             abr_string * abr_string * semi_terma list * semi_command_final
    val interpretationa: interpretation -> semi_theory
    val intro: semi_thm_attribute list -> semi_method
    val is_digit: int -> bool
    val is_empty: abr_string -> bool
    val is_emptya: ('a, 'b) alist -> bool
    val is_emptyb: string_b_a_s_e -> bool
    val is_equal: order -> bool
    val is_greater: order -> bool
    val is_greater_equal: order -> bool
    val is_higher_order: ocl_ty -> bool
    val is_less: order -> bool
    val is_less_equal: order -> bool
    val is_letter: int -> bool
    val is_none: 'a option -> bool
    val is_prefix: ('a * 'a -> bool) -> 'a list -> 'a list -> bool
    val is_sequence: 'a ocl_multiplicity_ext -> bool
    val is_special: int -> bool
    datatype isaUnit
    =
         IsaUnit of
             (bool * Code_Numeral.natural) *
             (abr_string * abr_string option) list * gen_meta * abr_string *
             (module list * bool)
    val isabelle_apply: abr_string -> abr_string list -> abr_string
    val isabelle_of_compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> 'a
    val isub: abr_string -> abr_string
    val isup: abr_string -> abr_string
    datatype 'a itself = Type
    val k: 'a -> 'b -> 'a
    val keys: ('a, 'b) alist -> 'a list
    val keys_empty: ('a list -> 'b) -> bool * ('a, 'c) alist -> 'b list
    val keys_emptya:
       ('a list -> 'b) -> bool * ('a list * ('c, 'd) alist) -> 'b list
    val l_fold:
       (('a -> 'b -> all_meta list * 'b) embedding_fun -> 'c -> 'c) ->
         ('a, 'b) embedding -> 'c -> 'c
    val last: 'a list -> 'a
    val lemma: lemma -> all_meta
    datatype lemma
    =
         Lemma of
             abr_string * semi_terma list * semi_method list list *
             semi_command_final
       | Lemma_assumes of
           abr_string * (abr_string * (bool * semi_terma)) list *
           semi_terma * semi_command_proof list * semi_command_final
    val lemmaa: lemma -> semi_theory
    val lemmas: lemmas -> all_meta
    datatype lemmas
    =
         Lemmas_simp_thm of bool * abr_string * semi_thm_attribute list
       | Lemmas_simp_thms of abr_string * abr_string list
    val lemmas_nosimp: abr_string -> semi_thm_attribute list -> lemmas
    val lemmas_simp: abr_string -> semi_thm_attribute list -> lemmas
    val lemmasa: lemmas -> semi_theory
    type 'a len0 = {len_of: 'a itself -> nat}
    val len0_bit0: 'a len0 -> 'a bit0 len0
    val len0_num1: num1 len0
    val len_of: 'a len0 -> 'a itself -> nat
    val len_of_bit0: 'a len0 -> 'a bit0 itself -> nat
    val len_of_num1: num1 itself -> nat
    val length: abr_string -> nat
    val length_ord: 'a list * 'b list -> order
    val less: 'a ?.C_Ast.C_Ast.ord -> 'a -> 'a -> bool
    val less_eq: 'a ?.C_Ast.C_Ast.ord -> 'a -> 'a -> bool
    val less_eq_nat: nat -> nat -> bool
    val less_eq_natural:
       Code_Numeral.natural -> Code_Numeral.natural -> bool
    val less_int: inta -> inta -> bool
    val less_nat: nat -> nat -> bool
    val less_natural: Code_Numeral.natural -> Code_Numeral.natural -> bool
    val let_open: abr_string -> semi_term_0 -> semi_term_0
    val letb: semi_terma -> semi_terma -> semi_command_proof
    val lex_bool_false: 'a lexical_ext -> abr_string
    val lex_list_cons: 'a lexical_ext -> abr_string
    val lex_string: 'a lexical_ext -> abr_string -> semi_terma
    datatype 'a lexical_ext
    =
         Lexical_ext of
             abr_string * abr_string * (abr_string -> semi_terma) * 'a
    datatype listComprFragment = Generator of term * term | Guard of term
    val list_all: ('a -> bool) -> 'a list -> bool
    val list_bind_e_r_r:
       ('a -> 'b print_examp_instance_draw_list_attra) ->
         ('b list -> 'c) ->
           'a list -> 'c print_examp_instance_draw_list_attra
    val list_ex: ('a -> bool) -> 'a list -> bool
    val list_iterM: ('a -> unit option) -> 'a list -> unit option
    val list_ord: ('a * 'b -> order) -> 'a list * 'b list -> order
    val lista: semi_term_0 list -> semi_term_0
    val listb: ('a -> semi_term_0) -> 'a list -> semi_term_0
    datatype literal = Int of Code_Numeral.natural | Stringa of abr_string
    datatype literalconstant_node
    =
         NUMCONST of int * abr_string * stringCvt_radix
       | STRING_LIT of abr_string
    val lookup: 'a equal -> ('a, 'b) alist -> 'a -> 'b option
    val lookup2:
       'a equal ->
         'b equal -> ('a, ('b, 'c) alist) alist -> 'a * 'b -> 'c option
    val lookup2a:
       (int list, (int list, 'a) alist) alist ->
         abr_string * abr_string -> 'a option
    val lookupa: 'a equal -> ('a, 'b) alist -> 'a -> 'b option
    val lookupb: (int list, 'a) alist -> abr_string -> 'a option
    val lowercase: abr_string -> abr_string
    val m_class:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'a list -> 'b list)
           ->
           (position ->
              (abr_string -> abr_string) *
              (abr_string * (abr_string * ocl_ty) list)
                -> ocl_class -> 'a list)
             -> ocl_class -> 'b list
    val m_class3_GE:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           (abr_string -> abr_string -> abr_string -> 'a) ->
             ocl_class -> 'b list
    val m_class_default: 'a -> 'b -> 'c -> 'd -> 'd
    val m_class_gen2:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'a list -> 'b list)
           ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  position ->
                    (abr_string -> abr_string) *
                    (abr_string * (abr_string * ocl_ty) list)
                      -> ocl_class -> 'a list)
             -> ocl_class -> 'b list
    val m_class_gen3:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  abr_string -> abr_string -> abr_string -> 'a)
             -> ocl_class -> 'b list
    val m_class_gen3_GE:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         ('a list -> 'b list) ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  abr_string -> abr_string -> abr_string -> 'a)
             -> ocl_class -> 'b list
    val m_classa:
       ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
         (position ->
            (abr_string -> abr_string) *
            (abr_string * (abr_string * ocl_ty) list)
              -> ocl_class -> 'a)
           -> ocl_class -> 'a list
    val main:
       nodeInfo cTranslationUnit * (comment list * int list) ->
         ext_decl list
    val make:
       ocl_ty_obj ->
         (abr_string * ocl_ty) list ->
           ocl_ctxt_clause list -> bool -> unit ocl_class_raw_ext
    val make_ctxt_free_var:
       ocl_ctxt_prefix -> 'a ocl_ctxt_pre_post_ext -> abr_string list
    val make_ord: ('a * 'a -> bool) -> 'a ord
    val make_tree: nat list -> nat -> nat -> nat list tree
    val make_treea:
       nat list ->
         nat -> nat -> nat -> nat list tree list -> nat list tree list
    val makea:
       bool ->
         (abr_string * (abr_string list * abr_string)) option ->
           internal_oids ->
             Code_Numeral.natural * Code_Numeral.natural ->
               generation_semantics_ocl ->
                 ocl_class option ->
                   all_meta_embedding list ->
                     (string_b_a_s_e *
                      (unit ocl_instance_single_ext * internal_oids)
                     )
                     list
                       ->
                       (string_b_a_s_e *
                        (internal_oids *
                         (abr_string * unit ocl_instance_single_ext)
                         ocl_def_state_core
                        )
                        list
                       )
                       list
                         ->
                         bool ->
                           bool ->
                             string_b_a_s_e list * string_b_a_s_e list ->
                               string_b_a_s_e list ->
                                 string_b_a_s_e list ->
                                   generation_lemma_mode option * bool ->
                                     unit compiler_env_config_ext
    val many:
       (char -> bool) -> char list -> (char list, char list * char list) sum
    val many1:
       (char -> bool) -> char list -> (char list, char list * char list) sum
    val many_c_a_t_c_h_a_l_l:
       ('a list -> (char list, 'b * 'a list) sum) ->
         'a list -> (char list, 'b list * 'a list) sum
    val many_c_a_t_c_h_a_l_l_aux:
       'a list ->
         ('b list -> (char list, 'a * 'b list) sum) ->
           'b list -> (char list, 'a list * 'b list) sum
    val many_m_a_x:
       ('a list -> (char list, 'b * 'a list) sum) ->
         'a list -> (char list, 'b list * 'a list) sum
    val many_m_a_x_aux:
       'a list ->
         ('b list -> (char list, 'a * 'b list) sum) ->
           'b list -> (char list, 'a list * 'b list) sum
    val manyof1:
       char list -> char list -> (char list, char list * char list) sum
    val map: ('a -> 'b) -> 'a list -> 'b list
    val map2: ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
    val map2_ctxt_term:
       (ocl_ctxt_term -> ocl_ctxt_term) ->
         all_meta_embedding -> all_meta_embedding
    val mapM: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_Const: (abr_string -> typ -> abr_string) -> terma -> terma
    val map_Region_Wrap: ('a -> 'b) -> 'a region_Wrap -> 'b region_Wrap
    val map_class:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a)
         -> ocl_class -> 'a list
    val map_class_arg_only:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string * ocl_ty) list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_only0:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string * ocl_ty) list -> 'a list)
         ->
         ((abr_string -> abr_string) ->
            abr_string ->
              (abr_string * ocl_ty) list *
              (ocl_class list tmp_inh * ocl_class list tmp_sub)
                -> 'a list)
           -> ocl_class -> 'a list
    val map_class_arg_only_var:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) ->
                    (semi_terma -> semi_terma) -> 'a list)
           -> ocl_class -> 'a list
    val map_class_arg_only_var0:
       ('a -> abr_string list -> 'b) ->
         ('c ->
            'd ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'e list)
           ->
           ('f -> (abr_string * ocl_ty) list list) ->
             'c -> 'd -> 'f -> 'e list
    val map_class_arg_only_var_gen:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           ->
           ((abr_string -> abr_string) ->
              abr_string ->
                abr_string * abr_string ->
                  ocl_ty ->
                    (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
             -> ocl_class -> 'c list
    val map_class_arg_only_var_gena:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           -> ocl_class -> 'c list
    val map_class_arg_only_var_genb:
       ('a -> abr_string list -> 'b) ->
         ((abr_string -> abr_string) ->
            abr_string ->
              abr_string * abr_string ->
                ocl_ty ->
                  (abr_string -> abr_string) -> ('a -> 'b) -> 'c list)
           -> ocl_class -> 'c list
    val map_class_arg_only_vara:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_only_varb:
       ((abr_string -> abr_string) ->
          abr_string ->
            abr_string * abr_string ->
              ocl_ty ->
                (abr_string -> abr_string) ->
                  (semi_terma -> semi_terma) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_arg_onlya:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list *
            (ocl_class list tmp_inh * ocl_class list tmp_sub)
              -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list tmp_inh ->
                ocl_class list tmp_sub -> ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_h:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              (abr_string * ocl_ty) list ->
                (abr_string * ocl_ty) list list tmp_inh ->
                  ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_h_inh:
       ((abr_string -> abr_string) ->
          abr_string -> (abr_string -> position) -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_ha:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * (abr_string * ocl_ty) list) list tmp_univ ->
              (abr_string * ocl_ty) list ->
                (abr_string * ocl_ty) list list tmp_inh ->
                  abr_string list tmp_sub -> 'a list)
         -> ocl_class -> 'a list
    val map_class_gen_hb:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              (ocl_class, unit) inheritance_ext list ->
                ocl_class list -> ocl_class list -> 'a list)
         -> ocl_class -> 'a list
    val map_class_inh:
       (ocl_class, 'a) inheritance_ext list tmp_inh ->
         (abr_string * ocl_ty) list list
    val map_class_nupl2_inh:
       (abr_string -> abr_string -> 'a) -> ocl_class -> 'a list
    val map_class_nupl2_inh_large:
       (abr_string -> abr_string -> 'a) -> ocl_class -> 'a list
    val map_class_nupl2_inha:
       (abr_string -> abr_string -> (ocl_class * bool) list -> 'a) ->
         ocl_class -> 'a list
    val map_class_nupl2l_inh:
       (abr_string ->
          ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list) list
            -> 'a)
         -> ocl_class -> 'a list
    val map_class_nupl2l_inh_gen:
       (ocl_class list ->
          abr_string ->
            ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list)
            list
              -> 'a)
         -> ocl_class -> 'a list
    val map_class_nupl3_GE_inh:
       (abr_string -> abr_string -> abr_string -> 'a) ->
         ocl_class -> 'a list
    val map_class_nupl3_LE_inh:
       (abr_string ->
          abr_string ->
            ((ocl_class, unit) inheritance_ext * (ocl_class * bool) list)
            list
              -> 'a)
         -> ocl_class -> 'a list
    val map_class_one:
       (((abr_string -> abr_string) *
         (abr_string *
          ((abr_string * ocl_ty) list *
           (ocl_class list tmp_inh *
            (abr_string list tmp_sub * ocl_class list))))
        )
        list
          -> ('a * ('b * ('c * ('d * ('e * 'f))))) list)
         -> ('a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g) -> ocl_class -> 'g
    val map_class_top:
       ((abr_string -> abr_string) ->
          abr_string ->
            (abr_string * ocl_ty) list ->
              ocl_class list tmp_inh ->
                abr_string list tmp_sub -> ocl_class list -> 'a)
         -> ocl_class -> 'a
    val map_comment_type: ('a -> 'b) -> 'a comment_type -> 'b comment_type
    val map_ctype: ('a -> 'b) -> 'a ctype -> 'b ctype
    val map_data_shallow_self:
       (internal_oid -> ocl_data_shallow) ->
         ocl_data_shallow -> ocl_data_shallow
    val map_e_r_r:
       ('a -> 'b) ->
         'a print_examp_instance_draw_list_attra ->
           'b print_examp_instance_draw_list_attra
    val map_entry:
       'a equal -> 'a -> ('b -> 'b) -> ('a * 'b) list -> ('a * 'b) list
    val map_entrya:
       'a equal -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val map_entryb:
       'a equal -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val map_entryc:
       abr_string ->
         ('a -> 'a) -> (int list, 'a) alist -> (int list, 'a) alist
    val map_enum_syn:
       ocl_enum list -> ocl_class_synonym list -> ocl_ty -> ocl_ty
    val map_filter: ('a -> 'b option) -> 'a list -> 'b list
    val map_find: ('a -> 'a option) -> 'a list -> 'a list
    val map_find_aux: 'a list -> ('a -> 'a option) -> 'a list -> 'a list
    val map_gen:
       (abr_string -> string option -> abr_string -> abr_string) ->
         (int -> abr_string) -> abr_string -> abr_string
    val map_gena:
       (abr_string -> string option -> abr_string -> abr_string) ->
         (int -> abr_string) -> string_b_a_s_e -> abr_string
    val map_index: (int * 'a -> 'b) -> 'a list -> 'b list
    val map_inh: ('a -> 'b) -> 'a tmp_inh -> 'b tmp_inh
    val map_inst_single_self:
       (internal_oid -> ocl_data_shallow) ->
         'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val map_instance_single:
       ((abr_string * abr_string) option * (abr_string * ocl_data_shallow)
          ->
          (abr_string * abr_string) option *
          (abr_string * ocl_data_shallow))
         -> 'a ocl_instance_single_ext -> 'a ocl_instance_single_ext
    val map_invariant:
       (ocl_ctxt_term_inv -> ocl_ctxt_term_inv) ->
         'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val map_lemma: (lemma -> lemma) -> semi_theory -> semi_theory
    val map_linh:
       ('a -> 'b) -> ('a, 'c) inheritance_ext -> ('b, unit) inheritance_ext
    val map_list_attr: ('a -> 'b) -> 'a ocl_list_attr -> 'b ocl_list_attr
    val map_of: 'a equal -> ('a * 'b) list -> 'a -> 'b option
    val map_of_list: 'a equal -> ('a * 'b list) list -> 'a -> 'b list option
    val map_option: ('a -> 'b) -> 'a optiona -> 'b option
    val map_optiona: ('a -> 'b) -> 'a option -> 'b option
    val map_pre_post:
       (ocl_ctxt_prefix ->
          unit ocl_ctxt_pre_post_ext -> ocl_ctxt_term -> ocl_ctxt_term)
         -> 'a ocl_ctxt_ext -> 'a ocl_ctxt_ext
    val map_prod: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val map_product: ('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list
    val map_range: (int -> 'a) -> int -> 'a list
    val map_semi_theory:
       (semi_theory -> semi_theory) -> all_meta -> all_meta
    val map_split: ('a -> 'b * 'c) -> 'a list -> 'b list * 'c list
    val map_sum: ('a -> 'b) -> ('c -> 'd) -> ('a, 'c) sum -> ('b, 'd) sum
    val map_tail:
       ('a -> 'b list) ->
         (internal_oids * 'a) list list -> (semi_terma * 'b list) list
    val map_transpose: ('a list -> 'b) -> 'a list list -> 'b list
    val mapa: ('a -> 'b) -> 'a list -> 'b list
    val mapb: (int -> int) -> abr_string -> abr_string
    val mapc:
       'a equal -> ('a -> 'b -> 'c) -> ('a, 'b) alist -> ('a, 'c) alist
    val mapi: (Code_Numeral.natural -> 'a -> 'b) -> 'a list -> 'b list
    val maps: ('a -> 'b list) -> 'a list -> 'b list
    val mapsa: ('a -> 'b list) -> 'a list -> 'b list
    val match_string: string -> string -> bool
    val max: 'a ?.C_Ast.C_Ast.ord -> 'a -> 'a -> 'a
    val maybe: 'a -> ('b -> 'a) -> 'b optiona -> 'a
    val member: ('a * 'b -> bool) -> 'b list -> 'a -> bool
    val member_string: string -> string -> bool
    val membera: string_b_a_s_e list -> abr_string -> bool
    val merge: ('a * 'a -> bool) -> 'a list * 'a list -> 'a list
    val merge_unique:
       'a equal ->
         ('b -> ('a * 'c) option) -> 'b list list -> ('a * 'c) list
    val merge_unique_gen:
       'a equal ->
         ('b -> ('a * 'c) option) -> 'b list list -> ('a, 'c) alist
    val merge_uniquea:
       'a equal ->
         ('b -> 'a) ->
           (internal_oids * 'b) list list -> (internal_oids * 'b) list list
    val merge_uniqueb:
       (internal_oids * (abr_string * 'a) ocl_def_state_core) list list ->
         (internal_oids * 'a) list list
    val meta_of_logic: abr_string -> string
    val meth_gen_simp: semi_method_simp
    val meth_gen_simp_add2:
       semi_thm_attribute list -> abr_string list -> semi_method_simp
    val meth_gen_simp_add_del:
       abr_string list -> abr_string list -> semi_method_simp
    val meth_gen_simp_add_split:
       semi_thm_attribute list ->
         semi_thm_attribute list -> semi_method_simp
    val meth_gen_simp_only: semi_thm_attribute list -> semi_method_simp
    val meth_gen_simp_onlya: semi_thm_attribute list -> semi_method_simp
    val method_simp_add_del:
       semi_thm list -> semi_thm list -> semi_method_simp
    val method_subst_l: abr_string list -> semi_thm_attribute -> semi_method
    val metis: semi_thm_attribute list -> semi_method
    val metis0: abr_string list -> semi_thm_attribute list -> semi_method
    val minus_int: inta -> inta -> inta
    val minus_nat: nat -> nat -> nat
    val mk_constr_name: abr_string -> abr_string -> abr_string
    val mk_dot: abr_string -> abr_string -> abr_string
    val mk_dot_comment: abr_string -> abr_string -> abr_string -> abr_string
    val mk_dot_par: abr_string -> abr_string -> abr_string
    val mk_dot_par_gen: abr_string -> abr_string list -> abr_string
    val mk_instance_single_cpt:
       (abr_string -> internal_oids option) ->
         'a ocl_instance_single_ext list ->
           'b compiler_env_config_ext ->
             ('a ocl_instance_single_ext * internal_oids) list
    val mk_instance_single_cpt0:
       (abr_string -> internal_oids option) ->
         'a ocl_instance_single_ext list ->
           'b compiler_env_config_ext ->
             ('a ocl_instance_single_ext * internal_oids) list *
             internal_oids
    val mk_quote: abr_string -> abr_string
    val mk_tree:
       nat ->
         nat -> nat -> (abr_string class_output * abr_string) list * nat
    val ml: ml -> all_meta
    datatype ml = SMLa of semi_term
    val mla: ml -> semi_theory
    val mod1: asmblock -> (abr_string option * (abr_string * expr)) list
    val mod2: asmblock -> (abr_string option * (abr_string * expr)) list
    val mod3: asmblock -> abr_string list
    val modify_def:
       'a equal ->
         'b -> 'a -> ('b -> 'b) -> ('a, 'b) alist -> ('a, 'b) alist
    val modify_defa:
       'a ->
         abr_string ->
           ('a -> 'a) -> (int list, 'a) alist -> (int list, 'a) alist
    datatype module = Module of thyName * thyName list * stmt list * bool
    val modulo_int: inta -> inta -> inta
    val modulo_integer: int -> int -> int
    val modulo_nat: nat -> nat -> nat
    val more: 'a ocl_ctxt_ext -> 'a
    datatype more_info
    = EnumC | FunctionName | MungedVar of abr_string * abr_string option
    val morea: 'a ocl_ty_class_ext -> 'a
    val moreb: 'a ocl_class_raw_ext -> 'a
    val morec: 'a ocl_association_ext -> 'a
    val mored: 'a ocl_multiplicity_ext -> 'a
    val moree: 'a ocl_ctxt_pre_post_ext -> 'a
    val moref: 'a ocl_ty_class_node_ext -> 'a
    val moreg: 'a compiler_env_config_ext -> 'a
    val moreh: 'a ocl_instance_single_ext -> 'a
    val n_lists: nat -> 'a list -> 'a list list
    val name: int -> namea
    datatype name = Name of abr_string | QName of thyName * abr_string
    datatype namea = Name0 of int
    val namedRef: ident -> sUERef
    datatype nat = Nat of int
    val nat_of_integer: int -> nat
    val nat_of_natural: Code_Numeral.natural -> nat
    val nat_to_digit10: nat -> abr_string
    val nat_to_digit10_aux: nat list -> nat -> nat list
    val nat_to_digit26: nat -> abr_string
    val nat_to_digit26_aux: nat list -> nat -> nat list
    val natural_of_nat: nat -> Code_Numeral.natural
    val natural_to_digit10: Code_Numeral.natural -> abr_string
    val nb_class: ocl_class -> nat
    val noPosition: positiona
    val nodeInfo: positiona -> positiona * int -> namea -> nodeInfo
    datatype nodeInfo
    =
         NodeInfo0 of positiona * (positiona * int) * namea
       | OnlyPos0 of positiona * (positiona * int)
    val normalize0: 'a equal -> ('b -> 'a) -> 'b list -> 'b list
    val normalize_lines: string -> string
    val not_equal: ''a -> ''a -> bool
    val not_yet_supported: abr_string -> unit
    datatype ('a, 'b) nsplit = Nsplit_sep of 'b | Nsplit_text of 'a
    val nsplit_f: 'a list -> ('a -> bool) -> ('a list, 'a) nsplit list
    val nth: 'a list -> int -> 'a
    val nth_drop: int -> 'a list -> 'a list
    val nth_list: 'a list list -> int -> 'a list
    val nth_map: int -> ('a -> 'a) -> 'a list -> 'a list
    val nth_string: string -> int -> string
    val null: 'a list -> bool
    datatype num = Bit0 of num | Bit1 of num | One
    datatype num1 = One_num1
    val oF_l:
       semi_thm_attribute -> semi_thm_attribute list -> semi_thm_attribute
    val oclAss_relation:
       'a ocl_association_ext ->
         (ocl_ty_obj * unit ocl_multiplicity_ext) list
    val oclAss_relationa: 'a ocl_association_ext -> ocl_association_relation
    val oclAss_type: 'a ocl_association_ext -> ocl_association_type
    val oclTy_class: unit ocl_ty_class_ext -> ocl_ty
    val oclTy_class_pre: abr_string -> ocl_ty
    datatype ocl_ass_class
    = OclAssClass of unit ocl_association_ext * unit ocl_class_raw_ext
    datatype 'a ocl_association_ext
    =
         Ocl_association_ext of
             ocl_association_type * ocl_association_relation * 'a
    val ocl_association_rec:
       (ocl_association_type -> ocl_association_relation -> 'a -> 'b) ->
         'a ocl_association_ext -> 'b
    val ocl_association_rec0:
       (ocl_association_type -> ocl_association_relation -> 'a) ->
         'b ocl_association_ext -> 'a
    datatype ocl_association_relation
    = OclAssRel of (ocl_ty_obj * unit ocl_multiplicity_ext) list
    datatype ocl_association_type
    =
         OclAssTy_aggregation
       | OclAssTy_association
       | OclAssTy_composition
       | OclAssTy_native_attribute
    datatype ocl_class
    = OclClass of abr_string * (abr_string * ocl_ty) list * ocl_class list
    datatype 'a ocl_class_raw_ext
    =
         Ocl_class_raw_ext of
             ocl_ty_obj * (abr_string * ocl_ty) list *
             ocl_ctxt_clause list * bool * 'a
    val ocl_class_raw_rec:
       (ocl_ty_obj ->
          (abr_string * ocl_ty) list ->
            ocl_ctxt_clause list -> bool -> 'a -> 'b)
         -> 'a ocl_class_raw_ext -> 'b
    val ocl_class_raw_rec0:
       (ocl_ty_obj ->
          (abr_string * ocl_ty) list -> ocl_ctxt_clause list -> bool -> 'a)
         -> 'b ocl_class_raw_ext -> 'a
    datatype ocl_class_synonym = OclClassSynonym of abr_string * ocl_ty
    datatype ocl_class_tree
    = OclClassTree of Code_Numeral.natural * Code_Numeral.natural
    datatype ocl_collection
    =
         Derived0
       | Nonunique0
       | Ordered0
       | Qualifier0
       | Redefines0
       | Sequence
       | Set
       | Subsets0
       | Union0
    datatype ocl_ctxt_clause
    = Ctxt_inv of ocl_ctxt_term_inv | Ctxt_pp of unit ocl_ctxt_pre_post_ext
    datatype 'a ocl_ctxt_ext
    =
         Ocl_ctxt_ext of
             abr_string list * ocl_ty_obj * ocl_ctxt_clause list * 'a
    datatype 'a ocl_ctxt_pre_post_ext
    =
         Ocl_ctxt_pre_post_ext of
             abr_string * ocl_ty * ocl_ctxt_term_pp list * 'a
    val ocl_ctxt_pre_post_rec:
       (abr_string -> ocl_ty -> ocl_ctxt_term_pp list -> 'a -> 'b) ->
         'a ocl_ctxt_pre_post_ext -> 'b
    val ocl_ctxt_pre_post_rec0:
       (abr_string -> ocl_ty -> ocl_ctxt_term_pp list -> 'a) ->
         'b ocl_ctxt_pre_post_ext -> 'a
    datatype ocl_ctxt_prefix = OclCtxtPost | OclCtxtPre
    val ocl_ctxt_rec:
       (abr_string list -> ocl_ty_obj -> ocl_ctxt_clause list -> 'a -> 'b)
         -> 'a ocl_ctxt_ext -> 'b
    val ocl_ctxt_rec0:
       (abr_string list -> ocl_ty_obj -> ocl_ctxt_clause list -> 'a) ->
         'b ocl_ctxt_ext -> 'a
    datatype ocl_ctxt_term
    =
         T_lambda of abr_string * ocl_ctxt_term
       | T_pure of terma * abr_string option
       | T_to_be_parsed of abr_string * abr_string
    datatype ocl_ctxt_term_inv = T_inv of bool * ocl_prop
    datatype ocl_ctxt_term_pp
    = T_invariant of ocl_ctxt_term_inv | T_pp of ocl_ctxt_prefix * ocl_prop
    datatype ocl_data_shallow
    =
         ShallB_list of ocl_data_shallow list
       | ShallB_self of internal_oid
       | ShallB_str of abr_string
       | ShallB_term of ocl_def_base
    datatype ocl_def_base
    =
         OclDefInteger of abr_string
       | OclDefReal of abr_string * abr_string
       | OclDefString of abr_string
    datatype ocl_def_base_l = OclDefBase of ocl_def_base list
    datatype ocl_def_pp_core
    =
         OclDefPPCoreAdd of abr_string ocl_def_state_core list
       | OclDefPPCoreBinding of abr_string
    datatype ocl_def_state
    = OclDefSt of abr_string * abr_string ocl_def_state_core list
    datatype 'a ocl_def_state_core
    =
         OclDefCoreAdd of unit ocl_instance_single_ext
       | OclDefCoreBinding of 'a
    datatype ocl_def_transition
    =
         OclDefPP of
             abr_string option * ocl_def_pp_core * ocl_def_pp_core option
    datatype ocl_enum = OclEnum of abr_string * abr_string list
    datatype ocl_flush_all = OclFlushAll
    datatype ocl_generic = OclGeneric of abr_string
    datatype ocl_instance = OclInstance of unit ocl_instance_single_ext list
    val ocl_instance_single_empty: unit ocl_instance_single_ext
    datatype 'a ocl_instance_single_ext
    =
         Ocl_instance_single_ext of
             abr_string option * abr_string option * abr_string option *
             ((abr_string * abr_string) option *
              (abr_string * ocl_data_shallow)
             )
             list
             ocl_list_attr
             *
             'a
    val ocl_instance_single_rec:
       (abr_string option ->
          abr_string option ->
            abr_string option ->
              ((abr_string * abr_string) option *
               (abr_string * ocl_data_shallow)
              )
              list
              ocl_list_attr
                -> 'a -> 'b)
         -> 'a ocl_instance_single_ext -> 'b
    val ocl_instance_single_rec0:
       (abr_string option ->
          abr_string option ->
            abr_string option ->
              ((abr_string * abr_string) option *
               (abr_string * ocl_data_shallow)
              )
              list
              ocl_list_attr
                -> 'a)
         -> 'b ocl_instance_single_ext -> 'a
    datatype 'a ocl_list_attr
    =
         OclAttrCast of abr_string * 'a ocl_list_attr * 'a
       | OclAttrNoCast of 'a
    datatype 'a ocl_multiplicity_ext
    =
         Ocl_multiplicity_ext of
             (ocl_multiplicity_single * ocl_multiplicity_single option) list
             *
             abr_string option * ocl_collection list * 'a
    val ocl_multiplicity_rec:
       ((ocl_multiplicity_single * ocl_multiplicity_single option) list ->
          abr_string option -> ocl_collection list -> 'a -> 'b)
         -> 'a ocl_multiplicity_ext -> 'b
    val ocl_multiplicity_rec0:
       ((ocl_multiplicity_single * ocl_multiplicity_single option) list ->
          abr_string option -> ocl_collection list -> 'a)
         -> 'b ocl_multiplicity_ext -> 'a
    datatype ocl_multiplicity_single
    = Mult_infinity | Mult_nat of Code_Numeral.natural | Mult_star
    datatype ocl_prop = OclProp_ctxt of abr_string option * ocl_ctxt_term
    datatype ocl_ty
    =
         OclTy_arrow of ocl_ty * ocl_ty
       | OclTy_base_boolean
       | OclTy_base_integer
       | OclTy_base_real
       | OclTy_base_string
       | OclTy_base_unlimitednatural
       | OclTy_base_void
       | OclTy_binding of abr_string option * ocl_ty
       | OclTy_class_syn of abr_string
       | OclTy_collection of unit ocl_multiplicity_ext * ocl_ty
       | OclTy_enum of abr_string
       | OclTy_object of ocl_ty_obj
       | OclTy_pair of ocl_ty * ocl_ty
       | OclTy_raw of abr_string
    datatype 'a ocl_ty_class_ext
    =
         Ocl_ty_class_ext of
             abr_string * Code_Numeral.natural * Code_Numeral.natural *
             unit ocl_ty_class_node_ext * unit ocl_ty_class_node_ext * 'a
    datatype 'a ocl_ty_class_node_ext
    =
         Ocl_ty_class_node_ext of
             Code_Numeral.natural * unit ocl_multiplicity_ext * abr_string *
             'a
    val ocl_ty_class_node_rec:
       (Code_Numeral.natural ->
          unit ocl_multiplicity_ext -> abr_string -> 'a -> 'b)
         -> 'a ocl_ty_class_node_ext -> 'b
    val ocl_ty_class_node_rec0:
       (Code_Numeral.natural ->
          unit ocl_multiplicity_ext -> abr_string -> 'a)
         -> 'b ocl_ty_class_node_ext -> 'a
    val ocl_ty_class_rec:
       (abr_string ->
          Code_Numeral.natural ->
            Code_Numeral.natural ->
              unit ocl_ty_class_node_ext ->
                unit ocl_ty_class_node_ext -> 'a -> 'b)
         -> 'a ocl_ty_class_ext -> 'b
    val ocl_ty_class_rec0:
       (abr_string ->
          Code_Numeral.natural ->
            Code_Numeral.natural ->
              unit ocl_ty_class_node_ext ->
                unit ocl_ty_class_node_ext -> 'a)
         -> 'b ocl_ty_class_ext -> 'a
    datatype ocl_ty_obj
    = OclTyObj of ocl_ty_obj_core * ocl_ty_obj_core list list
    datatype ocl_ty_obj_core
    = OclTyCore of unit ocl_ty_class_ext | OclTyCore_pre of abr_string
    val oct_char: string -> string
    val octalRepr: cIntRepr
    val of_Cons: abr_string
    val of_Consa: abr_string
    val of_Function_Kind: (abr_string -> 'a) -> function_Kind -> 'a
    val of_Function_Stmt:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) ->
                   (abr_string -> 'a) -> function_Stmt -> 'a
    val of_IsaUnit:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> isaUnit -> 'a
    val of_Literal:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           -> ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> literal -> 'a
    val of_ML: (abr_string -> string) -> 'a -> ml -> string
    val of_Module:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   ('a -> 'a list -> 'a) ->
                     (abr_string -> 'a) -> module -> 'a
    val of_Name:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> name -> 'a
    val of_Nil: abr_string
    val of_Nila: abr_string
    val of_None: abr_string
    val of_Nonea: abr_string
    val of_Pair: abr_string
    val of_Paira: abr_string
    val of_Pat:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> term -> 'a
    val of_Some: abr_string
    val of_Somea: abr_string
    val of_Sort:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> name list -> 'a
    val of_Stmt:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> stmt -> 'a
    val of_TLD_aux:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ((literal -> 'a) ->
                    (name -> 'a) ->
                      (name -> 'b -> 'a -> 'a) ->
                        ('c -> 'd -> 'a -> 'a -> 'a) ->
                          ('e -> 'f -> 'g -> 'a -> 'a -> 'a -> 'a) ->
                            ((('h * 'a) * ('i * 'a)) list -> 'j -> 'a -> 'a)
                              ->
                              ('k ->
                                 (('l * 'a) * ('m * 'a)) list -> 'a -> 'a)
                                ->
                                ('n -> ('o * 'a) list -> 'a -> 'a) ->
                                  (name -> (name * ...) list -> 'a) ->
                                    ('p -> ... list -> 'a -> 'a) ->
                                      (abr_string -> ... list -> ...) ->
  ('q -> ...) -> ... -> ...)
                   -> ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> 'r
    val of_Term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> term -> 'a
    val of_ThyName:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> thyName -> 'a
    val of_Type:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typea -> 'a
    val of_TypeSign:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             abr_string ->
               ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typeSign -> 'a
    val of_TypeSpec:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typeSpec -> 'a
    val of_abbreviation:
       (abr_string -> string) -> 'a -> abbreviation -> string
    val of_all_meta:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> all_meta -> string
    val of_all_meta_embedding:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> all_meta_embedding -> 'a
    val of_all_meta_embeddinga:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> all_meta_embedding -> string
    val of_all_meta_lists:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           bool compiler_env_config_ext ->
             (abr_string option * all_meta list) list -> string list
    val of_axiomatization:
       (abr_string -> string) -> 'a -> axiomatization -> string
    val of_bool: (abr_string -> 'a) -> bool -> 'a
    val of_boola: 'a zero_neq_one -> bool -> 'a
    val of_boolb: (abr_string -> 'a) -> bool -> 'a
    val of_boot_generation_syntax: 'a -> boot_generation_syntax -> string
    val of_boot_setup_env:
       (abr_string -> string) -> 'a -> boot_setup_env -> string
    val of_code_reflect:
       (abr_string -> string) -> 'a -> code_reflect -> string
    val of_compiler_env_config:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> string_b_a_s_e -> 'a)
             ->
             (('a -> 'a list -> 'a) ->
                (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
               ->
               ((abr_string -> 'a) -> unit -> 'a) ->
                 ((abr_string -> 'a) -> bool -> 'a) ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           abr_string ->
                             ('a -> 'a list -> 'a) ->
                               (abr_string -> 'a) ->
                                 (('a -> 'a list -> 'a) ->
                                    (abr_string -> 'a) -> 'b -> 'a)
                                   -> 'b compiler_env_config_ext -> 'a
    val of_consts: (abr_string -> string) -> 'a -> consts -> string
    val of_ctxt2_term: (abr_string -> string) -> ocl_ctxt_term -> string
    val of_ctxt2_term_aux:
       (abr_string -> string) -> abr_string list -> ocl_ctxt_term -> string
    val of_datatype: (abr_string -> string) -> 'a -> datatypea -> string
    val of_definition:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> definition -> string
    val of_e_n_v_section:
       (abr_string -> string) ->
         'a compiler_env_config_ext -> section -> string
    val of_e_n_v_semi_theories:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> semi_theories -> string
    val of_e_n_v_semi_theory:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a compiler_env_config_ext -> semi_theory -> string
    val of_floor: 'a -> (abr_string -> 'b) -> floor -> 'b
    val of_floora: floor -> string
    val of_gen_meta:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> gen_meta -> 'a
    val of_generation_lemma_mode:
       'a -> (abr_string -> 'b) -> generation_lemma_mode -> 'b
    val of_generation_semantics_ocl:
       'a -> (abr_string -> 'b) -> generation_semantics_ocl -> 'b
    val of_hide_const: (abr_string -> string) -> 'a -> hide_const -> string
    val of_inh: 'a tmp_inh -> 'a
    val of_instantiation:
       (abr_string -> string) -> 'a -> instantiation -> string
    val of_internal_oid:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> internal_oid -> 'a
    val of_internal_oids:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> internal_oids -> 'a
    val of_interpretation:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> interpretation -> string
    val of_lemma:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> lemma -> string
    val of_lemmas: (abr_string -> string) -> 'a -> lemmas -> string
    val of_linh: ('a, 'b) inheritance_ext list -> 'a list
    val of_linh_sib: ('a, 'b) inheritance_ext list -> 'a list
    val of_list:
       abr_string ->
         abr_string ->
           ('a -> 'a list -> 'a) ->
             (abr_string -> 'a) -> ('b -> 'a) -> 'b list -> 'a
    val of_lista:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> ('b -> 'a) -> 'b list -> 'a
    val of_nat: 'a -> (abr_string -> 'b) -> Code_Numeral.natural -> 'b
    val of_nata: 'a -> (abr_string -> 'b) -> Code_Numeral.natural -> 'b
    val of_ocl_ass_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> ocl_ass_class -> 'a
    val of_ocl_association:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_association_ext -> 'a
    val of_ocl_association_relation:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             ocl_association_relation -> 'a
    val of_ocl_association_type:
       'a -> (abr_string -> 'b) -> ocl_association_type -> 'b
    val of_ocl_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_class -> 'a
    val of_ocl_class_raw:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_class_raw_ext -> 'a
    val of_ocl_class_synonym:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_class_synonym -> 'a
    val of_ocl_class_tree:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_class_tree -> 'a
    val of_ocl_collection: (abr_string -> 'a) -> ocl_collection -> 'a
    val of_ocl_ctxt:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_ctxt_ext -> 'a
    val of_ocl_ctxt_clause:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) -> ocl_ctxt_clause -> 'a
    val of_ocl_ctxt_pre_post:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               ((abr_string -> 'a) -> bool -> 'a) ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         abr_string ->
                           ('a -> 'a list -> 'a) ->
                             (abr_string -> 'a) ->
                               (('a -> 'a list -> 'a) ->
                                  (abr_string -> 'a) -> 'b -> 'a)
                                 -> 'b ocl_ctxt_pre_post_ext -> 'a
    val of_ocl_ctxt_prefix:
       'a -> (abr_string -> 'b) -> ocl_ctxt_prefix -> 'b
    val of_ocl_ctxt_term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     ('a -> 'a list -> 'a) ->
                       (abr_string -> 'a) -> ocl_ctxt_term -> 'a
    val of_ocl_ctxt_term_inv:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> ocl_ctxt_term_inv -> 'a
    val of_ocl_ctxt_term_pp:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           ((abr_string -> 'a) -> bool -> 'a) ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) -> ocl_ctxt_term_pp -> 'a
    val of_ocl_ctxta:
       (abr_string -> string) -> 'a -> string -> 'b ocl_ctxt_ext -> string
    val of_ocl_data_shallow:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) ->
                   (abr_string -> 'a) -> ocl_data_shallow -> 'a
    val of_ocl_data_shallowa:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> ocl_data_shallow -> string
    val of_ocl_def_base:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_def_base -> 'a
    val of_ocl_def_base_l:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             abr_string ->
               ('a -> 'a list -> 'a) ->
                 (abr_string -> 'a) -> ocl_def_base_l -> 'a
    val of_ocl_def_basea: (abr_string -> string) -> ocl_def_base -> string
    val of_ocl_def_pp_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_pp_core -> 'a
    val of_ocl_def_pp_corea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> ocl_def_pp_core -> string
    val of_ocl_def_state:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_state -> 'a
    val of_ocl_def_state_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             ('b -> 'a) -> 'b ocl_def_state_core -> 'a
    val of_ocl_def_state_corea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           abr_string ocl_def_state_core list -> string
    val of_ocl_def_statea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> string -> ocl_def_state -> string
    val of_ocl_def_transition:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_def_transition -> 'a
    val of_ocl_def_transitiona:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a -> string -> ocl_def_transition -> string
    val of_ocl_enum:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_enum -> 'a
    val of_ocl_flush_all: 'a -> (abr_string -> 'b) -> ocl_flush_all -> 'b
    val of_ocl_generic:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_generic -> 'a
    val of_ocl_generica:
       (abr_string -> string) -> 'a -> ocl_generic -> string
    val of_ocl_instance:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_instance -> 'a
    val of_ocl_instance_single:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) ->
                           (('a -> 'a list -> 'a) ->
                              (abr_string -> 'a) -> 'b -> 'a)
                             -> 'b ocl_instance_single_ext -> 'a
    val of_ocl_instance_singlea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           'a ocl_instance_single_ext -> string
    val of_ocl_instancea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> ocl_instance -> string
    val of_ocl_list_attr:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) ->
           (abr_string -> 'a) -> ('b -> 'a) -> 'b ocl_list_attr -> 'a
    val of_ocl_list_attra:
       (abr_string -> string) ->
         ('a -> string) -> 'a ocl_list_attr -> string
    val of_ocl_multiplicity:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       ('a -> 'a list -> 'a) ->
                         (abr_string -> 'a) ->
                           (('a -> 'a list -> 'a) ->
                              (abr_string -> 'a) -> 'b -> 'a)
                             -> 'b ocl_multiplicity_ext -> 'a
    val of_ocl_multiplicity_single:
       (('a -> 'a list -> 'a) ->
          (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
         ->
         ('a -> 'a list -> 'a) ->
           (abr_string -> 'a) -> ocl_multiplicity_single -> 'a
    val of_ocl_prop:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     ('a -> 'a list -> 'a) ->
                       (abr_string -> 'a) -> ocl_prop -> 'a
    val of_ocl_ty:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty -> 'a
    val of_ocl_ty_class:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_ty_class_ext -> 'a
    val of_ocl_ty_class_node:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) ->
                             (('a -> 'a list -> 'a) ->
                                (abr_string -> 'a) -> 'b -> 'a)
                               -> 'b ocl_ty_class_node_ext -> 'a
    val of_ocl_ty_obj:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty_obj -> 'a
    val of_ocl_ty_obj_core:
       (abr_string -> abr_string) ->
         (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a)
           ->
           (('a -> 'a list -> 'a) ->
              (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
             ->
             ((abr_string -> 'a) -> unit -> 'a) ->
               abr_string ->
                 abr_string ->
                   abr_string ->
                     abr_string ->
                       abr_string ->
                         ('a -> 'a list -> 'a) ->
                           (abr_string -> 'a) -> ocl_ty_obj_core -> 'a
    val of_option:
       abr_string ->
         abr_string ->
           ('a -> 'b list -> 'a) ->
             (abr_string -> 'a) -> ('c -> 'b) -> 'c option -> 'a
    val of_optiona:
       ('a -> 'b list -> 'a) ->
         (abr_string -> 'a) -> ('c -> 'b) -> 'c option -> 'a
    val of_overloading:
       (abr_string -> string) -> 'a -> overloading -> string
    val of_pair:
       abr_string ->
         ('a -> 'b list -> 'c) ->
           (abr_string -> 'a) -> ('d -> 'b) -> ('e -> 'b) -> 'd * 'e -> 'c
    val of_paira:
       ('a -> 'b list -> 'c) ->
         (abr_string -> 'a) -> ('d -> 'b) -> ('e -> 'b) -> 'd * 'e -> 'c
    val of_pure_class:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a
    val of_pure_indexname:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             ('a -> 'a list -> 'a) ->
               (abr_string -> 'a) -> abr_string * Code_Numeral.natural -> 'a
    val of_pure_sort:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         abr_string ->
           abr_string ->
             ('a -> 'a list -> 'a) ->
               (abr_string -> 'a) -> abr_string list -> 'a
    val of_pure_term:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> terma -> 'a
    val of_pure_terma:
       (abr_string -> string) -> bool -> string list -> terma -> string
    val of_pure_typ:
       (('a -> 'a list -> 'a) -> (abr_string -> 'a) -> abr_string -> 'a) ->
         (('a -> 'a list -> 'a) ->
            (abr_string -> 'a) -> Code_Numeral.natural -> 'a)
           ->
           abr_string ->
             abr_string ->
               abr_string ->
                 ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> typ -> 'a
    val of_pure_typa: (abr_string -> string) -> typ -> string
    val of_section: (abr_string -> string) -> 'a -> section -> string
    val of_semi_attrib:
       (abr_string -> string) -> string -> semi_thm list -> string
    val of_semi_attrib1:
       (abr_string -> string) -> string -> abr_string list -> string
    val of_semi_attrib_genA:
       (semi_thm list -> string) -> string -> semi_thm list -> string
    val of_semi_attrib_genB:
       (abr_string list -> string) -> string -> abr_string list -> string
    val of_semi_command_final:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_final -> string
    val of_semi_command_proof:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_proof -> string
    val of_semi_command_state:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_command_state -> string
    val of_semi_method:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> semi_method -> string
    val of_semi_method_simp:
       (abr_string -> string) -> string -> semi_method_simp -> string
    val of_semi_term: (abr_string -> string) -> semi_term -> string
    val of_semi_term_0: (abr_string -> string) -> semi_term_0 -> string
    val of_semi_term_1: (abr_string -> string) -> semi_term_1 -> string
    val of_semi_terma: (abr_string -> string) -> semi_terma -> string
    val of_semi_theories0:
       (abr_string -> string) ->
         ('a -> semi_theory -> string) -> 'a -> semi_theories -> string
    val of_semi_theory:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) -> 'a -> semi_theory -> string
    val of_semi_thm: (abr_string -> string) -> semi_thm -> string
    val of_semi_thm_attribute:
       (abr_string -> string) -> semi_thm_attribute -> string
    val of_semi_thm_attribute_aux:
       (abr_string -> string) ->
         (string * string) list -> semi_thm_attribute -> string
    val of_semi_thm_attribute_aux_gen:
       (abr_string -> string) ->
         string * string -> (string * string) list -> abr_string -> string
    val of_semi_thm_attribute_aux_gen_of:
       (abr_string -> string) -> semi_terma list -> string * string
    val of_semi_thm_attribute_aux_gen_where:
       (abr_string -> string) ->
         (abr_string * semi_terma) list -> string * string
    val of_semi_thm_attribute_l:
       (abr_string -> string) -> semi_thm_attribute list -> string
    val of_semi_thm_attribute_l1:
       (abr_string -> string) -> semi_thm_attribute list -> string
    val of_semi_thm_l: (abr_string -> string) -> semi_thm list -> string
    val of_semi_typ: (abr_string -> string) -> semi_typ -> string
    val of_semi_typa:
       (abr_string -> string) -> abr_string * abr_string list -> string
    val of_semi_val_fun: semi_val_fun -> string
    val of_setup: (abr_string -> string) -> 'a -> setup -> string
    val of_string: 'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_string_b_a_s_e: 'a -> (abr_string -> 'b) -> string_b_a_s_e -> 'b
    val of_string_b_a_s_ea: 'a -> (abr_string -> 'b) -> string_b_a_s_e -> 'b
    val of_string_gen:
       abr_string ->
         (abr_string -> abr_string) ->
           (abr_string -> abr_string) ->
             'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_stringa: 'a -> (abr_string -> 'b) -> abr_string -> 'b
    val of_sub: 'a tmp_sub -> 'a
    val of_text: (abr_string -> string) -> 'a -> text -> string
    val of_text_raw: (abr_string -> string) -> 'a -> text_raw -> string
    val of_thm: (abr_string -> string) -> 'a -> thm -> string
    val of_type_notation:
       (abr_string -> string) -> 'a -> type_notation -> string
    val of_type_synonym:
       (abr_string -> string) -> 'a -> type_synonym -> string
    val of_unit: (abr_string -> 'a) -> unit -> 'a
    val of_unita: (abr_string -> 'a) -> unit -> 'a
    val ofa: semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val oid: abr_string -> internal_oid -> semi_term_0
    val oidGetAssoc: internal_oids -> internal_oid
    val oidGetInh: internal_oids -> internal_oid
    val oidInit: internal_oid -> internal_oids
    val oidReinitAll: internal_oids -> internal_oids
    val oidSucAssoc: internal_oids -> internal_oids
    val oidSucInh: internal_oids -> internal_oids
    val one: 'a one -> 'a
    type 'a one = {one: 'a}
    val one_int: inta one
    val one_inta: inta
    val one_integer: int one
    val one_integera: int
    val one_nat: nat
    val one_natural: Code_Numeral.natural one
    val one_power: 'a power -> 'a one
    val one_zero_neq_one: 'a zero_neq_one -> 'a one
    val oneof:
       char list list -> char list -> (char list, char list * char list) sum
    val oneof_aux:
       char list list ->
         char list list ->
           char list -> (char list, char list * char list) sum
    val oneof_b_i_n_d:
       ('a list -> (char list, 'b * 'a list) sum) list ->
         'a list -> (char list, 'b * 'a list) sum
    val onlyPos: positiona -> positiona * int -> nodeInfo
    val oo: ('a -> 'b) * ('c -> 'd -> 'a) -> 'c -> 'd -> 'b
    val ooo: ('a -> 'b) * ('c -> 'd -> 'e -> 'a) -> 'c -> 'd -> 'e -> 'b
    val oooo:
       ('a -> 'b) * ('c -> 'd -> 'e -> 'f -> 'a) ->
         'c -> 'd -> 'e -> 'f -> 'b
    val opt: abr_string -> semi_typ
    datatype opt_attr_type = OptInh | OptOwn
    datatype opt_ident = OptIdent of Code_Numeral.natural
    val option_ord: ('a * 'b -> order) -> 'a option * 'b option -> order
    val optiona: semi_method list -> semi_method
    datatype 'a optiona = None | Some of 'a
    val or:
       ('a -> ('b, 'c) sum) -> ('a -> ('d, 'c) sum) -> 'a -> ('d, 'c) sum
    type 'a ord = 'a * 'a -> order
    val ord_integer: int ?.C_Ast.C_Ast.ord
    val order_list: (int * 'a) list -> 'a list
    val orf: ('a -> bool) * ('a -> bool) -> 'a -> bool
    val overloading: overloading -> all_meta
    datatype overloading
    = Overloading of abr_string * semi_terma * abr_string * semi_terma
    val overloadinga:
       abr_string -> semi_typ -> abr_string -> semi_terma -> overloading
    val pRINT_access_choose:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_choose_ml:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_def_mono:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_deref_assocs:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_deref_oid:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_dot_consts:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_dot_cp_lemmas:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_access_dot_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_dot_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_eval_extract:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_access_is_repr:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_access_oid_uniq:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_oid_uniq_ml:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_repr_allinst:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_select:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_access_select_obj:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_allinst_astype:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_def_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_exec:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_iskindof_eq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_iskindof_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_allinst_istypeof:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_allinst_istypeof_pre:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_allinst_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_d_up_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_lemma_const:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_const:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_lemmas_id2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_astype_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_astype_up_d_cast0:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_enum: (ocl_enum -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_examp_def_st_defs:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_examp_instance:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc_typecheck:
       (ocl_instance ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_examp_instance_defassoc_typecheck_var:
       (ocl_instance -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_examp_oclbase:
       (ocl_def_base_l -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_haskell:
       (isaUnit ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_class_1:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_class_2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_equiv_1of2:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_equiv_2of1:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_datatype_universe:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_enum_syn:
       ('a ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_enum_synonym:
       ('a ->
          'b compiler_env_config_ext ->
            all_meta list * 'b compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_instantiation_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_infra_instantiation_universe:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_type_synonym_class:
       ('a -> 'b -> all_meta list * 'b) embedding_fun
    val pRINT_infra_type_synonym_class_higher:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_infra_type_synonym_class_rec:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_instantia_def_strictrefeq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_instantia_lemmas_strictrefeq:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_defineda:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemma_cp:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemma_strict:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_eq_asty:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_istypeof:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_iskindof_up_istypeof_unfold:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_iskindof_up_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_class:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_consts:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_defined:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_defineda:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_from_universe:
       (ocl_class ->
          'a compiler_env_config_ext ->
            all_meta list * 'a compiler_env_config_ext
       )
       embedding_fun
    val pRINT_istypeof_lemma_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemma_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_cp:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_id:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_lemmas_strict:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_up_d_cast:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val pRINT_istypeof_up_larger:
       (ocl_class -> 'a -> all_meta list * 'a) embedding_fun
    val p_first_of_NodeInfo: nodeInfo -> positiona * int
    val p_last_of_NodeInfo: nodeInfo -> positiona * int
    val pair: 'a -> 'b -> 'a * 'b
    val pair0: semi_term_0 list -> semi_term_0
    val paren: abr_string -> abr_string -> semi_term_0 -> semi_term_0
    val parenthesis: semi_term_0 -> semi_term_0
    val parse_comment: comment -> abr_string comment_type list
    val parse_commenta:
       char list -> (char list, char list comment_type list * char list) sum
    val parse_id_list:
       char list list ->
         char list -> (char list, char list option list * char list) sum
    val parse_id_m_a_y_b_e:
       char list list ->
         char list ->
           (char list, (char list * char list option) * char list) sum
    val parse_id_o_n_e:
       char list list -> char list -> (char list, char list * char list) sum
    val parse_str: char list -> (char list, char list * char list) sum
    val parse_str_aux:
       char list list -> char list -> (char list, char list * char list) sum
    datatype parsing_style = Style_Haskell | Style_ML
    val partDesignator: 'a cPartDesignator -> designator
    val partition: ('a -> bool) -> 'a list -> 'a list * 'a list
    val partition_eq: ('a * 'a -> bool) -> 'a list -> 'a list list
    val partition_list:
       (int -> 'a -> bool) -> int -> int -> 'a list -> 'a list list
    val perhaps_apply: ('a -> 'a option) list -> 'a -> 'a option
    val perhaps_loop: ('a -> 'a option) -> 'a -> 'a option
    val plain_words: string -> string
    val plus: semi_method list -> semi_method
    type 'a plus = {plusa: 'a -> 'a -> 'a}
    val plus_integer: int plus
    val plus_nat: nat -> nat -> nat
    val plus_natural: Code_Numeral.natural plus
    val plusa: 'a plus -> 'a -> 'a -> 'a
    val pointer_eq_ord: ('a * 'a -> order) -> 'a * 'a -> order
    val pos_in_interval:
       (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_in_interval_haskell:
       (abr_string * int, (int * int) list) alist ->
         (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_in_interval_ml:
       'a -> (positiona * int) * (positiona * int) -> positiona -> bool
    val pos_of_CBlockItem: 'a cCompoundBlockItem -> 'a
    val pos_of_CBuiltin: 'a cBuiltinThing -> 'a
    val pos_of_CConst: 'a cConstant -> 'a
    val pos_of_CDecl: 'a cDeclaration -> 'a
    val pos_of_CExpr: 'a cExpression -> 'a
    val pos_of_CExtDecl: 'a cExternalDeclaration -> 'a
    val pos_of_CFunDef: 'a cFunctionDef -> 'a
    val pos_of_CStat: 'a cStatement -> 'a
    val position: int -> abr_string -> int -> int -> positiona
    datatype position = EQ | GT | LT | UN
    datatype positiona
    =
         BuiltinPosition0
       | InternalPosition0
       | NoPosition0
       | Position0 of int * abr_string * int * int
    val power: 'a power -> 'a -> nat -> 'a
    type 'a power = {one_power: 'a one, times_power: 'a times}
    val power_int: inta power
    val pref_constr_enum: abr_string -> abr_string
    val pref_generic_enum: abr_string -> abr_string
    val pref_ident: abr_string -> abr_string
    val pref_ty_enum: abr_string -> abr_string
    val pref_ty_syn: abr_string -> abr_string
    val prefix: string -> string -> string
    val prefix_lines: string -> string -> string
    val prefixes: 'a list -> 'a list list
    val prefixes1: 'a list -> 'a list list
    val prev_was_stop: all_meta_embedding list -> bool
    val print:
       ((abr_string -> string) -> (Code_Numeral.natural -> string) -> 'a) ->
         'a
    val print_access_choose:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_choose_ml:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_choose_mlname:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural -> abr_string
    val print_access_choose_name:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural -> abr_string
    val print_access_choose_switch:
       ('a -> 'b -> 'c) ->
         (Code_Numeral.natural -> 'd) ->
           ocl_class ->
             (Code_Numeral.natural ->
                Code_Numeral.natural -> Code_Numeral.natural -> 'a)
               ->
               ('d list -> 'e) ->
                 (('e * 'f) list -> 'b) -> ('d -> 'd -> 'f) -> 'c list
    val print_access_def_mono:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_def_mono_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_deref_assocs:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_deref_assocs_name:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_deref_assocs_namea:
       Code_Numeral.natural ->
         (abr_string -> abr_string) ->
           (abr_string -> abr_string) -> abr_string
    val print_access_deref_oid: ocl_class -> 'a -> all_meta list * 'a
    val print_access_deref_oid_name: (abr_string -> 'a) -> 'a
    val print_access_dot:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_dot_aux:
       (abr_string option -> semi_terma list -> semi_terma) ->
         ocl_ty -> semi_terma
    val print_access_dot_consts:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_dot_consts_ty: ocl_ty -> semi_typ
    val print_access_dot_cp_lemmas: 'a -> 'b -> all_meta list * 'b
    val print_access_dot_cp_lemmas_set: abr_string list
    val print_access_dot_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemma_cp_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_dot_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_access_dot_lemmas_id_name: abr_string
    val print_access_dot_lemmas_id_set: ocl_class -> abr_string list
    val print_access_dot_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_eval_extract: 'a -> 'b -> all_meta list * 'b
    val print_access_is_repr:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_is_repr_name:
       (abr_string -> abr_string) ->
         abr_string -> ocl_ty -> (abr_string -> abr_string) -> abr_string
    val print_access_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_access_lemma_strict_name:
       (abr_string -> abr_string) ->
         abr_string ->
           ocl_ty -> (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_oid_uniq:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_oid_uniq_gen:
       ('a -> 'b) ->
         ('c compiler_env_config_ext -> internal_oids -> 'd) ->
           (Code_Numeral.natural ->
              abr_string ->
                (abr_string -> abr_string) ->
                  abr_string -> internal_oid -> 'a)
             -> ocl_class -> 'c compiler_env_config_ext -> 'b list * 'd
    val print_access_oid_uniq_ml:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_oid_uniq_mlname:
       Code_Numeral.natural -> abr_string -> abr_string -> abr_string
    val print_access_oid_uniq_name:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_oid_uniq_namea:
       Code_Numeral.natural ->
         (abr_string -> abr_string) -> abr_string -> abr_string
    val print_access_repr_allinst:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select_name: ('a -> 'b) -> (abr_string -> 'a) -> 'b
    val print_access_select_obj:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_access_select_obj_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_allinst_astype: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_astype_name: (abr_string -> abr_string) -> abr_string
    val print_allinst_def_id: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_exec: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_iskindof_eq: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_iskindof_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_allinst_istypeof:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_allinst_istypeof_pre: 'a -> 'b -> all_meta list * 'b
    val print_allinst_istypeof_pre_name1: abr_string
    val print_allinst_istypeof_pre_name2: abr_string
    val print_allinst_istypeof_single:
       (abr_string -> abr_string) ->
         abr_string ->
           ('a -> abr_string) ->
             abr_string ->
               'a ->
                 (abr_string -> abr_string) ->
                   (abr_string list -> abr_string list) ->
                     (abr_string list -> abr_string list) -> lemma list
    val print_allinst_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_d_up_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_from_universe_name: abr_string -> abr_string
    val print_astype_lemma_const: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_astype_lemma_cp_set2:
       ocl_class ->
         ((abr_string * ocl_ty) list -> (abr_string * ocl_ty) list) ->
           (((abr_string -> abr_string) * abr_string) *
            ((abr_string -> abr_string) * abr_string)
           )
           list
    val print_astype_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_const: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_lemmas_id2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_astype_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast0: ocl_class -> 'a -> all_meta list * 'a
    val print_astype_up_d_cast0_name: abr_string -> abr_string -> abr_string
    val print_astype_up_d_cast_name: abr_string -> abr_string -> abr_string
    val print_ctxt:
       unit ocl_ctxt_ext ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_ctxt_const:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           ('b compiler_env_config_ext * all_meta list) * all_meta list
    val print_ctxt_const_name:
       abr_string -> abr_string -> abr_string option -> abr_string
    val print_ctxt_inv:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_ctxt_inv_name:
       abr_string -> abr_string -> abr_string -> abr_string
    val print_ctxt_is_name_at_gen:
       abr_string -> abr_string -> abr_string option
    val print_ctxt_is_name_at_post: abr_string -> abr_string option
    val print_ctxt_is_name_at_pre: abr_string -> abr_string option
    val print_ctxt_pre_post:
       'a ocl_ctxt_ext ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_ctxt_pre_post_interp:
       generation_lemma_mode option * bool ->
         abr_string ->
           'a ocl_ctxt_pre_post_ext ->
             semi_terma ->
               ocl_ctxt_prefix * semi_terma ->
                 ocl_ctxt_prefix * semi_terma -> all_meta option
    val print_ctxt_pre_post_name:
       abr_string -> abr_string -> abr_string option -> abr_string
    val print_ctxt_thm: 'a ocl_ctxt_ext -> 'b -> all_meta list * 'b
    val print_ctxt_to_ocl_gen:
       string_b_a_s_e list ->
         (abr_string -> abr_string option) ->
           abr_string -> ocl_ctxt_term -> ocl_ctxt_term
    val print_ctxt_to_ocl_gen_split: abr_string -> int list option
    val print_ctxt_to_ocl_post:
       'a compiler_env_config_ext -> ocl_ctxt_term -> ocl_ctxt_term
    val print_ctxt_to_ocl_pre:
       'a compiler_env_config_ext -> ocl_ctxt_term -> ocl_ctxt_term
    val print_enum: ocl_enum -> 'a -> all_meta list * 'a
    val print_examp_def_st0:
       abr_string ->
         abr_string ocl_def_state_core list ->
           unit ocl_instance_single_ext list *
           abr_string ocl_def_state_core list
    val print_examp_def_st1:
       ocl_def_state ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_examp_def_st1_gen:
       ocl_def_state ->
         unit compiler_env_config_ext ->
           (all_meta list * unit compiler_env_config_ext) *
           (unit compiler_env_config_ext -> unit compiler_env_config_ext)
    val print_examp_def_st2:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_examp_def_st_allinst:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_assoc:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list -> semi_terma
    val print_examp_def_st_assoc_build_rbt:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list ->
               (int list,
               (int list,
               internal_oid list list list * unit ocl_ty_class_ext)
               alist
               )
               alist
    val print_examp_def_st_assoc_build_rbt2:
       (abr_string -> (abr_string -> (ocl_ty * ('a * 'b)) option) * 'c) ->
         (internal_oid -> internal_oids option) ->
           (abr_string -> internal_oids option) ->
             ('d ocl_instance_single_ext * internal_oids) list ->
               (int list,
               internal_oid list list list * unit ocl_ty_class_ext)
               alist
    val print_examp_def_st_assoc_build_rbt_gen:
       (abr_string ->
          ((int list, internal_oid list list list * unit ocl_ty_class_ext)
           alist
             ->
             (int list, internal_oid list list list * unit ocl_ty_class_ext)
             alist)
            -> ('a, 'b) alist -> ('a, 'b) alist)
         ->
         (abr_string -> (abr_string -> (ocl_ty * ('c * 'd)) option) * 'e) ->
           (internal_oid -> internal_oids option) ->
             (abr_string -> internal_oids option) ->
               ('f ocl_instance_single_ext * internal_oids) list ->
                 ('a, 'b) alist
    val print_examp_def_st_assoc_build_rbt_gen_typecheck:
       ('a ocl_instance_single_ext ->
          'b -> 'c print_examp_instance_draw_list_attra)
         ->
         (abr_string -> bool) ->
           (abr_string -> abr_string -> 'd option) ->
             (internal_oid -> 'e option) ->
               (abr_string -> 'e option) ->
                 ocl_enum list ->
                   ('a ocl_instance_single_ext * 'b) list ->
                     (reporting * abr_string) list ->
                       (reporting * abr_string) list
    val print_examp_def_st_def_interp:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_def_st_defassoc_typecheck:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_examp_def_st_defassoc_typecheck_gen:
       abr_string ocl_def_state_core list ->
         'a compiler_env_config_ext -> ml list
    val print_examp_def_st_defs: 'a -> 'b -> all_meta list * 'b
    val print_examp_def_st_dom:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_dom_lemmas:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_dom_name: abr_string -> abr_string
    val print_examp_def_st_locale:
       ocl_def_state ->
         'a compiler_env_config_ext ->
           unit semi_locale_ext * 'a compiler_env_config_ext
    val print_examp_def_st_locale_aux:
       (internal_oids * 'a ocl_instance_single_ext) list list ->
         semi_terma list *
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
    val print_examp_def_st_locale_distinct: abr_string
    val print_examp_def_st_locale_make:
       abr_string ->
         ((semi_terma * semi_typ) list * (abr_string * semi_terma) option)
         list
           ->
           (internal_oids * 'a ocl_instance_single_ext) list list ->
             unit semi_locale_ext
    val print_examp_def_st_locale_metis: semi_method
    val print_examp_def_st_locale_name: abr_string -> abr_string
    val print_examp_def_st_locale_sort:
       'a compiler_env_config_ext ->
         abr_string ocl_def_state_core list ->
           (internal_oids * unit ocl_instance_single_ext) list list
    val print_examp_def_st_mapsto:
       (internal_oids *
        (abr_string * 'a ocl_instance_single_ext) ocl_def_state_core
       )
       list
         -> semi_terma list option
    val print_examp_def_st_mapsto_gen:
       ('a * (abr_string * 'b ocl_instance_single_ext) ocl_def_state_core ->
          'b ocl_instance_single_ext -> semi_terma option -> 'c)
         ->
         ('a * (abr_string * 'b ocl_instance_single_ext) ocl_def_state_core)
         list
           -> 'c list
    val print_examp_def_st_perm:
       'a ->
         'b compiler_env_config_ext ->
           semi_theory list * 'b compiler_env_config_ext
    val print_examp_def_st_perm_name: abr_string -> abr_string
    val print_examp_def_st_typecheck_var:
       ocl_def_state -> 'a -> all_meta list * 'a
    val print_examp_increase_oid:
       unit ocl_instance_single_ext list ->
         'a compiler_env_config_ext -> 'a compiler_env_config_ext
    val print_examp_instance:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_app_constr2_notmp:
       (opt_attr_type *
        (unit ocl_ty_class_ext option *
         (ocl_ty * ((abr_string * abr_string) option * ocl_data_shallow))
         option
        )
        list
       )
       list
       ocl_list_attr
         ->
         (abr_string -> abr_string) ->
           internal_oids ->
             ((abr_string -> abr_string) ->
                internal_oids ->
                  (unit ocl_ty_class_ext ->
                     semi_terma print_examp_instance_draw_list_attra)
                  *
                  (ocl_ty * ocl_data_shallow ->
                     semi_terma print_examp_instance_draw_list_attra))
               -> semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_app_constr2_notmp_norec:
       (abr_string ->
          (abr_string -> ('a * (opt_attr_type * opt_ident)) option) *
          (opt_attr_type ->
             (('b ->
                 Code_Numeral.natural ->
                   ('b *
                    ('a *
                     ((abr_string * abr_string) option * ocl_data_shallow)
                    )
                    option
                   )
                   list
                     ->
                     ('b *
                      ('a *
                       ((abr_string * abr_string) option * ocl_data_shallow)
                      )
                      option
                     )
                     list)
                ->
                'c list ->
                  (unit ocl_ty_class_ext option *
                   (ocl_ty *
                    ((abr_string * abr_string) option * ocl_data_shallow)
                   )
                   option
                  )
                  list
             )
             option))
       *
       ((internal_oid -> internal_oids option) *
        (abr_string -> internal_oids option))
         ->
         semi_terma ->
           'd ocl_instance_single_ext ->
             (abr_string -> abr_string) ->
               internal_oids ->
                 semi_terma print_examp_instance_draw_list_attra *
                 (semi_terma -> semi_terma)
    val print_examp_instance_app_constr2_notmpa:
       'a ocl_list_attr -> semi_terma -> semi_terma
    val print_examp_instance_app_constr_notmp:
       (unit ocl_ty_class_ext ->
          semi_terma print_examp_instance_draw_list_attra)
       *
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         (abr_string -> abr_string) ->
           semi_terma ->
             (unit ocl_ty_class_ext option *
              (ocl_ty *
               ((abr_string * abr_string) option * ocl_data_shallow)
              )
              option
             )
             list
               -> semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_defassoc:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_defassoc_gen:
       semi_terma ->
         ('a ocl_instance_single_ext * internal_oids) list ->
           'b compiler_env_config_ext ->
             (abr_string ->
                'c * ((abr_string -> (ocl_ty * ('d * 'e)) option) * 'f))
             *
             ((internal_oid -> internal_oids option) *
              (abr_string -> internal_oids option))
               -> definition list
    val print_examp_instance_defassoc_typecheck:
       ocl_instance ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_examp_instance_defassoc_typecheck_gen:
       unit ocl_instance_single_ext option list ->
         'a compiler_env_config_ext -> ml list
    val print_examp_instance_defassoc_typecheck_var:
       ocl_instance -> 'a -> all_meta list * 'a
    val print_examp_instance_draw_list_attr:
       (unit ocl_ty_class_ext ->
          semi_terma print_examp_instance_draw_list_attra)
       *
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         (unit ocl_ty_class_ext option *
          (ocl_ty * ((abr_string * abr_string) option * ocl_data_shallow))
          option
         )
         list
           -> semi_terma list print_examp_instance_draw_list_attra
    datatype print_examp_instance_draw_list_attr
    = Return_exp of semi_terma | Return_obj of unit ocl_ty_class_ext
    val print_examp_instance_draw_list_attr_aux:
       (ocl_ty * ocl_data_shallow ->
          semi_terma print_examp_instance_draw_list_attra)
         ->
         ocl_ty * ocl_data_shallow ->
           semi_terma print_examp_instance_draw_list_attra
    val print_examp_instance_draw_list_attr_aux_base:
       ocl_ty * ocl_data_shallow ->
         semi_terma print_examp_instance_draw_list_attra
    datatype print_examp_instance_draw_list_attr_err
    =
         Return_err_l of print_examp_instance_draw_list_attr_err list
       | Return_err_ty of ocl_ty * ocl_data_shallow
       | Return_err_ty_auto
       | Return_object_variable of abr_string
       | Return_ocl_invalid
       | Return_ocl_null
    datatype 'a print_examp_instance_draw_list_attra
    =
         Return_err of print_examp_instance_draw_list_attr_err
       | Return_val of 'a
    val print_examp_instance_name: 'a -> 'a
    val print_examp_instance_oid:
       (definition -> 'a) ->
         ('b ocl_instance_single_ext * internal_oids) list ->
           'c compiler_env_config_ext -> 'a list
    val print_examp_oclbase: ocl_def_base_l -> 'a -> all_meta list * 'a
    val print_examp_oclbase_gen: ocl_def_base -> semi_terma * definition
    val print_haskell:
       isaUnit ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_class_1:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_class_2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_1of2:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_1of2_name: abr_string
    val print_infra_datatype_equiv_1of2_name_aux: abr_string
    val print_infra_datatype_equiv_1of2_name_get_oid_inh: abr_string
    val print_infra_datatype_equiv_2of1:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_datatype_equiv_2of1_name: abr_string
    val print_infra_datatype_equiv_2of1_name_aux: abr_string
    val print_infra_datatype_universe: ocl_class -> 'a -> all_meta list * 'a
    val print_infra_enum_syn:
       'a ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_infra_enum_synonym:
       'a ->
         'b compiler_env_config_ext ->
           all_meta list * 'b compiler_env_config_ext
    val print_infra_instantiation_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_instantiation_universe:
       ocl_class -> 'a -> all_meta list * 'a
    val print_infra_type_synonym_class: 'a -> 'b -> all_meta list * 'b
    val print_infra_type_synonym_class_higher:
       ocl_class -> 'a -> all_meta list * 'a
    val print_infra_type_synonym_class_rec:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_infra_type_synonym_class_rec_aux:
       ocl_ty -> abr_string * semi_typ
    val print_infra_type_synonym_class_rec_aux0:
       ocl_ty -> abr_string * semi_typ
    val print_infra_type_synonym_class_sequence_name:
       abr_string -> abr_string
    val print_infra_type_synonym_class_set_name: abr_string -> abr_string
    val print_instantia_def_strictrefeq:
       ocl_class -> 'a -> all_meta list * 'a
    val print_instantia_def_strictrefeq_name:
       (abr_string list -> 'a) -> abr_string -> 'a
    val print_instantia_lemmas_strictrefeq:
       ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_class_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_defined_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_defined_namea:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_iskindof_defineda:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemma_cp:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_iskindof_lemma_strict:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_eq_asty: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_eq_asty_name: abr_string -> abr_string
    val print_iskindof_up_istypeof: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_istypeof_erule:
       abr_string ->
         ocl_class list -> abr_string -> abr_string -> semi_method
    val print_iskindof_up_istypeof_name:
       abr_string -> abr_string -> abr_string
    datatype ('a, 'b) print_iskindof_up_istypeof_output
    =
         M_erule of 'b
       | M_simp_b_r_e_a_d_t_h
       | M_simp_d_e_p_t_h_1
       | M_simp_d_e_p_t_h_2
       | M_simp_only of 'a
    val print_iskindof_up_istypeof_unfold:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_iskindof_up_istypeof_unfold_name:
       abr_string -> abr_string -> abr_string
    val print_iskindof_up_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_iskindof_up_larger_name:
       abr_string -> abr_string -> abr_string
    val print_istypeof_class:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_consts: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_defined:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_defined_name:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_istypeof_defined_namea:
       (abr_string -> abr_string) -> abr_string -> abr_string
    val print_istypeof_defineda:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_from_universe:
       ocl_class ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_istypeof_lemma_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemma_cp_set:
       ocl_class ->
         (((abr_string -> abr_string) * abr_string) * abr_string) list
    val print_istypeof_lemma_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_cp: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_id: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_strict: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_lemmas_strict_set:
       ocl_class -> (abr_string * (abr_string * abr_string)) list
    val print_istypeof_up_d_cast: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_up_d_cast_name:
       abr_string -> abr_string -> abr_string -> abr_string
    val print_istypeof_up_larger: ocl_class -> 'a -> all_meta list * 'a
    val print_istypeof_up_larger_name:
       abr_string -> abr_string -> abr_string
    val print_meta_setup_def_state:
       ocl_def_state ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val print_meta_setup_def_transition:
       ocl_def_transition ->
         unit compiler_env_config_ext -> unit compiler_env_config_ext
    val print_transition:
       ocl_def_transition ->
         unit compiler_env_config_ext ->
           all_meta list * unit compiler_env_config_ext
    val print_transition_def_interp:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_transition_def_state:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_gen:
       ocl_def_transition ->
         unit compiler_env_config_ext ->
           (all_meta list * unit compiler_env_config_ext) *
           (unit compiler_env_config_ext -> unit compiler_env_config_ext)
    val print_transition_interp:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_lemmas_oid:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           all_meta list * 'a compiler_env_config_ext
    val print_transition_locale:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           unit semi_locale_ext * 'a compiler_env_config_ext
    val print_transition_locale_aux:
       (internal_oids *
        (abr_string * 'a ocl_instance_single_ext) ocl_def_state_core
       )
       list
         -> semi_terma list
    val print_transition_locale_name: abr_string -> abr_string -> abr_string
    val print_transition_wff:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val print_transition_where:
       ocl_def_transition ->
         'a compiler_env_config_ext ->
           semi_theory list * 'a compiler_env_config_ext
    val prod_ord:
       ('a * 'b -> order) ->
         ('c * 'd -> order) -> ('a * 'c) * ('b * 'd) -> order
    val pure_typ0:
       (abr_string -> string) -> bool -> abr_string -> typ -> string
    val quote: string -> string
    val radixpand: int * int -> int list
    val radixstring: int * string * int -> string
    val raise_ml: (reporting * abr_string) list -> abr_string -> ml
    val raise_ml_unbound:
       (Code_Numeral.natural -> 'a -> abr_string) ->
         ('a * ocl_ctxt_term) list -> ('b -> all_meta list) list
    val raw: abr_string -> semi_typ
    val rbt_of_class:
       'a one * 'a plus * 'a zero ->
         'b compiler_env_config_ext ->
           abr_string ->
             bool *
             ((abr_string -> (ocl_ty * (opt_attr_type * opt_ident)) option)
              *
              (opt_attr_type ->
                 ((unit ocl_ty_class_ext option -> 'a -> 'c -> 'c) ->
                    'c -> 'c
                 )
                 option))
    val read_int: string list -> int * string list
    val read_radix_int: int -> string list -> int * string list
    val rec_DoBlockFragment:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) ->
   doBlockFragment -> 'c
    val rec_Function_Kind: 'a -> 'a -> 'a -> 'a -> function_Kind -> 'a
    val rec_Function_Stmt:
       (function_Kind ->
          typeSign list -> ((name * term list) * term) list -> 'a)
         -> function_Stmt -> 'a
    val rec_IsaUnit:
       (bool * Code_Numeral.natural ->
          (abr_string * abr_string option) list ->
            gen_meta -> abr_string -> module list * bool -> 'a)
         -> isaUnit -> 'a
    val rec_ListComprFragment:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) ->
   listComprFragment -> 'b
    val rec_Literal:
       (Code_Numeral.natural -> 'a) -> (abr_string -> 'a) -> literal -> 'a
    val rec_Module:
       (thyName -> thyName list -> stmt list -> bool -> 'a) -> module -> 'a
    val rec_Name:
       (thyName -> abr_string -> 'a) -> (abr_string -> 'a) -> name -> 'a
    val rec_Region: 'a -> (sourcePos -> sourcePos -> 'a) -> region -> 'a
    val rec_Region_Wrap: ('a -> region -> 'b) -> 'a region_Wrap -> 'b
    val rec_SourcePos: (int -> abr_string -> int -> 'a) -> sourcePos -> 'a
    val rec_Stmt:
       ((typeSpec * (name * typea list) list) list -> 'a) ->
         (typeSpec -> (name * typea) list -> 'a) ->
           ((typeSpec * typea) list -> 'a) ->
             (function_Stmt -> 'a) ->
               (name -> name list -> typeSign list -> 'a) ->
                 (name ->
                    name ->
                      (name * name list) list -> function_Stmt list -> 'a)
                   ->
                   (abr_string -> 'a) -> (function_Stmt -> 'a) -> stmt -> 'a
    val rec_StringCvt_radix: 'a -> 'a -> 'a -> 'a -> stringCvt_radix -> 'a
    val rec_Term:
       (literal -> 'a) ->
         (name -> 'a) ->
           (name -> term -> 'a -> 'a) ->
             (term -> term -> 'a -> 'a -> 'a) ->
               (term -> term -> term -> 'a -> 'a -> 'a -> 'a) ->
                 (((term * 'a) * (term * 'a)) list -> term -> 'a -> 'a) ->
                   (term -> ((term * 'a) * (term * 'a)) list -> 'a -> 'a) ->
                     (term -> (listComprFragment * 'b) list -> 'a -> 'a) ->
                       (name -> (name * (term * 'a)) list -> 'a) ->
                         (term -> (name * (term * 'a)) list -> 'a -> 'a) ->
                           (abr_string ->
                              (doBlockFragment * 'c) list ->
                                abr_string -> 'a)
                             ->
                             (term -> 'a -> 'a) ->
                               ((term * 'a) * (term * 'a) -> 'b) ->
                                 (term -> 'a -> 'b) ->
                                   (term -> term -> 'a -> 'a -> 'c) ->
                                     (term -> 'a -> 'c) ->
                                       (... list -> 'c) -> term -> 'a
    val rec_ThyName: (abr_string -> 'a) -> thyName -> 'a
    val rec_Type:
       (name -> (typea * 'a) list -> 'a) ->
         (typea -> typea -> 'a -> 'a -> 'a) ->
           (name -> 'a) -> 'a -> typea -> 'a
    val rec_TypeSign:
       (name -> (name * name list) list -> typea -> 'a) -> typeSign -> 'a
    val rec_TypeSpec: (name list -> name -> 'a) -> typeSpec -> 'a
    val rec_Unsynchronized_ref: ('a -> 'b) -> 'a unsynchronized_ref -> 'b
    val rec_all_meta_embedding:
       (ocl_enum -> 'a) ->
         (floor -> unit ocl_class_raw_ext -> 'a) ->
           (unit ocl_association_ext -> 'a) ->
             (floor -> ocl_ass_class -> 'a) ->
               (floor -> unit ocl_ctxt_ext -> 'a) ->
                 (isaUnit -> 'a) ->
                   (ocl_class_synonym -> 'a) ->
                     (ocl_instance -> 'a) ->
                       (ocl_def_base_l -> 'a) ->
                         (floor -> ocl_def_state -> 'a) ->
                           (floor -> ocl_def_transition -> 'a) ->
                             (ocl_class_tree -> 'a) ->
                               (ocl_flush_all -> 'a) ->
                                 (ocl_generic -> 'a) ->
                                   all_meta_embedding -> 'a
    val rec_base_inttype:
       'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> base_inttype -> 'a
    val rec_binoptype:
       'a ->
         'a ->
           'a ->
             'a ->
               'a ->
                 'a ->
                   'a ->
                     'a ->
                       'a ->
                         'a ->
                           'a ->
                             'a ->
                               'a ->
                                 'a ->
                                   'a -> 'a -> 'a -> 'a -> binoptype -> 'a
    val rec_block_item:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_ctype:
       (base_inttype -> 'a) ->
         (base_inttype -> 'a) ->
           'a ->
             'a ->
               (abr_string -> 'a) ->
                 (abr_string -> 'a) ->
                   (abr_string option -> 'a) ->
                     ('b ctype -> 'a -> 'a) ->
                       ('b ctype -> 'b option -> 'a -> 'a) ->
                         (bool -> 'b -> 'a) ->
                           (abr_string -> 'a) ->
                             ('b ctype -> ('b ctype * 'a) list -> 'a -> 'a)
                               -> 'a -> 'b ctype -> 'a
    val rec_declaration:
       (expr ctype *
        (abr_string region_Wrap *
         (storage_class list * (initializer option * gcc_attribute list)))
          -> 'a)
         ->
         (abr_string region_Wrap ->
            (expr ctype * abr_string region_Wrap) list -> 'a)
           ->
           ((expr ctype * abr_string region_Wrap) list -> 'a) ->
             (expr ctype ->
                abr_string region_Wrap ->
                  (expr ctype * abr_string option) list ->
                    fnspec list -> 'a)
               ->
               (abr_string option region_Wrap ->
                  (abr_string region_Wrap * expr option) list -> 'a)
                 -> declaration -> 'a
    val rec_designator:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_expr:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_expr_node:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_ext_decl:
       (expr ctype * abr_string region_Wrap ->
          (expr ctype * abr_string region_Wrap) list ->
            fnspec list -> block_item list region_Wrap -> 'a)
         -> (declaration region_Wrap -> 'a) -> ext_decl -> 'a
    val rec_floor: 'a -> 'a -> 'a -> floor -> 'a
    val rec_fnspec:
       (abr_string region_Wrap -> 'a) ->
         (abr_string region_Wrap -> 'a) ->
           (abr_string list -> 'a) ->
             'a -> (gcc_attribute list -> 'a) -> fnspec -> 'a
    val rec_gcc_attribute:
       (abr_string -> 'a) ->
         (abr_string -> expr list -> 'a) ->
           (abr_string -> 'a) -> gcc_attribute -> 'a
    val rec_gen_meta:
       (abr_string -> 'a) ->
         (abr_string -> 'a) ->
           (abr_string -> abr_string -> 'a) -> 'a -> gen_meta -> 'a
    val rec_generation_lemma_mode: 'a -> 'a -> generation_lemma_mode -> 'a
    val rec_generation_semantics_ocl:
       'a -> 'a -> 'a -> generation_semantics_ocl -> 'a
    val rec_initializer:
       (binoptype -> expr -> expr -> 'a -> 'a -> 'b) ->
         (unoptype -> expr -> 'a -> 'b) ->
           (expr -> expr -> expr -> 'a -> 'a -> 'a -> 'b) ->
             (literalconstant_node region_Wrap -> 'b) ->
               (abr_string ->
                  (int ctype * more_info) option unsynchronized_ref -> 'b)
                 ->
                 (expr -> abr_string -> 'a -> 'b) ->
                   (expr -> expr -> 'a -> 'a -> 'b) ->
                     (expr -> 'a -> 'b) ->
                       ((expr * 'a) ctype region_Wrap -> expr -> 'a -> 'b)
                         ->
                         (expr -> 'a -> 'b) ->
                           ((expr * 'a) ctype region_Wrap -> 'b) ->
                             (expr -> (expr * 'a) list -> 'a -> 'b) ->
                               ((expr * 'a) ctype ->
                                  ((designator * 'c) list *
                                   (initializer * 'd)
                                  )
                                  list
                                    -> 'b)
                                 ->
                                 ((expr * 'a) ctype -> 'b) ->
                                   (expr -> 'a -> 'b) ->
                                     ((expr_node * 'b) region_Wrap -> 'a) ->
                                       (expr -> 'a -> 'd) ->
   (... list -> 'd) -> ... -> ...
    val rec_internal_oid: (Code_Numeral.natural -> 'a) -> internal_oid -> 'a
    val rec_internal_oids:
       (Code_Numeral.natural ->
          Code_Numeral.natural -> Code_Numeral.natural -> 'a)
         -> internal_oids -> 'a
    val rec_list: 'a -> ('b -> 'b list -> 'a -> 'a) -> 'b list -> 'a
    val rec_literalconstant_node:
       (int -> abr_string -> stringCvt_radix -> 'a) ->
         (abr_string -> 'a) -> literalconstant_node -> 'a
    val rec_more_info:
       (abr_string -> abr_string option -> 'a) ->
         'a -> 'a -> more_info -> 'a
    val rec_ocl_ass_class:
       (unit ocl_association_ext -> unit ocl_class_raw_ext -> 'a) ->
         ocl_ass_class -> 'a
    val rec_ocl_association_relation:
       ((ocl_ty_obj * unit ocl_multiplicity_ext) list -> 'a) ->
         ocl_association_relation -> 'a
    val rec_ocl_association_type:
       'a -> 'a -> 'a -> 'a -> ocl_association_type -> 'a
    val rec_ocl_class:
       (abr_string ->
          (abr_string * ocl_ty) list -> (ocl_class * 'a) list -> 'a)
         -> ocl_class -> 'a
    val rec_ocl_class_synonym:
       (abr_string -> ocl_ty -> 'a) -> ocl_class_synonym -> 'a
    val rec_ocl_class_tree:
       (Code_Numeral.natural -> Code_Numeral.natural -> 'a) ->
         ocl_class_tree -> 'a
    val rec_ocl_collection:
       'a ->
         'a ->
           'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> ocl_collection -> 'a
    val rec_ocl_ctxt_clause:
       (unit ocl_ctxt_pre_post_ext -> 'a) ->
         (ocl_ctxt_term_inv -> 'a) -> ocl_ctxt_clause -> 'a
    val rec_ocl_ctxt_prefix: 'a -> 'a -> ocl_ctxt_prefix -> 'a
    val rec_ocl_ctxt_term:
       (terma -> abr_string option -> 'a) ->
         (abr_string -> abr_string -> 'a) ->
           (abr_string -> ocl_ctxt_term -> 'a -> 'a) -> ocl_ctxt_term -> 'a
    val rec_ocl_ctxt_term_inv:
       (bool -> ocl_prop -> 'a) -> ocl_ctxt_term_inv -> 'a
    val rec_ocl_ctxt_term_pp:
       (ocl_ctxt_prefix -> ocl_prop -> 'a) ->
         (ocl_ctxt_term_inv -> 'a) -> ocl_ctxt_term_pp -> 'a
    val rec_ocl_data_shallow:
       (ocl_def_base -> 'a) ->
         (abr_string -> 'a) ->
           (internal_oid -> 'a) ->
             ((ocl_data_shallow * 'a) list -> 'a) -> ocl_data_shallow -> 'a
    val rec_ocl_def_base:
       (abr_string -> 'a) ->
         (abr_string * abr_string -> 'a) ->
           (abr_string -> 'a) -> ocl_def_base -> 'a
    val rec_ocl_def_base_l:
       (ocl_def_base list -> 'a) -> ocl_def_base_l -> 'a
    val rec_ocl_def_pp_core:
       (abr_string ocl_def_state_core list -> 'a) ->
         (abr_string -> 'a) -> ocl_def_pp_core -> 'a
    val rec_ocl_def_state:
       (abr_string -> abr_string ocl_def_state_core list -> 'a) ->
         ocl_def_state -> 'a
    val rec_ocl_def_state_core:
       (unit ocl_instance_single_ext -> 'a) ->
         ('b -> 'a) -> 'b ocl_def_state_core -> 'a
    val rec_ocl_def_transition:
       (abr_string option ->
          ocl_def_pp_core -> ocl_def_pp_core option -> 'a)
         -> ocl_def_transition -> 'a
    val rec_ocl_enum:
       (abr_string -> abr_string list -> 'a) -> ocl_enum -> 'a
    val rec_ocl_flush_all: 'a -> ocl_flush_all -> 'a
    val rec_ocl_generic: (abr_string -> 'a) -> ocl_generic -> 'a
    val rec_ocl_instance:
       (unit ocl_instance_single_ext list -> 'a) -> ocl_instance -> 'a
    val rec_ocl_list_attr:
       ('a -> 'b) ->
         (abr_string -> 'a ocl_list_attr -> 'a -> 'b -> 'b) ->
           'a ocl_list_attr -> 'b
    val rec_ocl_multiplicity_single:
       (Code_Numeral.natural -> 'a) ->
         'a -> 'a -> ocl_multiplicity_single -> 'a
    val rec_ocl_prop:
       (abr_string option -> ocl_ctxt_term -> 'a) -> ocl_prop -> 'a
    val rec_ocl_ty:
       'a ->
         'a ->
           'a ->
             'a ->
               'a ->
                 'a ->
                   (ocl_ty_obj -> 'a) ->
                     (unit ocl_multiplicity_ext -> ocl_ty -> 'a -> 'a) ->
                       (ocl_ty -> ocl_ty -> 'a -> 'a -> 'a) ->
                         (abr_string option * (ocl_ty * 'a) -> 'a) ->
                           (ocl_ty -> ocl_ty -> 'a -> 'a -> 'a) ->
                             (abr_string -> 'a) ->
                               (abr_string -> 'a) ->
                                 (abr_string -> 'a) -> ocl_ty -> 'a
    val rec_ocl_ty_obj:
       (ocl_ty_obj_core -> ocl_ty_obj_core list list -> 'a) ->
         ocl_ty_obj -> 'a
    val rec_ocl_ty_obj_core:
       (abr_string -> 'a) ->
         (unit ocl_ty_class_ext -> 'a) -> ocl_ty_obj_core -> 'a
    val rec_option: 'a -> ('b -> 'a) -> 'b option -> 'a
    val rec_statement:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_statement_node:
       (expr -> expr -> 'a) ->
         (expr option -> expr -> expr list -> 'a) ->
           (expr -> 'a) ->
             (expr -> expr -> expr list -> 'a) ->
               ((block_item * 'b) list -> 'a) ->
                 (expr ->
                    abr_string region_Wrap option -> statement -> 'c -> 'a)
                   ->
                   (trappable -> statement -> 'c -> 'a) ->
                     (expr option -> 'a) ->
                       (expr -> expr list -> 'a) ->
                         'a ->
                           'a ->
                             (expr ->
                                statement -> statement -> 'c -> 'c -> 'a)
                               ->
                               (expr ->
                                  (expr option list * (block_item * 'b) list
                                  )
                                  list
                                    -> 'a)
                                 ->
                                 'a ->
                                   (abr_string -> 'a) ->
                                     (abr_string -> 'a) ->
                                       (... * ... -> 'a) ->
   (bool -> ...) -> ... -> ...
    val rec_storage_class: 'a -> 'a -> 'a -> 'a -> 'a -> storage_class -> 'a
    val rec_term:
       (abr_string -> typ -> 'a) ->
         (abr_string -> typ -> 'a) ->
           (abr_string * Code_Numeral.natural -> typ -> 'a) ->
             (Code_Numeral.natural -> 'a) ->
               (abr_string -> typ -> terma -> 'a -> 'a) ->
                 (terma -> terma -> 'a -> 'a -> 'a) -> terma -> 'a
    val rec_trappable: 'a -> 'a -> trappable -> 'a
    val rec_typ:
       (abr_string -> (typ * 'a) list -> 'a) ->
         (abr_string -> abr_string list -> 'a) ->
           (abr_string * Code_Numeral.natural -> abr_string list -> 'a) ->
             typ -> 'a
    val rec_unoptype: 'a -> 'a -> 'a -> 'a -> unoptype -> 'a
    datatype region = Bogus | T of sourcePos * sourcePos
    datatype 'a region_Wrap = Tb of 'a * region
    val remove: ('a * 'b -> bool) -> 'a -> 'b list -> 'b list
    val remove1: ('a * 'b -> bool) -> 'a -> 'b list -> 'b list
    val remove_binding: ocl_ty -> ocl_ty
    val remove_last_break: 'a cStatement -> 'a cStatement option
    val rename_tac: abr_string list -> semi_method
    val replace_gen:
       (('a list, 'a) nsplit list -> 'b) ->
         'a list -> ('a -> bool) -> 'a list -> 'b
    val replace_integers:
       (int -> abr_string) ->
         abr_string -> string option -> abr_string -> abr_string
    val replace_integersa: (int -> abr_string) -> abr_string -> abr_string
    val replicate: int -> 'a -> 'a list
    val replicate_string: int -> string -> string
    datatype reporting = Error | Warning | Writeln
    val return: 'a -> 'b -> 'b * 'a
    val returna: 'a -> 'b list -> (char list, 'a * 'b list) sum
    val rev: 'a list -> 'a list
    val rev_map: ('a -> 'b) -> 'a list -> 'b list
    val rev_order: order -> order
    val reverse: 'a list -> 'a list
    val rewrite: semi_term_0 -> abr_string -> semi_term_0 -> semi_term_0
    val rewrite_val: semi_term_0 -> abr_string -> semi_term_0 -> semi_term
    val rpair: 'a -> 'b -> 'b * 'a
    val rule: semi_thm_attribute -> semi_method
    val rulea: semi_method
    datatype sUERef = AnonymousRef0 of namea | NamedRef0 of ident
    val sbogwrap: statement_node -> statement
    val scan_upto_b_i_n_d:
       ('a list -> ('b, 'c * 'a list) sum) ->
         'a list -> (char list, ('a list * 'c) * 'a list) sum
    val section: abr_string -> 'a -> 'b -> all_meta list * 'b
    datatype section = Section of Code_Numeral.natural * abr_string
    val section_aux:
       Code_Numeral.natural -> abr_string -> 'a -> 'b -> all_meta list * 'b
    val sectiona:
       abr_string -> ('a -> 'b -> all_meta list * 'b) embedding_fun
    val sectionb: section -> all_meta
    datatype semi_command_final
    = Command_by of semi_method list | Command_done | Command_sorry
    datatype semi_command_proof
    =
         Command_apply of semi_method list
       | Command_fix_let of
           abr_string list * (semi_terma * semi_terma) list *
           (semi_terma list * semi_terma list) option *
           semi_command_state list
       | Command_have of abr_string * bool * semi_terma * semi_command_final
       | Command_let of semi_terma * semi_terma
       | Command_unfolding of semi_thm list
       | Command_using of semi_thm list
    datatype semi_command_state = Command_apply_end of semi_method list
    datatype semi_datatype_version
    =
         Datatype_new
       | Datatype_old
       | Datatype_old_atomic
       | Datatype_old_atomic_sub
    datatype 'a semi_locale_ext
    =
         Semi_locale_ext of
             abr_string *
             ((semi_terma * semi_typ) list *
              (abr_string * semi_terma) option
             )
             list
             *
             'a
    datatype semi_method
    =
         Method_all of semi_method_simp
       | Method_auto_simp_add_split of semi_thm list * abr_string list
       | Method_blast of Code_Numeral.natural option
       | Method_case_tac of semi_terma
       | Method_clarify
       | Method_drule of semi_thm_attribute
       | Method_elim of semi_thm_attribute
       | Method_erule of semi_thm_attribute
       | Method_insert of semi_thm list
       | Method_intro of semi_thm_attribute list
       | Method_metis of abr_string list * semi_thm_attribute list
       | Method_one of semi_method_simp
       | Method_option of semi_method list
       | Method_or of semi_method list
       | Method_plus of semi_method list
       | Method_rename_tac of abr_string list
       | Method_rule of semi_thm_attribute option
       | Method_subst of ...
    datatype semi_method_simp
    =
         Method_simp_add_del_split of
             semi_thm list * semi_thm list * semi_thm list
       | Method_simp_only of semi_thm list
    datatype semi_term = SML_top of semi_term_1 list
    datatype semi_term_0
    =
         SML_annot of semi_term_0 * abr_string
       | SML_apply of semi_term_0 * semi_term_0 list
       | SML_basic of abr_string list
       | SML_binop of semi_term_0 * abr_string * semi_term_0
       | SML_function of (semi_term_0 * semi_term_0) list
       | SML_let of semi_term * semi_term_0
       | SML_paren of abr_string * abr_string * semi_term_0
       | SML_rewrite of semi_term_0 * abr_string * semi_term_0
       | SML_string of abr_string
    datatype semi_term_1
    =
         SML_open of abr_string
       | SML_val_fun of semi_val_fun option * semi_term_0
    datatype semi_terma
    =
         Term_annot of semi_terma * semi_typ
       | Term_apply of semi_terma * semi_terma list
       | Term_basic of abr_string list
       | Term_bind of abr_string * semi_terma * semi_terma
       | Term_fun_case of semi_terma option * (semi_terma * semi_terma) list
       | Term_if_then_else of semi_terma * semi_terma * semi_terma
       | Term_let of (semi_terma * semi_terma) list * semi_terma
       | Term_paren of abr_string * abr_string * semi_terma
       | Term_rewrite of semi_terma * abr_string * semi_terma
       | Term_term of abr_string list * terma
    datatype semi_theories
    =
         Theories_locale of unit semi_locale_ext * semi_theory list list
       | Theories_one of semi_theory
    datatype semi_theory
    =
         Theory_ML of ml
       | Theory_abbreviation of abbreviation
       | Theory_axiomatization of axiomatization
       | Theory_code_reflect of code_reflect
       | Theory_consts of consts
       | Theory_datatype of datatypea
       | Theory_definition of definition
       | Theory_hide_const of hide_const
       | Theory_instantiation of instantiation
       | Theory_interpretation of interpretation
       | Theory_lemma of lemma
       | Theory_lemmas of lemmas
       | Theory_overloading of overloading
       | Theory_section of section
       | Theory_setup of setup
       | Theory_text of text
       | Theory_text_raw of text_raw
       | Theory_thm of thm
       | ...
    datatype semi_thm
    = Thms_mult of semi_thm_attribute | Thms_single of semi_thm_attribute
    datatype semi_thm_attribute
    =
         Thm_OF of semi_thm_attribute * semi_thm_attribute
       | Thm_THEN of semi_thm_attribute * semi_thm_attribute
       | Thm_of of semi_thm_attribute * semi_terma list
       | Thm_simplified of semi_thm_attribute * semi_thm_attribute
       | Thm_symmetric of semi_thm_attribute
       | Thm_thm of abr_string
       | Thm_thms of abr_string
       | Thm_where of semi_thm_attribute * (abr_string * semi_terma) list
    datatype semi_typ
    =
         Typ_apply of semi_typ * semi_typ list
       | Typ_apply_bin of abr_string * semi_typ * semi_typ
       | Typ_apply_paren of abr_string * abr_string * semi_typ
       | Typ_base of abr_string
    datatype semi_val_fun = Sfun | Sval
    val separate: 'a -> 'a list -> 'a list
    val serial: unit -> serial
    eqtype serial
    val serial_string: unit -> string
    datatype setup = Setup of semi_term
    type 'a show =
       {shows_list: 'a list -> char list -> char list,
        shows_prec: nat -> 'a -> char list -> char list}
    val show_char: char show
    val show_intFlag: cIntFlag -> abr_string
    val shows_list: 'a show -> 'a list -> char list -> char list
    val shows_list_char: char list -> char list -> char list
    val shows_list_gen:
       ('a -> char list -> char list) ->
         char list ->
           char list ->
             char list -> char list -> 'a list -> char list -> char list
    val shows_list_list: 'a show -> 'a list list -> char list -> char list
    val shows_prec: 'a show -> nat -> 'a -> char list -> char list
    val shows_prec_char: nat -> char -> char list -> char list
    val shows_prec_list: 'a show -> nat -> 'a list -> char list -> char list
    val shows_quote: (char list -> char list) -> char list -> char list
    val shows_sep:
       ('a -> char list -> char list) ->
         (char list -> char list) -> 'a list -> char list -> char list
    val shows_string: char list -> char list -> char list
    val showsp_list:
       (nat -> 'a -> char list -> char list) ->
         nat -> 'a list -> char list -> char list
    val signed_string_of_int: int -> string
    val signed_string_of_real: real -> string
    val simp: semi_method
    val simp_add: abr_string list -> semi_method
    val simp_add2: semi_thm_attribute list -> abr_string list -> semi_method
    val simp_add_del: abr_string list -> abr_string list -> semi_method
    val simp_add_split:
       semi_thm_attribute list -> semi_thm_attribute list -> semi_method
    val simp_all: semi_method
    val simp_all_add: abr_string list -> semi_method
    val simp_all_only: semi_thm_attribute list -> semi_method
    val simp_only: semi_thm_attribute list -> semi_method
    val simp_onlya: semi_thm_attribute list -> semi_method
    val simplified:
       semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val simplified_l:
       semi_thm_attribute -> semi_thm_attribute list -> semi_thm_attribute
    val single: 'a -> 'a list
    val single_multip: 'a ocl_multiplicity_ext -> bool
    val singleton: ('a list -> 'b list) -> 'a -> 'b
    val size_list: 'a list -> nat
    val size_ord: string ord
    val sml_apply: abr_string -> abr_string list -> abr_string
    val sml_escape: abr_string -> abr_string
    val sml_of_compiler_env_config:
       ('a -> 'a list -> 'a) ->
         (abr_string -> 'a) -> unit compiler_env_config_ext -> 'a
    val snd: 'a * 'b -> 'b
    val sorry: semi_command_final
    val sort: 'a ord -> 'a list -> 'a list
    val sort_by: ('a -> string) -> 'a list -> 'a list
    val sort_distinct: 'a ord -> 'a list -> 'a list
    val sort_strings: string list -> string list
    datatype sourcePos = Ta of int * abr_string * int
    val space_explode: string -> string -> string list
    val space_implode: string -> string list -> string
    val split: ('a * 'b) list -> 'a list * 'b list
    val split_at: ('a -> bool) -> 'a list -> 'a list * ('a option * 'a list)
    val split_inh_own:
       (abr_string ->
          ('a -> ('b * (opt_attr_type * opt_ident)) option) *
          (opt_attr_type ->
             (('c ->
                 Code_Numeral.natural ->
                   ('c * ('b * ('d * 'e)) option) list ->
                     ('c * ('b * ('d * 'e)) option) list)
                -> 'f list -> 'g list
             )
             option))
         ->
         abr_string ->
           ('d * ('a * 'e)) list ocl_list_attr ->
             (opt_attr_type * 'g list) list ocl_list_attr
    val split_last: 'a list -> 'a list * 'a
    val split_lines: string -> string list
    val split_list: ('a * 'b) list -> 'a list * 'b list
    val split_ty: abr_string -> abr_string list
    val stamp: unit -> stamp
    eqtype stamp
    val stars1: char list -> (char list, char list * char list) sum
    val start_m:
       ('a -> 'b) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'c list -> 'a list)
           ->
           (position ->
              (abr_string -> abr_string) *
              (abr_string * (abr_string * ocl_ty) list)
                -> ocl_class -> 'c list)
             ->
             ocl_class ->
               'd compiler_env_config_ext ->
                 'b list * 'd compiler_env_config_ext
    val start_m_3_gen:
       ('a -> 'b) ->
         ((ocl_class, unit) inheritance_ext list ->
            ocl_class list ->
              ocl_class list ->
                abr_string -> abr_string -> abr_string -> 'a)
           ->
           ocl_class ->
             'c compiler_env_config_ext ->
               'b list * 'c compiler_env_config_ext
    val start_m_gen:
       ('a -> 'b) ->
         (abr_string ->
            (ocl_class, unit) inheritance_ext list ->
              ocl_class list -> 'c list -> 'a list)
           ->
           ((ocl_class, unit) inheritance_ext list ->
              ocl_class list ->
                ocl_class list ->
                  position ->
                    (abr_string -> abr_string) *
                    (abr_string * (abr_string * ocl_ty) list)
                      -> ocl_class -> 'c list)
             ->
             ocl_class ->
               'd compiler_env_config_ext ->
                 'b list * 'd compiler_env_config_ext
    val start_ma:
       ('a -> 'b) ->
         (position ->
            (abr_string -> abr_string) *
            (abr_string * (abr_string * ocl_ty) list)
              -> ocl_class -> 'a)
           ->
           ocl_class ->
             'c compiler_env_config_ext ->
               'b list * 'c compiler_env_config_ext
    val start_map: ('a -> 'b) -> 'a list -> 'c -> 'b list * 'c
    val start_mapa: ('a -> 'b) -> 'a -> 'c -> 'b * 'c
    val start_mapb:
       ('a -> 'b) ->
         ((('c * ocl_ty) list -> ('c * ocl_ty) list) ->
            (('c * ocl_ty) list * ('c * ocl_ty) list list ->
               ('c * ocl_ty) list * ('c * ocl_ty) list list)
              ->
              (('c * ocl_ty) list * ('c * ocl_ty) list ->
                 ('c * ocl_ty) list * ('c * ocl_ty) list)
                -> 'a list)
           ->
           'd compiler_env_config_ext ->
             'b list * 'd compiler_env_config_ext
    val start_mapc:
       ('a -> 'b) ->
         (generation_semantics_ocl ->
            (('c * ocl_ty) list -> ('c * ocl_ty) list) ->
              (('c * ocl_ty) list * ('c * ocl_ty) list list ->
                 ('c * ocl_ty) list * ('c * ocl_ty) list list)
                ->
                (('c * ocl_ty) list * ('c * ocl_ty) list ->
                   ('c * ocl_ty) list * ('c * ocl_ty) list)
                  -> 'a list)
           ->
           'd compiler_env_config_ext ->
             'b list * 'd compiler_env_config_ext
    val start_mapd:
       ('a -> 'b) ->
         (generation_semantics_ocl -> 'a list) ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    val start_mape:
       ('a -> 'b) ->
         (generation_lemma_mode option * bool ->
            generation_semantics_ocl -> 'a list)
           ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    val start_mapf:
       ('a -> 'b) ->
         ((abr_string -> abr_string) -> generation_semantics_ocl -> 'a list)
           ->
           'c compiler_env_config_ext ->
             'b list * 'c compiler_env_config_ext
    datatype statement = Stmt of statement_node region_Wrap
    val statement0:
       comment list * (abr_string * int, (int * int) list) alist ->
         nodeInfo cStatement -> statement
    val statement0_case:
       'a cExpression list ->
         'a cStatement -> bool * ('a cExpression list * 'a cStatement)
    val statement_For:
       (nodeInfo cExpression optiona, nodeInfo cDeclaration) either ->
         nodeInfo cExpression optiona ->
           nodeInfo cExpression optiona ->
             statement * nodeInfo ->
               nodeInfo *
               (comment list * (abr_string * int, (int * int) list) alist)
                 -> statement_node
    val statement_If:
       ('a -> statement) ->
         'b cExpression -> 'a -> 'a optiona -> statement_node
    val statement_Switch:
       'a ->
         (nodeInfo cCompoundBlockItem list ->
            (positiona * int) * (positiona * int) -> block_item list)
           ->
           'b cExpression ->
             nodeInfo cCompoundBlockItem list -> nodeInfo -> statement_node
    val statement_While:
       nodeInfo cExpression ->
         statement * nodeInfo ->
           bool ->
             nodeInfo *
             (comment list * (abr_string * int, (int * int) list) alist)
               -> statement_node
    datatype statement_node
    =
         AsmStmt of bool * asmblock
       | Assign of expr * expr
       | AssignFnCall of expr option * expr * expr list
       | Auxupd of abr_string
       | Block of block_item list
       | Break
       | Chaos of expr
       | Continue
       | EmbFnCall of expr * expr * expr list
       | EmptyStmt
       | Ghostupd of abr_string
       | IfStmt of expr * statement * statement
       | LocalInit of expr
       | Return of expr option
       | ReturnFnCall of expr * expr list
       | Spec of (abr_string * abr_string) * ...
       | Switch of expr * ... list
       | Trap of ...
       | ...
    val statement_node_of_expression: nodeInfo cExpression -> statement_node
    val statement_node_of_expressiona:
       nodeInfo cExpression optiona ->
         (nodeInfo *
          (comment list * (abr_string * int, (int * int) list) alist)
         )
         option
           -> statement_node
    val statement_of_expression_CAssign:
       cAssignOp ->
         nodeInfo cExpression -> nodeInfo cExpression -> statement_node
    val statement_of_expression_CAssign_fun: 'a cExpression -> bool
    datatype stmt
    =
         Class of name * name list * typeSign list
       | Comment of abr_string
       | Datatype of (typeSpec * (name * typea list) list) list
       | Functiona of function_Stmt
       | Instance of
           name * name * (name * name list) list * function_Stmt list
       | Record of typeSpec * (name * typea) list
       | SML of function_Stmt
       | TypeSynonym of (typeSpec * typea) list
    val stmt_out_of_expr:
       nodeInfo cExpression -> 'a -> 'a * nodeInfo cExpression
    val stmt_out_of_expra: nodeInfo cExpression -> nodeInfo cExpression
    datatype storage_class
    = SC_AUTO | SC_EXTERN | SC_REGISTER | SC_STATIC | SC_THRD_LOCAL
    val str_hol_of_ty_all:
       ('a -> 'a list -> 'a) -> (abr_string -> 'a) -> ocl_ty -> 'a
    val str_of_data_shallow: ocl_data_shallow -> abr_string
    val str_of_def_base: ocl_def_base -> abr_string
    val str_of_ty: ocl_ty -> abr_string
    datatype stringCvt_radix = BIN | DEC | HEX | OCT
    val stringLiteral: 'a cStringLiteral -> abr_string
    datatype string_b_a_s_e = ST of string | STa of int list
    val string_concat_map: string -> ('a -> string) -> 'a list -> string
    val string_implode: char list -> abr_string
    val string_of_indexname: string * int -> string
    val string_of_int: int -> string
    val string_of_real: real -> string
    val string_ord: string ord
    val stringa: abr_string -> semi_term_0
    val struct_conv:
       (abr_string, 'a, 'b, 'c) struct_tree ->
         abr_string * (abr_string, 'a, 'b, 'c) struct_flat list
    datatype ('a, 'b, 'c, 'd) struct_flat
    =
         Struct_leaf of ('a * 'b, 'd) sum
       | Struct_root of 'a * 'b * ('a * 'c, 'd) sum list
    datatype ('a, 'b, 'c, 'd) struct_tree
    =
         Struct_tree of
             'a option * 'b *
             (('a, 'b, 'c, 'd) struct_tree * 'c, 'd) sum list
    val submultiset: ('a * 'b -> bool) -> 'a list * 'b list -> bool
    val subsection: abr_string -> 'a -> 'b -> all_meta list * 'b
    val subsectiona:
       abr_string -> ('a -> 'b -> all_meta list * 'b) embedding_fun
    val subset: ('a * 'b -> bool) -> 'a list * 'b list -> bool
    val subst: semi_thm_attribute -> semi_method
    val subst_l: abr_string list -> semi_thm_attribute -> semi_method
    val subtract: ('a * 'b -> bool) -> 'a list -> 'b list -> 'b list
    val suc: nat -> nat
    val succ: 'a one * 'a plus -> 'a -> 'a
    val suffix: string -> string -> string
    val suffixes: 'a list -> 'a list list
    val suffixes1: 'a list -> 'a list list
    datatype ('a, 'b) sum = Inl of 'a | Inr of 'b
    val surround: 'a -> 'a list -> 'a list
    val swap: 'a * 'b -> 'b * 'a
    val symmetric: semi_thm_attribute -> semi_thm_attribute
    val t_lambdas: abr_string list -> ocl_ctxt_term -> ocl_ctxt_term
    val tag_list: int -> 'a list -> (int * 'a) list
    val take: int -> 'a list -> 'a list
    val takeWhile: ('a -> bool) -> 'a list -> 'a list
    val take_first: nat -> 'a list -> 'a list
    val take_last: nat -> 'a list -> 'a list
    val take_prefix: ('a -> bool) -> 'a list -> 'a list
    val take_suffix: ('a -> bool) -> 'a list -> 'a list
    val takea: ('a list -> 'a list) -> nat -> 'a list -> 'a list
    datatype term
    =
         Abs of name * term
       | App of term * term
       | Case of term * (term * term) list
       | Const of name
       | DoBlock of abr_string * doBlockFragment list * abr_string
       | If of term * term * term
       | Let of (term * term) list * term
       | ListCompr of term * listComprFragment list
       | Literal of literal
       | Parenthesized of term
       | RecConstr of name * (name * term) list
       | RecUpdate of term * (name * term) list
    val term_And: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_annot: semi_terma -> abr_string -> semi_terma
    val term_annot_ocl: semi_terma -> abr_string -> semi_terma
    val term_app: abr_string -> semi_terma list -> semi_terma
    val term_applys: semi_terma -> semi_terma list -> semi_terma
    val term_applys0: semi_terma -> semi_terma list -> semi_terma
    val term_basety: semi_terma
    val term_binop: semi_terma -> abr_string -> semi_terma -> semi_terma
    val term_binopa: abr_string -> semi_terma list -> semi_terma
    val term_binopb: abr_string -> semi_terma list -> semi_terma
    val term_case:
       semi_terma -> (semi_terma * semi_terma) list -> semi_terma
    val term_exists: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_function: (semi_terma * semi_terma) list -> semi_terma
    val term_lam: abr_string -> (abr_string -> semi_terma) -> semi_terma
    val term_lambda: abr_string -> semi_terma -> semi_terma
    val term_lambdas: abr_string list -> semi_terma -> semi_terma
    val term_lambdas0: semi_terma -> semi_terma -> semi_terma
    val term_list: semi_terma list -> semi_terma
    val term_lista: ('a -> semi_terma) -> 'a list -> semi_terma
    val term_oclset: semi_terma list -> semi_terma
    val term_oid: abr_string -> internal_oid -> semi_terma
    val term_pair: semi_terma -> semi_terma -> semi_terma
    val term_paira: semi_terma list -> semi_terma
    val term_pairs: ('a -> semi_terma) -> 'a list -> semi_terma
    val term_parenthesis: semi_terma -> semi_terma
    val term_pat: abr_string -> semi_terma
    val term_postunary: semi_terma -> semi_terma -> semi_terma
    val term_preunary: semi_terma -> semi_terma -> semi_terma
    val term_set: semi_terma list -> semi_terma
    val term_some: semi_terma -> semi_terma
    val term_string: abr_string -> semi_terma
    val term_stringa: abr_string -> semi_terma
    val term_stringb: semi_terma -> abr_string -> semi_terma
    val term_warning_parenthesis: semi_terma -> semi_terma
    datatype terma
    =
         Absa of abr_string * typ * terma
       | Appa of terma * terma
       | Bound of Code_Numeral.natural
       | Consta of abr_string * typ
       | Free of abr_string * typ
       | Var of (abr_string * Code_Numeral.natural) * typ
    val text: text -> all_meta
    datatype text = Text of abr_string
    val text2_of_str: abr_string -> abr_string
    val text_of_str: abr_string -> abr_string
    val text_raw: text_raw -> all_meta
    datatype text_raw = Text_raw of abr_string
    val textstr_of_str:
       (abr_string -> abr_string) ->
         (int -> abr_string) ->
           (abr_string -> abr_string) -> abr_string -> abr_string
    val the_single: 'a list -> 'a
    val thena:
       semi_thm_attribute -> semi_thm_attribute -> semi_thm_attribute
    val thm: thm -> all_meta
    datatype thm = Thm of semi_thm_attribute list
    val thma: abr_string -> semi_thm_attribute
    val thms: abr_string -> semi_thm_attribute
    datatype thyName = ThyName of abr_string
    val thy_association: ('a, 'b) embedding
    val thy_class: (ocl_class, unit compiler_env_config_ext) embedding
    val thy_class_flat: ('a, 'b) embedding
    val thy_class_synonym: ('a, 'b) embedding
    val thy_class_tree: ('a, 'b) embedding
    val thy_ctxt:
       floor -> (unit ocl_ctxt_ext, unit compiler_env_config_ext) embedding
    val thy_def_base_l:
       (ocl_def_base_l, unit compiler_env_config_ext) embedding
    val thy_def_state:
       floor -> (ocl_def_state, unit compiler_env_config_ext) embedding
    val thy_def_transition:
       floor -> (ocl_def_transition, unit compiler_env_config_ext) embedding
    val thy_enum: (ocl_enum, unit compiler_env_config_ext) embedding
    val thy_enum_flat: ('a, 'b) embedding
    val thy_flush_all: ('a, 'b) embedding
    val thy_generic: ('a, 'b) embedding
    val thy_haskell: (isaUnit, unit compiler_env_config_ext) embedding
    val thy_instance: (ocl_instance, unit compiler_env_config_ext) embedding
    val times: 'a times -> 'a -> 'a -> 'a
    type 'a times = {times: 'a -> 'a -> 'a}
    val times_int: inta times
    val times_inta: inta -> inta -> inta
    val times_nat: nat -> nat -> nat
    val times_power: 'a power -> 'a times
    val tl: 'a list -> 'a list
    datatype 'a tmp_inh = Tinh of 'a
    datatype 'a tmp_sub = Tsub of 'a
    datatype 'a tmp_univ = Tuniv of 'a
    val to_String: string_b_a_s_e -> abr_string
    val to_String_b_a_s_e: abr_string -> string_b_a_s_e
    val to_bl: 'a len0 -> 'a word -> bool list
    val to_bold_number: abr_string -> abr_string
    val to_list: abr_string -> int list
    val to_lista: string_b_a_s_e -> int list
    val to_oid: (Code_Numeral.natural -> string) -> internal_oid -> string
    val translate_string: (string -> string) -> string -> string
    val translation_unit:
       nodeInfo cTranslationUnit * (comment list * int list) ->
         ext_decl list
    datatype trappable = BreakT | ContinueT
    datatype 'a tree = Tree of 'a * 'a tree list
    val tree_of_decl_spec:
       'a cStructureUnion ->
         (abr_string,
         cStructTag * ('a cDeclaration list * ('a cAttribute list * 'a)),
         cStructTag *
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
         ,
         'a cDeclarationSpecifier list *
         (('a cDeclarator optiona * 'a cInitializer optiona) *
          'a cExpression optiona
         )
         list
         )
         struct_tree
    val trim: ('a -> bool) -> 'a list -> 'a list
    val trim_line: string -> string
    val trim_split_lines: string -> string list
    val truncate: 'a compiler_env_config_ext -> unit compiler_env_config_ext
    val txt:
       ((abr_string -> abr_string) ->
          generation_semantics_ocl -> abr_string)
         ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_a:
       abr_string list ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_aa:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_d:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw:
       ((abr_string -> abr_string) ->
          generation_semantics_ocl -> abr_string)
         ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw_a:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txt_raw_d:
       ((abr_string -> abr_string) -> abr_string list) ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txta:
       abr_string ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val txtb:
       abr_string list ->
         ('a ->
            'b compiler_env_config_ext ->
              all_meta list * 'b compiler_env_config_ext
         )
         embedding_fun
    val tyCollect: 'a ocl_multiplicity_ext -> ocl_collection list
    val tyMult:
       'a ocl_multiplicity_ext ->
         (ocl_multiplicity_single * ocl_multiplicity_single option) list
    val tyObjN_ass_switch: 'a ocl_ty_class_node_ext -> Code_Numeral.natural
    val tyObjN_role_multip:
       'a ocl_ty_class_node_ext -> unit ocl_multiplicity_ext
    val tyObjN_role_name: 'a ocl_ty_class_node_ext -> abr_string option
    val tyObjN_role_ty: 'a ocl_ty_class_node_ext -> abr_string
    val tyObj_ass_arity: 'a ocl_ty_class_ext -> Code_Numeral.natural
    val tyObj_ass_id: 'a ocl_ty_class_ext -> Code_Numeral.natural
    val tyObj_from: 'a ocl_ty_class_ext -> unit ocl_ty_class_node_ext
    val tyObj_name: 'a ocl_ty_class_ext -> abr_string
    val tyObj_to: 'a ocl_ty_class_ext -> unit ocl_ty_class_node_ext
    val tyRole: 'a ocl_multiplicity_ext -> abr_string option
    val tyRole_update:
       (abr_string option -> abr_string option) ->
         'a ocl_multiplicity_ext -> 'a ocl_multiplicity_ext
    val ty_arrow: semi_typ -> semi_typ -> semi_typ
    val ty_arrowa: semi_typ list -> semi_typ
    val ty_arrowb: semi_typ -> semi_typ
    val ty_boolean: abr_string
    val ty_integer: abr_string
    val ty_obj_to_string: ocl_ty_obj -> abr_string
    val ty_paren: semi_typ -> semi_typ
    val ty_real: abr_string
    val ty_string: abr_string
    val ty_times: semi_typ -> semi_typ -> semi_typ
    val ty_void: abr_string
    datatype typ
    =
         TFree of abr_string * abr_string list
       | TVara of (abr_string * Code_Numeral.natural) * abr_string list
       | Typeb of abr_string * typ list
    datatype typeSign = TypeSign of name * (name * name list) list * typea
    datatype typeSpec = TypeSpec of name list * name
    val type_notation: type_notation -> all_meta
    datatype type_notation = Type_notation of abr_string * abr_string
    val type_synonym: type_synonym -> all_meta
    datatype type_synonym
    = Type_synonym of (abr_string * abr_string list) * semi_typ
    val type_synonyma: abr_string -> semi_typ -> type_synonym
    val type_synonymb:
       abr_string ->
         abr_string list -> (abr_string list -> semi_typ) -> type_synonym
    datatype typea
    =
         Func of typea * typea
       | NoType
       | TVar of name
       | Typea of name * typea list
    val uint: 'a len0 -> 'a word -> inta
    val unaryOp: cUnaryOp -> unoptype
    val uncurry: ('a -> 'b -> 'c) -> 'a * 'b -> 'c
    val undefined: 'a -> 'b
    val unenclose: string -> string
    val unflat: 'a list list -> 'b list -> 'b list list
    val unfolding: semi_thm_attribute list -> semi_command_proof
    val union: ('a * 'a -> bool) -> 'a list -> 'a list -> 'a list
    val union_load:
       'a equal ->
         'a list -> 'b * ('a, unit) alist -> bool * ('a, unit) alist
    val union_loada:
       'a equal ->
         'a list ->
           bool * ('a list * ('a, unit) alist) ->
             bool * ('a list * ('a, unit) alist)
    val unique: 'a equal -> ('b -> 'a) -> ('b * 'c) list -> ('b * 'c) list
    datatype unoptype = Addr | BitNegate | Negate | Not
    val unprefix: string -> string -> string
    val unsuffix: string -> string -> string
    val unsupported: abr_string -> 'a -> 'a * nodeInfo cExpression
    datatype 'a unsynchronized_ref = Unsynchronized_ref of 'a
    val untag_list: (int * 'a) list -> 'a list
    val update: ('a * 'a -> bool) -> 'a -> 'a list -> 'a list
    val update_D_ocl_accessor_post: ('a -> 'b) -> 'c * 'a -> 'c * 'b
    val update_D_ocl_accessor_pre: ('a -> 'b) -> 'a * 'c -> 'b * 'c
    val updatea: 'a equal -> 'a -> 'b -> ('a, 'b) alist -> ('a, 'b) alist
    val uppercase: abr_string -> abr_string
    val upt: nat -> nat -> nat list
    val upto: int * int -> int list
    val upto_aux: inta -> inta -> inta list -> inta list
    val uptoa: inta -> inta -> inta list
    val uptob:
       Code_Numeral.natural ->
         Code_Numeral.natural -> Code_Numeral.natural list
    val using: semi_thm_attribute list -> semi_command_proof
    val var_Abs_Set: abr_string
    val var_Abs_Set_inverse: abr_string
    val var_Abs_Void: abr_string
    val var_OclForall_set: abr_string
    val var_OclInteger: abr_string
    val var_OclReal: abr_string
    val var_OclString: abr_string
    val var_Pair_base: abr_string
    val var_Sequence_base: abr_string
    val var_Set_base: abr_string
    val var_assocs: abr_string
    val var_at_when_hol_post: abr_string
    val var_at_when_hol_pre: abr_string
    val var_at_when_ocl_post: abr_string
    val var_at_when_ocl_pre: abr_string
    val var_deref: abr_string
    val var_deref_assocs: abr_string
    val var_deref_assocs_list: abr_string
    val var_deref_oid: abr_string
    val var_eval_extract: abr_string
    val var_in_post_state: abr_string
    val var_in_pre_state: abr_string
    val var_inst_assoc: abr_string
    val var_map_of_list: abr_string
    val var_oid_uniq: abr_string
    val var_reconst_basetype: abr_string
    val var_reconst_basetype_void: abr_string
    val var_result: abr_string
    val var_select: abr_string
    val var_select_object_pair: abr_string
    val var_select_object_sequence: abr_string
    val var_select_object_sequence_any: abr_string
    val var_select_object_sequence_any_exec: abr_string
    val var_select_object_set: abr_string
    val var_select_object_set_any: abr_string
    val var_select_object_set_any_exec: abr_string
    val var_self: abr_string
    val var_switch: abr_string
    val var_ty_list: abr_string
    val var_ty_prod: abr_string
    val var_val: abr_string
    val wherea:
       semi_thm_attribute ->
         (abr_string * semi_terma) list -> semi_thm_attribute
    val wildcard: abr_string
    datatype 'a word = Word of inta
    val word_of_int: 'a len0 -> inta -> 'a word
    val wrap: 'a -> sourcePos -> sourcePos -> 'a region_Wrap
    val wrap_oclty: abr_string -> abr_string
    val write_file:
       (all_meta_embedding list * abr_string option) compiler_env_config_ext
         -> unit option
    val write_file0:
       (all_meta_embedding list * abr_string option) compiler_env_config_ext
         ->
         (((string -> string -> unit option) -> unit option) -> unit option)
         *
         string list
    val write_file0a:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             ->
             (((string -> string -> unit option) -> unit option) ->
                unit option)
             *
             string list
    val write_filea:
       (abr_string -> string) ->
         (Code_Numeral.natural -> string) ->
           (all_meta_embedding list * abr_string option)
           compiler_env_config_ext
             -> unit option
    val yield_singleton:
       ('a list -> 'b -> 'c list * 'b) -> 'a -> 'b -> 'c * 'b
    val zero: 'a zero -> 'a
    type 'a zero = {zero: 'a}
    val zero_integer: int zero
    val zero_nat: nat zero
    val zero_nata: nat
    val zero_natural: Code_Numeral.natural zero
    type 'a zero_neq_one =
       {one_zero_neq_one: 'a one, zero_zero_neq_one: 'a zero}
    val zero_neq_one_integer: int zero_neq_one
    val zero_zero_neq_one: 'a zero_neq_one -> 'a zero
    val zip: 'a list -> 'b list -> ('a * 'b) list
    val zip_options: 'a list -> 'b option list -> ('a * 'b) list
    val ||| : ('a -> order) * ('a -> order) -> 'a -> order
    val ~~ : 'a list * 'b list -> ('a * 'b) list
  end
### ML warning (line 558 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Value identifier (toString_cIntFlag) has not been referenced.
### ML warning (line 560 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Value identifier (toString_cIntRepr) has not been referenced.
### ML warning (line 592 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Pattern is not exhaustive.
### ML warning (line 593 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Pattern is not exhaustive.
### ML warning (line 582 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Pattern is not exhaustive.
### ML warning (line 583 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Pattern is not exhaustive.
### ML warning (line 922 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Ast.thy"):
### Matches are not exhaustive.
signature C11_AST_LIB =
  sig
    datatype 'a C11_Ast
    =
         mk_cArraySize of 'a C_Ast.cArraySize
       | mk_cAssignOp of C_Ast.cAssignOp
       | mk_cAttribute of 'a C_Ast.cAttribute
       | mk_cBinaryOp of C_Ast.cBinaryOp
       | mk_cBuiltinThing of 'a C_Ast.cBuiltinThing
       | mk_cCompoundBlockItem of 'a C_Ast.cCompoundBlockItem
       | mk_cConstant of 'a C_Ast.cConstant
       | mk_cDeclaration of 'a C_Ast.cDeclaration
       | mk_cDeclarationSpecifier of 'a C_Ast.cDeclarationSpecifier
       | mk_cDeclarator of 'a C_Ast.cDeclarator
       | mk_cDerivedDeclarator of 'a C_Ast.cDerivedDeclarator
       | mk_cEnumeration of 'a C_Ast.cEnumeration
       | mk_cExpression of 'a C_Ast.cExpression
       | mk_cExternalDeclaration of 'a C_Ast.cExternalDeclaration
       | mk_cInitializer of 'a C_Ast.cInitializer
       | mk_cIntFlag of C_Ast.cIntFlag
       | mk_cIntRepr of C_Ast.cIntRepr
       | mk_cInteger of C_Ast.cInteger
       | mk_cPartDesignator of 'a C_Ast.cPartDesignator
       | ...
    datatype data
    =
         data_absstring of string
       | data_bool of bool
       | data_int of int
       | data_string of string
    val fold_cArraySize:
       'a ->
         (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cArraySize -> 'b -> 'b
    val fold_cAttribute:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cAttribute -> 'b -> 'b
    val fold_cBuiltinThing:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cBuiltinThing -> 'b -> 'b
    val fold_cCompoundBlockItem:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cCompoundBlockItem -> 'b -> 'b
    val fold_cConstant:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cConstant -> 'b -> 'b
    val fold_cDeclaration:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cDeclaration -> 'b -> 'b
    val fold_cDeclarationSpecifier:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cDeclarationSpecifier -> 'b -> 'b
    val fold_cDeclarator:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cDeclarator -> 'b -> 'b
    val fold_cDerivedDeclarator:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cDerivedDeclarator -> 'b -> 'b
    val fold_cEnumeration:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cEnumeration -> 'b -> 'b
    val fold_cExpression:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cExpression -> 'b -> 'b
    val fold_cExternalDeclaration:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cExternalDeclaration -> 'b -> 'b
    val fold_cInitializer:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cInitializer -> 'b -> 'b
    val fold_cInteger:
       (node_content -> 'a -> 'b) -> C_Ast.cInteger -> 'a -> 'b
    val fold_cPartDesignator:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cPartDesignator -> 'b -> 'b
    val fold_cStatement:
       (node_content -> 'a -> 'b -> 'b) -> 'a C_Ast.cStatement -> 'b -> 'b
    val fold_cStringLiteral:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cStringLiteral -> 'b -> 'b
    val fold_cStructureUnion:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cStructureUnion -> 'b -> 'b
    val fold_cTranslationUnit:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cTranslationUnit -> 'b -> 'b
    val fold_cTypeQualifier:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cTypeQualifier -> 'b -> 'b
    val fold_cTypeSpecifier:
       (node_content -> 'a -> 'b -> 'b) ->
         'a C_Ast.cTypeSpecifier -> 'b -> 'b
    val fold_either:
       ('a -> 'b -> 'c) ->
         ('d -> 'b -> 'c) -> ('a, 'd) C_Ast.either -> 'b -> 'c
    val fold_ident:
       'a -> (node_content -> 'a -> 'b -> 'c) -> C_Ast.ident -> 'b -> 'c
    val fold_optiona: ('a -> 'b -> 'b) -> 'a C_Ast.optiona -> 'b -> 'b
    type node_content = {args: data list, sub_tag: string, tag: string}
    val toString_abr_string: C_Ast.abr_string -> string
    val toString_cAssignOp: C_Ast.cAssignOp -> string
    val toString_cBinaryOp: C_Ast.cBinaryOp -> string
    val toString_cIntFlag: C_Ast.cIntFlag -> string
    val toString_cIntRepr: C_Ast.cIntRepr -> string
    val toString_cUnaryOp: C_Ast.cUnaryOp -> string
    val toString_nodeinfo: C_Ast.nodeInfo -> string
  end
structure C11_Ast_Lib: C11_AST_LIB
eqtype T
type range = T * T
type report = T * Markup.T
type report_text = report * string
val here = fn: T -> string
val advance_offsets = fn: int -> T -> T
val file_of = fn: T -> string option
val put_id = fn: string -> T -> T
val id = fn: string -> T
val range_of_properties = fn: Properties.T -> range
val no_range_position = fn: T -> T
val id_only = fn: string -> T
val distance_of = fn: T * T -> int option
val range = fn: T * T -> range
val id_properties_of = fn: T -> Properties.T
val start = {line=1, offset=1}: T
val append_reports = fn: report_text list ref -> report list -> unit
val reported_text = fn: T -> Markup.T -> string -> string
val line_of = fn: T -> int option
val properties_of = fn: T -> Properties.T
val report = fn: T -> Markup.T -> unit
val default = fn: T -> bool * T
val here_list = fn: T list -> string
val here_strs = fn: T -> string * string
val report_text = fn: T -> Markup.T -> string -> unit
val parse_id = fn: T -> int option
val make = fn: Thread_Position.T -> T
val id_of = fn: T -> string option
val get_props = fn: T -> Properties.T
val file_name = fn: string -> Properties.T
val symbol_explode = fn: string -> T -> T
val file_only = fn: string -> T
val none = {}: T
val store_reports = fn:
   report_text list ref -> T list -> ('a -> Markup.T list) -> 'a -> unit
val properties_of_range = fn: range -> Properties.T
val is_reported_range = fn: T -> bool
val offset_properties_of = fn: T -> Properties.T
val ord = fn: T ord
val def_properties_of = fn: T -> Properties.T
val range_position = fn: range -> T
val offset_of = fn: T -> int option
val file = fn: string -> T
val is_reported = fn: T -> bool
val line_file = fn: int -> string -> T
val end_offset_of = fn: T -> int option
val markup = fn: T -> Markup.T -> Markup.T
val line_file_only = fn: int -> string -> T
val make_entity_markup = fn:
   {def: bool} -> serial -> string -> string * T -> Markup.T
val reports = fn: report list -> unit
val adjust_offsets = fn: (int -> int option) -> T -> T
val symbol = fn: string -> T -> T
val reports_text = fn: report_text list -> unit
val of_properties = fn: Properties.T -> T
val entity_markup = fn: string -> string * T -> Markup.T
val dest = fn: T -> Thread_Position.T
val setmp_thread_data = fn: T -> ('a -> 'b) -> 'a -> 'b
val line = fn: int -> T
val copy_id = fn: T -> T -> T
val thread_data = fn: unit -> T
val no_range = ({}, {}): range
### theory "Draft.C_Ast"
### 14.073s elapsed time, 26.176s cpu time, 10.214s GC time
Loading theory "Draft.C_Environment" (required by "Draft.C_EnvironmentTemplates")
signature C_ENV =
  sig
    type 'a T =
       {env_lang: env_lang,
        env_tree: env_tree,
        rule_input: C_Ast.class_Pos list * int,
        rule_output: rule_output,
        stream_hook: stream_hook,
        stream_lang: stream_lang_state * 'a stream}
    datatype antiq_language
    =
         Antiq_none of C_Lex.token
       | Antiq_stack of C_Position.reports_text * eval_time
    datatype comment_style = Comment_directive | Comment_language
    val decode_positions: string -> Position.T list
    val empty_env_lang: env_lang
    val empty_env_tree: Context.generic -> env_tree
    val empty_rule_output: rule_output
    val encode_positions: Position.T list -> string
    type env_directives =
       ((string * range ->
           Context.generic -> C_Lex.token list * Context.generic
         ,
        C_Lex.token list)
        C_Scan.either
        *
        (string * range -> Context.generic -> Context.generic)
       )
       markup_store
       Symtab.table
    type env_lang =
       {env_directives: env_directives,
        namesupply: int,
        scopes: (C_Ast.ident option * var_table) list,
        stream_ignored: C_Antiquote.antiq stream, var_table: var_table}
    datatype env_propagation
    =
         Bottom_up of env_propagation_bottom_up
       | Top_down of env_propagation_ctxt
    datatype env_propagation_bottom_up
    =
         Exec_annotation of env_propagation_ctxt
       | Exec_directive of env_propagation_directive
    type env_propagation_ctxt =
       env_propagation_reduce -> Context.generic -> Context.generic
    type env_propagation_directive =
       env_propagation_reduce ->
         env_directives -> env_lang * env_tree -> env_lang * env_tree
    type env_propagation_reduce = int option
    type env_tree =
       {context: Context.generic,
        error_lines: error_lines, reports_text: C_Position.reports_text}
    type error_lines = string list
    type eval_node = range * env_propagation * env_directives * bool
    datatype eval_time
    =
         Lexing of
             range * (comment_style -> Context.generic -> Context.generic)
       | Never
       | Parsing of (Symbol_Pos.T list * Symbol_Pos.T list) * eval_node
    val get_scopes: env_lang -> (C_Ast.ident option * var_table) list
    val make: env_lang -> 'a stream -> env_tree -> 'a T
    val map_context:
       (Context.generic -> Context.generic) ->
         {context: Context.generic, error_lines: 'a, reports_text: 'b} ->
           {context: Context.generic, error_lines: 'a, reports_text: 'b}
    val map_context':
       (Context.generic -> 'a * Context.generic) ->
         {context: Context.generic, error_lines: 'b, reports_text: 'c} ->
           'a *
           {context: Context.generic, error_lines: 'b, reports_text: 'c}
    val map_env_directives:
       (env_directives -> env_directives) -> env_lang -> env_lang
    val map_env_lang: (env_lang -> env_lang) -> 'a T -> 'a T
    val map_env_lang_tree:
       (env_lang -> env_tree -> env_lang * env_tree) -> 'a T -> 'a T
    val map_env_lang_tree':
       (env_lang -> env_tree -> 'a * (env_lang * env_tree)) ->
         'b T -> 'a * 'b T
    val map_env_tree: (env_tree -> env_tree) -> 'a T -> 'a T
    val map_env_tree': (env_tree -> 'a * env_tree) -> 'b T -> 'a * 'b T
    val map_error_lines:
       (error_lines -> error_lines) ->
         {context: 'a, error_lines: error_lines, reports_text: 'b} ->
           {context: 'a, error_lines: error_lines, reports_text: 'b}
    val map_idents:
       (markup_ident markup_store Symtab.table ->
          markup_ident markup_store Symtab.table)
         -> var_table -> var_table
    val map_namesupply: (int -> int) -> env_lang -> env_lang
    val map_output_env:
       (rule_static -> rule_static) -> 'a rule_output0' -> 'a rule_output0'
    val map_output_pos:
       ('a option -> 'a option) -> 'a rule_output0' -> 'a rule_output0'
    val map_output_vacuous:
       (bool -> bool) -> 'a rule_output0' -> 'a rule_output0'
    val map_reports_text:
       (C_Position.reports_text -> C_Position.reports_text) ->
         env_tree -> env_tree
    val map_rule_input:
       (C_Ast.class_Pos list * int -> C_Ast.class_Pos list * int) ->
         'a T -> 'a T
    val map_rule_output: (rule_output -> rule_output) -> 'a T -> 'a T
    val map_scopes:
       ((C_Ast.ident option * var_table) list ->
          (C_Ast.ident option * var_table) list)
         -> env_lang -> env_lang
    val map_stream_hook: (stream_hook -> stream_hook) -> 'a T -> 'a T
    val map_stream_ignored:
       (C_Antiquote.antiq stream -> C_Antiquote.antiq stream) ->
         env_lang -> env_lang
    val map_stream_lang:
       (stream_lang_state * 'a stream -> stream_lang_state * 'a stream) ->
         'a T -> 'a T
    val map_tyidents:
       (markup_global markup_store Symtab.table Symtab.table ->
          markup_global markup_store Symtab.table Symtab.table)
         -> var_table -> var_table
    val map_var_table: (var_table -> var_table) -> env_lang -> env_lang
    eqtype markup_global
    type markup_ident =
       {global: markup_global,
        params: C_Ast.CDerivedDeclr list,
        ret: C_Ast.CDeclSpec list parse_status}
    type 'a markup_store = Position.T list * serial * 'a
    val namespace_enum: string
    val namespace_tag: string
    val namespace_typedef: string
    datatype 'a parse_status = Parsed of 'a | Previous_in_stack
    type ('a, 'b, 'c) rule_ml =
       {rule_pos: 'c * 'c, rule_type: ('a, 'b, 'c) rule_type}
    type rule_output = C_Ast.class_Pos rule_output0'
    type ('a, 'b, 'c) rule_output0 =
       eval_node list list * ('a, 'b, 'c) rule_reduce0 *
       ('c * 'c) rule_output0'
    type 'a rule_output0' =
       {output_env: rule_static,
        output_pos: 'a option, output_vacuous: bool}
    type ('a, 'b, 'c) rule_reduce =
       int * ('a, 'b, 'c) stack0 * eval_node list list
    type ('a, 'b, 'c) rule_reduce' = int * bool * ('a, 'b, 'c) rule_reduce0
    type ('a, 'b, 'c) rule_reduce0 =
       (('a, 'b, 'c) stack0 * env_lang * eval_node) list
    type rule_static = (env_tree -> env_lang * env_tree) option
    datatype ('a, 'b, 'c) rule_type
    = Reduce of rule_static * ('a, 'b, 'c) rule_reduce' | Shift | Void
    type ('a, 'b, 'c) stack' =
       ('a, 'b, 'c) stack0 * eval_node list list * ('c * 'c) list *
       ('a, 'b, 'c) rule_ml tree list
    type ('a, 'b, 'c) stack0 = ('a, 'b, 'c) stack_elem0 list
    type ('a, 'b, 'c) stack_elem0 = 'a * ('b * 'c * 'c)
    type 'a stream = ('a, C_Lex.token) C_Scan.either list
    type stream_hook =
       (Symbol_Pos.T list * Symbol_Pos.T list * eval_node) list list
    datatype stream_lang_state
    =
         Stream_atomic
       | Stream_ident of range * string
       | Stream_regular
       | Stream_string of (range * string) list
    val string_of: env_lang -> string
    datatype 'a tree = Tree of 'a * 'a tree list
    type var_table =
       {idents: markup_ident markup_store Symtab.table,
        tyidents: markup_global markup_store Symtab.table Symtab.table}
  end
structure C_Env: C_ENV
structure C_Env_Ext:
  sig
    val context_map:
       (C_Env.env_tree -> C_Env.env_tree) ->
         Context.generic -> Context.generic
    val context_map':
       (C_Env.env_tree -> 'a * C_Env.env_tree) ->
         Context.generic -> 'a * Context.generic
    val get_context: 'a C_Env.T -> Context.generic
    val get_idents:
       'a C_Env.T -> C_Env.markup_ident C_Env.markup_store Symtab.table
    val get_idents':
       C_Env.env_lang -> C_Env.markup_ident C_Env.markup_store Symtab.table
    val get_namesupply: 'a C_Env.T -> int
    val get_output_pos: 'a C_Env.T -> C_Ast.class_Pos option
    val get_reports_text: 'a C_Env.T -> C_Position.reports_text
    val get_scopes:
       'a C_Env.T -> (C_Ast.ident option * C_Env.var_table) list
    val get_tyidents'_enum:
       C_Env.env_lang -> C_Env.markup_global C_Env.markup_store Symtab.table
    val get_tyidents'_typedef:
       C_Env.env_lang -> C_Env.markup_global C_Env.markup_store Symtab.table
    val get_tyidents_enum:
       'a C_Env.T -> C_Env.markup_global C_Env.markup_store Symtab.table
    val get_tyidents_typedef:
       'a C_Env.T -> C_Env.markup_global C_Env.markup_store Symtab.table
    val get_var_table: 'a C_Env.T -> C_Env.var_table
    val list_lookup:
       ('a list * 'b * 'c) Symtab.table -> Symtab.key -> 'a list
    val map_context:
       (Context.generic -> Context.generic) -> 'a C_Env.T -> 'a C_Env.T
    val map_env_directives':
       ('a -> 'b * 'c) ->
         {env_directives: 'a,
          namesupply: 'd, scopes: 'e, stream_ignored: 'f, var_table: 'g}
           ->
           'b *
           {env_directives: 'c,
            namesupply: 'd, scopes: 'e, stream_ignored: 'f, var_table: 'g}
    val map_idents:
       (C_Env.markup_ident C_Env.markup_store Symtab.table ->
          C_Env.markup_ident C_Env.markup_store Symtab.table)
         -> 'a C_Env.T -> 'a C_Env.T
    val map_idents':
       (C_Env.markup_ident C_Env.markup_store Symtab.table ->
          C_Env.markup_ident C_Env.markup_store Symtab.table)
         -> C_Env.env_lang -> C_Env.env_lang
    val map_namesupply: (int -> int) -> 'a C_Env.T -> 'a C_Env.T
    val map_output_env:
       (C_Env.rule_static -> C_Env.rule_static) -> 'a C_Env.T -> 'a C_Env.T
    val map_output_pos:
       (C_Ast.class_Pos option -> C_Ast.class_Pos option) ->
         'a C_Env.T -> 'a C_Env.T
    val map_output_vacuous: (bool -> bool) -> 'a C_Env.T -> 'a C_Env.T
    val map_reports_text:
       (C_Position.reports_text -> C_Position.reports_text) ->
         'a C_Env.T -> 'a C_Env.T
    val map_scopes:
       ((C_Ast.ident option * C_Env.var_table) list ->
          (C_Ast.ident option * C_Env.var_table) list)
         -> 'a C_Env.T -> 'a C_Env.T
    val map_stream_ignored:
       (C_Antiquote.antiq C_Env.stream -> C_Antiquote.antiq C_Env.stream) ->
         'a C_Env.T -> 'a C_Env.T
    val map_stream_lang':
       ('a -> 'b * 'c) ->
         {env_lang: 'd,
          env_tree: 'e,
          rule_input: 'f, rule_output: 'g, stream_hook: 'h, stream_lang: 'a}
           ->
           'b *
           {env_lang: 'd,
            env_tree: 'e,
            rule_input: 'f,
            rule_output: 'g, stream_hook: 'h, stream_lang: 'c}
    val map_tyidents'_enum:
       (C_Env.markup_global C_Env.markup_store Symtab.table ->
          C_Env.markup_global C_Env.markup_store Symtab.table)
         -> C_Env.env_lang -> C_Env.env_lang
    val map_tyidents'_typedef:
       (C_Env.markup_global C_Env.markup_store Symtab.table ->
          C_Env.markup_global C_Env.markup_store Symtab.table)
         -> C_Env.env_lang -> C_Env.env_lang
    val map_tyidents_enum:
       (C_Env.markup_global C_Env.markup_store Symtab.table ->
          C_Env.markup_global C_Env.markup_store Symtab.table)
         -> 'a C_Env.T -> 'a C_Env.T
    val map_tyidents_typedef:
       (C_Env.markup_global C_Env.markup_store Symtab.table ->
          C_Env.markup_global C_Env.markup_store Symtab.table)
         -> 'a C_Env.T -> 'a C_Env.T
    val map_var_table:
       (C_Env.var_table -> C_Env.var_table) -> 'a C_Env.T -> 'a C_Env.T
  end
### theory "Draft.C_Environment"
### 0.225s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.C_EnvironmentTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.C_EnvironmentTemplates"
### 0.271s elapsed time, 0.391s cpu time, 0.000s GC time
val it = (): unit
