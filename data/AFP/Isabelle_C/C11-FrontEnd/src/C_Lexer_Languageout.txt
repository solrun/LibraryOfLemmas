Loading theory "Draft.C_Lexer_Language" (required by "Draft.C_Lexer_LanguageTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.C_Lexer_LanguageTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.C_Lexer_LanguageTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.C_Lexer_LanguageTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
structure C_Scan:
  sig
    datatype ('a, 'b) either = Left of 'a | Right of 'b
    val opt: ('a -> 'b list * 'a) -> 'a -> 'b list * 'a
  end
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
structure C_Symbol:
  sig
    val is_ascii_blank_no_line: string -> bool
    val is_ascii_digit1: string -> bool
    val is_ascii_identifier: string -> bool
    val is_ascii_letdig: string -> bool
    val is_ascii_oct: string -> bool
    val is_ascii_quasi: string -> bool
    val is_identletter: string -> bool
  end
structure C_Position: sig type reports_text = Position.report_text list end
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
structure C_Basic_Symbol_Pos:
  sig
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    val many:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val newline: Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val one':
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one_not_eof: Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val repeats_one_not_eof:
       (Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_until_nl:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_full:
       ('a ->
          ('b -> 'c) ->
            Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list)
         ->
         (string -> bool) ->
           'a ->
             ('d -> 'e * Symbol_Pos.T list) -> 'd -> 'e * Symbol_Pos.T list
    val this_string:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val unless_eof:
       (Symbol_Pos.T list -> 'a * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val ~$$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
structure C_Symbol_Pos:
  sig
    val !!! : message -> 'a Symbol_Pos.scanner -> 'a Symbol_Pos.scanner
    val !!!! :
       (unit -> string) ->
         ('a * (string * Position.T) list -> 'b) ->
           'a * (string * Position.T) list -> 'b
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    val recover_comment:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_cartouche:
       string ->
         string ->
           ((string * Position.T) list -> 'a * (string * Position.T) list)
             -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_cartouche_depth:
       ((string * Position.T) list -> 'a * (string * Position.T) list) ->
         int option * Symbol_Pos.T list ->
           Symbol_Pos.T list * (int option * Symbol_Pos.T list)
    val scan_cartouche_inline:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_cartouche_multi:
       string ->
         ((string * Position.T) list -> 'a * (string * Position.T) list) ->
           Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_comment:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_comment_no_nest:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_string_bq_inline:
       string ->
         Symbol_Pos.T list ->
           (Position.T * (Symbol_Pos.T list * Position.T)) *
           Symbol_Pos.T list
    val scan_string_bq_multi:
       string ->
         ((string * Position.T) list -> 'a * (string * Position.T) list) ->
           Symbol_Pos.T list ->
             (Position.T * (Symbol_Pos.T list * Position.T)) *
             Symbol_Pos.T list
    val scan_string_qq_inline:
       string ->
         Symbol_Pos.T list ->
           (Position.T * (Symbol_Pos.T list * Position.T)) *
           Symbol_Pos.T list
    val scan_string_qq_multi:
       string ->
         ((string * Position.T) list -> 'a * (string * Position.T) list) ->
           Symbol_Pos.T list ->
             (Position.T * (Symbol_Pos.T list * Position.T)) *
             Symbol_Pos.T list
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.556s cpu time, 0.030s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.C_Lexer_LanguageTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### ML warning (line 323 of "$AFP/Isabelle_C/C11-FrontEnd/src/C_Lexer_Language.thy"):
### Matches are not exhaustive.
structure C_Antiquote:
  sig
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    type antiq =
       {body: Symbol_Pos.T list,
        body_begin: Symbol_Pos.T list,
        body_end: Symbol_Pos.T list,
        explicit: bool,
        range: Position.range, start: Position.T, stop: Position.T option}
    val many:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val newline: Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val one':
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one_not_eof: Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val repeats_one_not_eof:
       (Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_until_nl:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_antiq:
       Symbol_Pos.T list ->
         {body: Symbol_Pos.T list,
          body_begin: Symbol_Pos.T list,
          body_end: Symbol_Pos.T list,
          explicit: bool,
          range: Position.range, start: Position.T, stop: Position.T option}
         *
         Symbol_Pos.T list
    val scan_antiq_recover: Symbol_Pos.T list -> bool * Symbol_Pos.T list
    val scan_control:
       Symbol_Pos.T list ->
         {body: (string * Position.T) list,
          name: string * Position.T, range: Position.range}
         *
         Symbol_Pos.T list
    val scan_full:
       ('a ->
          ('b -> 'c) ->
            Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list)
         ->
         (string -> bool) ->
           'a ->
             ('d -> 'e * Symbol_Pos.T list) -> 'd -> 'e * Symbol_Pos.T list
    val this_string:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val unless_eof:
       (Symbol_Pos.T list -> 'a * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val ~$$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
structure C_Options:
  sig
    val ML_verbose: bool Config.T
    val lexer_trace: bool Config.T
    val parser_trace: bool Config.T
    val starting_env: string Config.T
    val starting_rule: string Config.T
  end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.267s elapsed time, 1.049s cpu time, 0.116s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.C_Lexer_LanguageTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.305s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.C_Lexer_LanguageTemplates" via "Draft.ExtrEqs")
structure C_Lex:
  sig
    val !!! : string -> 'a Symbol_Pos.scanner -> 'a Symbol_Pos.scanner
    val !!!! :
       string ->
         ('a * (string * Position.T) list -> 'b) ->
           'a * (string * Position.T) list -> 'b
    val $$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val $$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
    val @@ :
       ('a list * ('b -> 'c)) * ('a list * ('c -> 'd)) ->
         'a list * ('b -> 'd)
    val check: token list -> string list -> string list
    val check_error: token -> string list
    val content_of: token -> string
    val directive_cmds: token_kind_directive -> token list
    datatype ('a, 'b) either = Left of 'a | Right of 'b
    val end_pos_of: token -> Position.T
    val eof: token
    val err_prefix: string
    val group_list_of: token_kind_directive -> token_group list
    val is_delimiter: token -> bool
    val is_eof: token -> bool
    val is_ident: token -> bool
    val is_integer: token -> bool
    val is_keyword: token -> bool
    val keywords: string list
    val keywords2: string list
    val keywords3: string list
    val keywords_ident: string list
    val kind_of: token -> token_kind
    val lexicon: Scan.lexicon
    val many:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val many1_blanks_no_line:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val merge_blank:
       token list ->
         token list ->
           token list ->
             (Position.range * token list) * (Position.range * token list)
    val mk_eof: Position.T -> token
    val newline: Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one:
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T * Symbol_Pos.T list
    val one':
       (string -> bool) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val one_not_eof: token list -> token * token list
    val opt: ('a -> 'b list * 'a) -> 'a -> 'b list * 'a
    val pos_of: token -> Position.T
    val range_list_of: token list -> Position.range * token list
    val range_list_of': token list -> 'a -> Position.range * 'a
    val range_list_of0: token list -> Position.range
    val range_of: token -> Position.range
    val read: string -> token list * (string list -> string list)
    val read_bin: string list -> int
    val read_dec: string list -> int
    val read_hex: string list -> int
    val read_init: 'a list * ('b -> 'b)
    val read_oct: string list -> int
    val read_source:
       Input.source -> token list * (string list -> string list)
    val read_source':
       {language: bool -> Markup.T, symbols: bool} ->
         (bool * (string * Position.T) list ->
            token * (bool * (string * Position.T) list))
           -> Input.source -> token list * (string list -> string list)
    val recover_char:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val recover_int:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val recover_string:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_one_not_eof:
       (Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val repeats_until_nl:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_blanks1:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_char:
       Symbol_Pos.T list ->
         (token_kind_encoding * (string, Position.range * int) either list)
         *
         Symbol_Pos.T list
    val scan_clangversion:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_file: Symbol_Pos.T list -> token_kind * Symbol_Pos.T list
    val scan_float:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_full:
       ('a ->
          ('b -> 'c) ->
            Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list)
         ->
         (string -> bool) ->
           'a ->
             ('d -> 'e * Symbol_Pos.T list) -> 'd -> 'e * Symbol_Pos.T list
    val scan_ident:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_ident_sym:
       Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val scan_int:
       Symbol_Pos.T list ->
         (int * token_kind_int_repr * token_kind_int_flag list) *
         Symbol_Pos.T list
    val scan_string:
       Symbol_Pos.T list ->
         (token_kind_encoding * (string, Position.range * int) either list)
         *
         Symbol_Pos.T list
    val scan_string': Symbol_Pos.T list -> string option
    val set_range: Position.range -> token -> token
    val stopper: token Scan.stopper
    val this_string:
       string -> Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    datatype token = Token of Position.range * (token_kind * string)
    datatype token_group
    =
         Group1 of token list * token list
       | Group2 of token list * token list * token list
       | Group3 of
           (Position.range * token list * token list * token list) *
           (Position.range * token list)
    datatype token_kind
    =
         Char of token_kind_string
       | ClangC
       | Comment of token_kind_comment
       | Directive of token_kind_directive
       | EOF
       | Error of string * token_group
       | File of token_kind_string
       | Float of Symbol_Pos.T list
       | GnuC
       | Ident
       | Integer of int * token_kind_int_repr * token_kind_int_flag list
       | Keyword
       | Sharp of int
       | Space
       | String of token_kind_string
       | Type_ident
       | Unknown
    datatype token_kind_comment
    =
         Comment_formal of C_Antiquote.antiq
       | Comment_suspicious of
           (bool * string * ((Position.T * Markup.T) * string) list) option
    datatype token_kind_directive
    =
         Conditional of
             token_group * token_group list * token_group option *
             token_group
       | Cpp of token_group
       | Define of
           token_group * token_group * token_group option * token_group
       | Include of token_group
       | Inline of token_group
       | Undef of token_group
    datatype token_kind_encoding
    = Encoding_L | Encoding_default | Encoding_file of string option
    datatype token_kind_int_flag
    = Flag_imag | Flag_long | Flag_long_long | Flag_unsigned
    datatype token_kind_int_repr
    = Repr_decimal | Repr_hexadecimal | Repr_octal
    type token_kind_string =
       token_kind_encoding * (string, Position.range * int) either list
    val token_leq: token * token -> bool
    val token_list_of: token_kind_directive -> token list
    val token_report: token -> ((Position.T * Markup.T) * string) list
    val unless_eof:
       (Symbol_Pos.T list -> 'a * Symbol_Pos.T list) ->
         Symbol_Pos.T list -> Symbol_Pos.T list * Symbol_Pos.T list
    val warn: token -> unit
    val ~$$ : string -> Symbol_Pos.T Symbol_Pos.scanner
    val ~$$$ : string -> Symbol_Pos.T list Symbol_Pos.scanner
  end
### theory "Draft.C_Lexer_Language"
### 0.576s elapsed time, 2.262s cpu time, 0.231s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.773s elapsed time, 2.628s cpu time, 0.248s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.018s elapsed time, 3.192s cpu time, 0.770s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.982s elapsed time, 4.783s cpu time, 0.920s GC time
Loading theory "Draft.Templates" (required by "Draft.C_Lexer_LanguageTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.083s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.C_Lexer_LanguageTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.491s elapsed time, 0.539s cpu time, 0.057s GC time
Loading theory "Draft.C_Lexer_LanguageTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.C_Lexer_LanguageTemplates"
### 0.270s elapsed time, 0.358s cpu time, 0.000s GC time
val it = (): unit
