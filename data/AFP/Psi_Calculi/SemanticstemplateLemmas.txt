   [("Semantics.optionFreshChain", "?X \<sharp>* None",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Semantics.optionFreshChain", "?xvec \<sharp>* None",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Semantics.action_perm_empty",
     "[] \<bullet> ?action_Rep = ?action_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Semantics.residual_perm_empty",
     "[] \<bullet> ?residual_Rep = ?residual_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Semantics.boundOutput_perm_empty",
     "[] \<bullet> ?boundOutput_Rep = ?boundOutput_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Semantics.boundOutputFreshSimps",
     "?xvec \<sharp>* (\<lparr>\<nu>*?xvec\<rparr>?B)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Semantics.residualInject", "\<tau> \<prec> ?P = RTau ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Semantics.boundOutput_unfolded_perm_eq",
     "perm_boundOutput_Rep_noption ?pi ?noption = ?pi \<bullet> ?noption",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.optionFreshChain", "?X \<sharp>* Some ?x = ?X \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.residualFreshChainSimp2",
     "?X \<sharp>* RTau ?P = ?X \<sharp>* ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.optionFreshChain",
     "?xvec \<sharp>* Some ?x = ?xvec \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.residualFreshChainSimp2",
     "?xvec \<sharp>* RTau ?P = ?xvec \<sharp>* ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.residualInject",
     "(RTau ?x1.0 = RTau ?y1.0) = (?x1.0 = ?y1.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Semantics.residualFreshSimp",
     "?x \<sharp> \<tau> \<prec> ?P = ?x \<sharp> ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.residualFreshChainSimp",
     "?X \<sharp>* (\<tau> \<prec> ?P) = ?X \<sharp>* ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.residualFreshChainSimp",
     "?xvec \<sharp>* (\<tau> \<prec> ?P) = ?xvec \<sharp>* ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics.bnEqvt",
     "?p \<bullet> bn ?\<alpha> = bn (?p \<bullet> ?\<alpha>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.okjectEqvt",
     "?p \<bullet> object ?\<alpha> = object (?p \<bullet> ?\<alpha>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.subjectEqvt",
     "?p \<bullet> subject ?\<alpha> = subject (?p \<bullet> ?\<alpha>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.BOresChainSupp",
     "supp (\<lparr>\<nu>*?xvec\<rparr>?B) = supp ?B - supp ?xvec",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Semantics.residualInject",
     "?M\<lparr>?N\<rparr> \<prec> ?P = RIn ?M ?N ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Semantics.boundOutputFreshSet",
     "?Xs \<sharp>* \<lparr>\<nu>?x\<rparr>?B = ?Xs \<sharp>* [?x].?B",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.boundOutputFreshSet",
     "?xvec \<sharp>* \<lparr>\<nu>?x\<rparr>?B = ?xvec \<sharp>* [?x].?B",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.BOresChainSimps",
     "(\<lparr>\<nu>*?xvec\<rparr>?B = \<lparr>\<nu>*?xvec\<rparr>?B') =
      (?B = ?B')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Semantics.action_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?action_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?action_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Semantics.boundOutputApp",
     "\<lparr>\<nu>*(?xvec @ ?yvec)\<rparr>?B =
      \<lparr>\<nu>*?xvec\<rparr>\<lparr>\<nu>*?yvec\<rparr>?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Semantics.residual_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?residual_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?residual_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Semantics.boundOutput_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?boundOutput_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?boundOutput_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Semantics.freshResidual4",
     "?x \<sharp> ?\<alpha> \<prec> ?P ==> ?x \<sharp> subject ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Semantics.freshResidualChain4",
     "?xvec \<sharp>* (?\<alpha> \<prec> ?P) ==>
      ?xvec \<sharp>* subject ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Semantics.bnFreshResidual",
     "bn ?\<alpha> \<sharp>* (?\<alpha> \<prec> ?P) =
      bn ?\<alpha> \<sharp>* subject ?\<alpha>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Semantics.action_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?action_Rep = ?pi2.0 \<bullet> ?action_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.residual_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?residual_Rep = ?pi2.0 \<bullet> ?residual_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.boundOutput_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?boundOutput_Rep =
      ?pi2.0 \<bullet> ?boundOutput_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Semantics.residualFreshChainSimp2",
     "?X \<sharp>* ROut ?M ?B = (?X \<sharp>* ?M & ?X \<sharp>* ?B)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Semantics.outputFresh",
     "?Xs \<sharp>* ?N \<prec>' ?P = (?Xs \<sharp>* ?N & ?Xs \<sharp>* ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Semantics.residualFreshChainSimp2",
     "?xvec \<sharp>* ROut ?M ?B =
      (?xvec \<sharp>* ?M & ?xvec \<sharp>* ?B)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Semantics.outputFresh",
     "?xvec \<sharp>* ?N \<prec>' ?P =
      (?xvec \<sharp>* ?N & ?xvec \<sharp>* ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Semantics.create_residualEqvt",
     "?p \<bullet> ?\<alpha> \<prec> ?P =
      ?p \<bullet> ?\<alpha> \<prec> ?p \<bullet> ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Semantics.BOresChainEqvt",
     "?perm \<bullet> \<lparr>\<nu>*?xvec\<rparr>?B =
      \<lparr>\<nu>*?perm \<bullet> ?xvec\<rparr>?perm \<bullet> ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Semantics.boundOutputFresh",
     "?x \<sharp> \<lparr>\<nu>*?xvec\<rparr>?B =
      (?x mem ?xvec | ?x \<sharp> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Semantics.residualInject",
     "(RTau ?Q = ?\<alpha> \<prec> ?P) = (?\<alpha> = \<tau> & ?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Semantics.residualInject",
     "(?\<alpha> \<prec> ?P = RTau ?Q) = (?\<alpha> = \<tau> & ?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Semantics.residualInject",
     "?M\<lparr>\<nu>*?xvec\<rparr>\<langle>?N\<rangle> \<prec> ?P =
      ROut ?M (\<lparr>\<nu>*?xvec\<rparr>?N \<prec>' ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Semantics.boundOutputFreshSimps",
     "?x \<sharp> ?xvec ==>
      ?x \<sharp> \<lparr>\<nu>*?xvec\<rparr>?B = ?x \<sharp> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Semantics.boundOutputFreshSimps",
     "?Xs \<sharp>* ?xvec ==>
      ?Xs \<sharp>* (\<lparr>\<nu>*?xvec\<rparr>?B) = ?Xs \<sharp>* ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Semantics.boundOutputFreshSimps",
     "?yvec \<sharp>* ?xvec ==>
      ?yvec \<sharp>* (\<lparr>\<nu>*?xvec\<rparr>?B) = ?yvec \<sharp>* ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Semantics.residualInject",
     "(ROut ?x2.0 ?x1.0 = ROut ?y2.0 ?y1.0) =
      (?x2.0 = ?y2.0 & ?x1.0 = ?y1.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Semantics.BOresChainSimps",
     "(?N' \<prec>' ?P' = ?N \<prec>' ?P) = (?N = ?N' & ?P = ?P')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Semantics.residualFresh2",
     "[| ?x \<sharp> ?\<alpha>; ?x \<sharp> ?P |]
      ==> ?x \<sharp> ?\<alpha> \<prec> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Semantics.residualFreshChain2",
     "[| ?X \<sharp>* ?\<alpha>; ?X \<sharp>* ?P |]
      ==> ?X \<sharp>* (?\<alpha> \<prec> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Semantics.residualFreshChain2",
     "[| ?xvec \<sharp>* ?\<alpha>; ?xvec \<sharp>* ?P |]
      ==> ?xvec \<sharp>* (?\<alpha> \<prec> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Semantics.freshResidual3",
     "[| ?x \<sharp> bn ?\<alpha>; ?x \<sharp> ?\<alpha> \<prec> ?P |]
      ==> ?x \<sharp> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Semantics.freshResidual3",
     "[| ?x \<sharp> bn ?\<alpha>; ?x \<sharp> ?\<alpha> \<prec> ?P |]
      ==> ?x \<sharp> ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Semantics.freshResidualChain3",
     "[| ?xvec \<sharp>* (?\<alpha> \<prec> ?P);
         ?xvec \<sharp>* bn ?\<alpha> |]
      ==> ?xvec \<sharp>* ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Semantics.freshResidualChain3",
     "[| ?xvec \<sharp>* (?\<alpha> \<prec> ?P);
         ?xvec \<sharp>* bn ?\<alpha> |]
      ==> ?xvec \<sharp>* ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Semantics.boundOutputFreshSet",
     "?Xs \<sharp>* (\<lparr>\<nu>*?xvec\<rparr>?B) =
      (ALL x:?Xs. x mem ?xvec | x \<sharp> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2), t_empty))),
    ("Semantics.boundOutputEqFresh",
     "[| \<lparr>\<nu>?x\<rparr>?B = \<lparr>\<nu>?y\<rparr>?C;
         ?x \<sharp> ?B |]
      ==> ?y \<sharp> ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Semantics.actionFresh",
     "?x \<sharp> ?\<alpha> =
      (?x \<sharp> subject ?\<alpha> &
       ?x \<sharp> bn ?\<alpha> & ?x \<sharp> object ?\<alpha>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Semantics.actionFreshChain",
     "?X \<sharp>* ?\<alpha> =
      (?X \<sharp>* subject ?\<alpha> &
       ?X \<sharp>* bn ?\<alpha> & ?X \<sharp>* object ?\<alpha>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Semantics.actionFreshChain",
     "?xvec \<sharp>* ?\<alpha> =
      (?xvec \<sharp>* subject ?\<alpha> &
       ?xvec \<sharp>* bn ?\<alpha> & ?xvec \<sharp>* object ?\<alpha>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Semantics.boundOutputFreshSet",
     "?yvec \<sharp>* (\<lparr>\<nu>*?xvec\<rparr>?B) =
      (ALL x:set ?yvec. x mem ?xvec | x \<sharp> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         t_empty))),
    ("Semantics.residualFreshChainSimp2",
     "?X \<sharp>* RIn ?M ?N ?P =
      (?X \<sharp>* ?M & ?X \<sharp>* ?N & ?X \<sharp>* ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Semantics.residualFreshChainSimp2",
     "?xvec \<sharp>* RIn ?M ?N ?P =
      (?xvec \<sharp>* ?M & ?xvec \<sharp>* ?N & ?xvec \<sharp>* ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Semantics.residualInject",
     "(?\<alpha> \<prec> ?P = RIn ?M ?N ?Q) =
      (?P = ?Q & ?\<alpha> = ?M\<lparr>?N\<rparr>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("Semantics.residualInject",
     "(RIn ?M ?N ?Q = ?\<alpha> \<prec> ?P) =
      (?P = ?Q & ?\<alpha> = ?M\<lparr>?N\<rparr>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)))
           ))),
    ("Semantics.alphaBoundOutput",
     "?y \<sharp> ?B ==>
      \<lparr>\<nu>?x\<rparr>?B =
      \<lparr>\<nu>?y\<rparr>([(?x, ?y)] \<bullet> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)),
                 template_hole 0)),
             template_var 1))))),
    ("Semantics.boundOutputChainEqLength",
     "\<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
      \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q ==>
      length ?xvec = length ?yvec",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 5),
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app (template_hole 0, template_var 5),
         template_app (template_hole 0, template_var 2)))),
    ("Semantics.openInjectAuxAuxAux",
     "EX y yvec. ?x # ?xvec = yvec @ [y] & length ?xvec = length yvec",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Semantics.residualFreshSimp",
     "?x \<sharp> ?M\<lparr>?N\<rparr> \<prec> ?P =
      (?x \<sharp> ?M & ?x \<sharp> ?N & ?x \<sharp> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Semantics.residualFreshChainSimp",
     "?X \<sharp>* (?M\<lparr>?N\<rparr> \<prec> ?P) =
      (?X \<sharp>* ?M & ?X \<sharp>* ?N & ?X \<sharp>* ?P)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Semantics.residualFreshChainSimp",
     "?xvec \<sharp>* (?M\<lparr>?N\<rparr> \<prec> ?P) =
      (?xvec \<sharp>* ?M & ?xvec \<sharp>* ?N & ?xvec \<sharp>* ?P)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Semantics.boundOutputEqSupp",
     "[| \<lparr>\<nu>?x\<rparr>?B = \<lparr>\<nu>?y\<rparr>?C;
         ?x : supp ?B |]
      ==> ?y : supp ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Semantics.residualFreshSimp",
     "?x \<sharp> ?M\<lparr>\<nu>*?xvec\<rparr>\<langle>?N\<rangle> \<prec> ?P =
      (?x \<sharp> ?M &
       ?x \<sharp> \<lparr>\<nu>*?xvec\<rparr>?N \<prec>' ?P)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 4),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Semantics.residualFreshChainSimp",
     "?X \<sharp>* (?M\<lparr>\<nu>*?yvec\<rparr>\<langle>?N\<rangle> \<prec> ?P) =
      (?X \<sharp>* ?M &
       ?X \<sharp>* (\<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?P))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 4),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Semantics.residualFreshChainSimp",
     "?xvec \<sharp>* (?M\<lparr>\<nu>*?yvec\<rparr>\<langle>?N\<rangle> \<prec> ?P) =
      (?xvec \<sharp>* ?M &
       ?xvec \<sharp>* (\<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?P))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 4),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Semantics.residualInject",
     "(RIn ?x3.0 ?x2.0 ?x1.0 = RIn ?y3.0 ?y2.0 ?y1.0) =
      (?x3.0 = ?y3.0 & ?x2.0 = ?y2.0 & ?x1.0 = ?y1.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Semantics.BOresChainSimps",
     "(?N' \<prec>' ?P' = \<lparr>\<nu>*?xvec\<rparr>?N \<prec>' ?P) =
      (?xvec = [] & ?N = ?N' & ?P = ?P')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 4), template_var 3),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)))
           ))),
    ("Semantics.BOresChainSimps",
     "(\<lparr>\<nu>*?xvec\<rparr>?N \<prec>' ?P = ?N' \<prec>' ?P') =
      (?xvec = [] & ?N = ?N' & ?P = ?P')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 4),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Semantics.residualInject''",
     "bn ?\<alpha> = bn ?\<beta> ==>
      (?\<alpha> \<prec> ?P = ?\<beta> \<prec> ?Q) =
      (?\<alpha> = ?\<beta> & ?P = ?Q)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3),
          template_app (template_hole 6, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             )))),
    ("Semantics.residualFresh",
     "?x \<sharp> ?\<alpha> \<prec> ?P =
      (?x \<sharp> subject ?\<alpha> &
       (?x mem bn ?\<alpha> |
        ?x \<sharp> object ?\<alpha> & ?x \<sharp> ?P))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Semantics.residualInject",
     "(?\<alpha> \<prec> ?P = ROut ?M ?B) =
      (EX xvec N.
          ?\<alpha> = ?M\<lparr>\<nu>*xvec\<rparr>\<langle>N\<rangle> &
          ?B = \<lparr>\<nu>*xvec\<rparr>N \<prec>' ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Semantics.residualInject",
     "(ROut ?M ?B = ?\<alpha> \<prec> ?P) =
      (EX xvec N.
          ?\<alpha> = ?M\<lparr>\<nu>*xvec\<rparr>\<langle>N\<rangle> &
          ?B = \<lparr>\<nu>*xvec\<rparr>N \<prec>' ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Semantics.openInjectAuxAux",
     "length (?xvec1.0 @ ?xvec2.0) = length ?yvec ==>
      EX yvec1 yvec2.
         ?yvec = yvec1 @ yvec2 &
         length ?xvec1.0 = length yvec1 & length ?xvec2.0 = length yvec2",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Semantics.boundOutputChainAlpha'",
     "[| ?xvec \<sharp>* ?B; set ?p <= set ?xvec \<times> set ?yvec;
         ?yvec \<sharp>* (\<lparr>\<nu>*?zvec\<rparr>?B) |]
      ==> \<lparr>\<nu>*?zvec\<rparr>?B =
          \<lparr>\<nu>*?p \<bullet> ?zvec\<rparr>?p \<bullet> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 4)),
            t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3))))),
    ("Semantics.openInjectAux",
     "length (?xvec1.0 @ ?x # ?xvec2.0) = length ?yvec ==>
      EX yvec1 y yvec2.
         ?yvec = yvec1 @ y # yvec2 &
         length ?xvec1.0 = length yvec1 & length ?xvec2.0 = length yvec2",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Semantics.boundOutputChainAlpha",
     "[| (?p \<bullet> ?xvec) \<sharp>* ?B;
         set ?p <= set ?xvec \<times> set (?p \<bullet> ?xvec);
         set ?xvec <= set ?yvec |]
      ==> \<lparr>\<nu>*?yvec\<rparr>?B =
          \<lparr>\<nu>*?p \<bullet> ?yvec\<rparr>?p \<bullet> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 8, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1))))),
    ("Semantics.actionCases",
     "[| !!M N. ?\<alpha> = M\<lparr>N\<rparr> ==> ?Prop;
         !!M xvec N.
            ?\<alpha> = M\<lparr>\<nu>*xvec\<rparr>\<langle>N\<rangle> ==>
            ?Prop;
         ?\<alpha> = \<tau> ==> ?Prop |]
      ==> ?Prop",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputChainSwap",
     "[| ?y \<sharp> ?N; ?y \<sharp> ?P; ?x mem ?xvec |]
      ==> \<lparr>\<nu>*?xvec\<rparr>?N \<prec>' ?P =
          \<lparr>\<nu>*[(?x, ?y)] \<bullet>
                        ?xvec\<rparr>([(?x, ?y)] \<bullet>
?N) \<prec>' ([(?x, ?y)] \<bullet> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 4)),
                   template_hole 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 4)),
                     template_hole 2)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 4)),
                   template_hole 2)),
               template_var 2)))))),
    ("Semantics.actionScopeDest",
     "[| ?\<alpha> \<prec> ?P = ?\<beta> \<prec> \<lparr>\<nu>?x\<rparr>?Q;
         ?x \<sharp> bn ?\<alpha>; ?x \<sharp> bn ?\<beta>;
         !!R. [| ?P = \<lparr>\<nu>?x\<rparr>R;
                 ?\<alpha> \<prec> R = ?\<beta> \<prec> ?Q |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputChainOpenIH",
     "[| \<lparr>\<nu>*?xvec\<rparr>\<lparr>\<nu>?x\<rparr>?B =
         \<lparr>\<nu>*?yvec\<rparr>\<lparr>\<nu>?y\<rparr>?B';
         length ?xvec = length ?yvec; ?x \<sharp> ?B'; ?x \<sharp> ?xvec;
         ?x \<sharp> ?yvec |]
      ==> \<lparr>\<nu>*?xvec\<rparr>?B =
          \<lparr>\<nu>*?yvec\<rparr>[(?x, ?y)] \<bullet> ?B'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 5),
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0))),
        template_equation
         (template_app (template_hole 6, template_var 5),
          template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 5), template_var 3),
         template_app
          (template_app (template_hole 9, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1)),
                 template_hole 0)),
             template_var 0))))),
    ("Semantics.boundOutputChainAlpha''",
     "[| (?p \<bullet> ?xvec) \<sharp>* ?M;
         (?p \<bullet> ?xvec) \<sharp>* ?P;
         set ?p <= set ?xvec \<times> set (?p \<bullet> ?xvec);
         set ?xvec <= set ?yvec |]
      ==> \<lparr>\<nu>*?yvec\<rparr>?M \<prec>' ?P =
          \<lparr>\<nu>*?p \<bullet>
                        ?yvec\<rparr>(?p \<bullet>
?M) \<prec>' (?p \<bullet> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_var 3)),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 4),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3)),
            t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 11, template_var 4),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)))))),
    ("Semantics.boundOutputPar2Dest",
     "[| \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' (?Q \<parallel> ?R);
         ?xvec \<sharp>* ?Q; ?yvec \<sharp>* ?Q;
         !!T. [| ?P = ?Q \<parallel> T;
                 \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' T =
                 \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?R |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 7),
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)),
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputPar1Dest",
     "[| \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' (?Q \<parallel> ?R);
         ?xvec \<sharp>* ?R; ?yvec \<sharp>* ?R;
         !!T. [| ?P = T \<parallel> ?R;
                 \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' T =
                 \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 7),
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)),
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputScopeDest",
     "[| \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' \<lparr>\<nu>?z\<rparr>?Q;
         ?z \<sharp> ?xvec; ?z \<sharp> ?yvec;
         !!R. [| ?P = \<lparr>\<nu>?z\<rparr>R;
                 \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' R =
                 \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 7),
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)),
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.alphaOutputResidual",
     "[| (?p \<bullet> ?xvec) \<sharp>* ?N;
         (?p \<bullet> ?xvec) \<sharp>* ?P;
         set ?p <= set ?xvec \<times> set (?p \<bullet> ?xvec);
         set ?xvec <= set ?yvec |]
      ==> ?M\<lparr>\<nu>*?yvec\<rparr>\<langle>?N\<rangle> \<prec> ?P =
          ?M\<lparr>\<nu>*(?p \<bullet>
                           ?yvec)\<rparr>\<langle>(?p \<bullet>
             ?N)\<rangle> \<prec> ?p \<bullet> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4)),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 5),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 4)),
            t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 4),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 11, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 3))),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 2))))),
    ("Semantics.boundOutputChainEq",
     "[| \<lparr>\<nu>*?xvec\<rparr>?B = \<lparr>\<nu>*?yvec\<rparr>?B';
         ?xvec \<sharp>* ?yvec; length ?xvec = length ?yvec |]
      ==> EX p. set p <= set ?xvec \<times> set ?yvec &
                distinctPerm p &
                ?B = p \<bullet> ?B' &
                set (map fst p) <= supp ?B &
                ?xvec \<sharp>* ?B' & ?yvec \<sharp>* ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 16, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 13, template_var 3),
          template_app (template_hole 13, template_var 1))],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Semantics.actionPar1Dest",
     "[| ?\<alpha> \<prec> ?P = ?\<beta> \<prec> ?Q \<parallel> ?R;
         bn ?\<alpha> \<sharp>* bn ?\<beta>;
         !!T p.
            [| set p <= set (bn ?\<alpha>) \<times> set (bn ?\<beta>);
               ?P = T \<parallel> (p \<bullet> ?R);
               ?\<alpha> \<prec> T = ?\<beta> \<prec> ?Q |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_app (template_hole 8, template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.actionPar2Dest",
     "[| ?\<alpha> \<prec> ?P = ?\<beta> \<prec> ?Q \<parallel> ?R;
         bn ?\<alpha> \<sharp>* bn ?\<beta>;
         !!T p.
            [| set p <= set (bn ?\<alpha>) \<times> set (bn ?\<beta>);
               ?P = (p \<bullet> ?Q) \<parallel> T;
               ?\<alpha> \<prec> T = ?\<beta> \<prec> ?R |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_app (template_hole 8, template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputEqSupp'",
     "[| \<lparr>\<nu>?x\<rparr>(\<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P) =
         \<lparr>\<nu>?y\<rparr>(\<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q);
         ?x ~= ?y; ?x \<sharp> ?yvec; ?x \<sharp> ?xvec; ?y \<sharp> ?xvec;
         ?y \<sharp> ?yvec; ?xvec \<sharp>* ?yvec; ?x : supp ?M |]
      ==> ?y : supp ?N",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 7),
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4))),
          template_app
           (template_app (template_hole 8, template_var 3),
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0)))),
        template_negation
         (template_equation (template_var 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 7),
              template_app (template_hole 0, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Semantics.boundOutputChainEq'",
     "[| \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q;
         ?xvec \<sharp>* ?yvec |]
      ==> EX p. set p <= set ?xvec \<times> set ?yvec &
                distinctPerm p &
                ?M = p \<bullet> ?N &
                ?P = p \<bullet> ?Q &
                ?xvec \<sharp>* ?N &
                ?xvec \<sharp>* ?Q &
                ?yvec \<sharp>* ?M & ?yvec \<sharp>* ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 5),
            template_app
             (template_app (template_hole 14, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Semantics.boundOutputPar1Dest'",
     "[| \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' (?Q \<parallel> ?R);
         ?xvec \<sharp>* ?yvec;
         !!T p.
            [| set p <= set ?xvec \<times> set ?yvec;
               ?P = T \<parallel> (p \<bullet> ?R);
               \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' T =
               \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 7),
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)),
          template_app
           (template_app (template_hole 11, template_var 4),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 7),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputPar2Dest'",
     "[| \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' (?Q \<parallel> ?R);
         ?xvec \<sharp>* ?yvec;
         !!T p.
            [| set p <= set ?xvec \<times> set ?yvec;
               ?P = (p \<bullet> ?Q) \<parallel> T;
               \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' T =
               \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?R |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 7),
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)),
          template_app
           (template_app (template_hole 11, template_var 4),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 7),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputChainEq''",
     "[| \<lparr>\<nu>*?xvec\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q;
         ?xvec \<sharp>* ?yvec; distinct ?xvec; distinct ?yvec;
         !!p. [| set p <= set ?xvec \<times> set (p \<bullet> ?xvec);
                 distinctPerm p; ?yvec = p \<bullet> ?xvec;
                 ?N = p \<bullet> ?M; ?Q = p \<bullet> ?P;
                 ?xvec \<sharp>* ?N; ?xvec \<sharp>* ?Q;
                 (p \<bullet> ?xvec) \<sharp>* ?M;
                 (p \<bullet> ?xvec) \<sharp>* ?P |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 6),
            template_app
             (template_app (template_hole 16, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 17, template_var 3),
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 6),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 6)),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputOpenDest",
     "[| \<lparr>\<nu>*(?xvec1.0 @ ?x # ?xvec2.0)\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q;
         ?x \<sharp> ?xvec1.0; ?x \<sharp> ?yvec; ?x \<sharp> ?N;
         ?x \<sharp> ?Q; distinct ?yvec;
         !!yvec1 y yvec2.
            [| ?yvec = yvec1 @ y # yvec2; length ?xvec1.0 = length yvec1;
               length ?xvec2.0 = length yvec2;
               \<lparr>\<nu>*(?xvec1.0 @ ?xvec2.0)\<rparr>?M \<prec>' ?P =
               \<lparr>\<nu>*(yvec1 @
                              yvec2)\<rparr>([(?x, y)] \<bullet>
       ?N) \<prec>' ([(?x, y)] \<bullet> ?Q) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 8),
                template_app
                 (template_app (template_hole 15, template_var 7),
                  template_var 6))),
            template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 17, template_var 3),
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 7),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.boundOutputOpenDest'",
     "[| \<lparr>\<nu>*(?xvec1.0 @ ?x # ?xvec2.0)\<rparr>?M \<prec>' ?P =
         \<lparr>\<nu>*?yvec\<rparr>?N \<prec>' ?Q;
         ?x \<sharp> ?xvec1.0; ?x \<sharp> ?yvec; ?x \<sharp> ?N;
         ?x \<sharp> ?Q;
         !!yvec1 y yvec2.
            [| ?yvec = yvec1 @ y # yvec2; length ?xvec1.0 = length yvec1;
               length ?xvec2.0 = length yvec2;
               \<lparr>\<nu>*(?xvec1.0 @ ?xvec2.0)\<rparr>?M \<prec>' ?P =
               \<lparr>\<nu>*(yvec1 @
                              [(?x, y)] \<bullet>
                              yvec2)\<rparr>([(?x, y)] \<bullet>
       ?N) \<prec>' ([(?x, y)] \<bullet> ?Q) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 8),
                template_app
                 (template_app (template_hole 15, template_var 7),
                  template_var 6))),
            template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 17, template_var 3),
            template_app
             (template_app (template_hole 14, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 7),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0)))]
