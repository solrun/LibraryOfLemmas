Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Subst_TermMoreTemplates" via "Draft.Subst_Term" via "Draft.Chain" via "HOL-Nominal.Nominal")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Subst_TermMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Subst_TermMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Subst_TermMoreTemplates" via "Draft.Subst_Term" via "Draft.Chain" via "HOL-Nominal.Nominal")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.512s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Subst_TermMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.275s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Subst_TermMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.780s cpu time, 0.067s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Subst_TermMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Infinite_Set"
### 0.337s elapsed time, 1.351s cpu time, 0.108s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Subst_TermMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.453s elapsed time, 1.810s cpu time, 0.188s GC time
Loading theory "HOL-Nominal.Nominal" (required by "Draft.Subst_TermMoreTemplates" via "Draft.Subst_Term" via "Draft.Chain")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 0.984s elapsed time, 3.713s cpu time, 0.919s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.034s elapsed time, 3.900s cpu time, 0.919s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
overloading
  perm_fun \<equiv> perm :: ('x * 'x) list => ('a => 'b) => 'a => 'b
  perm_bool \<equiv> perm :: ('x * 'x) list => bool => bool
  perm_set \<equiv> perm :: ('x * 'x) list => 'a set => 'a set
  perm_unit \<equiv> perm :: ('x * 'x) list => unit => unit
  perm_prod \<equiv> perm :: ('x * 'x) list => 'a * 'b => 'a * 'b
  perm_list \<equiv> perm :: ('x * 'x) list => 'a list => 'a list
  perm_option \<equiv> perm :: ('x * 'x) list => 'a option => 'a option
  perm_char \<equiv> perm :: ('x * 'x) list => char => char
  perm_nat \<equiv> perm :: ('x * 'x) list => nat => nat
  perm_int \<equiv> perm :: ('x * 'x) list => int => int
  perm_noption \<equiv> perm :: ('x * 'x) list => 'a noption => 'a noption
  perm_nprod \<equiv> perm ::
    ('x * 'x) list => ('a, 'b) nprod => ('a, 'b) nprod
Found termination order: "size <*mlex*> {}"
consts
  perm_unit :: "('x * 'x) list => unit => unit"
consts
  perm_prod :: "('x * 'x) list => 'a * 'b => 'a * 'b"
consts
  perm_list :: "('x * 'x) list => 'a list => 'a list"
consts
  perm_option :: "('x * 'x) list => 'a option => 'a option"
consts
  perm_noption :: "('x * 'x) list => 'a noption => 'a noption"
consts
  perm_nprod :: "('x * 'x) list => ('a, 'b) nprod => ('a, 'b) nprod"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val mksimps_pairs =
   [("Nominal.fresh",
     ["?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?x",
      "?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?y"]),
    ("Set.Ball", ["[| ALL x:?A. ?P x; ?x : ?A |] ==> ?P ?x"]),
    ("HOL.implies", ["[| ?P --> ?Q; ?P |] ==> ?Q"]),
    ("HOL.conj", ["?P & ?Q ==> ?P", "?P & ?Q ==> ?Q"]),
    ("HOL.All", ["ALL x. ?P x ==> ?P ?x"]), ("HOL.True", []),
    ("HOL.False", []),
    ("HOL.If",
     ["if ?P1 then ?Q1 else ?R1 ==> (?P1 --> ?Q1) & (~ ?P1 --> ?R1)"])]:
   (string * thm list) list
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.938s elapsed time, 5.821s cpu time, 1.160s GC time
Loading theory "Draft.Templates" (required by "Draft.Subst_TermMoreTemplates" via "Draft.ExtrEqs")
overloading
  fresh_star_set \<equiv> fresh_star :: 'b set => 'a => bool
overloading
  frsh_star_list \<equiv> fresh_star :: 'b list => 'a => bool
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Subst_TermMoreTemplates")
Proofs for inductive predicate(s) "ABS_setp"
  Proving monotonicity ...
### ML warning (line 73 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Pattern is not exhaustive.
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (typrm) has not been referenced.
### ML warning (line 149 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (typrm) has not been referenced.
signature NOMINAL_THMDECLS =
  sig
    val eqvt_add: attribute
    val eqvt_del: attribute
    val eqvt_force_add: attribute
    val eqvt_force_del: attribute
    val get_eqvt_thms: Proof.context -> thm list
    val nominal_eqvt_debug: bool Config.T
    val setup: theory -> theory
  end
structure NominalThmDecls: NOMINAL_THMDECLS
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.794s elapsed time, 1.923s cpu time, 0.840s GC time
### ML warning (line 132 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (prems) has not been referenced.
### ML warning (line 171 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (swap_eqs) has not been referenced.
### ML warning (line 205 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (prm_eqs) has not been referenced.
### ML warning (line 241 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (perm_defs) has not been referenced.
### ML warning (line 263 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 322 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 369 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 368 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (fs_inst_thms) has not been referenced.
### ML warning (line 416 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 417 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 453 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 454 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 636 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (cp_bool_inst) has not been referenced.
### ML warning (line 751 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (supp_def) has not been referenced.
### ML warning (line 893 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (inst_pt_pt_at_cp) has not been referenced.
signature NOMINAL_ATOMS =
  sig
    val at_inst_of: theory -> string -> thm
    type atom_info
    val atoms_of: theory -> string list
    val cp_class_of: theory -> string -> string -> string
    val cp_inst_of: theory -> string -> string -> thm
    val create_nom_typedecls: string list -> theory -> theory
    val dj_thm_of: theory -> string -> string -> thm
    val fs_class_of: theory -> string -> string
    val get_atom_info: theory -> string -> atom_info option
    val get_atom_infos: theory -> atom_info Symtab.table
    val mk_permT: typ -> typ
    val pt_class_of: theory -> string -> string
    val pt_inst_of: theory -> string -> thm
    val the_atom_info: theory -> string -> atom_info
  end
structure NominalAtoms: NOMINAL_ATOMS
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (pi) has not been referenced.
### ML warning (line 120 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 132 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (pi) has not been referenced.
### ML warning (line 291 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 290 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 289 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 312 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Pattern is not exhaustive.
### ML warning (line 356 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Pattern is not exhaustive.
### ML warning (line 376 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (eqvt_simp_tac) has not been referenced.
signature NOMINAL_PERMEQ =
  sig
    val finite_guess_meth: (Proof.context -> Proof.method) context_parser
    val finite_guess_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val finite_guess_tac: Proof.context -> int -> tactic
    val fresh_guess_meth: (Proof.context -> Proof.method) context_parser
    val fresh_guess_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val fresh_guess_tac: Proof.context -> int -> tactic
    val perm_extend_simp_meth:
       (Proof.context -> Proof.method) context_parser
    val perm_extend_simp_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val perm_extend_simp_tac: Proof.context -> int -> tactic
    val perm_simp_meth: (Proof.context -> Proof.method) context_parser
    val perm_simp_meth_debug: (Proof.context -> Proof.method) context_parser
    val perm_simp_tac: Proof.context -> int -> tactic
    val perm_simproc_app: simproc
    val perm_simproc_fun: simproc
    val supports_meth: (Proof.context -> Proof.method) context_parser
    val supports_meth_debug: (Proof.context -> Proof.method) context_parser
    val supports_tac: Proof.context -> int -> tactic
  end
structure NominalPermeq: NOMINAL_PERMEQ
### ML warning (line 94 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (u) has not been referenced.
### ML warning (line 90 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 89 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (j) has not been referenced.
### ML warning (line 137 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 139 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 150 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (i) has not been referenced.
val gen_res_inst_tac_term = fn:
   Proof.context ->
     ((typ * ctyp) list -> (term * cterm) list -> thm -> thm) ->
       (typ * typ) list ->
         (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val res_inst_tac_term = fn:
   Proof.context ->
     (typ * typ) list ->
       (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val res_inst_tac_term' = fn:
   Proof.context ->
     (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val cut_inst_tac_term' = fn:
   Proof.context -> (term * term) list -> thm -> int -> thm -> thm Seq.seq
val get_dyn_thm = fn: theory -> xstring -> string -> thm
val at_exists_fresh' =
   "[| at TYPE(?'x); finite (supp ?x) |] ==> EX c. c \<sharp> ?x": thm
val fresh_fun_app' =
   "[| pt TYPE(?'a) TYPE(?'x); at TYPE(?'x); finite (supp ?h);
       ?a \<sharp> ?h; ?a \<sharp> ?h ?a |]
    ==> fresh_fun ?h = ?h ?a":
   thm
val fresh_prod = "?a \<sharp> (?x, ?y) = (?a \<sharp> ?x & ?a \<sharp> ?y)":
   thm
val generate_fresh_tac = fn: Proof.context -> string -> tactic
val get_inner_fresh_fun = fn: term -> string option
val generate_fresh_fun_tac = fn: Proof.context -> tactic
val search_fun = fn: EqSubst.searchinfo -> term -> EqSubst.match Seq.seq
val search_fun_asm = fn:
   EqSubst.searchinfo -> int -> term -> EqSubst.match EqSubst.skipseq
val subst_inner_tac = fn: Proof.context -> thm -> int -> thm -> thm Seq.seq
val subst_inner_asm_tac_aux = fn:
   int -> Proof.context -> thm -> int -> tactic
val subst_inner_asm_tac = fn: Proof.context -> thm -> int -> tactic
val fresh_fun_tac = fn: Proof.context -> bool -> int -> tactic
### ML warning (line 62 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (put_nominal_datatypes) has not been referenced.
### ML warning (line 89 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 93 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 101 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 183 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (constrs) has not been referenced.
### ML warning (line 183 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (tvs) has not been referenced.
### ML warning (line 185 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (cargs) has not been referenced.
### ML warning (line 189 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (rps) has not been referenced.
### ML warning (line 197 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (mx) has not been referenced.
### ML warning (line 199 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (mx) has not been referenced.
### ML warning (line 202 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (new_type_names') has not been referenced.
### ML warning (line 257 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (perm_simps) has not been referenced.
### ML warning (line 277 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 278 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 278 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (T1) has not been referenced.
### ML warning (line 316 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (at_pt_inst) has not been referenced.
### ML warning (line 441 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (perm_thmss) has not been referenced.
### ML warning (line 474 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 553 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 692 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 708 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 711 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 744 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (full_new_type_names) has not been referenced.
### ML warning (line 780 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 829 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 830 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 850 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (dist_rewrites) has not been referenced.
### ML warning (line 1137 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1156 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 1162 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (xss) has not been referenced.
### ML warning (line 1213 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (induct) has not been referenced.
### ML warning (line 1216 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1228 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (induct') has not been referenced.
### ML warning (line 1245 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1247 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1269 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1280 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1312 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (prems2) has not been referenced.
### ML warning (line 1334 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1366 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1400 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1439 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1465 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 1464 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (rs) has not been referenced.
### ML warning (line 1645 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1649 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1662 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1699 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 1717 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1773 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (asms) has not been referenced.
### ML warning (line 1775 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1777 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1778 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1780 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 1786 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1874 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1875 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1881 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1909 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1926 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1932 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1949 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1963 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1988 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 2055 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 2057 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
signature NOMINAL_DATATYPE =
  sig
    type descr
    val fresh_const: typ -> typ -> term
    val fresh_star_const: typ -> typ -> term
    val get_nominal_datatype:
       theory -> string -> nominal_datatype_info option
    val get_nominal_datatypes: theory -> nominal_datatype_info Symtab.table
    val mk_not_sym: thm list -> thm list
    val mk_perm: typ list -> term -> term -> term
    val nominal_datatype:
       Old_Datatype_Aux.config -> Old_Datatype.spec list -> theory -> theory
    val nominal_datatype_cmd:
       Old_Datatype_Aux.config ->
         Old_Datatype.spec_cmd list -> theory -> theory
    type nominal_datatype_info
    val perm_of_pair: term * term -> term
    val perm_simproc: simproc
  end
structure NominalDatatype: NOMINAL_DATATYPE
### ML warning (line 144 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Matches are not exhaustive.
### ML warning (line 155 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (rs) has not been referenced.
### ML warning (line 155 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (ls) has not been referenced.
### ML warning (line 173 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 204 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (tname) has not been referenced.
### ML warning (line 213 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 223 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (dt_info) has not been referenced.
### ML warning (line 233 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 232 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 248 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 287 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 289 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 290 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 291 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 292 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
signature NOMINAL_PRIMREC =
  sig
    val primrec:
       term list option ->
         term option ->
           (binding * typ option * mixfix) list ->
             (binding * typ option * mixfix) list ->
               Specification.multi_specs -> local_theory -> Proof.state
    val primrec_cmd:
       string list option ->
         string option ->
           (binding * string option * mixfix) list ->
             (binding * string option * mixfix) list ->
               Specification.multi_specs_cmd -> local_theory -> Proof.state
  end
structure NominalPrimrec: NOMINAL_PRIMREC
### ML warning (line 74 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 74 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 63 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 64 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 83 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 83 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 82 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (names) has not been referenced.
### ML warning (line 94 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 107 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern 3 is redundant.
### ML warning (line 121 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 121 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (s') has not been referenced.
### ML warning (line 207 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 213 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 306 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 371 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 420 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (name) has not been referenced.
### ML warning (line 422 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 423 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 437 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 451 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (prem) has not been referenced.
### ML warning (line 478 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 574 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 623 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 635 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
signature NOMINAL_INDUCTIVE =
  sig
    val prove_eqvt: string -> string list -> local_theory -> local_theory
    val prove_strong_ind:
       string -> (string * string list) list -> local_theory -> Proof.state
  end
structure NominalInductive: NOMINAL_INDUCTIVE
### ML warning (line 56 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (transp) has not been referenced.
### ML warning (line 79 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 79 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 67 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 68 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 87 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 107 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (names) has not been referenced.
### ML warning (line 99 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 112 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern 3 is redundant.
### ML warning (line 126 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 126 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (s') has not been referenced.
### ML warning (line 161 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (ind_params) has not been referenced.
### ML warning (line 163 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (elims) has not been referenced.
### ML warning (line 194 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 233 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 239 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 329 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 337 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 341 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 370 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (pi_sets) has not been referenced.
### ML warning (line 462 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (induct_cases') has not been referenced.
### ML warning (line 465 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (thsss) has not been referenced.
### ML warning (line 479 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
signature NOMINAL_INDUCTIVE2 =
  sig
    val prove_strong_ind:
       string ->
         string option ->
           (string * string list) list -> local_theory -> Proof.state
  end
structure NominalInductive2: NOMINAL_INDUCTIVE2
### ML warning (line 17 of "~~/src/HOL/Nominal/nominal_induct.ML"):
### Value identifier (tupleT) has not been referenced.
### ML warning (line 48 of "~~/src/HOL/Nominal/nominal_induct.ML"):
### Pattern is not exhaustive.
structure NominalInduct:
  sig
    val nominal_induct_method:
       (Proof.context -> Proof.method) context_parser
    val nominal_induct_tac:
       bool ->
         (binding option * (term * bool)) option list list ->
           (string * typ) list ->
             (string * typ) list list ->
               thm list -> thm list -> int -> context_tactic
  end
### theory "HOL-Nominal.Nominal"
### 4.345s elapsed time, 9.575s cpu time, 2.836s GC time
Loading theory "Draft.Chain" (required by "Draft.Subst_TermMoreTemplates" via "Draft.Subst_Term")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Chain"
### 0.634s elapsed time, 0.696s cpu time, 0.083s GC time
Loading theory "Draft.Subst_Term" (required by "Draft.Subst_TermMoreTemplates")
### Ambiguous input (line 15 of "$AFP/Psi_Calculi/Subst_Term.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" xvec)
###     ("_idts" ("_position" Tvec) ("_idts" ("_position" T) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" length) ("_position" xvec))
###           ("_applC" ("_position" length) ("_position" Tvec))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" distinct) ("_position" xvec)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" set) ("_position" xvec))
###               ("_applC" ("_position" supp) ("_position" T))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh"
###                 ("_constrain" ("_position" x) ("_type_name" name))
###                 ("\<^fixed>subst" ("_position" T) ("_position" xvec)
###                   ("_position" Tvec))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" Tvec)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" xvec)
###     ("_idts" ("_position" Tvec) ("_idts" ("_position" T) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" length) ("_position" xvec))
###           ("_applC" ("_position" length) ("_position" Tvec))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" distinct) ("_position" xvec)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" set) ("_position" xvec))
###               ("_applC" ("_position" supp) ("_position" T))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>subst"
###                 ("\<^const>Nominal.fresh"
###                   ("_constrain" ("_position" x) ("_type_name" name))
###                   ("_position" T))
###                 ("_position" xvec) ("_position" Tvec)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" Tvec)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale substType
  fixes
    subst :: "'a => name list => 'b list => 'a"
      (\<open>_[_::=_]\<close> [80, 80, 80] 130)
  assumes "substType subst"
### Ambiguous input (line 55 of "$AFP/Psi_Calculi/Subst_Term.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>subst"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" M))
###     ("_position" xvec) ("_position" Tvec)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" x)
###     ("\<^fixed>subst" ("_position" M) ("_position" xvec)
###       ("_position" Tvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Psi_Calculi/Subst_Term.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>subst"
###     ("\<^const>Nominal.fresh_star" ("_position" yvec) ("_position" M))
###     ("_position" xvec) ("_position" Tvec)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh_star" ("_position" yvec)
###     ("\<^fixed>subst" ("_position" M) ("_position" xvec)
###       ("_position" Tvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Psi_Calculi/Subst_Term.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>subst"
###     ("\<^const>Nominal.fresh_star" ("_position" Xs) ("_position" T))
###     ("_position" xvec) ("_position" Tvec)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh_star" ("_position" Xs)
###     ("\<^fixed>subst" ("_position" T) ("_position" xvec)
###       ("_position" Tvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 115 of "$AFP/Psi_Calculi/Subst_Term.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>subst"
###     ("\<^const>Nominal.fresh_star" ("_position" xvec) ("_position" T))
###     ("_position" xvec) ("_position" Tvec)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh_star" ("_position" xvec)
###     ("\<^fixed>subst" ("_position" T) ("_position" xvec)
###       ("_position" Tvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/Psi_Calculi/Subst_Term.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.seqSubst"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" T))
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" x)
###     ("\<^const>local.seqSubst" ("_position" T) ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/Psi_Calculi/Subst_Term.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.seqSubst"
###     ("\<^const>Nominal.fresh_star" ("_position" xvec) ("_position" T))
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh_star" ("_position" xvec)
###     ("\<^const>local.seqSubst" ("_position" T) ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Subst_Term"
### 0.082s elapsed time, 0.084s cpu time, 0.000s GC time
Loading theory "Draft.Subst_TermMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Subst_TermMoreTemplates"
### 0.336s elapsed time, 0.443s cpu time, 0.000s GC time
val it = (): unit
