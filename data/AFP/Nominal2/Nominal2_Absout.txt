Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.570s cpu time, 0.046s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base" via "HOL-Library.FSet" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.313s elapsed time, 1.251s cpu time, 0.135s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base" via "FinFun.FinFun" via "HOL-Library.Cardinality")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.353s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.471s elapsed time, 1.866s cpu time, 0.221s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.407s elapsed time, 1.599s cpu time, 0.175s GC time
Loading theory "HOL-Library.Quotient_Syntax" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List" via "HOL-Library.Quotient_Set")
### theory "HOL-Library.Quotient_Syntax"
### 0.027s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quotient_Option" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Quotient_Option"
### 0.078s elapsed time, 0.304s cpu time, 0.095s GC time
Loading theory "HOL-Library.Quotient_Product" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List")
### theory "HOL-Library.Quotient_Product"
### 0.083s elapsed time, 0.335s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quotient_Set" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Quotient_Set"
### 0.085s elapsed time, 0.327s cpu time, 0.053s GC time
Loading theory "HOL-Library.Quotient_List" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs")
consts
  snth :: "'a stream => nat => 'a"
### theory "HOL-Library.Phantom_Type"
### 0.564s elapsed time, 2.220s cpu time, 0.234s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base" via "FinFun.FinFun")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Additional type variable(s) in locale specification "card2": 'a
### theory "HOL-Library.Quotient_List"
### 0.488s elapsed time, 1.795s cpu time, 0.586s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.118s elapsed time, 4.275s cpu time, 0.901s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
### theory "HOL-Library.Set_Algebras"
### 0.246s elapsed time, 0.978s cpu time, 0.081s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base" via "HOL-Library.FSet")
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "HOL-Library.Cardinality"
### 0.922s elapsed time, 3.512s cpu time, 0.766s GC time
Loading theory "FinFun.FinFun" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base")
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
bundle finfun
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
### theory "HOL-Library.Countable"
### 1.274s elapsed time, 5.014s cpu time, 0.580s GC time
bundle no_finfun_syntax
Loading theory "HOL-Library.FSet" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs" via "Draft.Nominal2_Base")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.411s elapsed time, 9.322s cpu time, 1.963s GC time
Loading theory "Draft.Templates" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.255s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "FinFun.FinFun"
### 2.333s elapsed time, 8.992s cpu time, 1.932s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.116s elapsed time, 3.682s cpu time, 1.285s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Nominal2_AbsMoreTemplates")
### theory "HOL-Library.Multiset"
### 4.595s elapsed time, 17.045s cpu time, 4.064s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.615s elapsed time, 1.477s cpu time, 0.193s GC time
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 3.196s elapsed time, 9.667s cpu time, 2.861s GC time
Loading theory "Draft.Nominal2_Base" (required by "Draft.Nominal2_AbsMoreTemplates" via "Draft.Nominal2_Abs")
consts
  sort_of :: "atom => atom_sort"
consts
  nat_of :: "atom => nat"
instantiation
  perm :: group_add
  minus_perm == minus :: perm => perm => perm
  uminus_perm == uminus :: perm => perm
  zero_perm == zero_class.zero :: perm
  plus_perm == plus :: perm => perm => perm
class pt = type +
  fixes permute :: "perm => 'a => 'a"
  assumes "permute_zero": "!!x. 0 \<bullet> x = x"
  assumes
    "permute_plus":
      "!!p q x. (p + q) \<bullet> x = p \<bullet> q \<bullet> x"
instantiation
  atom :: pt
  permute_atom == permute :: perm => atom => atom
instantiation
  perm :: pt
  permute_perm == permute :: perm => perm => perm
instantiation
  fun :: (pt, pt) pt
  permute_fun == permute :: perm => ('a => 'b) => 'a => 'b
instantiation
  bool :: pt
  permute_bool == permute :: perm => bool => bool
instantiation
  set :: (pt) pt
  permute_set == permute :: perm => 'a set => 'a set
instantiation
  unit :: pt
  permute_unit == permute :: perm => unit => unit
instantiation
  prod :: (pt, pt) pt
  permute_prod == permute :: perm => 'a * 'b => 'a * 'b
consts
  permute_prod :: "perm => 'a * 'b => 'a * 'b"
instantiation
  sum :: (pt, pt) pt
  permute_sum == permute :: perm => 'a + 'b => 'a + 'b
consts
  permute_sum :: "perm => 'a + 'b => 'a + 'b"
instantiation
  list :: (pt) pt
  permute_list == permute :: perm => 'a list => 'a list
consts
  permute_list :: "perm => 'a list => 'a list"
instantiation
  option :: (pt) pt
  permute_option == permute :: perm => 'a option => 'a option
consts
  permute_option :: "perm => 'a option => 'a option"
instantiation
  multiset :: (pt) pt
  permute_multiset == permute :: perm => 'a multiset => 'a multiset
instantiation
  fset :: (pt) pt
  permute_fset == permute :: perm => 'a fset => 'a fset
instantiation
  finfun :: (pt, pt) pt
  permute_finfun == permute :: perm => ('a, 'b) finfun => ('a, 'b) finfun
instantiation
  char :: pt
  permute_char == permute :: perm => char => char
instantiation
  nat :: pt
  permute_nat == permute :: perm => nat => nat
instantiation
  int :: pt
  permute_int == permute :: perm => int => int
class pure = pt +
  assumes "permute_pure": "!!p x. p \<bullet> x = x"
### ML warning (line 75 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 93 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 115 of "$AFP/Nominal2/nominal_basics.ML"):
### Matches are not exhaustive.
### ML warning (line 118 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 130 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (z) has not been referenced.
### ML warning (line 130 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 129 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 152 of "$AFP/Nominal2/nominal_basics.ML"):
### Pattern is not exhaustive.
infix 1 ||>>>
infix 1 |>>>
signature NOMINAL_BASIC =
  sig
    val dest_fsetT: typ -> typ
    val dest_listT: typ -> typ
    val dest_perm: term -> term * term
    val fixed_nonfixed_args: Proof.context -> term -> term * term list
    val fold_left: ('a * 'a -> 'a) -> 'a list -> 'a -> 'a
    val is_fixed: Proof.context -> term -> bool
    val is_true: term -> bool
    val last2: 'a list -> 'a * 'a
    val long_name: Proof.context -> string -> string
    val map4:
       ('a -> 'b -> 'c -> 'd -> 'e) ->
         'a list -> 'b list -> 'c list -> 'd list -> 'e list
    val mk_All: string * typ -> term -> term
    val mk_all: string * typ -> term -> term
    val mk_case_sum: term -> term -> term
    val mk_equiv: thm -> thm
    val mk_exists: string * typ -> term -> term
    val mk_id: term -> term
    val mk_minus: term -> term
    val mk_perm: term -> term -> term
    val mk_perm_ty: typ -> term -> term -> term
    val mk_plus: term -> term -> term
    val order: ('a * 'a -> bool) -> 'a list -> ('a * 'b) list -> 'b list
    val order_default:
       ('a * 'a -> bool) -> 'b -> 'a list -> ('a * 'b) list -> 'b list
    val perm_const: typ -> term
    val perm_ty: typ -> typ
    val remove_dups: ('a * 'a -> bool) -> 'a list -> 'a list
    val safe_mk_equiv: thm -> thm
    val split_filter: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_last2: 'a list -> 'a list * 'a * 'a
    val split_triples: ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
    val trace: bool ref
    val trace_msg: (unit -> string) -> unit
    val |>>> : 'a * ('a -> 'b * 'c) -> 'b list * 'c
    val ||>>> : ('a list * 'b) * ('b -> 'a * 'b) -> 'a list * 'b
  end
structure Nominal_Basic: NOMINAL_BASIC
val order = fn: ('a * 'a -> bool) -> 'a list -> ('a * 'b) list -> 'b list
val dest_listT = fn: typ -> typ
val mk_perm = fn: term -> term -> term
val mk_plus = fn: term -> term -> term
val split_filter = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val fold_left = fn: ('a * 'a -> 'a) -> 'a list -> 'a -> 'a
val split_last2 = fn: 'a list -> 'a list * 'a * 'a
val order_default = fn:
   ('a * 'a -> bool) -> 'b -> 'a list -> ('a * 'b) list -> 'b list
val perm_const = fn: typ -> term
val last2 = fn: 'a list -> 'a * 'a
val mk_perm_ty = fn: typ -> term -> term -> term
val is_fixed = fn: Proof.context -> term -> bool
val mk_id = fn: term -> term
val mk_All = fn: string * typ -> term -> term
val map4 = fn:
   ('a -> 'b -> 'c -> 'd -> 'e) ->
     'a list -> 'b list -> 'c list -> 'd list -> 'e list
val is_true = fn: term -> bool
val safe_mk_equiv = fn: thm -> thm
val trace = ref false: bool ref
val mk_all = fn: string * typ -> term -> term
val mk_case_sum = fn: term -> term -> term
val dest_fsetT = fn: typ -> typ
val remove_dups = fn: ('a * 'a -> bool) -> 'a list -> 'a list
val fixed_nonfixed_args = fn: Proof.context -> term -> term * term list
val |>>> = fn: 'a * ('a -> 'b * 'c) -> 'b list * 'c
val dest_perm = fn: term -> term * term
val mk_equiv = fn: thm -> thm
val perm_ty = fn: typ -> typ
val mk_exists = fn: string * typ -> term -> term
val long_name = fn: Proof.context -> string -> string
val split_triples = fn: ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val mk_minus = fn: term -> term
val ||>>> = fn: ('a list * 'b) * ('b -> 'a * 'b) -> 'a list * 'b
val trace_msg = fn: (unit -> string) -> unit
### ML warning (line 200 of "$AFP/Nominal2/nominal_thmdecls.ML"):
### Pattern is not exhaustive.
### ML warning (line 200 of "$AFP/Nominal2/nominal_thmdecls.ML"):
### Value identifier (p') has not been referenced.
### ML warning (line 241 of "$AFP/Nominal2/nominal_thmdecls.ML"):
### Pattern is not exhaustive.
signature NOMINAL_THMDECLS =
  sig
    val eqvt_add: attribute
    val eqvt_del: attribute
    val eqvt_raw_add: attribute
    val eqvt_raw_del: attribute
    val eqvt_transform: Proof.context -> thm -> thm
    val get_eqvts_raw_thms: Proof.context -> thm list
    val get_eqvts_thms: Proof.context -> thm list
    val is_eqvt: Proof.context -> term -> bool
  end
structure Nominal_ThmDecls: NOMINAL_THMDECLS
### ML warning (line 72 of "$AFP/Nominal2/nominal_permeq.ML"):
### Value identifier (pre_thms) has not been referenced.
### ML warning (line 78 of "$AFP/Nominal2/nominal_permeq.ML"):
### Value identifier (post_thms) has not been referenced.
infix 4 addpres
infix 4 addposts
infix 4 addexcls
signature NOMINAL_PERMEQ =
  sig
    val addexcls: eqvt_config * string list -> eqvt_config
    val addposts: eqvt_config * thm list -> eqvt_config
    val addpres: eqvt_config * thm list -> eqvt_config
    val args_parser: (thm list * string list) context_parser
    val delposts: eqvt_config -> eqvt_config
    val delpres: eqvt_config -> eqvt_config
    datatype eqvt_config
    =
         Eqvt_Config of
             {excluded: string list,
              post_thms: thm list, pre_thms: thm list, strict_mode: bool}
    val eqvt_conv: Proof.context -> eqvt_config -> conv
    val eqvt_relaxed_config: eqvt_config
    val eqvt_rule: Proof.context -> eqvt_config -> thm -> thm
    val eqvt_strict_config: eqvt_config
    val eqvt_tac: Proof.context -> eqvt_config -> int -> tactic
    val perm_simp_meth:
       thm list * string list -> Proof.context -> Proof.method
    val perm_strict_simp_meth:
       thm list * string list -> Proof.context -> Proof.method
    val trace_eqvt: bool Config.T
  end
structure Nominal_Permeq: NOMINAL_PERMEQ
class le_eqvt = pt + order +
  assumes
    "le_eqvt":
      "!!p x y. p \<bullet> (x <= y) = (p \<bullet> x <= p \<bullet> y)"
class inf_eqvt = complete_lattice + pt +
  assumes "inf_eqvt": "!!p X. p \<bullet> Inf X = Inf (p \<bullet> X)"
instantiation
  bool :: le_eqvt
instantiation
  fun :: (pt, le_eqvt) le_eqvt
instantiation
  bool :: inf_eqvt
instantiation
  fun :: (pt, inf_eqvt) inf_eqvt
class pt = type +
  fixes permute :: "perm => 'a => 'a"
  assumes "permute_zero": "!!x. 0 \<bullet> x = x"
  assumes
    "permute_plus":
      "!!p q x. (p + q) \<bullet> x = p \<bullet> q \<bullet> x"
class fs = pt +
  assumes "finite_supp": "!!x. finite (supp x)"
class at_base = pt +
  fixes atom :: "'a => atom"
  assumes "atom_eq_iff": "!!a b. (atom a = atom b) = (a = b)"
  assumes "atom_eqvt": "!!p a. p \<bullet> atom a = atom (p \<bullet> a)"
class at = at_base +
  assumes "sort_of_atom_eq": "!!a b. sort_of (atom a) = sort_of (atom b)"
### ML warning (line 260 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
### ML warning (line 259 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
### ML warning (line 258 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
### ML warning (line 257 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
type cns_info = (term * typ * typ list * bool list) list
signature NOMINAL_LIBRARY =
  sig
    val all_dtyp_constrs_types: Old_Datatype_Aux.descr -> cns_info list
    val atom_const: typ -> term
    val atom_ty: typ -> typ
    val atomify: Proof.context -> term -> term
    val atomify_ty: Proof.context -> typ -> term -> term
    val atomize: Proof.context -> thm -> thm
    val atomize_concl: Proof.context -> thm -> thm
    val atomize_rule: Proof.context -> int -> thm -> thm
    type cns_info = (term * typ * typ list * bool list) list
    val conj_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val finite_const: typ -> term
    val fold_append: term list -> term
    val fold_conj: term list -> term
    val fold_conj_balanced: term list -> term
    val fold_union: term list -> term
    val fold_union_env: typ list -> term list -> term
    val fresh_args: Proof.context -> term -> term list
    val fresh_const: typ -> term
    val fresh_star_const: typ -> term
    val is_atom: Proof.context -> typ -> bool
    val is_atom_fset: Proof.context -> typ -> bool
    val is_atom_list: Proof.context -> typ -> bool
    val is_atom_set: Proof.context -> typ -> bool
    val listify: Proof.context -> term -> term
    val listify_ty: Proof.context -> typ -> term -> term
    val mk_append: term * term -> term
    val mk_atom: term -> term
    val mk_atom_fset: term -> term
    val mk_atom_fset_ty: typ -> term -> term
    val mk_atom_list: term -> term
    val mk_atom_list_ty: typ -> term -> term
    val mk_atom_set: term -> term
    val mk_atom_set_ty: typ -> term -> term
    val mk_atom_ty: typ -> term -> term
    val mk_binop_env: typ list -> string -> term * term -> term
    val mk_conj: term * term -> term
    val mk_diff: term * term -> term
    val mk_finite: term -> term
    val mk_finite_ty: typ -> term -> term
    val mk_fresh: term -> term -> term
    val mk_fresh_star: term -> term -> term
    val mk_fresh_star_ty: typ -> term -> term -> term
    val mk_fresh_ty: typ -> term -> term -> term
    val mk_full_horn: (string * typ) list -> term list -> term -> term
    val mk_sort_of: term -> term
    val mk_supp: term -> term
    val mk_supp_rel: term -> term -> term
    val mk_supp_rel_ty: typ -> term -> term -> term
    val mk_supp_ty: typ -> term -> term
    val mk_supports: term -> term -> term
    val mk_supports_ty: typ -> term -> term -> term
    val mk_union: term * term -> term
    val mk_union_env: typ list -> term * term -> term
    val pat_completeness_simp: thm list -> Proof.context -> tactic
    val prove_termination_fun:
       thm list -> Proof.context -> Function.info * local_theory
    val prove_termination_ind: Proof.context -> int -> tactic
    val setify: Proof.context -> term -> term
    val setify_ty: Proof.context -> typ -> term -> term
    val size_ss: simpset
    val strip_full_horn: term -> (string * typ) list * term list * term
    val supp_const: typ -> term
    val supp_rel_const: typ -> term
    val supports_const: typ -> term
    val to_set: term -> term
    val to_set_ty: typ -> term -> term
    val transform_prem1: Proof.context -> string list -> thm -> thm
    val transform_prem2: Proof.context -> string list -> thm -> thm
  end
structure Nominal_Library: NOMINAL_LIBRARY
val conj_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val is_atom_fset = fn: Proof.context -> typ -> bool
val mk_union_env = fn: typ list -> term * term -> term
val size_ss =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb =
                        Net {atoms =
                             {("HOL.eq",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[{elhs = "... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Abs ("...", "?'d1", ...), name = "HOL.simp_thms_38",
  ...}]})},
                             comb = Leaf [], var = Leaf []},
                        var =
                        Leaf
                         [{elhs = "EX x. ?t1 = x & ?P1 x", extra = false,
                           fo = false, lhs =
                           Const ("HOL.Ex", "(... ... ...) => bool") $
                             Abs ("x", "?'d1",
                               Const ("...", ...) $ (... $ ... $ ...) $
                                 ...),
                           name = "HOL.simp_thms_40", perm = false, thm =
                           "EX x. ?t1 ... x & ?P1 x == ?P1 ?t1"},
                          {elhs = "EX x. x = ?t1 & ?P1 x", extra = false,
                           fo = false, lhs =
                           Const ("HOL.Ex", "(...) ... bool") $
                             Abs ("x", "?'d1",
                               Const ("...", "bool => bool => bool") $ ... $
                                 ...),
                           name = "HOL.simp_thms_39", perm = false, thm =
                           "EX x. ... ... ... ... ... ... == ?P1 ?t1"},
                          {elhs = "EX x. x = ?t1", extra = false, fo = true,
                           lhs =
                           Const ("HOL.Ex", "... ... ...") $
                             Abs ("x", "...", ... $ ... $ ...),
                           name = "HOL.simp_thms_37", perm = false, thm =
                           "... x... ... ... ... == True"},
                          {elhs = "EX x. ?y", extra = false, fo = true,
                           lhs =
                           Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                           name = "HOL.simp_thms_36", perm = false, thm =
                           "... ...... ... ... ?y"},
                          {elhs = "... x... ... ... ...", extra = false,
                           fo = false, lhs =
                           Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                           name = "HOL.ex_simps_6", perm = false, thm =
                           "... ... ..."},
                          {elhs = "... ...... ...", extra = false, fo =
                           false, lhs =
                           Const ("...", ...) $ Abs ("...", "?'e1", ...),
                           name = "HOL.ex_simps_5", ...},
                          {elhs = "...", extra = false, fo = false, lhs =
                           Const ("...", "(?'d1 => bool) => bool") $ ...,
                           ...},
                          {elhs = "...", extra = false, fo = false, ...},
                          {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "ALL x. ?t1 ~= x", extra = false, fo =
                            true, lhs =
                            Const ("HOL.All", "(...) ... bool") $
                              Abs ("x", "?'d1",
                                Const ("...", "bool => bool") $ ...),
                            name = "HOL.simp_thms_44", perm = false, thm =
                            "ALL x. ?t1 ... x == False"},
                           {elhs = "ALL x. x ~= ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "HOL.simp_thms_43", perm = false, thm =
                            "... x... ... ... ... == False"},
                           {elhs = "ALL x. ... ... ... ... ... ...", extra =
                            false, fo = false, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.simp_thms_42", perm = false, thm =
                            "... ...... ... ... ... ..."},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "HOL.simp_thms_41", perm = false, thm =
                            "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'b1", ...),
                            name = "HOL.simp_thms_35", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'f1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "~ True", extra = false, fo = true,
                               lhs =
                               Const ("HOL.Not", "...") $
                                 Const ("HOL.True", "..."),
                               name = "HOL.simp_thms_7", perm = false, thm =
                               "... True ... False"}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "~ False", extra = false, fo = true,
                                lhs =
                                Const ("HOL.Not", "...") $
                                  Const ("...", ...),
                                name = "HOL.simp_thms_8", perm = false,
                                thm = "... ... ... ..."}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = "...", extra = false, fo = true, ...}]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = ..., extra = false, ...}]}),
                                ("HOL.Not",
                                  Net {atoms = {}, comb = Leaf [...], var =
 Leaf [...]})},
                              comb =
                              Net {atoms =
                                   {("HOL.eq",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("HOL.conj",
 Net {atoms = {}, comb = ..., var = ...}),
                                     ("HOL.disj", Net {atoms = {}, ...}),
                                     ("HOL.implies", ...)},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "THE x. x ... ?y", extra = false, fo =
                            true, lhs =
                            Const ("HOL.The", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.the_eq_trivial", perm = false, thm =
                            "... ...... ... ... ?y"}]}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...x... ... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("Pure.all", "...") $ Abs ("x", ..., ...),
                            name = "HOL.subst_all_2", perm = false, thm =
                            "... ... ... ..."},
                           {elhs = "......... ...", extra = false, fo =
                            false, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.subst_all_1", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'a => prop) => prop") $ ...,
                            ...}]}),
                  ("Wellfounded.wf",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("Wellfounded.measure",
                                 Net {atoms = {}, comb = ..., var = ...})},
                              comb = Leaf [], var = Leaf []},
                         var = Leaf []})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]})},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}})},
                                  comb = Leaf [], var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]})},
 comb = Leaf [], var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?x1 ... ?x1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1"),
                                     name = "HOL.simp_thms_6", perm = false,
                                     thm = "... ... ..."}]}}),
                       ("HOL.conj",
                         Net {atoms =
                              {("HOL.True",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                                ("HOL.False",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("HOL.Not",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                   comb =
                                   Net {atoms =
  {("HOL.conj", Net {atoms = {}, comb = ..., var = ...}),
    ("HOL.implies", Net {atoms = {}, ...})},
  comb = Leaf [], var = Leaf []},
                                   var = Leaf []},
                              var =
                              Net {atoms =
                                   {("HOL.True",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                     ("HOL.False",
 Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                   comb =
                                   Net {atoms =
  {("HOL.Not", Net {atoms = {}, comb = ..., var = ...})}, comb =
  Net {atoms = {("HOL.conj", ...)}, comb = Leaf [...], var = Leaf [...]},
  var = Leaf []},
                                   var =
                                   Leaf
                                    [{elhs = "... ... ...", extra = false,
fo = true, lhs = Const ("...", ...) $ Var ((...), "bool") $ ..., name =
"HOL.simp_thms_25", ...}]}}),
                       ("HOL.disj",
                         Net {atoms =
                              {("HOL.True",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = "...", extra = false, fo = true, ...}]}),
                                ("HOL.False",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = ..., extra = false, ...}]})},
                              comb =
                              Net {atoms =
                                   {("HOL.Not",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb =
                                   Net {atoms =
  {("HOL.disj", Net {atoms = {}, ...}), ("HOL.implies", ...)}, comb =
  Leaf [], var = Leaf []},
                                   var = Leaf []},
                              var =
                              Net {atoms =
                                   {("HOL.True",
Leaf [{elhs = "...", extra = false, fo = true, ...}]),
                                     ("HOL.False",
 Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("HOL.Not", Net {atoms = {}, ...})}, comb =
  Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
                                   var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {("HOL.Trueprop", ...)},
  comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.member",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var = Leaf []}),
                       ("HOL.implies",
                         Net {atoms =
                              {("HOL.True",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.False", Net {atoms = {}, ...})},
                              comb =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("HOL.True", ...), ...}, comb =
                                   Net {atoms = {...}, ...}, var =
                                   Leaf [...]}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("Groups.times_class.times",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Orderings.ord_class.less",
                         Net {atoms = {...}, comb = ..., var = ...})},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Sum_Type.sum.case_sum",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}}),
                            ("Basic_BNF_LFPs.prod.size_prod",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var = Leaf []}},
     {congs =
      ({((true, "HOL.implies"),
          "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
           ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q == PROP ?Q' |]
            ==> (PROP ?P =simp=> PROP ?Q) == (PROP ?P' =simp=> PROP ?Q')")},
       []),
      loop_tacs =
      [("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)], mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("Pure.all", "...") $
                               Abs ("x", "...", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms = {}, comb = Leaf [], var =
                             Net {atoms = {}, comb = Leaf [], var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "HOL.neq", proc = fn,
stamp = Stamp 91400}]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {("HOL.False", ...)}, comb = Leaf [...], var = Leaf [...]})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Orderings.ord_class.less",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb =
                                   Net {atoms =
  {("Groups.plus_class.plus", ...), ...}, comb = Leaf [...], var =
  Leaf [...]},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {("Nat.Suc", ...)}, comb =
  Net {atoms = {...}, ...}, var = Leaf [...]},
                                   var = Leaf []}})},
                     comb = Leaf [], var = Leaf []},
                var = Leaf []},
           var = Leaf []},
      solvers =
      ([Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val mk_finite = fn: term -> term
val fresh_args = fn: Proof.context -> term -> term list
val atom_ty = fn: typ -> typ
val mk_atom_set = fn: term -> term
val mk_fresh_star_ty = fn: typ -> term -> term -> term
val mk_full_horn = fn: (string * typ) list -> term list -> term -> term
val atomize_rule = fn: Proof.context -> int -> thm -> thm
val prove_termination_ind = fn: Proof.context -> int -> tactic
val supp_const = fn: typ -> term
val mk_diff = fn: term * term -> term
val supp_rel_const = fn: typ -> term
val setify_ty = fn: Proof.context -> typ -> term -> term
val transform_prem2 = fn: Proof.context -> string list -> thm -> thm
val fold_append = fn: term list -> term
val atomize = fn: Proof.context -> thm -> thm
val atom_const = fn: typ -> term
val mk_supports = fn: term -> term -> term
val fresh_star_const = fn: typ -> term
val is_atom_list = fn: Proof.context -> typ -> bool
val strip_full_horn = fn: term -> (string * typ) list * term list * term
val fold_conj = fn: term list -> term
val listify = fn: Proof.context -> term -> term
val fold_union = fn: term list -> term
val mk_union = fn: term * term -> term
val mk_atom = fn: term -> term
val mk_append = fn: term * term -> term
val all_dtyp_constrs_types = fn: Old_Datatype_Aux.descr -> cns_info list
val fold_union_env = fn: typ list -> term list -> term
val mk_fresh = fn: term -> term -> term
val is_atom_set = fn: Proof.context -> typ -> bool
val mk_sort_of = fn: term -> term
val listify_ty = fn: Proof.context -> typ -> term -> term
val mk_atom_fset_ty = fn: typ -> term -> term
val mk_fresh_star = fn: term -> term -> term
val to_set_ty = fn: typ -> term -> term
val mk_atom_ty = fn: typ -> term -> term
val mk_supp_rel_ty = fn: typ -> term -> term -> term
val prove_termination_fun = fn:
   thm list -> Proof.context -> Function.info * local_theory
val atomify = fn: Proof.context -> term -> term
val mk_atom_set_ty = fn: typ -> term -> term
val atomify_ty = fn: Proof.context -> typ -> term -> term
val pat_completeness_simp = fn: thm list -> Proof.context -> tactic
val mk_conj = fn: term * term -> term
val finite_const = fn: typ -> term
val setify = fn: Proof.context -> term -> term
val is_atom = fn: Proof.context -> typ -> bool
val mk_atom_fset = fn: term -> term
val mk_atom_list_ty = fn: typ -> term -> term
val transform_prem1 = fn: Proof.context -> string list -> thm -> thm
val mk_finite_ty = fn: typ -> term -> term
val mk_fresh_ty = fn: typ -> term -> term -> term
val mk_binop_env = fn: typ list -> string -> term * term -> term
val atomize_concl = fn: Proof.context -> thm -> thm
val fresh_const = fn: typ -> term
val fold_conj_balanced = fn: term list -> term
val supports_const = fn: typ -> term
val to_set = fn: term -> term
val mk_supp = fn: term -> term
val mk_supports_ty = fn: typ -> term -> term -> term
val mk_supp_rel = fn: term -> term -> term
val mk_atom_list = fn: term -> term
val mk_supp_ty = fn: typ -> term -> term
### ML warning (line 28 of "$AFP/Nominal2/nominal_atoms.ML"):
### Value identifier (arg) has not been referenced.
signature ATOM_DECL =
  sig val add_atom_decl: binding * binding option -> theory -> theory end
structure Atom_Decl: ATOM_DECL
### ML warning (line 77 of "$AFP/Nominal2/nominal_eqvt.ML"):
### Matches are not exhaustive.
### ML warning (line 93 of "$AFP/Nominal2/nominal_eqvt.ML"):
### Pattern is not exhaustive.
### ML warning (line 125 of "$AFP/Nominal2/nominal_eqvt.ML"):
### Pattern is not exhaustive.
signature NOMINAL_EQVT =
  sig
    val equivariance_cmd: string -> Proof.context -> local_theory
    val raw_equivariance:
       Proof.context -> term list -> thm -> thm list -> thm list
  end
structure Nominal_Eqvt: NOMINAL_EQVT
### theory "Draft.Nominal2_Base"
### 2.462s elapsed time, 2.688s cpu time, 0.311s GC time
Loading theory "Draft.Nominal2_Abs" (required by "Draft.Nominal2_AbsMoreTemplates")
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_set_rel ((?bs1, ?x1), ?R1, ?f1, ?p1, ?cs1, ?y1) ==>
### alpha_set (?bs1, ?x1) ?R1 ?f1 ?p1 (?cs1, ?y1) ==
### ?f1 ?x1 - ?bs1 = ?f1 ?y1 - ?cs1 &
### (?f1 ?x1 - ?bs1) \<sharp>* ?p1 &
### ?R1 (?p1 \<bullet> ?x1) ?y1 & ?p1 \<bullet> ?bs1 = ?cs1
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_res_rel ((?bs1, ?x1), ?R1, ?f1, ?p1, ?cs1, ?y1) ==>
### alpha_res (?bs1, ?x1) ?R1 ?f1 ?p1 (?cs1, ?y1) ==
### ?f1 ?x1 - ?bs1 = ?f1 ?y1 - ?cs1 &
### (?f1 ?x1 - ?bs1) \<sharp>* ?p1 & ?R1 (?p1 \<bullet> ?x1) ?y1
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_lst_rel ((?bs1, ?x1), ?R1, ?f1, ?p1, ?cs1, ?y1) ==>
### alpha_lst (?bs1, ?x1) ?R1 ?f1 ?p1 (?cs1, ?y1) ==
### ?f1 ?x1 - set ?bs1 = ?f1 ?y1 - set ?cs1 &
### (?f1 ?x1 - set ?bs1) \<sharp>* ?p1 &
### ?R1 (?p1 \<bullet> ?x1) ?y1 & ?p1 \<bullet> ?bs1 = ?cs1
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_abs_set_rel ((?bs1, ?x1), ?cs1, ?y1) ==>
### alpha_abs_set (?bs1, ?x1) (?cs1, ?y1) ==
### EX p. (?bs1, ?x1) \<approx>set (=) supp p (?cs1, ?y1)
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_abs_lst_rel ((?bs1, ?x1), ?cs1, ?y1) ==>
### alpha_abs_lst (?bs1, ?x1) (?cs1, ?y1) ==
### EX p. (?bs1, ?x1) \<approx>lst (=) supp p (?cs1, ?y1)
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_abs_res_rel ((?bs1, ?x1), ?cs1, ?y1) ==>
### alpha_abs_res (?bs1, ?x1) (?cs1, ?y1) ==
### EX p. (?bs1, ?x1) \<approx>res (=) supp p (?cs1, ?y1)
Found termination order: "{}"
instantiation
  abs_set :: (pt) pt
  permute_abs_set == permute :: perm => 'a abs_set => 'a abs_set
instantiation
  abs_res :: (pt) pt
  permute_abs_res == permute :: perm => 'a abs_res => 'a abs_res
instantiation
  abs_lst :: (pt) pt
  permute_abs_lst == permute :: perm => 'a abs_lst => 'a abs_lst
### ML warning (line 927 of "$AFP/Nominal2/Nominal2_Abs.thy"):
### Pattern is not exhaustive.
val alpha_single_simproc = fn:
   thm -> 'a -> Proof.context -> cterm -> thm option
Found termination order: "{}"
### theory "Draft.Nominal2_Abs"
### 1.720s elapsed time, 2.804s cpu time, 1.504s GC time
Loading theory "Draft.Nominal2_AbsMoreTemplates"
val templateLemmas =
   [("Nominal2_Abs.alphas_abs_refl", "(?cs, ?x) \<approx>abs_lst (?cs, ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Nominal2_Abs.alphas_abs_refl", "(?bs, ?x) \<approx>abs_res (?bs, ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Nominal2_Abs.alphas_abs_refl", "(?bs, ?x) \<approx>abs_set (?bs, ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Nominal2_Abs.Abs_supports", "(supp ?x - ?as) supports ([?as]res. ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Nominal2_Abs.Abs_supports", "(supp ?x - ?as) supports ([?as]set. ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Nominal2_Abs.supp_funs_eqvt",
     "?p \<bullet> supp_lst ?z = supp_lst (?p \<bullet> ?z)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Abs.supp_funs_eqvt",
     "?p \<bullet> supp_res ?y = supp_res (?p \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Abs.supp_funs_eqvt",
     "?p \<bullet> supp_set ?x = supp_set (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Abs.supp_Abs", "supp ([?as]res. ?x) = supp ?x - ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Nominal2_Abs.supp_Abs", "supp ([?as]set. ?x) = supp ?x - ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Nominal2_Abs.Abs_supports",
     "(supp ?x - set ?bs) supports ([?bs]lst. ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Nominal2_Abs.supp_Abs", "supp ([?bs]lst. ?x) = supp ?x - set ?bs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Nominal2_Abs.Abs_fresh_star",
     "?as <= ?as' ==> ?as \<sharp>* ([?as']res. ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.Abs_fresh_star",
     "?as <= ?as' ==> ?as \<sharp>* ([?as']set. ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.Abs_fresh_star_iff",
     "?as \<sharp>* ([?bs]res. ?x) = (?as - ?bs) \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Nominal2_Abs.Abs_fresh_star_iff",
     "?as \<sharp>* ([?bs]set. ?x) = (?as - ?bs) \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Nominal2_Abs.Abs_fresh_star",
     "?bs <= set ?bs' ==> ?bs \<sharp>* ([?bs']lst. ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.Abs_fresh_star_iff",
     "?as \<sharp>* ([?cs]lst. ?x) = (?as - set ?cs) \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Nominal2_Abs.permute_Abs_lst",
     "?p \<bullet> ([?as]lst. ?x) = [?p \<bullet> ?as]lst. ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.permute_Abs_res",
     "?p \<bullet> ([?as]res. ?x) = [?p \<bullet> ?as]res. ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.permute_Abs_set",
     "?p \<bullet> ([?as]set. ?x) = [?p \<bullet> ?as]set. ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.Abs_fresh_aux",
     "?a \<sharp> [?cs]lst. ?x ==> ?a \<sharp> supp_lst ([?cs]lst. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Nominal2_Abs.Abs_fresh_aux",
     "?a \<sharp> [?bs]res. ?x ==> ?a \<sharp> supp_res ([?bs]res. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Nominal2_Abs.Abs_fresh_aux",
     "?a \<sharp> [?bs]set. ?x ==> ?a \<sharp> supp_set ([?bs]set. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Nominal2_Abs.Abs_finite_supp",
     "finite (supp ?x) ==> supp ([?as]res. ?x) = supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Abs.Abs_finite_supp",
     "finite (supp ?x) ==> supp ([?as]set. ?x) = supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Abs.Abs_supp_subset1",
     "finite (supp ?x) ==> supp ?x - ?as <= supp ([?as]res. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Abs.Abs_supp_subset1",
     "finite (supp ?x) ==> supp ?x - ?as <= supp ([?as]set. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Abs.Abs_supp_subset2",
     "finite (supp ?x) ==> supp ([?as]res. ?x) <= supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Abs.Abs_supp_subset2",
     "finite (supp ?x) ==> supp ([?as]set. ?x) <= supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Abs.Abs_finite_supp",
     "finite (supp ?x) ==> supp ([?bs]lst. ?x) = supp ?x - set ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Nominal2_Abs.Abs_supp_subset2",
     "finite (supp ?x) ==> supp ([?bs]lst. ?x) <= supp ?x - set ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Nominal2_Abs.Abs_supp_subset1",
     "finite (supp ?x) ==> supp ?x - set ?bs <= supp ([?bs]lst. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Abs.alpha_refl",
     "?R ?x ?x ==> (?cs, ?x) \<approx>lst ?R ?f 0 (?cs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_var 3),
                 template_var 0),
               template_hole 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2))
           ))),
    ("Nominal2_Abs.alpha_refl",
     "?R ?x ?x ==> (?bs, ?x) \<approx>res ?R ?f 0 (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_var 3),
                 template_var 0),
               template_hole 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2))
           ))),
    ("Nominal2_Abs.alpha_refl",
     "?R ?x ?x ==> (?bs, ?x) \<approx>set ?R ?f 0 (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_var 3),
                 template_var 0),
               template_hole 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2))
           ))),
    ("Nominal2_Abs.Abs_eq_res_supp",
     "supp ?x <= ?bs ==> [?as]res. ?x = [?as Int ?bs]res. ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Nominal2_Abs.Abs_exhausts",
     "(!!as x. ?y2.0 = [as]res. x ==> ?P2.0) ==> ?P2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Abs.Abs_exhausts",
     "(!!as x. ?y1.0 = [as]set. x ==> ?P1.0) ==> ?P1.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Abs.Abs_exhausts",
     "(!!bs x. ?y3.0 = [bs]lst. x ==> ?P3.0) ==> ?P3.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Abs.Abs_fresh_star2",
     "?as Int ?bs = {} ==> ?as \<sharp>* ([?bs]res. ?x) = ?as \<sharp>* ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.Abs_fresh_star2",
     "?as Int ?bs = {} ==> ?as \<sharp>* ([?bs]set. ?x) = ?as \<sharp>* ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.alphas_abs_sym",
     "(?ds, ?x) \<approx>abs_lst (?es, ?y) ==>
      (?es, ?y) \<approx>abs_lst (?ds, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Nominal2_Abs.alphas_abs_sym",
     "(?bs, ?x) \<approx>abs_res (?cs, ?y) ==>
      (?cs, ?y) \<approx>abs_res (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Nominal2_Abs.alphas_abs_sym",
     "(?bs, ?x) \<approx>abs_set (?cs, ?y) ==>
      (?cs, ?y) \<approx>abs_set (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Nominal2_Abs.Abs1_eq",
     "([[atom ?a]]lst. ?x = [[atom ?a]]lst. ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Abs.Abs1_eq",
     "([{atom ?a}]res. ?x = [{atom ?a}]res. ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Abs.Abs1_eq",
     "([{atom ?a}]set. ?x = [{atom ?a}]set. ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Abs.Abs_fresh_star2",
     "?cs Int set ?ds = {} ==>
      ?cs \<sharp>* ([?ds]lst. ?x) = ?cs \<sharp>* ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 1)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.Abs_fresh_iff",
     "?a \<sharp> [?bs]res. ?x = (?a : ?bs | ?a ~: ?bs & ?a \<sharp> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Nominal2_Abs.Abs_fresh_iff",
     "?a \<sharp> [?bs]set. ?x = (?a : ?bs | ?a ~: ?bs & ?a \<sharp> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Nominal2_Abs.Abs_fresh_iff",
     "?a \<sharp> [?cs]lst. ?x =
      (?a : set ?cs | ?a ~: set ?cs & ?a \<sharp> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 3, template_var 1)))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Nominal2_Abs.Abs_eq_iff",
     "([?cs]lst. ?x = [?cs']lst. ?y) =
      (EX p. (?cs, ?x) \<approx>lst (=) supp p (?cs', ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Nominal2_Abs.Abs_eq_iff",
     "([?bs]res. ?x = [?bs']res. ?y) =
      (EX p. (?bs, ?x) \<approx>res (=) supp p (?bs', ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Nominal2_Abs.Abs_eq_iff",
     "([?bs]set. ?x = [?bs']set. ?y) =
      (EX p. (?bs, ?x) \<approx>set (=) supp p (?bs', ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Nominal2_Abs.alphas_abs",
     "((?bs, ?x) \<approx>abs_lst (?cs, ?y)) =
      (EX p. (?bs, ?x) \<approx>lst (=) supp p (?cs, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Abs.alphas_abs",
     "((?bs, ?x) \<approx>abs_res (?cs, ?y)) =
      (EX p. (?bs, ?x) \<approx>res (=) supp p (?cs, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Abs.alphas_abs",
     "((?bs, ?x) \<approx>abs_set (?cs, ?y)) =
      (EX p. (?bs, ?x) \<approx>set (=) supp p (?cs, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Abs.Abs_eq_res_set",
     "([?bs]res. ?x = [?cs]res. ?y) =
      ([?bs Int supp ?x]set. ?x = [?cs Int supp ?y]set. ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 2))),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 0)))),
    ("Nominal2_Abs.supp_property_res",
     "(?as, ?x) \<approx>res (=) supp ?p (?as', ?x') ==>
      ?p \<bullet> (supp ?x Int ?as) = supp ?x' Int ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3)),
                    template_hole 4),
                  template_hole 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 3)),
             template_var 4)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_var 1)))),
    ("Nominal2_Abs.alphas_abs_eqvt",
     "(?ds, ?x) \<approx>abs_lst (?es, ?y) ==>
      (?p \<bullet> ?ds, ?p \<bullet> ?x) \<approx>abs_lst
      (?p \<bullet> ?es, ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alphas_abs_eqvt",
     "(?bs, ?x) \<approx>abs_res (?cs, ?y) ==>
      (?p \<bullet> ?bs, ?p \<bullet> ?x) \<approx>abs_res
      (?p \<bullet> ?cs, ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alphas_abs_eqvt",
     "(?bs, ?x) \<approx>abs_set (?cs, ?y) ==>
      (?p \<bullet> ?bs, ?p \<bullet> ?x) \<approx>abs_set
      (?p \<bullet> ?cs, ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alphas_abs_trans",
     "[| (?es, ?x) \<approx>abs_lst (?gs, ?y);
         (?gs, ?y) \<approx>abs_lst (?hs, ?z) |]
      ==> (?es, ?x) \<approx>abs_lst (?hs, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.alphas_abs_trans",
     "[| (?bs, ?x) \<approx>abs_res (?cs, ?y);
         (?cs, ?y) \<approx>abs_res (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>abs_res (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.alphas_abs_trans",
     "[| (?bs, ?x) \<approx>abs_set (?cs, ?y);
         (?cs, ?y) \<approx>abs_set (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>abs_set (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.disjoint_right_eq",
     "[| ?A Un ?B1.0 = ?A Un ?B2.0; ?A Int ?B1.0 = {}; ?A Int ?B2.0 = {} |]
      ==> ?B1.0 = ?B2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_hole 0),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 0),
          template_hole 0)],
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Abs.Abs_eq_iff2",
     "([?bs]res. ?x = [?bs']res. ?y) =
      (EX p. (?bs, ?x) \<approx>res (=) supp p (?bs', ?y) &
             supp p <= ?bs Un ?bs')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Nominal2_Abs.Abs_eq_iff2",
     "([?bs]set. ?x = [?bs']set. ?y) =
      (EX p. (?bs, ?x) \<approx>set (=) supp p (?bs', ?y) &
             supp p <= ?bs Un ?bs')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Nominal2_Abs.alphas_abs_stronger",
     "((?as, ?x) \<approx>abs_res (?as', ?x')) =
      (EX p. (?as, ?x) \<approx>res (=) supp p (?as', ?x') &
             supp p <= ?as Un ?as')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Nominal2_Abs.alphas_abs_stronger",
     "((?as, ?x) \<approx>abs_set (?as', ?x')) =
      (EX p. (?as, ?x) \<approx>set (=) supp p (?as', ?x') &
             supp p <= ?as Un ?as')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Nominal2_Abs.alpha_res_alpha_set",
     "(?bs, ?x) \<approx>res (=) supp ?p (?cs, ?y) =
      (?bs Int supp ?x, ?x) \<approx>set (=) supp ?p (?cs Int supp ?y, ?y)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3)),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_app (template_hole 2, template_var 3))),
                       template_var 3)),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 2, template_var 0))),
               template_var 0))
           ))),
    ("Nominal2_Abs.Abs_rename_res'",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]res. ?x = [q \<bullet> ?bs]res. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_rename_res",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]res. ?x = [?p \<bullet> ?bs]res. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_rename_set'",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]set. ?x = [q \<bullet> ?bs]set. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_rename_set",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]set. ?x = [?p \<bullet> ?bs]set. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.alpha_abs_res_minimal",
     "(?as, ?x) \<approx>res (=) supp ?p (?as', ?x') ==>
      (?as Int supp ?x,
       ?x) \<approx>res (=) supp ?p (?as' Int supp ?x', ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3)),
                    template_hole 2),
                  template_hole 1),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_app (template_hole 1, template_var 3))),
                       template_var 3)),
                   template_hole 2),
                 template_hole 1),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 1, template_var 0))),
               template_var 0))
           ))),
    ("Nominal2_Abs.alpha_abs_res_abs_set",
     "(?as, ?x) \<approx>res (=) supp ?p (?as', ?x') ==>
      (?as Int supp ?x,
       ?x) \<approx>set (=) supp ?p (?as' Int supp ?x', ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 3)),
                    template_hole 3),
                  template_hole 2),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_app (template_hole 2, template_var 3))),
                       template_var 3)),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 2, template_var 0))),
               template_var 0))
           ))),
    ("Nominal2_Abs.alpha_abs_set_abs_res",
     "(?as Int supp ?x,
       ?x) \<approx>set (=) supp ?p (?as' Int supp ?x', ?x') ==>
      (?as, ?x) \<approx>res (=) supp ?p (?as', ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 4),
                            template_app
                             (template_hole 2, template_var 3))),
                        template_var 3)),
                    template_hole 1),
                  template_hole 2),
                template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_app (template_hole 2, template_var 0))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3)),
                   template_hole 1),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.Abs_eq_iff2",
     "([?cs]lst. ?x = [?cs']lst. ?y) =
      (EX p. (?cs, ?x) \<approx>lst (=) supp p (?cs', ?y) &
             supp p <= set ?cs Un set ?cs')",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.alphas_abs_stronger",
     "((?bs, ?x) \<approx>abs_lst (?bs', ?x')) =
      (EX p. (?bs, ?x) \<approx>lst (=) supp p (?bs', ?x') &
             supp p <= set ?bs Un set ?bs')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Nominal2_Abs.Abs_rename_lst'",
     "(?p \<bullet> set ?bs) \<sharp>* ?x ==>
      EX q. [?bs]lst. ?x = [q \<bullet> ?bs]lst. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Nominal2_Abs.Abs_rename_lst",
     "(?p \<bullet> set ?bs) \<sharp>* ?x ==>
      EX q. [?bs]lst. ?x = [?p \<bullet> ?bs]lst. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Nominal2_Abs.alpha_abs_res_stronger1",
     "(?as, ?x) \<approx>res (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>res (=) supp p (?as', ?x') &
            supp p <= ?as Un ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_hole 6),
                  template_hole 5),
                template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Abs.alpha_abs_set_stronger1",
     "(?as, ?x) \<approx>set (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>set (=) supp p (?as', ?x') &
            supp p <= ?as Un ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_hole 6),
                  template_hole 5),
                template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Abs.alpha_res",
     "(?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y) =
      (?f ?x - ?bs = ?f ?y - ?cs &
       (?f ?x - ?bs) \<sharp>* ?p & ?R (?p \<bullet> ?x) ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5)),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_var 3, template_var 5)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_var 3, template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_var 3, template_var 5)),
                       template_var 6)),
                   template_var 2)),
               template_app
                (template_app
                  (template_var 4,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 5)),
                 template_var 0)))
           ))),
    ("Nominal2_Abs.alpha_abs_lst_stronger1",
     "(?as, ?x) \<approx>lst (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>lst (=) supp p (?as', ?x') &
            supp p <= set ?as Un set ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3)),
                    template_hole 7),
                  template_hole 6),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_swap1",
     "[| ?a ~: supp ?x - ?bs; ?b ~: supp ?x - ?bs |]
      ==> [?bs]res. ?x =
          [(?a \<rightleftharpoons> ?b) \<bullet> ?bs]res. (?a \<rightleftharpoons> ?b) \<bullet> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_var 2))))),
    ("Nominal2_Abs.Abs_swap1",
     "[| ?a ~: supp ?x - ?bs; ?b ~: supp ?x - ?bs |]
      ==> [?bs]set. ?x =
          [(?a \<rightleftharpoons> ?b) \<bullet> ?bs]set. (?a \<rightleftharpoons> ?b) \<bullet> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_var 2))))),
    ("Nominal2_Abs.Abs_swap2",
     "[| ?a ~: supp ?x - set ?bs; ?b ~: supp ?x - set ?bs |]
      ==> [?bs]lst. ?x =
          [(?a \<rightleftharpoons> ?b) \<bullet> ?bs]lst. (?a \<rightleftharpoons> ?b) \<bullet> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app (template_hole 5, template_var 1)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app (template_hole 5, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_var 2))))),
    ("Nominal2_Abs.alpha_eqvt",
     "(?ds, ?x) \<approx>lst ?R ?f ?q (?es, ?y) ==>
      (?p \<bullet> ?ds,
       ?p \<bullet> ?x) \<approx>lst (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?es,
                ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6)),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 7)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 6))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alpha_eqvt",
     "(?bs, ?x) \<approx>res ?R ?f ?q (?cs, ?y) ==>
      (?p \<bullet> ?bs,
       ?p \<bullet> ?x) \<approx>res (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?cs,
                ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6)),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 7)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 6))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alpha_eqvt",
     "(?bs, ?x) \<approx>set ?R ?f ?q (?cs, ?y) ==>
      (?p \<bullet> ?bs,
       ?p \<bullet> ?x) \<approx>set (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?cs,
                ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6)),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 7)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 6))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alpha_abs_res_stronger1_aux",
     "(?as, ?x) \<approx>res (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>res (=) supp p (?as', ?x') &
            supp p <= supp ?x Int ?as Un supp ?x' Int ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3)),
                    template_hole 7),
                  template_hole 6),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs1_eq_iff_fresh",
     "atom ?c \<sharp> (?a, ?b, ?x, ?y) ==>
      ([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      ((?a \<leftrightarrow> ?c) \<bullet> ?x =
       (?b \<leftrightarrow> ?c) \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 3)),
                 template_hole 3)),
             template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 2)),
                 template_hole 3)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4)),
             template_var 0))))),
    ("Nominal2_Abs.Abs1_eq_iff_fresh",
     "atom ?c \<sharp> (?a, ?b, ?x, ?y) ==>
      ([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      ((?a \<leftrightarrow> ?c) \<bullet> ?x =
       (?b \<leftrightarrow> ?c) \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 3)),
                 template_hole 3)),
             template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 2)),
                 template_hole 3)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4)),
             template_var 0))))),
    ("Nominal2_Abs.Abs1_eq_iff_fresh",
     "atom ?c \<sharp> (?a, ?b, ?x, ?y) ==>
      ([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      ((?a \<leftrightarrow> ?c) \<bullet> ?x =
       (?b \<leftrightarrow> ?c) \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 3)),
                 template_hole 3)),
             template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 2)),
                 template_hole 3)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4)),
             template_var 0))))),
    ("Nominal2_Abs.alpha_sym",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R (- ?p \<bullet> ?y) ?x;
         (?ds, ?x) \<approx>lst ?R ?f ?p (?es, ?y) |]
      ==> (?es, ?y) \<approx>lst ?R ?f (- ?p) (?ds, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_var 6,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_var 4)
              )),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 2, template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R (- ?p \<bullet> ?y) ?x;
         (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>res ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_var 6,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_var 4)
              )),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 2, template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R (- ?p \<bullet> ?y) ?x;
         (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>set ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_var 6,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_var 4)
              )),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 2, template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_set",
     "(?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y) =
      (?f ?x - ?bs = ?f ?y - ?cs &
       (?f ?x - ?bs) \<sharp>* ?p &
       ?R (?p \<bullet> ?x) ?y & ?p \<bullet> ?bs = ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 5)),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_var 3, template_var 5)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_var 3, template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_var 3, template_var 5)),
                       template_var 6)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_var 4,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 5)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 6)),
                   template_var 1))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff",
     "([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       ?x = (?a \<leftrightarrow> ?b) \<bullet> ?y & atom ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 3)),
                   template_var 0))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff'",
     "([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       (?b \<leftrightarrow> ?a) \<bullet> ?x = ?y & atom ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 3)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 1)),
                   template_var 2))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff",
     "([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       ?x = (?a \<leftrightarrow> ?b) \<bullet> ?y & atom ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 3)),
                   template_var 0))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff'",
     "([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       (?b \<leftrightarrow> ?a) \<bullet> ?x = ?y & atom ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 3)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 1)),
                   template_var 2))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff",
     "([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       ?x = (?a \<leftrightarrow> ?b) \<bullet> ?y & atom ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 3)),
                   template_var 0))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff'",
     "([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       (?b \<leftrightarrow> ?a) \<bullet> ?x = ?y & atom ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 3)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 1)),
                   template_var 2))))
           ))),
    ("Nominal2_Abs.alpha_lst",
     "(?bs, ?x) \<approx>lst ?R ?f ?p (?cs, ?y) =
      (?f ?x - set ?bs = ?f ?y - set ?cs &
       (?f ?x - set ?bs) \<sharp>* ?p &
       ?R (?p \<bullet> ?x) ?y & ?p \<bullet> ?bs = ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5)),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_var 3, template_var 5)),
                     template_app (template_hole 4, template_var 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_var 3, template_var 0)),
                   template_app (template_hole 4, template_var 1)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_var 3, template_var 5)),
                       template_app (template_hole 4, template_var 6))),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_var 4,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 5)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 6)),
                   template_var 1))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff_all",
     "([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      (ALL c.
          atom c \<sharp> ?z -->
          atom c \<sharp> (?a, ?b, ?x, ?y) -->
          (?a \<leftrightarrow> c) \<bullet> ?x =
          (?b \<leftrightarrow> c) \<bullet> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 4)),
                 template_hole 10)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 2)),
               template_hole 10)),
           template_var 1)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.Abs1_eq_iff_all",
     "([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      (ALL c.
          atom c \<sharp> ?z -->
          atom c \<sharp> (?a, ?b, ?x, ?y) -->
          (?a \<leftrightarrow> c) \<bullet> ?x =
          (?b \<leftrightarrow> c) \<bullet> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 4)),
                 template_hole 10)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 2)),
               template_hole 10)),
           template_var 1)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.Abs1_eq_iff_all",
     "([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      (ALL c.
          atom c \<sharp> ?z -->
          atom c \<sharp> (?a, ?b, ?x, ?y) -->
          (?a \<leftrightarrow> c) \<bullet> ?x =
          (?b \<leftrightarrow> c) \<bullet> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 4)),
                 template_hole 10)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 2)),
               template_hole 10)),
           template_var 1)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.alpha_sym_eqvt",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R ?y (?p \<bullet> ?x);
         ?p \<bullet> ?R = ?R; (?ds, ?x) \<approx>lst ?R ?f ?p (?es, ?y) |]
      ==> (?es, ?y) \<approx>lst ?R ?f (- ?p) (?ds, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4))
              )),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 6),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 0, template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym_eqvt",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R ?y (?p \<bullet> ?x);
         ?p \<bullet> ?R = ?R; (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>res ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4))
              )),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 6),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 0, template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym_eqvt",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R ?y (?p \<bullet> ?x);
         ?p \<bullet> ?R = ?R; (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>set ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4))
              )),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 6),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 0, template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_trans",
     "[| [| ?R (?p \<bullet> ?x) ?y; ?R (?q \<bullet> ?y) ?z |]
         ==> ?R ((?q + ?p) \<bullet> ?x) ?z;
         (?es, ?x) \<approx>lst ?R ?f ?p (?gs, ?y);
         (?gs, ?y) \<approx>lst ?R ?f ?q (?hs, ?z) |]
      ==> (?es, ?x) \<approx>lst ?R ?f (?q + ?p) (?hs, ?z)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 9,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 7)),
                 template_var 6)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_var 9,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 6)),
                   template_var 4)
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 9,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 5),
                          template_var 8)),
                      template_var 7)),
                  template_var 4)
                ))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 7)),
                    template_var 9),
                  template_var 2),
                template_var 8),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 6)),
                    template_var 9),
                  template_var 2),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 7)),
                   template_var 9),
                 template_var 2),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 8)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_trans",
     "[| [| ?R (?p \<bullet> ?x) ?y; ?R (?q \<bullet> ?y) ?z |]
         ==> ?R ((?q + ?p) \<bullet> ?x) ?z;
         (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y);
         (?cs, ?y) \<approx>res ?R ?f ?q (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>res ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 9,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 7)),
                 template_var 6)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_var 9,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 6)),
                   template_var 4)
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 9,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 5),
                          template_var 8)),
                      template_var 7)),
                  template_var 4)
                ))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 7)),
                    template_var 9),
                  template_var 2),
                template_var 8),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 6)),
                    template_var 9),
                  template_var 2),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 7)),
                   template_var 9),
                 template_var 2),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 8)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_trans",
     "[| [| ?R (?p \<bullet> ?x) ?y; ?R (?q \<bullet> ?y) ?z |]
         ==> ?R ((?q + ?p) \<bullet> ?x) ?z;
         (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y);
         (?cs, ?y) \<approx>set ?R ?f ?q (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>set ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 9,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 7)),
                 template_var 6)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_var 9,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 6)),
                   template_var 4)
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 9,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 5),
                          template_var 8)),
                      template_var 7)),
                  template_var 4)
                ))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 7)),
                    template_var 9),
                  template_var 2),
                template_var 8),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 6)),
                    template_var 9),
                  template_var 2),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 7)),
                   template_var 9),
                 template_var 2),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 8)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_lst_trans_eqvt",
     "[| (?cs, ?y) \<approx>lst ?R ?f ?q (?ds, ?z);
         (?bs, ?x) \<approx>lst ?R ?f ?p (?cs, ?y); ?q \<bullet> ?R = ?R;
         [| ?R (?p \<bullet> ?x) ?y; ?R ?y (- ?q \<bullet> ?z) |]
         ==> ?R (?p \<bullet> ?x) (- ?q \<bullet> ?z) |]
      ==> (?bs, ?x) \<approx>lst ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_var 8)),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_var 7),
                  template_var 6),
                template_var 0),
              template_app
               (template_app (template_hole 5, template_var 9),
                template_var 8))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 7),
          template_var 7),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 7,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 8)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 7, template_var 8),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 5)),
                     template_var 3))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 7,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 5)),
                    template_var 3))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))
           ))),
    ("Nominal2_Abs.alpha_res_trans_eqvt",
     "[| (?cs, ?y) \<approx>res ?R ?f ?q (?ds, ?z);
         (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y); ?q \<bullet> ?R = ?R;
         [| ?R (?p \<bullet> ?x) ?y; ?R ?y (- ?q \<bullet> ?z) |]
         ==> ?R (?p \<bullet> ?x) (- ?q \<bullet> ?z) |]
      ==> (?bs, ?x) \<approx>res ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_var 8)),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_var 7),
                  template_var 6),
                template_var 0),
              template_app
               (template_app (template_hole 5, template_var 9),
                template_var 8))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 7),
          template_var 7),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 7,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 8)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 7, template_var 8),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 5)),
                     template_var 3))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 7,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 5)),
                    template_var 3))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))
           ))),
    ("Nominal2_Abs.alpha_set_trans_eqvt",
     "[| (?cs, ?y) \<approx>set ?R ?f ?q (?ds, ?z);
         (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y); ?q \<bullet> ?R = ?R;
         [| ?R (?p \<bullet> ?x) ?y; ?R ?y (- ?q \<bullet> ?z) |]
         ==> ?R (?p \<bullet> ?x) (- ?q \<bullet> ?z) |]
      ==> (?bs, ?x) \<approx>set ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_var 8)),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_var 7),
                  template_var 6),
                template_var 0),
              template_app
               (template_app (template_hole 5, template_var 9),
                template_var 8))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 7),
          template_var 7),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 7,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 8)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 7, template_var 8),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 5)),
                     template_var 3))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 7,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 5)),
                    template_var 3))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.Nominal2_AbsMoreTemplates"
### 0.512s elapsed time, 0.703s cpu time, 0.054s GC time
val it = (): unit
