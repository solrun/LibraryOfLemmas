Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Nominal2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Nominal2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.518s cpu time, 0.040s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base" via "HOL-Library.FSet" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Nat_Bijection"
### 0.310s elapsed time, 1.253s cpu time, 0.107s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Nominal2MoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.306s elapsed time, 1.227s cpu time, 0.107s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base" via "FinFun.FinFun" via "HOL-Library.Cardinality")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.471s elapsed time, 1.877s cpu time, 0.182s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.390s elapsed time, 1.531s cpu time, 0.142s GC time
Loading theory "HOL-Library.Quotient_Syntax" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List" via "HOL-Library.Quotient_Set")
### theory "HOL-Library.Quotient_Syntax"
### 0.026s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quotient_Option" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List")
### theory "HOL-Library.Quotient_Option"
### 0.049s elapsed time, 0.205s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quotient_Product" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Quotient_Product"
### 0.104s elapsed time, 0.403s cpu time, 0.083s GC time
Loading theory "HOL-Library.Quotient_Set" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Abs" via "HOL-Library.Quotient_List")
### theory "HOL-Library.Quotient_Set"
### 0.065s elapsed time, 0.260s cpu time, 0.000s GC time
Loading theory "HOL-Library.Quotient_List" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Abs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Phantom_Type"
### 0.553s elapsed time, 2.175s cpu time, 0.224s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base" via "FinFun.FinFun")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.Quotient_List"
### 0.516s elapsed time, 1.905s cpu time, 0.691s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Nominal2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Additional type variable(s) in locale specification "card2": 'a
consts
  flat :: "'a list stream => 'a stream"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
### theory "HOL-Library.Stream"
### 1.156s elapsed time, 4.418s cpu time, 0.932s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Nominal2MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
### theory "HOL-Library.Set_Algebras"
### 0.287s elapsed time, 1.125s cpu time, 0.084s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base" via "HOL-Library.FSet")
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.918s elapsed time, 3.495s cpu time, 0.805s GC time
Loading theory "FinFun.FinFun" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
bundle finfun
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.203s elapsed time, 4.725s cpu time, 0.561s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2" via "Draft.Nominal2_Base")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.163s elapsed time, 8.473s cpu time, 0.931s GC time
Loading theory "Draft.Templates" (required by "Draft.Nominal2MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.298s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Nominal2MoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "FinFun.FinFun"
### 2.020s elapsed time, 7.896s cpu time, 0.920s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.BigO"
### 1.114s elapsed time, 3.598s cpu time, 1.370s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Nominal2MoreTemplates")
### theory "HOL-Library.Multiset"
### 4.332s elapsed time, 16.093s cpu time, 3.205s GC time
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.599s elapsed time, 1.435s cpu time, 0.160s GC time
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.962s elapsed time, 9.028s cpu time, 1.981s GC time
Loading theory "Draft.Nominal2_Base" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2")
consts
  sort_of :: "atom => atom_sort"
consts
  nat_of :: "atom => nat"
instantiation
  perm :: group_add
  minus_perm == minus :: perm => perm => perm
  uminus_perm == uminus :: perm => perm
  zero_perm == zero_class.zero :: perm
  plus_perm == plus :: perm => perm => perm
class pt = type +
  fixes permute :: "perm => 'a => 'a"
  assumes "permute_zero": "!!x. 0 \<bullet> x = x"
  assumes
    "permute_plus":
      "!!p q x. (p + q) \<bullet> x = p \<bullet> q \<bullet> x"
instantiation
  atom :: pt
  permute_atom == permute :: perm => atom => atom
instantiation
  perm :: pt
  permute_perm == permute :: perm => perm => perm
instantiation
  fun :: (pt, pt) pt
  permute_fun == permute :: perm => ('a => 'b) => 'a => 'b
instantiation
  bool :: pt
  permute_bool == permute :: perm => bool => bool
instantiation
  set :: (pt) pt
  permute_set == permute :: perm => 'a set => 'a set
instantiation
  unit :: pt
  permute_unit == permute :: perm => unit => unit
instantiation
  prod :: (pt, pt) pt
  permute_prod == permute :: perm => 'a * 'b => 'a * 'b
consts
  permute_prod :: "perm => 'a * 'b => 'a * 'b"
instantiation
  sum :: (pt, pt) pt
  permute_sum == permute :: perm => 'a + 'b => 'a + 'b
consts
  permute_sum :: "perm => 'a + 'b => 'a + 'b"
instantiation
  list :: (pt) pt
  permute_list == permute :: perm => 'a list => 'a list
consts
  permute_list :: "perm => 'a list => 'a list"
instantiation
  option :: (pt) pt
  permute_option == permute :: perm => 'a option => 'a option
consts
  permute_option :: "perm => 'a option => 'a option"
instantiation
  multiset :: (pt) pt
  permute_multiset == permute :: perm => 'a multiset => 'a multiset
instantiation
  fset :: (pt) pt
  permute_fset == permute :: perm => 'a fset => 'a fset
instantiation
  finfun :: (pt, pt) pt
  permute_finfun == permute :: perm => ('a, 'b) finfun => ('a, 'b) finfun
instantiation
  char :: pt
  permute_char == permute :: perm => char => char
instantiation
  nat :: pt
  permute_nat == permute :: perm => nat => nat
instantiation
  int :: pt
  permute_int == permute :: perm => int => int
class pure = pt +
  assumes "permute_pure": "!!p x. p \<bullet> x = x"
### ML warning (line 75 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 93 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 115 of "$AFP/Nominal2/nominal_basics.ML"):
### Matches are not exhaustive.
### ML warning (line 118 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 130 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (z) has not been referenced.
### ML warning (line 130 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 129 of "$AFP/Nominal2/nominal_basics.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 152 of "$AFP/Nominal2/nominal_basics.ML"):
### Pattern is not exhaustive.
infix 1 ||>>>
infix 1 |>>>
signature NOMINAL_BASIC =
  sig
    val dest_fsetT: typ -> typ
    val dest_listT: typ -> typ
    val dest_perm: term -> term * term
    val fixed_nonfixed_args: Proof.context -> term -> term * term list
    val fold_left: ('a * 'a -> 'a) -> 'a list -> 'a -> 'a
    val is_fixed: Proof.context -> term -> bool
    val is_true: term -> bool
    val last2: 'a list -> 'a * 'a
    val long_name: Proof.context -> string -> string
    val map4:
       ('a -> 'b -> 'c -> 'd -> 'e) ->
         'a list -> 'b list -> 'c list -> 'd list -> 'e list
    val mk_All: string * typ -> term -> term
    val mk_all: string * typ -> term -> term
    val mk_case_sum: term -> term -> term
    val mk_equiv: thm -> thm
    val mk_exists: string * typ -> term -> term
    val mk_id: term -> term
    val mk_minus: term -> term
    val mk_perm: term -> term -> term
    val mk_perm_ty: typ -> term -> term -> term
    val mk_plus: term -> term -> term
    val order: ('a * 'a -> bool) -> 'a list -> ('a * 'b) list -> 'b list
    val order_default:
       ('a * 'a -> bool) -> 'b -> 'a list -> ('a * 'b) list -> 'b list
    val perm_const: typ -> term
    val perm_ty: typ -> typ
    val remove_dups: ('a * 'a -> bool) -> 'a list -> 'a list
    val safe_mk_equiv: thm -> thm
    val split_filter: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_last2: 'a list -> 'a list * 'a * 'a
    val split_triples: ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
    val trace: bool ref
    val trace_msg: (unit -> string) -> unit
    val |>>> : 'a * ('a -> 'b * 'c) -> 'b list * 'c
    val ||>>> : ('a list * 'b) * ('b -> 'a * 'b) -> 'a list * 'b
  end
structure Nominal_Basic: NOMINAL_BASIC
val order = fn: ('a * 'a -> bool) -> 'a list -> ('a * 'b) list -> 'b list
val dest_listT = fn: typ -> typ
val mk_perm = fn: term -> term -> term
val mk_plus = fn: term -> term -> term
val split_filter = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val fold_left = fn: ('a * 'a -> 'a) -> 'a list -> 'a -> 'a
val split_last2 = fn: 'a list -> 'a list * 'a * 'a
val order_default = fn:
   ('a * 'a -> bool) -> 'b -> 'a list -> ('a * 'b) list -> 'b list
val perm_const = fn: typ -> term
val last2 = fn: 'a list -> 'a * 'a
val mk_perm_ty = fn: typ -> term -> term -> term
val is_fixed = fn: Proof.context -> term -> bool
val mk_id = fn: term -> term
val mk_All = fn: string * typ -> term -> term
val map4 = fn:
   ('a -> 'b -> 'c -> 'd -> 'e) ->
     'a list -> 'b list -> 'c list -> 'd list -> 'e list
val is_true = fn: term -> bool
val safe_mk_equiv = fn: thm -> thm
val trace = ref false: bool ref
val mk_all = fn: string * typ -> term -> term
val mk_case_sum = fn: term -> term -> term
val dest_fsetT = fn: typ -> typ
val remove_dups = fn: ('a * 'a -> bool) -> 'a list -> 'a list
val fixed_nonfixed_args = fn: Proof.context -> term -> term * term list
val |>>> = fn: 'a * ('a -> 'b * 'c) -> 'b list * 'c
val dest_perm = fn: term -> term * term
val mk_equiv = fn: thm -> thm
val perm_ty = fn: typ -> typ
val mk_exists = fn: string * typ -> term -> term
val long_name = fn: Proof.context -> string -> string
val split_triples = fn: ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val mk_minus = fn: term -> term
val ||>>> = fn: ('a list * 'b) * ('b -> 'a * 'b) -> 'a list * 'b
val trace_msg = fn: (unit -> string) -> unit
### ML warning (line 200 of "$AFP/Nominal2/nominal_thmdecls.ML"):
### Pattern is not exhaustive.
### ML warning (line 200 of "$AFP/Nominal2/nominal_thmdecls.ML"):
### Value identifier (p') has not been referenced.
### ML warning (line 241 of "$AFP/Nominal2/nominal_thmdecls.ML"):
### Pattern is not exhaustive.
signature NOMINAL_THMDECLS =
  sig
    val eqvt_add: attribute
    val eqvt_del: attribute
    val eqvt_raw_add: attribute
    val eqvt_raw_del: attribute
    val eqvt_transform: Proof.context -> thm -> thm
    val get_eqvts_raw_thms: Proof.context -> thm list
    val get_eqvts_thms: Proof.context -> thm list
    val is_eqvt: Proof.context -> term -> bool
  end
structure Nominal_ThmDecls: NOMINAL_THMDECLS
### ML warning (line 72 of "$AFP/Nominal2/nominal_permeq.ML"):
### Value identifier (pre_thms) has not been referenced.
### ML warning (line 78 of "$AFP/Nominal2/nominal_permeq.ML"):
### Value identifier (post_thms) has not been referenced.
infix 4 addpres
infix 4 addposts
infix 4 addexcls
signature NOMINAL_PERMEQ =
  sig
    val addexcls: eqvt_config * string list -> eqvt_config
    val addposts: eqvt_config * thm list -> eqvt_config
    val addpres: eqvt_config * thm list -> eqvt_config
    val args_parser: (thm list * string list) context_parser
    val delposts: eqvt_config -> eqvt_config
    val delpres: eqvt_config -> eqvt_config
    datatype eqvt_config
    =
         Eqvt_Config of
             {excluded: string list,
              post_thms: thm list, pre_thms: thm list, strict_mode: bool}
    val eqvt_conv: Proof.context -> eqvt_config -> conv
    val eqvt_relaxed_config: eqvt_config
    val eqvt_rule: Proof.context -> eqvt_config -> thm -> thm
    val eqvt_strict_config: eqvt_config
    val eqvt_tac: Proof.context -> eqvt_config -> int -> tactic
    val perm_simp_meth:
       thm list * string list -> Proof.context -> Proof.method
    val perm_strict_simp_meth:
       thm list * string list -> Proof.context -> Proof.method
    val trace_eqvt: bool Config.T
  end
structure Nominal_Permeq: NOMINAL_PERMEQ
class le_eqvt = pt + order +
  assumes
    "le_eqvt":
      "!!p x y. p \<bullet> (x <= y) = (p \<bullet> x <= p \<bullet> y)"
class inf_eqvt = complete_lattice + pt +
  assumes "inf_eqvt": "!!p X. p \<bullet> Inf X = Inf (p \<bullet> X)"
instantiation
  bool :: le_eqvt
instantiation
  fun :: (pt, le_eqvt) le_eqvt
instantiation
  bool :: inf_eqvt
instantiation
  fun :: (pt, inf_eqvt) inf_eqvt
class pt = type +
  fixes permute :: "perm => 'a => 'a"
  assumes "permute_zero": "!!x. 0 \<bullet> x = x"
  assumes
    "permute_plus":
      "!!p q x. (p + q) \<bullet> x = p \<bullet> q \<bullet> x"
class fs = pt +
  assumes "finite_supp": "!!x. finite (supp x)"
class at_base = pt +
  fixes atom :: "'a => atom"
  assumes "atom_eq_iff": "!!a b. (atom a = atom b) = (a = b)"
  assumes "atom_eqvt": "!!p a. p \<bullet> atom a = atom (p \<bullet> a)"
class at = at_base +
  assumes "sort_of_atom_eq": "!!a b. sort_of (atom a) = sort_of (atom b)"
### ML warning (line 260 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
### ML warning (line 259 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
### ML warning (line 258 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
### ML warning (line 257 of "$AFP/Nominal2/nominal_library.ML"):
### Value identifier (tys) has not been referenced.
type cns_info = (term * typ * typ list * bool list) list
signature NOMINAL_LIBRARY =
  sig
    val all_dtyp_constrs_types: Old_Datatype_Aux.descr -> cns_info list
    val atom_const: typ -> term
    val atom_ty: typ -> typ
    val atomify: Proof.context -> term -> term
    val atomify_ty: Proof.context -> typ -> term -> term
    val atomize: Proof.context -> thm -> thm
    val atomize_concl: Proof.context -> thm -> thm
    val atomize_rule: Proof.context -> int -> thm -> thm
    type cns_info = (term * typ * typ list * bool list) list
    val conj_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val finite_const: typ -> term
    val fold_append: term list -> term
    val fold_conj: term list -> term
    val fold_conj_balanced: term list -> term
    val fold_union: term list -> term
    val fold_union_env: typ list -> term list -> term
    val fresh_args: Proof.context -> term -> term list
    val fresh_const: typ -> term
    val fresh_star_const: typ -> term
    val is_atom: Proof.context -> typ -> bool
    val is_atom_fset: Proof.context -> typ -> bool
    val is_atom_list: Proof.context -> typ -> bool
    val is_atom_set: Proof.context -> typ -> bool
    val listify: Proof.context -> term -> term
    val listify_ty: Proof.context -> typ -> term -> term
    val mk_append: term * term -> term
    val mk_atom: term -> term
    val mk_atom_fset: term -> term
    val mk_atom_fset_ty: typ -> term -> term
    val mk_atom_list: term -> term
    val mk_atom_list_ty: typ -> term -> term
    val mk_atom_set: term -> term
    val mk_atom_set_ty: typ -> term -> term
    val mk_atom_ty: typ -> term -> term
    val mk_binop_env: typ list -> string -> term * term -> term
    val mk_conj: term * term -> term
    val mk_diff: term * term -> term
    val mk_finite: term -> term
    val mk_finite_ty: typ -> term -> term
    val mk_fresh: term -> term -> term
    val mk_fresh_star: term -> term -> term
    val mk_fresh_star_ty: typ -> term -> term -> term
    val mk_fresh_ty: typ -> term -> term -> term
    val mk_full_horn: (string * typ) list -> term list -> term -> term
    val mk_sort_of: term -> term
    val mk_supp: term -> term
    val mk_supp_rel: term -> term -> term
    val mk_supp_rel_ty: typ -> term -> term -> term
    val mk_supp_ty: typ -> term -> term
    val mk_supports: term -> term -> term
    val mk_supports_ty: typ -> term -> term -> term
    val mk_union: term * term -> term
    val mk_union_env: typ list -> term * term -> term
    val pat_completeness_simp: thm list -> Proof.context -> tactic
    val prove_termination_fun:
       thm list -> Proof.context -> Function.info * local_theory
    val prove_termination_ind: Proof.context -> int -> tactic
    val setify: Proof.context -> term -> term
    val setify_ty: Proof.context -> typ -> term -> term
    val size_ss: simpset
    val strip_full_horn: term -> (string * typ) list * term list * term
    val supp_const: typ -> term
    val supp_rel_const: typ -> term
    val supports_const: typ -> term
    val to_set: term -> term
    val to_set_ty: typ -> term -> term
    val transform_prem1: Proof.context -> string list -> thm -> thm
    val transform_prem2: Proof.context -> string list -> thm -> thm
  end
structure Nominal_Library: NOMINAL_LIBRARY
val conj_tac = fn: Proof.context -> (int -> tactic) -> int -> tactic
val is_atom_fset = fn: Proof.context -> typ -> bool
val mk_union_env = fn: typ list -> term * term -> term
val size_ss =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb =
                        Net {atoms =
                             {("HOL.eq",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[{elhs = "... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Abs ("...", "?'d1", ...), name = "HOL.simp_thms_38",
  ...}]})},
                             comb = Leaf [], var = Leaf []},
                        var =
                        Leaf
                         [{elhs = "EX x. ?t1 = x & ?P1 x", extra = false,
                           fo = false, lhs =
                           Const ("HOL.Ex", "(... ... ...) => bool") $
                             Abs ("x", "?'d1",
                               Const ("...", ...) $ (... $ ... $ ...) $
                                 ...),
                           name = "HOL.simp_thms_40", perm = false, thm =
                           "EX x. ?t1 ... x & ?P1 x == ?P1 ?t1"},
                          {elhs = "EX x. x = ?t1 & ?P1 x", extra = false,
                           fo = false, lhs =
                           Const ("HOL.Ex", "(...) ... bool") $
                             Abs ("x", "?'d1",
                               Const ("...", "bool => bool => bool") $ ... $
                                 ...),
                           name = "HOL.simp_thms_39", perm = false, thm =
                           "EX x. ... ... ... ... ... ... == ?P1 ?t1"},
                          {elhs = "EX x. x = ?t1", extra = false, fo = true,
                           lhs =
                           Const ("HOL.Ex", "... ... ...") $
                             Abs ("x", "...", ... $ ... $ ...),
                           name = "HOL.simp_thms_37", perm = false, thm =
                           "... x... ... ... ... == True"},
                          {elhs = "EX x. ?y", extra = false, fo = true,
                           lhs =
                           Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                           name = "HOL.simp_thms_36", perm = false, thm =
                           "... ...... ... ... ?y"},
                          {elhs = "... x... ... ... ...", extra = false,
                           fo = false, lhs =
                           Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                           name = "HOL.ex_simps_6", perm = false, thm =
                           "... ... ..."},
                          {elhs = "... ...... ...", extra = false, fo =
                           false, lhs =
                           Const ("...", ...) $ Abs ("...", "?'e1", ...),
                           name = "HOL.ex_simps_5", ...},
                          {elhs = "...", extra = false, fo = false, lhs =
                           Const ("...", "(?'d1 => bool) => bool") $ ...,
                           ...},
                          {elhs = "...", extra = false, fo = false, ...},
                          {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "ALL x. ?t1 ~= x", extra = false, fo =
                            true, lhs =
                            Const ("HOL.All", "(...) ... bool") $
                              Abs ("x", "?'d1",
                                Const ("...", "bool => bool") $ ...),
                            name = "HOL.simp_thms_44", perm = false, thm =
                            "ALL x. ?t1 ... x == False"},
                           {elhs = "ALL x. x ~= ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "HOL.simp_thms_43", perm = false, thm =
                            "... x... ... ... ... == False"},
                           {elhs = "ALL x. ... ... ... ... ... ...", extra =
                            false, fo = false, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.simp_thms_42", perm = false, thm =
                            "... ...... ... ... ... ..."},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "HOL.simp_thms_41", perm = false, thm =
                            "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'b1", ...),
                            name = "HOL.simp_thms_35", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'f1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "~ True", extra = false, fo = true,
                               lhs =
                               Const ("HOL.Not", "...") $
                                 Const ("HOL.True", "..."),
                               name = "HOL.simp_thms_7", perm = false, thm =
                               "... True ... False"}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "~ False", extra = false, fo = true,
                                lhs =
                                Const ("HOL.Not", "...") $
                                  Const ("...", ...),
                                name = "HOL.simp_thms_8", perm = false,
                                thm = "... ... ... ..."}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = "...", extra = false, fo = true, ...}]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = ..., extra = false, ...}]}),
                                ("HOL.Not",
                                  Net {atoms = {}, comb = Leaf [...], var =
 Leaf [...]})},
                              comb =
                              Net {atoms =
                                   {("HOL.eq",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("HOL.conj",
 Net {atoms = {}, comb = ..., var = ...}),
                                     ("HOL.disj", Net {atoms = {}, ...}),
                                     ("HOL.implies", ...)},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "THE x. x ... ?y", extra = false, fo =
                            true, lhs =
                            Const ("HOL.The", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.the_eq_trivial", perm = false, thm =
                            "... ...... ... ... ?y"}]}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...x... ... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("Pure.all", "...") $ Abs ("x", ..., ...),
                            name = "HOL.subst_all_2", perm = false, thm =
                            "... ... ... ..."},
                           {elhs = "......... ...", extra = false, fo =
                            false, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.subst_all_1", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'a => prop) => prop") $ ...,
                            ...}]}),
                  ("Wellfounded.wf",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("Wellfounded.measure",
                                 Net {atoms = {}, comb = ..., var = ...})},
                              comb = Leaf [], var = Leaf []},
                         var = Leaf []})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]})},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}})},
                                  comb = Leaf [], var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]})},
 comb = Leaf [], var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?x1 ... ?x1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1"),
                                     name = "HOL.simp_thms_6", perm = false,
                                     thm = "... ... ..."}]}}),
                       ("HOL.conj",
                         Net {atoms =
                              {("HOL.True",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                                ("HOL.False",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("HOL.Not",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                   comb =
                                   Net {atoms =
  {("HOL.conj", Net {atoms = {}, comb = ..., var = ...}),
    ("HOL.implies", Net {atoms = {}, ...})},
  comb = Leaf [], var = Leaf []},
                                   var = Leaf []},
                              var =
                              Net {atoms =
                                   {("HOL.True",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                     ("HOL.False",
 Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                   comb =
                                   Net {atoms =
  {("HOL.Not", Net {atoms = {}, comb = ..., var = ...})}, comb =
  Net {atoms = {("HOL.conj", ...)}, comb = Leaf [...], var = Leaf [...]},
  var = Leaf []},
                                   var =
                                   Leaf
                                    [{elhs = "... ... ...", extra = false,
fo = true, lhs = Const ("...", ...) $ Var ((...), "bool") $ ..., name =
"HOL.simp_thms_25", ...}]}}),
                       ("HOL.disj",
                         Net {atoms =
                              {("HOL.True",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = "...", extra = false, fo = true, ...}]}),
                                ("HOL.False",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = ..., extra = false, ...}]})},
                              comb =
                              Net {atoms =
                                   {("HOL.Not",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb =
                                   Net {atoms =
  {("HOL.disj", Net {atoms = {}, ...}), ("HOL.implies", ...)}, comb =
  Leaf [], var = Leaf []},
                                   var = Leaf []},
                              var =
                              Net {atoms =
                                   {("HOL.True",
Leaf [{elhs = "...", extra = false, fo = true, ...}]),
                                     ("HOL.False",
 Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("HOL.Not", Net {atoms = {}, ...})}, comb =
  Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
                                   var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {("HOL.Trueprop", ...)},
  comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.member",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var = Leaf []}),
                       ("HOL.implies",
                         Net {atoms =
                              {("HOL.True",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.False", Net {atoms = {}, ...})},
                              comb =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("HOL.True", ...), ...}, comb =
                                   Net {atoms = {...}, ...}, var =
                                   Leaf [...]}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("Groups.times_class.times",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Orderings.ord_class.less",
                         Net {atoms = {...}, comb = ..., var = ...})},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Sum_Type.sum.case_sum",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}}),
                            ("Basic_BNF_LFPs.prod.size_prod",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var = Leaf []}},
     {congs =
      ({((true, "HOL.implies"),
          "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
           ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q == PROP ?Q' |]
            ==> (PROP ?P =simp=> PROP ?Q) == (PROP ?P' =simp=> PROP ?Q')")},
       []),
      loop_tacs =
      [("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)], mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("Pure.all", "...") $
                               Abs ("x", "...", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms = {}, comb = Leaf [], var =
                             Net {atoms = {}, comb = Leaf [], var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "HOL.neq", proc = fn,
stamp = Stamp 91400}]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {("HOL.False", ...)}, comb = Leaf [...], var = Leaf [...]})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Orderings.ord_class.less",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb =
                                   Net {atoms =
  {("Groups.plus_class.plus", ...), ...}, comb = Leaf [...], var =
  Leaf [...]},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {("Nat.Suc", ...)}, comb =
  Net {atoms = {...}, ...}, var = Leaf [...]},
                                   var = Leaf []}})},
                     comb = Leaf [], var = Leaf []},
                var = Leaf []},
           var = Leaf []},
      solvers =
      ([Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val mk_finite = fn: term -> term
val fresh_args = fn: Proof.context -> term -> term list
val atom_ty = fn: typ -> typ
val mk_atom_set = fn: term -> term
val mk_fresh_star_ty = fn: typ -> term -> term -> term
val mk_full_horn = fn: (string * typ) list -> term list -> term -> term
val atomize_rule = fn: Proof.context -> int -> thm -> thm
val prove_termination_ind = fn: Proof.context -> int -> tactic
val supp_const = fn: typ -> term
val mk_diff = fn: term * term -> term
val supp_rel_const = fn: typ -> term
val setify_ty = fn: Proof.context -> typ -> term -> term
val transform_prem2 = fn: Proof.context -> string list -> thm -> thm
val fold_append = fn: term list -> term
val atomize = fn: Proof.context -> thm -> thm
val atom_const = fn: typ -> term
val mk_supports = fn: term -> term -> term
val fresh_star_const = fn: typ -> term
val is_atom_list = fn: Proof.context -> typ -> bool
val strip_full_horn = fn: term -> (string * typ) list * term list * term
val fold_conj = fn: term list -> term
val listify = fn: Proof.context -> term -> term
val fold_union = fn: term list -> term
val mk_union = fn: term * term -> term
val mk_atom = fn: term -> term
val mk_append = fn: term * term -> term
val all_dtyp_constrs_types = fn: Old_Datatype_Aux.descr -> cns_info list
val fold_union_env = fn: typ list -> term list -> term
val mk_fresh = fn: term -> term -> term
val is_atom_set = fn: Proof.context -> typ -> bool
val mk_sort_of = fn: term -> term
val listify_ty = fn: Proof.context -> typ -> term -> term
val mk_atom_fset_ty = fn: typ -> term -> term
val mk_fresh_star = fn: term -> term -> term
val to_set_ty = fn: typ -> term -> term
val mk_atom_ty = fn: typ -> term -> term
val mk_supp_rel_ty = fn: typ -> term -> term -> term
val prove_termination_fun = fn:
   thm list -> Proof.context -> Function.info * local_theory
val atomify = fn: Proof.context -> term -> term
val mk_atom_set_ty = fn: typ -> term -> term
val atomify_ty = fn: Proof.context -> typ -> term -> term
val pat_completeness_simp = fn: thm list -> Proof.context -> tactic
val mk_conj = fn: term * term -> term
val finite_const = fn: typ -> term
val setify = fn: Proof.context -> term -> term
val is_atom = fn: Proof.context -> typ -> bool
val mk_atom_fset = fn: term -> term
val mk_atom_list_ty = fn: typ -> term -> term
val transform_prem1 = fn: Proof.context -> string list -> thm -> thm
val mk_finite_ty = fn: typ -> term -> term
val mk_fresh_ty = fn: typ -> term -> term -> term
val mk_binop_env = fn: typ list -> string -> term * term -> term
val atomize_concl = fn: Proof.context -> thm -> thm
val fresh_const = fn: typ -> term
val fold_conj_balanced = fn: term list -> term
val supports_const = fn: typ -> term
val to_set = fn: term -> term
val mk_supp = fn: term -> term
val mk_supports_ty = fn: typ -> term -> term -> term
val mk_supp_rel = fn: term -> term -> term
val mk_atom_list = fn: term -> term
val mk_supp_ty = fn: typ -> term -> term
### ML warning (line 28 of "$AFP/Nominal2/nominal_atoms.ML"):
### Value identifier (arg) has not been referenced.
signature ATOM_DECL =
  sig val add_atom_decl: binding * binding option -> theory -> theory end
structure Atom_Decl: ATOM_DECL
### ML warning (line 77 of "$AFP/Nominal2/nominal_eqvt.ML"):
### Matches are not exhaustive.
### ML warning (line 93 of "$AFP/Nominal2/nominal_eqvt.ML"):
### Pattern is not exhaustive.
### ML warning (line 125 of "$AFP/Nominal2/nominal_eqvt.ML"):
### Pattern is not exhaustive.
signature NOMINAL_EQVT =
  sig
    val equivariance_cmd: string -> Proof.context -> local_theory
    val raw_equivariance:
       Proof.context -> term list -> thm -> thm list -> thm list
  end
structure Nominal_Eqvt: NOMINAL_EQVT
### theory "Draft.Nominal2_Base"
### 2.906s elapsed time, 3.953s cpu time, 1.455s GC time
Loading theory "Draft.Nominal2_Abs" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2")
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_set_rel ((?bs1, ?x1), ?R1, ?f1, ?p1, ?cs1, ?y1) ==>
### alpha_set (?bs1, ?x1) ?R1 ?f1 ?p1 (?cs1, ?y1) ==
### ?f1 ?x1 - ?bs1 = ?f1 ?y1 - ?cs1 &
### (?f1 ?x1 - ?bs1) \<sharp>* ?p1 &
### ?R1 (?p1 \<bullet> ?x1) ?y1 & ?p1 \<bullet> ?bs1 = ?cs1
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_res_rel ((?bs1, ?x1), ?R1, ?f1, ?p1, ?cs1, ?y1) ==>
### alpha_res (?bs1, ?x1) ?R1 ?f1 ?p1 (?cs1, ?y1) ==
### ?f1 ?x1 - ?bs1 = ?f1 ?y1 - ?cs1 &
### (?f1 ?x1 - ?bs1) \<sharp>* ?p1 & ?R1 (?p1 \<bullet> ?x1) ?y1
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_lst_rel ((?bs1, ?x1), ?R1, ?f1, ?p1, ?cs1, ?y1) ==>
### alpha_lst (?bs1, ?x1) ?R1 ?f1 ?p1 (?cs1, ?y1) ==
### ?f1 ?x1 - set ?bs1 = ?f1 ?y1 - set ?cs1 &
### (?f1 ?x1 - set ?bs1) \<sharp>* ?p1 &
### ?R1 (?p1 \<bullet> ?x1) ?y1 & ?p1 \<bullet> ?bs1 = ?cs1
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_abs_set_rel ((?bs1, ?x1), ?cs1, ?y1) ==>
### alpha_abs_set (?bs1, ?x1) (?cs1, ?y1) ==
### EX p. (?bs1, ?x1) \<approx>set (=) supp p (?cs1, ?y1)
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_abs_lst_rel ((?bs1, ?x1), ?cs1, ?y1) ==>
### alpha_abs_lst (?bs1, ?x1) (?cs1, ?y1) ==
### EX p. (?bs1, ?x1) \<approx>lst (=) supp p (?cs1, ?y1)
Found termination order: "{}"
### Rewrite rule not in simpset:
### Wellfounded.accp alpha_abs_res_rel ((?bs1, ?x1), ?cs1, ?y1) ==>
### alpha_abs_res (?bs1, ?x1) (?cs1, ?y1) ==
### EX p. (?bs1, ?x1) \<approx>res (=) supp p (?cs1, ?y1)
Found termination order: "{}"
instantiation
  abs_set :: (pt) pt
  permute_abs_set == permute :: perm => 'a abs_set => 'a abs_set
instantiation
  abs_res :: (pt) pt
  permute_abs_res == permute :: perm => 'a abs_res => 'a abs_res
instantiation
  abs_lst :: (pt) pt
  permute_abs_lst == permute :: perm => 'a abs_lst => 'a abs_lst
### ML warning (line 927 of "$AFP/Nominal2/Nominal2_Abs.thy"):
### Pattern is not exhaustive.
val alpha_single_simproc = fn:
   thm -> 'a -> Proof.context -> cterm -> thm option
Found termination order: "{}"
### theory "Draft.Nominal2_Abs"
### 1.201s elapsed time, 1.322s cpu time, 0.169s GC time
Loading theory "Draft.Nominal2_FCB" (required by "Draft.Nominal2MoreTemplates" via "Draft.Nominal2")
val all_trivials = fn: (Proof.context -> Proof.method) context_parser
### theory "Draft.Nominal2_FCB"
### 0.103s elapsed time, 0.103s cpu time, 0.000s GC time
Loading theory "Draft.Nominal2" (required by "Draft.Nominal2MoreTemplates")
signature NOMINAL_DT_DATA =
  sig
    datatype alpha_result
    =
         AlphaResult of
             {alpha_bn_names: string list,
              alpha_bn_trms: term list,
              alpha_bn_tys: typ list,
              alpha_cases: thm list,
              alpha_intros: thm list,
              alpha_names: string list,
              alpha_raw_induct: thm,
              alpha_trms: term list, alpha_tys: typ list}
    datatype bclause = BC of bmode * (term option * int) list * int list
    datatype bmode = Lst | Res | Set
    type bn_info = term * int * (int * term option) list list
    val get_all_info: Proof.context -> (string * info) list
    val get_info: Proof.context -> string -> info option
    type info =
       {distinct: thm list,
        inject: thm list,
        strong_exhaust: thm list, strong_inducts: thm list}
    val mk_infos:
       string list ->
         thm list ->
           thm list -> thm list -> thm list -> (string * info) list
    datatype raw_dt_info
    =
         RawDtInfo of
             {raw_all_cns: term list list,
              raw_cns_info: cns_info list,
              raw_distinct_thms: thm list,
              raw_dt_names: string list,
              raw_dts: Old_Datatype.spec list,
              raw_exhaust_thms: thm list,
              raw_fp_sugars: BNF_FP_Def_Sugar.fp_sugar list,
              raw_induct_thm: thm,
              raw_induct_thms: thm list,
              raw_inject_thms: thm list,
              raw_size_thms: thm list,
              raw_size_trms: term list,
              raw_ty_args: (string * sort) list, raw_tys: typ list}
    val register_info: string * info -> Context.generic -> Context.generic
    val the_info: Proof.context -> string -> info
    datatype user_data
    =
         UserData of
             {bclauses: bclause list list list,
              bn_eqs: (Attrib.binding * term) list,
              bn_funs: (binding * typ * mixfix) list,
              cn_names: string list,
              cn_tys: (string * string) list, dts: Old_Datatype.spec list}
  end
structure Nominal_Dt_Data: NOMINAL_DT_DATA
type bn_info = term * int * (int * term option) list list
datatype raw_dt_info
=
     RawDtInfo of
         {raw_all_cns: term list list,
          raw_cns_info: cns_info list,
          raw_distinct_thms: thm list,
          raw_dt_names: string list,
          raw_dts: Old_Datatype.spec list,
          raw_exhaust_thms: thm list,
          raw_fp_sugars: BNF_FP_Def_Sugar.fp_sugar list,
          raw_induct_thm: thm,
          raw_induct_thms: thm list,
          raw_inject_thms: thm list,
          raw_size_thms: thm list,
          raw_size_trms: term list,
          raw_ty_args: (string * sort) list, raw_tys: typ list}
datatype user_data
=
     UserData of
         {bclauses: Nominal_Dt_Data.bclause list list list,
          bn_eqs: (Attrib.binding * term) list,
          bn_funs: (binding * typ * mixfix) list,
          cn_names: string list,
          cn_tys: (string * string) list, dts: Old_Datatype.spec list}
datatype bmode = Lst | Res | Set
datatype bclause = BC of bmode * (term option * int) list * int list
type info =
   {distinct: thm list,
    inject: thm list, strong_exhaust: thm list, strong_inducts: thm list}
datatype alpha_result
=
     AlphaResult of
         {alpha_bn_names: string list,
          alpha_bn_trms: term list,
          alpha_bn_tys: typ list,
          alpha_cases: thm list,
          alpha_intros: thm list,
          alpha_names: string list,
          alpha_raw_induct: thm, alpha_trms: term list, alpha_tys: typ list}
constructor Lst: bmode
constructor UserData:
   {bclauses: bclause list list list,
    bn_eqs: (Attrib.binding * term) list,
    bn_funs: (binding * typ * mixfix) list,
    cn_names: string list,
    cn_tys: (string * string) list, dts: Old_Datatype.spec list}
     -> user_data
val the_info = fn: Proof.context -> string -> info
val register_info = fn: string * info -> Context.generic -> Context.generic
val get_all_info = fn: Proof.context -> (string * info) list
constructor BC: bmode * (term option * int) list * int list -> bclause
val get_info = fn: Proof.context -> string -> info option
constructor Res: bmode
constructor AlphaResult:
   {alpha_bn_names: string list,
    alpha_bn_trms: term list,
    alpha_bn_tys: typ list,
    alpha_cases: thm list,
    alpha_intros: thm list,
    alpha_names: string list,
    alpha_raw_induct: thm, alpha_trms: term list, alpha_tys: typ list}
     -> alpha_result
constructor RawDtInfo:
   {raw_all_cns: term list list,
    raw_cns_info: cns_info list,
    raw_distinct_thms: thm list,
    raw_dt_names: string list,
    raw_dts: Old_Datatype.spec list,
    raw_exhaust_thms: thm list,
    raw_fp_sugars: BNF_FP_Def_Sugar.fp_sugar list,
    raw_induct_thm: thm,
    raw_induct_thms: thm list,
    raw_inject_thms: thm list,
    raw_size_thms: thm list,
    raw_size_trms: term list,
    raw_ty_args: (string * sort) list, raw_tys: typ list}
     -> raw_dt_info
constructor Set: bmode
val mk_infos = fn:
   string list ->
     thm list -> thm list -> thm list -> thm list -> (string * info) list
### ML warning (line 82 of "$AFP/Nominal2/nominal_dt_rawfuns.ML"):
### Pattern is not exhaustive.
### ML warning (line 296 of "$AFP/Nominal2/nominal_dt_rawfuns.ML"):
### Value identifier (lthy) has not been referenced.
### ML warning (line 538 of "$AFP/Nominal2/nominal_dt_rawfuns.ML"):
### Pattern is not exhaustive.
signature NOMINAL_DT_RAWFUNS =
  sig
    val define_raw_bn_perms:
       raw_dt_info ->
         bn_info list -> local_theory -> term list * thm list * local_theory
    val define_raw_bns:
       raw_dt_info ->
         (binding * typ option * mixfix) list ->
           Specification.multi_specs ->
             local_theory ->
               term list * thm list * bn_info list * thm list * local_theory
    val define_raw_fvs:
       raw_dt_info ->
         bn_info list ->
           bclause list list list ->
             Proof.context ->
               term list * term list * thm list * thm list * local_theory
    val define_raw_perms:
       raw_dt_info ->
         local_theory -> (term list * thm list * thm list) * local_theory
    val get_all_binders: bclause list -> (term option * int) list
    val is_recursive_binder: bclause -> bool
    val raw_prove_eqvt:
       term list -> thm list -> thm list -> Proof.context -> thm list
  end
structure Nominal_Dt_RawFuns: NOMINAL_DT_RAWFUNS
val get_all_binders = fn: bclause list -> (term option * int) list
val raw_prove_eqvt = fn:
   term list -> thm list -> thm list -> Proof.context -> thm list
val define_raw_bns = fn:
   raw_dt_info ->
     (binding * typ option * mixfix) list ->
       Specification.multi_specs ->
         local_theory ->
           term list * thm list * bn_info list * thm list * local_theory
val define_raw_fvs = fn:
   raw_dt_info ->
     bn_info list ->
       bclause list list list ->
         Proof.context ->
           term list * term list * thm list * thm list * local_theory
val define_raw_bn_perms = fn:
   raw_dt_info ->
     bn_info list -> local_theory -> term list * thm list * local_theory
val is_recursive_binder = fn: bclause -> bool
val define_raw_perms = fn:
   raw_dt_info ->
     local_theory -> (term list * thm list * thm list) * local_theory
### ML warning (line 381 of "$AFP/Nominal2/nominal_dt_alpha.ML"):
### Pattern is not exhaustive.
### ML warning (line 826 of "$AFP/Nominal2/nominal_dt_alpha.ML"):
### Pattern is not exhaustive.
signature NOMINAL_DT_ALPHA =
  sig
    val alpha_prove:
       term list ->
         (term * (term * term -> term)) list ->
           thm ->
             (Proof.context -> int -> tactic) -> Proof.context -> thm list
    val comb_binders:
       Proof.context ->
         bmode -> term list -> (term option * int) list -> term
    val define_raw_alpha:
       raw_dt_info ->
         bn_info list ->
           bclause list list list ->
             term list -> Proof.context -> alpha_result * local_theory
    val induct_prove:
       typ list ->
         (typ * (term -> term)) list ->
           thm ->
             (Proof.context -> int -> tactic) -> Proof.context -> thm list
    val mk_alpha_permute_rsp: Proof.context -> thm -> thm
    val mk_funs_rsp: Proof.context -> thm -> thm
    val raw_alpha_bn_rsp: alpha_result -> thm list -> thm list -> thm list
    val raw_constrs_rsp:
       Proof.context ->
         alpha_result -> term list list -> thm list -> thm list list
    val raw_fv_bn_rsp_aux:
       Proof.context ->
         alpha_result ->
           term list -> term list -> term list -> thm list -> thm list
    val raw_perm_bn_rsp:
       Proof.context -> alpha_result -> term list -> thm list -> thm list
    val raw_prove_alpha_distincts:
       Proof.context -> alpha_result -> raw_dt_info -> thm list
    val raw_prove_alpha_eq_iff:
       Proof.context -> alpha_result -> raw_dt_info -> thm list
    val raw_prove_bn_imp: Proof.context -> alpha_result -> thm list
    val raw_prove_equivp:
       Proof.context ->
         alpha_result ->
           thm list -> thm list -> thm list -> thm list * thm list
    val raw_prove_refl: Proof.context -> alpha_result -> thm -> thm list
    val raw_prove_sym: Proof.context -> alpha_result -> thm list -> thm list
    val raw_prove_trans:
       Proof.context -> alpha_result -> thm list -> thm list -> thm list
    val raw_size_rsp_aux:
       Proof.context -> alpha_result -> thm list -> thm list
  end
structure Nominal_Dt_Alpha: NOMINAL_DT_ALPHA
val raw_size_rsp_aux = fn:
   Proof.context -> alpha_result -> thm list -> thm list
val induct_prove = fn:
   typ list ->
     (typ * (term -> term)) list ->
       thm -> (Proof.context -> int -> tactic) -> Proof.context -> thm list
val raw_prove_refl = fn: Proof.context -> alpha_result -> thm -> thm list
val raw_prove_trans = fn:
   Proof.context -> alpha_result -> thm list -> thm list -> thm list
val raw_fv_bn_rsp_aux = fn:
   Proof.context ->
     alpha_result ->
       term list -> term list -> term list -> thm list -> thm list
val raw_perm_bn_rsp = fn:
   Proof.context -> alpha_result -> term list -> thm list -> thm list
val alpha_prove = fn:
   term list ->
     (term * (term * term -> term)) list ->
       thm -> (Proof.context -> int -> tactic) -> Proof.context -> thm list
val raw_alpha_bn_rsp = fn: alpha_result -> thm list -> thm list -> thm list
val define_raw_alpha = fn:
   raw_dt_info ->
     bn_info list ->
       bclause list list list ->
         term list -> Proof.context -> alpha_result * local_theory
val raw_prove_alpha_distincts = fn:
   Proof.context -> alpha_result -> raw_dt_info -> thm list
val comb_binders = fn:
   Proof.context -> bmode -> term list -> (term option * int) list -> term
val raw_prove_equivp = fn:
   Proof.context ->
     alpha_result -> thm list -> thm list -> thm list -> thm list * thm list
val raw_constrs_rsp = fn:
   Proof.context ->
     alpha_result -> term list list -> thm list -> thm list list
val raw_prove_alpha_eq_iff = fn:
   Proof.context -> alpha_result -> raw_dt_info -> thm list
val mk_alpha_permute_rsp = fn: Proof.context -> thm -> thm
val mk_funs_rsp = fn: Proof.context -> thm -> thm
val raw_prove_bn_imp = fn: Proof.context -> alpha_result -> thm list
val raw_prove_sym = fn:
   Proof.context -> alpha_result -> thm list -> thm list
### ML warning (line 80 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Value identifier (lhs_ty) has not been referenced.
### ML warning (line 80 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Value identifier (lhs_str) has not been referenced.
### ML warning (line 249 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Value identifier (qtys) has not been referenced.
### ML warning (line 293 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 369 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Pattern is not exhaustive.
### ML warning (line 390 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Pattern is not exhaustive.
### ML warning (line 574 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Pattern is not exhaustive.
### ML warning (line 628 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Pattern is not exhaustive.
### ML warning (line 669 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 708 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Pattern is not exhaustive.
### ML warning (line 710 of "$AFP/Nominal2/nominal_dt_quot.ML"):
### Pattern is not exhaustive.
signature NOMINAL_DT_QUOT =
  sig
    val define_qconsts:
       typ list ->
         (string * term * mixfix * thm) list ->
           local_theory -> Quotient_Info.quotconsts list * local_theory
    val define_qperms:
       typ list ->
         string list ->
           (string * sort) list ->
             (string * term * mixfix * thm) list ->
               thm list -> local_theory -> local_theory
    val define_qsizes:
       typ list ->
         string list ->
           (string * sort) list ->
             (string * term * mixfix * thm) list ->
               local_theory -> local_theory
    val define_qtypes:
       (string list * binding * mixfix) list ->
         typ list ->
           term list ->
             thm list ->
               local_theory -> Quotient_Info.quotients list * local_theory
    val fs_instance:
       typ list ->
         string list ->
           (string * sort) list -> thm list -> local_theory -> local_theory
    val lift_thms:
       typ list ->
         thm list -> thm list -> Proof.context -> thm list * Proof.context
    val prove_bns_finite:
       typ list -> term list -> thm -> thm list -> Proof.context -> thm list
    val prove_fsupp:
       Proof.context -> typ list -> thm -> thm list -> thm list
    val prove_fv_supp:
       typ list ->
         term list ->
           term list ->
             term list ->
               term list ->
                 thm list ->
                   thm list ->
                     thm list ->
                       thm list ->
                         thm ->
                           bclause list list -> Proof.context -> thm list
    val prove_perm_bn_alpha_thms:
       typ list ->
         term list ->
           term list ->
             thm ->
               thm list -> thm list -> thm list -> Proof.context -> thm list
    val prove_permute_bn_thms:
       typ list ->
         term list ->
           term list ->
             thm ->
               thm list -> thm list -> thm list -> Proof.context -> thm list
    val prove_strong_exhausts:
       Proof.context ->
         thm list ->
           bclause list list list ->
             thm list ->
               thm list -> thm list -> thm list -> thm list -> thm list
    val prove_strong_induct:
       Proof.context ->
         thm -> thm list -> thm list -> bclause list list list -> thm list
    val prove_supports: Proof.context -> thm list -> term list -> thm list
  end
structure Nominal_Dt_Quot: NOMINAL_DT_QUOT
val prove_permute_bn_thms = fn:
   typ list ->
     term list ->
       term list ->
         thm ->
           thm list -> thm list -> thm list -> Proof.context -> thm list
val define_qsizes = fn:
   typ list ->
     string list ->
       (string * sort) list ->
         (string * term * mixfix * thm) list -> local_theory -> local_theory
val prove_strong_exhausts = fn:
   Proof.context ->
     thm list ->
       bclause list list list ->
         thm list ->
           thm list -> thm list -> thm list -> thm list -> thm list
val prove_bns_finite = fn:
   typ list -> term list -> thm -> thm list -> Proof.context -> thm list
val prove_fsupp = fn:
   Proof.context -> typ list -> thm -> thm list -> thm list
val prove_fv_supp = fn:
   typ list ->
     term list ->
       term list ->
         term list ->
           term list ->
             thm list ->
               thm list ->
                 thm list ->
                   thm list ->
                     thm -> bclause list list -> Proof.context -> thm list
val prove_supports = fn: Proof.context -> thm list -> term list -> thm list
val prove_perm_bn_alpha_thms = fn:
   typ list ->
     term list ->
       term list ->
         thm ->
           thm list -> thm list -> thm list -> Proof.context -> thm list
val define_qtypes = fn:
   (string list * binding * mixfix) list ->
     typ list ->
       term list ->
         thm list ->
           local_theory -> Quotient_Info.quotients list * local_theory
val lift_thms = fn:
   typ list ->
     thm list -> thm list -> Proof.context -> thm list * Proof.context
val define_qperms = fn:
   typ list ->
     string list ->
       (string * sort) list ->
         (string * term * mixfix * thm) list ->
           thm list -> local_theory -> local_theory
val prove_strong_induct = fn:
   Proof.context ->
     thm -> thm list -> thm list -> bclause list list list -> thm list
val fs_instance = fn:
   typ list ->
     string list ->
       (string * sort) list -> thm list -> local_theory -> local_theory
val define_qconsts = fn:
   typ list ->
     (string * term * mixfix * thm) list ->
       local_theory -> Quotient_Info.quotconsts list * local_theory
### ML warning (line 17 of "$AFP/Nominal2/nominal_induct.ML"):
### Value identifier (tupleT) has not been referenced.
### ML warning (line 50 of "$AFP/Nominal2/nominal_induct.ML"):
### Pattern is not exhaustive.
structure NominalInduct:
  sig
    val nominal_induct_method:
       (Proof.context -> Proof.method) context_parser
    val nominal_induct_tac:
       bool ->
         (binding option * (term * bool)) option list list ->
           (string * typ) list ->
             (string * typ) list list ->
               thm list -> thm list -> int -> context_tactic
  end
### ML warning (line 243 of "$AFP/Nominal2/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 308 of "$AFP/Nominal2/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 338 of "$AFP/Nominal2/nominal_inductive.ML"):
### Pattern is not exhaustive.
signature NOMINAL_INDUCTIVE =
  sig
    val prove_strong_inductive:
       string list ->
         string list ->
           term list list -> thm -> thm list -> Proof.context -> Proof.state
    val prove_strong_inductive_cmd:
       xstring * (string * string list) list -> Proof.context -> Proof.state
  end
structure Nominal_Inductive: NOMINAL_INDUCTIVE
### ML warning (line 100 of "$AFP/Nominal2/nominal_function_common.ML"):
### Value identifier (data) has not been referenced.
### ML warning (line 102 of "$AFP/Nominal2/nominal_function_common.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "$AFP/Nominal2/nominal_function_common.ML"):
### Value identifier (inv) has not been referenced.
### ML warning (line 140 of "$AFP/Nominal2/nominal_function_common.ML"):
### Value identifier (partials) has not been referenced.
### ML warning (line 137 of "$AFP/Nominal2/nominal_function_common.ML"):
### Value identifier (domintros) has not been referenced.
### ML warning (line 134 of "$AFP/Nominal2/nominal_function_common.ML"):
### Value identifier (default) has not been referenced.
### ML warning (line 131 of "$AFP/Nominal2/nominal_function_common.ML"):
### Value identifier (sequential) has not been referenced.
signature NOMINAL_FUNCTION_DATA =
  sig
    type nominal_info =
       {R: term,
        add_simps:
        (binding -> binding) ->
          string ->
            (binding -> binding) ->
              Token.src list ->
                thm list -> local_theory -> thm list * local_theory
        ,
        case_names: string list,
        defname: string,
        eqvts: thm list,
        fs: term list,
        inducts: thm list option,
        is_partial: bool,
        pinducts: thm list,
        psimps: thm list, simps: thm list option, termination: thm}
  end
structure Nominal_Function_Common:
  sig
    structure NominalFunctionData: GENERIC_DATA
    val add_function_data:
       nominal_info -> Context.generic -> Context.generic
    val all_function_data: Proof.context -> (term * nominal_info) list
    val apply_opt:
       nominal_function_opt ->
         nominal_function_config -> nominal_function_config
    val get_function: Proof.context -> NominalFunctionData.T
    val import_function_data:
       term ->
         Proof.context ->
           {R: term,
            add_simps:
            (binding -> binding) ->
              string ->
                (binding -> binding) ->
                  Token.src list ->
                    thm list -> local_theory -> thm list * local_theory
            ,
            case_names: string list,
            defname: bstring,
            eqvts: thm list,
            fs: term list,
            inducts: thm list option,
            is_partial: bool,
            pinducts: thm list,
            psimps: thm list, simps: thm list option, termination: thm}
           option
    val import_last_function:
       Proof.context ->
         {R: term,
          add_simps:
          (binding -> binding) ->
            string ->
              (binding -> binding) ->
                Token.src list ->
                  thm list -> local_theory -> thm list * local_theory
          ,
          case_names: string list,
          defname: bstring,
          eqvts: thm list,
          fs: term list,
          inducts: thm list option,
          is_partial: bool,
          pinducts: thm list,
          psimps: thm list, simps: thm list option, termination: thm}
         option
    val lift_morphism: Proof.context -> (thm -> thm) -> morphism
    val morph_function_data:
       nominal_info ->
         morphism ->
           {R: term,
            add_simps:
            (binding -> binding) ->
              string ->
                (binding -> binding) ->
                  Token.src list ->
                    thm list -> local_theory -> thm list * local_theory
            ,
            case_names: string list,
            defname: bstring,
            eqvts: thm list,
            fs: term list,
            inducts: thm list option,
            is_partial: bool,
            pinducts: thm list,
            psimps: thm list, simps: thm list option, termination: thm}
    val nominal_default_config: nominal_function_config
    datatype nominal_function_config
    =
         NominalFunctionConfig of
             {default: string option,
              domintros: bool,
              inv: string option, partials: bool, sequential: bool}
    datatype nominal_function_opt
    =
         Default of string
       | DomIntros
       | Invariant of string
       | No_Partials
       | Sequential
    datatype nominal_function_result
    =
         NominalFunctionResult of
             {G: term,
              R: term,
              cases: thm,
              domintros: thm list option,
              eqvts: thm list,
              fs: term list,
              psimps: thm list, simple_pinducts: thm list, termination: thm}
    type nominal_info =
       {R: term,
        add_simps:
        (binding -> binding) ->
          string ->
            (binding -> binding) ->
              Token.src list ->
                thm list -> local_theory -> thm list * local_theory
        ,
        case_names: string list,
        defname: string,
        eqvts: thm list,
        fs: term list,
        inducts: thm list option,
        is_partial: bool,
        pinducts: thm list,
        psimps: thm list, simps: thm list option, termination: thm}
  end
### ML warning (line 100 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (case_split) has not been referenced.
### ML warning (line 101 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (fundef_default_value) has not been referenced.
### ML warning (line 102 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (not_acc_down) has not been referenced.
### ML warning (line 270 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (thms) has not been referenced.
### ML warning (line 287 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (case_hypi) has not been referenced.
### ML warning (line 288 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (case_hypj) has not been referenced.
### ML warning (line 327 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (lhs) has not been referenced.
### ML warning (line 595 of "$AFP/Nominal2/nominal_function_core.ML"):
### Pattern is not exhaustive.
### ML warning (line 595 of "$AFP/Nominal2/nominal_function_core.ML"):
### Value identifier (raw_induct) has not been referenced.
### ML warning (line 623 of "$AFP/Nominal2/nominal_function_core.ML"):
### Matches are not exhaustive.
### ML warning (line 691 of "$AFP/Nominal2/nominal_function_core.ML"):
### Pattern is not exhaustive.
### ML warning (line 987 of "$AFP/Nominal2/nominal_function_core.ML"):
### Matches are not exhaustive.
signature NOMINAL_FUNCTION_CORE =
  sig
    val inductive_def:
       (binding * typ) * mixfix ->
         term list ->
           local_theory -> (term * thm list * thm * thm) * local_theory
    val prepare_nominal_function:
       Nominal_Function_Common.nominal_function_config ->
         string ->
           ((bstring * typ) * mixfix) list ->
             ((bstring * typ) list * term list * term * term) list ->
               local_theory ->
                 (term * term * thm list * thm * thm *
                  (Proof.context ->
                     thm ->
                       Nominal_Function_Common.nominal_function_result))
                 *
                 local_theory
    val trace: bool ref
  end
structure Nominal_Function_Core: NOMINAL_FUNCTION_CORE
### ML warning (line 100 of "$AFP/Nominal2/nominal_mutual.ML"):
### Pattern is not exhaustive.
### ML warning (line 183 of "$AFP/Nominal2/nominal_mutual.ML"):
### Pattern is not exhaustive.
### ML warning (line 210 of "$AFP/Nominal2/nominal_mutual.ML"):
### Pattern is not exhaustive.
### ML warning (line 221 of "$AFP/Nominal2/nominal_mutual.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "$AFP/Nominal2/nominal_mutual.ML"):
### Value identifier (insts) has not been referenced.
### ML warning (line 311 of "$AFP/Nominal2/nominal_mutual.ML"):
### Pattern is not exhaustive.
### ML warning (line 361 of "$AFP/Nominal2/nominal_mutual.ML"):
### Pattern is not exhaustive.
### ML warning (line 365 of "$AFP/Nominal2/nominal_mutual.ML"):
### Matches are not exhaustive.
### ML warning (line 371 of "$AFP/Nominal2/nominal_mutual.ML"):
### Matches are not exhaustive.
### ML warning (line 374 of "$AFP/Nominal2/nominal_mutual.ML"):
### Value identifier (f) has not been referenced.
### ML warning (line 374 of "$AFP/Nominal2/nominal_mutual.ML"):
### Matches are not exhaustive.
### ML warning (line 397 of "$AFP/Nominal2/nominal_mutual.ML"):
### Value identifier (Q) has not been referenced.
### ML warning (line 397 of "$AFP/Nominal2/nominal_mutual.ML"):
### Matches are not exhaustive.
### ML warning (line 425 of "$AFP/Nominal2/nominal_mutual.ML"):
### Value identifier (fvar) has not been referenced.
signature NOMINAL_FUNCTION_MUTUAL =
  sig
    val prepare_nominal_function_mutual:
       Nominal_Function_Common.nominal_function_config ->
         string ->
           ((string * typ) * mixfix) list ->
             term list ->
               local_theory ->
                 (thm *
                  (Proof.context ->
                     thm ->
                       Nominal_Function_Common.nominal_function_result))
                 *
                 local_theory
  end
structure Nominal_Function_Mutual: NOMINAL_FUNCTION_MUTUAL
### ML warning (line 60 of "$AFP/Nominal2/nominal_function.ML"):
### Value identifier (rvs) has not been referenced.
### ML warning (line 158 of "$AFP/Nominal2/nominal_function.ML"):
### Pattern is not exhaustive.
### ML warning (line 145 of "$AFP/Nominal2/nominal_function.ML"):
### Matches are not exhaustive.
signature NOMINAL_FUNCTION =
  sig
    val add_nominal_function:
       (binding * typ option * mixfix) list ->
         Specification.multi_specs ->
           Nominal_Function_Common.nominal_function_config ->
             (Proof.context -> tactic) ->
               local_theory -> nominal_info * local_theory
    val add_nominal_function_cmd:
       (binding * string option * mixfix) list ->
         Specification.multi_specs_cmd ->
           Nominal_Function_Common.nominal_function_config ->
             (Proof.context -> tactic) ->
               bool -> local_theory -> nominal_info * local_theory
    val get_info: Proof.context -> term -> nominal_info
    val nominal_function:
       (binding * typ option * mixfix) list ->
         Specification.multi_specs ->
           Nominal_Function_Common.nominal_function_config ->
             local_theory -> Proof.state
    val nominal_function_cmd:
       (binding * string option * mixfix) list ->
         Specification.multi_specs_cmd ->
           Nominal_Function_Common.nominal_function_config ->
             bool -> local_theory -> Proof.state
    type nominal_info =
       {R: term,
        add_simps:
        (binding -> binding) ->
          string ->
            (binding -> binding) ->
              Token.src list ->
                thm list -> local_theory -> thm list * local_theory
        ,
        case_names: string list,
        defname: string,
        eqvts: thm list,
        fs: term list,
        inducts: thm list option,
        is_partial: bool,
        pinducts: thm list,
        psimps: thm list, simps: thm list option, termination: thm}
  end
structure Nominal_Function: NOMINAL_FUNCTION
### ML warning (line 67 of "$AFP/Nominal2/nominal_termination.ML"):
### Value identifier (eqvts) has not been referenced.
### ML warning (line 47 of "$AFP/Nominal2/nominal_termination.ML"):
### Matches are not exhaustive.
signature NOMINAL_FUNCTION_TERMINATION =
  sig
    type nominal_info =
       {R: term,
        add_simps:
        (binding -> binding) ->
          string ->
            (binding -> binding) ->
              Token.src list ->
                thm list -> local_theory -> thm list * local_theory
        ,
        case_names: string list,
        defname: string,
        eqvts: thm list,
        fs: term list,
        inducts: thm list option,
        is_partial: bool,
        pinducts: thm list,
        psimps: thm list, simps: thm list option, termination: thm}
    val termination: bool -> term option -> local_theory -> Proof.state
    val termination_cmd:
       bool -> string option -> local_theory -> Proof.state
  end
structure Nominal_Function_Termination: NOMINAL_FUNCTION_TERMINATION
val eqvt_attr =
   [Token
     (("attribute", ({}, {})), (String, "attribute"),
      Value
       (
          SOME
           (
              Name
               ({kind = "attribute", name = "Pure.attribute", print = fn},
                {})
              )
          )),
    Token
     (("<attribute>", ({}, {})), (String, "<attribute>"),
      Value (SOME (Attribute fn)))]:
   Token.src
val simp_attr =
   [Token
     (("attribute", ({}, {})), (String, "attribute"),
      Value
       (
          SOME
           (
              Name
               ({kind = "attribute", name = "Pure.attribute", print = fn},
                {})
              )
          )),
    Token
     (("<attribute>", ({}, {})), (String, "<attribute>"),
      Value (SOME (Attribute fn)))]:
   Token.src
val induct_attr =
   [Token
     (("attribute", ({}, {})), (String, "attribute"),
      Value
       (
          SOME
           (
              Name
               ({kind = "attribute", name = "Pure.attribute", print = fn},
                {})
              )
          )),
    Token
     (("<attribute>", ({}, {})), (String, "<attribute>"),
      Value (SOME (Attribute fn)))]:
   Token.src
val get_cnstrs = fn: ('a * 'b) list -> 'b list
val get_typed_cnstrs = fn:
   ((binding * 'a * 'b) * (binding * 'c * 'd) list) list ->
     (bstring * bstring) list
val get_cnstr_strs = fn:
   ('a * (binding * 'b * 'c) list) list -> bstring list
val get_bn_fun_strs = fn: (binding * 'a * 'b) list -> bstring list
### ML warning (line 80 of "$AFP/Nominal2/Nominal2.thy"):
### Value identifier (ty_ss) has not been referenced.
### ML warning (line 95 of "$AFP/Nominal2/Nominal2.thy"):
### Value identifier (trm_ss) has not been referenced.
val add_raw = fn: string -> string
val add_raws = fn: string list -> string list
val raw_bind = fn: binding -> binding
val replace_str = fn: (''a * ''a) list -> ''a -> ''a
val replace_typ = fn: (string * string) list -> typ -> typ
val raw_dts = fn:
   (string * string) list ->
     ((binding * 'a * 'b) * (binding * typ list * 'c) list) list ->
       ((binding * 'a * mixfix) * (binding * typ list * mixfix) list) list
val replace_aterm = fn: (string * string) list -> term -> term
val replace_term = fn:
   (string * string) list -> (string * string) list -> term -> term
val rawify_dts = fn:
   ((binding * 'a * 'b) * (binding * typ list * 'c) list) list ->
     (string * string) list ->
       ((binding * 'a * mixfix) * (binding * typ list * mixfix) list) list
val rawify_bn_funs = fn:
   (string * string) list ->
     (string * string) list ->
       (string * string) list ->
         (binding * typ * 'a) list ->
           ('b * term) list ->
             (binding * typ option * mixfix) list *
             (('b * term) * 'c list * 'd list) list
val rawify_bclauses = fn:
   (string * string) list ->
     (string * string) list ->
       (string * string) list ->
         bclause list list list -> bclause list list list
val define_raw_dts = fn:
   ((binding * (string * sort) list * 'a) * (binding * typ list * 'b) list)
   list
     ->
     string list ->
       (string * string) list ->
         (binding * typ * 'c) list ->
           ('d * term) list ->
             bclause list list list ->
               local_theory ->
                 bclause list list list *
                 (binding * typ option * mixfix) list *
                 (('d * term) * 'e list * 'f list) list * raw_dt_info *
                 local_theory
### ML warning (line 229 of "$AFP/Nominal2/Nominal2.thy"):
### Value identifier (raw_induct_thms) has not been referenced.
### ML warning (line 224 of "$AFP/Nominal2/Nominal2.thy"):
### Value identifier (raw_fp_sugars) has not been referenced.
### ML warning (line 222 of "$AFP/Nominal2/Nominal2.thy"):
### Value identifier (raw_tys) has not been referenced.
### ML warning (line 221 of "$AFP/Nominal2/Nominal2.thy"):
### Value identifier (raw_dt_names) has not been referenced.
### ML warning (line 417 of "$AFP/Nominal2/Nominal2.thy"):
### Pattern is not exhaustive.
val nominal_datatype2 = fn:
   binding option ->
     ((binding * (string * sort) list * mixfix) *
      (binding * typ list * mixfix) list
     )
     list
       ->
       (binding * typ * mixfix) list ->
         (Attrib.binding * term) list ->
           bclause list list list -> local_theory -> local_theory
val augment_sort = fn: theory -> sort -> sort
val augment_sort_typ = fn: theory -> typ -> typ
val prepare_dts = fn:
   ((binding * (string * string option) list * mixfix) *
    (binding * ('a * string) list * mixfix * 'b) list
   )
   list
     ->
     theory ->
       ((binding * (string * sort) list * mixfix) *
        (binding * typ list * mixfix) list
       )
       list
       *
       theory
val prepare_bn_funs = fn:
   (binding * string option * mixfix) list ->
     Specification.multi_specs_cmd ->
       theory ->
         ((binding * typ * mixfix) list * (Attrib.binding * term) list) *
         theory
val indexify = fn: 'a option list -> ('a * int) list
val index_lookup = fn: (string * 'a) list -> string -> 'a
val prepare_bclauses = fn:
   ('a *
    ('b * (string option * 'c) list * 'd *
     (bmode * string list * string list) list
    )
    list
   )
   list
     -> theory -> bclause list list list * theory
val included = fn: int -> bclause list -> bool
val complete = fn:
   ('a * ('b * 'c list * 'd * 'e) list) list ->
     bclause list list list -> bclause list list list
val nominal_datatype2_cmd = fn:
   binding option *
   ((binding * (string * string option) list * mixfix) *
    (binding * (string option * string) list * mixfix *
     (bmode * string list * string list) list
    )
    list
   )
   list
   *
   (binding * string option * mixfix) list * Specification.multi_specs_cmd
     -> Proof.context -> local_theory
val opt_name = fn: Token.T list -> binding option * Token.T list
val anno_typ = fn: Token.T list -> (string option * string) * Token.T list
val bind_mode = fn: Token.T list -> bmode * Token.T list
val bind_clauses = fn: (bmode * string list * string list) list parser
val cnstr_parser = fn:
   Token.T list ->
     (binding * (string option * string) list * mixfix *
      (bmode * string list * string list) list)
     *
     Token.T list
val dt_parser = fn:
   Token.T list ->
     ((binding * (string * string option) list * mixfix) *
      (binding * (string option * string) list * mixfix *
       (bmode * string list * string list) list
      )
      list)
     *
     Token.T list
val bnfun_parser = fn:
   Token.T list ->
     ((binding * string option * mixfix) list *
      Specification.multi_specs_cmd)
     *
     Token.T list
val main_parser = fn:
   Token.T list ->
     (binding option *
      ((binding * (string * string option) list * mixfix) *
       (binding * (string option * string) list * mixfix *
        (bmode * string list * string list) list
       )
       list
      )
      list
      *
      (binding * string option * mixfix) list *
      Specification.multi_specs_cmd)
     *
     Token.T list
### theory "Draft.Nominal2"
### 1.477s elapsed time, 1.576s cpu time, 0.147s GC time
Loading theory "Draft.Nominal2MoreTemplates"
val templateLemmas =
   [("Nominal2_Base.eqvt_boolI", "eqvt ?f",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.fset_finite_supp", "finite (supp ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Nominal2_Base.multisets_supp_finite", "finite (supp ?M)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Nominal2_Base.fresh_star_list", "?as \<sharp>* []",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.fresh_star_zero", "?as \<sharp>* 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.pure_fresh", "?a \<sharp> ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)
         )),
    ("Nominal2_Base.fresh_set_empty", "?a \<sharp> {}",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.fresh_empty_fset", "?a \<sharp> {||}",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.fresh_Nil", "?a \<sharp> []",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.fresh_None", "?a \<sharp> None",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.fresh_Unit", "?a \<sharp> ()",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.fresh_zero_perm", "?a \<sharp> 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nominal2_Base.pure_supp", "supp ?x = {}",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("Nominal2_Base.supp_supports", "supp ?x supports ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Nominal2_Base.bij_Rep_perm", "bij (Rep_perm ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0),
           template_hole 0)
         )),
    ("Nominal2_Base.empty_eqvt", "?p \<bullet> {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.UNIV_eqvt", "?p \<bullet> UNIV = UNIV",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.supp_of_atom_list", "supp ?as = set ?as",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.False_eqvt", "?p \<bullet> False = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.True_eqvt", "?p \<bullet> True = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.permute_fset", "?p \<bullet> {||} = {||}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.eqvts", "?p \<bullet> [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.eqvts", "?p \<bullet> None = None",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.permute_multiset", "?p \<bullet> {#} = {#}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.flip_self", "(?a \<leftrightarrow> ?a) = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Nominal2_Base.zero_perm_eqvt", "?p \<bullet> 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Nominal2_Base.permute_self", "?p \<bullet> ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Nominal2_Base.swap_self", "(?a \<rightleftharpoons> ?a) = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Nominal2_Base.supp_atom", "supp ?a = {?a}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Nominal2_Base.supp_set", "supp (set ?xs) = supp ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.supp_fset", "supp (fset ?S) = supp ?S",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.supp_rev", "supp (rev ?xs) = supp ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.supp_Inl", "supp (Inl ?x) = supp ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.supp_Inr", "supp (Inr ?x) = supp ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.supp_finfun_const", "supp (finfun_const ?b) = supp ?b",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.supp_Some", "supp (Some ?x) = supp ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.supp_minus_perm", "supp (- ?p) = supp ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.pemute_minus_self", "- ?p \<bullet> ?p = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0),
       template_var 0)),
    ("Nominal2_Base.supp_set_mset", "supp (set_mset ?M) <= supp ?M",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.permute_boolI", "?P ==> ?p \<bullet> ?P",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Nominal2_Base.permute_boolE", "?p \<bullet> ?P ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate (template_var 0))),
    ("Nominal2_Base.INFM_sort_of_eq", "INFM a. sort_of a = ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)
         )),
    ("Nominal2_Base.flip_at_simps",
     "(?a \<leftrightarrow> ?b) \<bullet> ?a = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("Nominal2_Base.flip_at_simps",
     "(?a \<leftrightarrow> ?b) \<bullet> ?b = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("Nominal2_Base.supp_at_base", "supp ?a = {atom ?a}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Nominal2_Base.eqvts", "finite (?p \<bullet> ?A) = finite ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.permute_finite", "finite (?p \<bullet> ?X) = finite ?X",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.eqvts", "(~ ?p \<bullet> ?A) = (~ ?A)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.eqvts",
     "HOL.induct_forall (?p \<bullet> ?P) = HOL.induct_forall ?P",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.eqvts", "distinct (?p \<bullet> ?xs) = distinct ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.flip_commute",
     "(?a \<leftrightarrow> ?b) = (?b \<leftrightarrow> ?a)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Nominal2_Base.swap_commute",
     "(?a \<rightleftharpoons> ?b) = (?b \<rightleftharpoons> ?a)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Nominal2_Base.sort_of_Rep_perm",
     "sort_of (Rep_perm ?p ?a) = sort_of ?a",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Base.sort_of_permute",
     "sort_of (?p \<bullet> ?a) = sort_of ?a",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Nominal2_Abs.alphas_abs_refl", "(?cs, ?x) \<approx>abs_lst (?cs, ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Nominal2_Abs.alphas_abs_refl", "(?bs, ?x) \<approx>abs_res (?bs, ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Nominal2_Abs.alphas_abs_refl", "(?bs, ?x) \<approx>abs_set (?bs, ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Nominal2_Base.finite_sets_supp", "finite ?S ==> finite (supp ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Nominal2_Base.fresh_fun_eqvt", "eqvt ?f ==> ?a \<sharp> ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Nominal2_Base.infinite_sort_of_eq", "infinite {a. sort_of a = ?s}",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty))
             )
         )),
    ("Nominal2_Base.Rep_perm_uminus", "Rep_perm (- ?p) = inv (Rep_perm ?p)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 0)))),
    ("Nominal2_Base.permute_set_eq_image",
     "?p \<bullet> ?X = permute ?p ` ?X",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Nominal2_Base.fresh_atom", "?a \<sharp> ?b = (?a ~= ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Nominal2_Base.fresh_star_set",
     "?as \<sharp>* set ?xs = ?as \<sharp>* ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_star_fset",
     "?as \<sharp>* fset ?S = ?as \<sharp>* ?S",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_star_atom_at_base",
     "?as \<sharp>* atom ?b = ?as \<sharp>* ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_set", "?a \<sharp> set ?xs = ?a \<sharp> ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_rev", "?a \<sharp> rev ?xs = ?a \<sharp> ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_Inl", "?a \<sharp> Inl ?x = ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_Inr", "?a \<sharp> Inr ?y = ?a \<sharp> ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_finfun_const",
     "?a \<sharp> finfun_const ?b = ?a \<sharp> ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_Some", "?a \<sharp> Some ?x = ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_atom_at_base",
     "?a \<sharp> atom ?b = ?a \<sharp> ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_minus_perm", "?a \<sharp> - ?p = ?a \<sharp> ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.minus_flip",
     "- (?a \<leftrightarrow> ?b) = (?a \<leftrightarrow> ?b)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.minus_swap",
     "- (?a \<rightleftharpoons> ?b) = (?a \<rightleftharpoons> ?b)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.Union_supports_set", "\<Union> (supp ` ?S) supports ?S",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 0))),
           template_var 0)
         )),
    ("Nominal2_Abs.Abs_supports", "(supp ?x - ?as) supports ([?as]res. ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Nominal2_Abs.Abs_supports", "(supp ?x - ?as) supports ([?as]set. ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Nominal2_Base.supp_finite_atom_set", "finite ?S ==> supp ?S = ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Nominal2_Base.supp_fun_eqvt", "eqvt ?f ==> supp ?f = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Nominal2_Base.finite_Rep_perm", "finite {a. Rep_perm ?p a ~= a}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Nominal2_Base.finite_perm_lemma", "finite {a. ?p \<bullet> a ~= a}",
     template_predicate
      (
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))
         )),
    ("Nominal2_Base.fst_eqvt",
     "?p \<bullet> fst ?x = fst (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.snd_eqvt",
     "?p \<bullet> snd ?x = snd (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.eqvts", "?p \<bullet> Inf ?X = Inf (?p \<bullet> ?X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.lfp_eqvt",
     "?p \<bullet> lfp ?F = lfp (?p \<bullet> ?F)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.length_eqvt",
     "?p \<bullet> length ?xs = length (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.permute_set_eq_vimage",
     "?p \<bullet> ?X = permute (- ?p) -` ?X",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Nominal2_Base.Inter_eqvt",
     "?p \<bullet> \<Inter> ?S = \<Inter> (?p \<bullet> ?S)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.Union_eqvt",
     "?p \<bullet> \<Union> ?A = \<Union> (?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.fset_eqvt",
     "?p \<bullet> fset ?S = fset (?p \<bullet> ?S)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.Compl_eqvt", "?p \<bullet> - ?A = - (?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.set_eqvt",
     "?p \<bullet> set ?xs = set (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.set_mset_eqvt",
     "?p \<bullet> set_mset ?M = set_mset (?p \<bullet> ?M)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.supp_conv_fresh", "supp ?x = {a. ~ a \<sharp> ?x}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Nominal2_Abs.supp_funs_eqvt",
     "?p \<bullet> supp_lst ?z = supp_lst (?p \<bullet> ?z)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Abs.supp_funs_eqvt",
     "?p \<bullet> supp_res ?y = supp_res (?p \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Abs.supp_funs_eqvt",
     "?p \<bullet> supp_set ?x = supp_set (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.supp_eqvt",
     "?p \<bullet> supp ?x = supp (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Abs.supp_Abs", "supp ([?as]res. ?x) = supp ?x - ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Nominal2_Abs.supp_Abs", "supp ([?as]set. ?x) = supp ?x - ?as",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Nominal2_Base.fresh_at_base", "?a \<sharp> ?b = (?a ~= atom ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_var 1, template_app (template_hole 0, template_var 0))
           ))),
    ("Nominal2_Base.fresh_perm", "?a \<sharp> ?p = (?p \<bullet> ?a = ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Nominal2_Base.finite_eqvt",
     "?p \<bullet> finite ?A = finite (?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.Not_eqvt", "?p \<bullet> (~ ?A) = (~ ?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.distinct_eqvt",
     "?p \<bullet> distinct ?xs = distinct (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.fresh_star_singleton",
     "?as \<sharp>* {?a} = ?as \<sharp>* ?a",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nominal2_Base.rev_eqvt",
     "?p \<bullet> rev ?xs = rev (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.eqvts", "?p \<bullet> Inl ?x = Inl (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.eqvts", "?p \<bullet> Inr ?y = Inr (?p \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.finfun_const_eqvt",
     "?p \<bullet> finfun_const ?b = finfun_const (?p \<bullet> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.eqvts", "?p \<bullet> Some ?x = Some (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.eqvts", "?p \<bullet> atom ?a = atom (?p \<bullet> ?a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.uminus_eqvt", "?p \<bullet> - ?q = - (?p \<bullet> ?q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.add_flip_cancel",
     "(?a \<leftrightarrow> ?b) + (?a \<leftrightarrow> ?b) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Nominal2_Base.swap_cancel",
     "(?a \<rightleftharpoons> ?b) + (?a \<rightleftharpoons> ?b) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Nominal2_Base.swap_cancel",
     "(?a \<rightleftharpoons> ?b) + (?b \<rightleftharpoons> ?a) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_hole 0)),
    ("Nominal2_Abs.Abs_supports",
     "(supp ?x - set ?bs) supports ([?bs]lst. ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Nominal2_Base.supp_fun_app", "supp (?f ?x) <= supp ?f Un supp ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_var 1, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Nominal2_Base.perm_is_bij", "?f : perm ==> bij ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_hole 0)
           ))),
    ("Nominal2_Base.exists_eq_simple_sort", "EX a. a : {a. sort_of a = ?s}",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Nominal2_Base.Rep_perm_add",
     "Rep_perm (?p1.0 + ?p2.0) = Rep_perm ?p1.0 o Rep_perm ?p2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Nominal2_Base.supp_finsert",
     "supp (finsert ?x ?S) = supp ?x Un supp ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Nominal2_Base.supp_union_fset",
     "supp (?S |\<union>| ?T) = supp ?S Un supp ?T",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Nominal2_Base.supp_append", "supp (?xs @ ?ys) = supp ?xs Un supp ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Nominal2_Base.supp_Cons", "supp (?x # ?xs) = supp ?x Un supp ?xs",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Nominal2_Base.supp_of_multiset_union",
     "supp (?M + ?N) = supp ?M Un supp ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Nominal2_Base.supp_Pair", "supp (?x, ?y) = supp ?x Un supp ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Nominal2_Abs.supp_Abs", "supp ([?bs]lst. ?x) = supp ?x - set ?bs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Nominal2_Base.supp_perm_singleton", "(supp ?p <= {?b}) = (?p = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("Nominal2_Base.supports_perm", "{a. ?p \<bullet> a ~= a} supports ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_var 0)
         )),
    ("Nominal2_Base.supp_plus_perm", "supp (?p + ?q) <= supp ?p Un supp ?q",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Nominal2_Base.supp_finite_set_at_base",
     "finite ?S ==> supp ?S = atom ` ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Nominal2_Base.supp_fun_app_eqvt",
     "eqvt ?f ==> supp (?f ?x) <= supp ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_var 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Nominal2_Base.eqvt_at_perm",
     "eqvt_at ?f ?x ==> eqvt_at ?f (?q \<bullet> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Nominal2_Base.atom_set_perm_eq",
     "?as \<sharp>* ?p ==> ?p \<bullet> ?as = ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Nominal2_Abs.Abs_fresh_star",
     "?as <= ?as' ==> ?as \<sharp>* ([?as']res. ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.Abs_fresh_star",
     "?as <= ?as' ==> ?as \<sharp>* ([?as']set. ?x)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Base.perm_inv", "?f : perm ==> inv ?f : perm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)),
             template_hole 2)
           ))),
    ("Nominal2_Base.fresh_star_supp_conv",
     "supp ?x \<sharp>* ?y ==> supp ?y \<sharp>* ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Nominal2_Base.fresh_ineq_at_base", "?a ~= atom ?b ==> ?a \<sharp> ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Nominal2_Base.Rep_perm_ext",
     "Rep_perm ?p1.0 = Rep_perm ?p2.0 ==> ?p1.0 = ?p2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Base.fresh_PairD", "?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Nominal2_Base.fresh_PairD", "?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Nominal2_Base.permute_fun_app_eq",
     "?p \<bullet> ?f ?x = (?p \<bullet> ?f) (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app (template_var 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.permute_flip_cancel",
     "(?a \<leftrightarrow> ?b) \<bullet> (?a \<leftrightarrow> ?b) \<bullet> ?x =
      ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 0)),
    ("Nominal2_Base.permute_flip_cancel2",
     "(?a \<leftrightarrow> ?b) \<bullet> (?b \<leftrightarrow> ?a) \<bullet> ?x =
      ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)),
       template_var 0)),
    ("Nominal2_Base.supp_perm", "supp ?p = {a. ?p \<bullet> a ~= a}",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Base.supp_removeAll",
     "supp (removeAll ?x ?xs) = supp ?xs - {?x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Nominal2_Abs.Abs_fresh_star_iff",
     "?as \<sharp>* ([?bs]res. ?x) = (?as - ?bs) \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Nominal2_Abs.Abs_fresh_star_iff",
     "?as \<sharp>* ([?bs]set. ?x) = (?as - ?bs) \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Nominal2_Base.eqvts", "(ALL x. (?p \<bullet> ?P) x) = (ALL x. ?P x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Nominal2_Base.eqvts", "(EX x. (?p \<bullet> ?P) x) = (EX x. ?P x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Nominal2_Base.eqvts", "(EX! x. (?p \<bullet> ?P) x) = (EX! x. ?P x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?x |\<in>| ?p \<bullet> ?S) = (?x |\<in>| ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?A & ?p \<bullet> ?B) = (?A & ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?A | ?p \<bullet> ?B) = (?A | ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?x = ?p \<bullet> ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?A --> ?p \<bullet> ?B) = (?A --> ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "HOL.induct_implies (?p \<bullet> ?A) (?p \<bullet> ?B) =
      HOL.induct_implies ?A ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_star_permute_iff",
     "(?p \<bullet> ?a) \<sharp>* (?p \<bullet> ?x) = ?a \<sharp>* ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?as) \<sharp>* (?p \<bullet> ?x) = ?as \<sharp>* ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Nominal2_Base.fresh_permute_iff",
     "?p \<bullet> ?a \<sharp> ?p \<bullet> ?x = ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?S < ?p \<bullet> ?T) = (?S < ?T)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?x <= ?p \<bullet> ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?S <= ?p \<bullet> ?T) = (?S <= ?T)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?S |\<subseteq>| ?p \<bullet> ?T) =
      (?S |\<subseteq>| ?T)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?x : ?p \<bullet> ?A) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Nominal2_Base.mem_permute_iff",
     "(?p \<bullet> ?x : ?p \<bullet> ?X) = (?x : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Nominal2_Base.Union_of_finite_supp_sets",
     "finite ?S ==> finite (\<Union> (supp ` ?S))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 0)))
           ))),
    ("Nominal2_Base.perm_is_sort_respecting",
     "?f : perm ==> sort_of (?f ?a) = sort_of ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_var 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Nominal2_Base.perm_supp_eq",
     "supp ?p \<sharp>* ?x ==> ?p \<bullet> ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Nominal2_Base.supp_perm_eq",
     "supp ?x \<sharp>* ?p ==> ?p \<bullet> ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Nominal2_Base.fresh_at_base_permI",
     "atom ?a \<sharp> ?p ==> ?p \<bullet> ?a = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Nominal2_Abs.Abs_fresh_star",
     "?bs <= set ?bs' ==> ?bs \<sharp>* ([?bs']lst. ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Base.exists_eq_sort",
     "EX a. a : {a. sort_of a : range ?sort_fun}",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Nominal2_Base.permute_fun_comp",
     "?p \<bullet> ?f = permute ?p o ?f o permute (- ?p)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Nominal2_Base.permute_set_eq",
     "?p \<bullet> ?X = {x. - ?p \<bullet> x : ?X}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Abs.Abs_fresh_star_iff",
     "?as \<sharp>* ([?cs]lst. ?x) = (?as - set ?cs) \<sharp>* ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Nominal2_Base.fresh_permute_left",
     "?a \<sharp> ?p \<bullet> ?x = - ?p \<bullet> ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Nominal2_Base.supp_finfun_update",
     "supp (finfun_update ?f ?x ?y) <= supp (?f, ?x, ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Nominal2_Base.fresh_finite_atom_set",
     "finite ?S ==> ?a \<sharp> ?S = (?a ~: ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Base.perm_MOST", "?f : perm ==> MOST x. ?f x = x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("Nominal2_Base.supp_cofinite_atom_set",
     "finite (UNIV - ?S) ==> supp ?S = UNIV - ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_at_base",
     "sort_of ?a ~= sort_of (atom ?b) ==> ?a \<sharp> ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Nominal2_Base.obtain_fresh",
     "(!!a. atom a \<sharp> ?x ==> ?thesis) ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Base.supports_finite",
     "[| ?S supports ?x; finite ?S |] ==> finite (supp ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Nominal2_Base.finfun_apply_eqvt",
     "?p \<bullet> finfun_apply ?f ?b =
      finfun_apply (?p \<bullet> ?f) (?p \<bullet> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.permute_eqvt",
     "?p \<bullet> ?q \<bullet> ?x =
      (?p \<bullet> ?q) \<bullet> ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.split_eqvt",
     "?p \<bullet> (case ?x of (x, xa) => ?P x xa) =
      (case ?p \<bullet> ?x of (x, xa) => (?p \<bullet> ?P) x xa)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.foldr_eqvt",
     "?p \<bullet> foldr ?f ?xs =
      foldr (?p \<bullet> ?f) (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.comp_eqvt",
     "?p \<bullet> (?f o ?g) = ?p \<bullet> ?f o ?p \<bullet> ?g",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.Diff_eqvt",
     "?p \<bullet> (?A - ?B) = ?p \<bullet> ?A - ?p \<bullet> ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.inter_eqvt",
     "?p \<bullet> (?A Int ?B) = ?p \<bullet> ?A Int ?p \<bullet> ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.union_eqvt",
     "?p \<bullet> (?A Un ?B) = ?p \<bullet> ?A Un ?p \<bullet> ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.Image_eqvt",
     "?p \<bullet> ?R `` ?A = (?p \<bullet> ?R) `` (?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.image_eqvt",
     "?p \<bullet> ?f ` ?A = (?p \<bullet> ?f) ` (?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.insert_eqvt",
     "?p \<bullet> insert ?x ?A =
      insert (?p \<bullet> ?x) (?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.vimage_eqvt",
     "?p \<bullet> ?f -` ?A = (?p \<bullet> ?f) -` (?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.Collect_eqvt",
     "?p \<bullet> {x. ?P x} = {x. (?p \<bullet> ?P) x}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Nominal2_Base.perm_eq_iff",
     "(?p = ?q) = (ALL a. ?p \<bullet> a = ?q \<bullet> a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Nominal2_Base.fresh_star_Un",
     "(?as Un ?bs) \<sharp>* ?x = (?as \<sharp>* ?x & ?bs \<sharp>* ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.fresh_star_insert",
     "insert ?a ?as \<sharp>* ?x = (?a \<sharp> ?x & ?as \<sharp>* ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.fresh_star_list",
     "?as \<sharp>* (?xs @ ?ys) = (?as \<sharp>* ?xs & ?as \<sharp>* ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_star_list",
     "?as \<sharp>* (?x # ?xs) = (?as \<sharp>* ?x & ?as \<sharp>* ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_star_Pair",
     "?as \<sharp>* (?x, ?y) = (?as \<sharp>* ?x & ?as \<sharp>* ?y)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_finsert",
     "?a \<sharp> finsert ?x ?S = (?a \<sharp> ?x & ?a \<sharp> ?S)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_union_fset",
     "?a \<sharp> ?S |\<union>| ?T = (?a \<sharp> ?S & ?a \<sharp> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_append",
     "?a \<sharp> ?xs @ ?ys = (?a \<sharp> ?xs & ?a \<sharp> ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_Cons",
     "?a \<sharp> ?x # ?xs = (?a \<sharp> ?x & ?a \<sharp> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_Pair",
     "?a \<sharp> (?x, ?y) = (?a \<sharp> ?x & ?a \<sharp> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.in_fset_eqvt",
     "?p \<bullet> (?x |\<in>| ?S) =
      (?p \<bullet> ?x |\<in>| ?p \<bullet> ?S)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.conj_eqvt",
     "?p \<bullet> (?A & ?B) = (?p \<bullet> ?A & ?p \<bullet> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.disj_eqvt",
     "?p \<bullet> (?A | ?B) = (?p \<bullet> ?A | ?p \<bullet> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.eq_eqvt",
     "?p \<bullet> (?x = ?y) = (?p \<bullet> ?x = ?p \<bullet> ?y)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.imp_eqvt",
     "?p \<bullet> (?A --> ?B) = (?p \<bullet> ?A --> ?p \<bullet> ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_star_eqvt",
     "?p \<bullet> ?as \<sharp>* ?x =
      (?p \<bullet> ?as) \<sharp>* (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.fresh_eqvt",
     "?p \<bullet> (?a \<sharp> ?x) =
      ?p \<bullet> ?a \<sharp> ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.psubset_eqvt",
     "?p \<bullet> (?S < ?T) = (?p \<bullet> ?S < ?p \<bullet> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.subset_eqvt",
     "?p \<bullet> (?S <= ?T) = (?p \<bullet> ?S <= ?p \<bullet> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.subset_fset_eqvt",
     "?p \<bullet> (?S |\<subseteq>| ?T) =
      (?p \<bullet> ?S |\<subseteq>| ?p \<bullet> ?T)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.mem_eqvt",
     "?p \<bullet> (?x : ?A) = (?p \<bullet> ?x : ?p \<bullet> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.all_eqvt",
     "?p \<bullet> (ALL x. ?P x) = (ALL x. (?p \<bullet> ?P) x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Nominal2_Base.ex_eqvt",
     "?p \<bullet> (EX x. ?P x) = (EX x. (?p \<bullet> ?P) x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Nominal2_Base.ex1_eqvt",
     "?p \<bullet> (EX! x. ?P x) = (EX! x. (?p \<bullet> ?P) x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Nominal2_Base.fresh_at_base_permute_iff",
     "atom (?p \<bullet> ?a) \<sharp> ?p \<bullet> ?x =
      atom ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Nominal2_Base.map_fset_eqvt",
     "?p \<bullet> ?f |`| ?S = (?p \<bullet> ?f) |`| (?p \<bullet> ?S)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.permute_fset",
     "?p \<bullet> finsert ?x ?S =
      finsert (?p \<bullet> ?x) (?p \<bullet> ?S)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.inter_fset_eqvt",
     "?p \<bullet> (?S |\<inter>| ?T) =
      ?p \<bullet> ?S |\<inter>| ?p \<bullet> ?T",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.union_fset_eqvt",
     "?p \<bullet> (?S |\<union>| ?T) =
      ?p \<bullet> ?S |\<union>| ?p \<bullet> ?T",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.append_eqvt",
     "?p \<bullet> (?xs @ ?ys) = ?p \<bullet> ?xs @ ?p \<bullet> ?ys",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.filter_eqvt",
     "?p \<bullet> filter ?f ?xs =
      filter (?p \<bullet> ?f) (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.eqvts",
     "?p \<bullet> (?x # ?xs) = ?p \<bullet> ?x # ?p \<bullet> ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.map_eqvt",
     "?p \<bullet> map ?f ?xs = map (?p \<bullet> ?f) (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.removeAll_eqvt",
     "?p \<bullet> removeAll ?x ?xs =
      removeAll (?p \<bullet> ?x) (?p \<bullet> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.map_option_eqvt",
     "?p \<bullet> map_option ?f ?x =
      map_option (?p \<bullet> ?f) (?p \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.permute_multiset",
     "?p \<bullet> (?M + ?N) = ?p \<bullet> ?M + ?p \<bullet> ?N",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.permute_multiset",
     "?p \<bullet> add_mset ?x ?M =
      add_mset (?p \<bullet> ?x) (?p \<bullet> ?M)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.eqvts",
     "?p \<bullet> (?x, ?y) = (?p \<bullet> ?x, ?p \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.add_perm_eqvt",
     "?p \<bullet> (?p1.0 + ?p2.0) =
      ?p \<bullet> ?p1.0 + ?p \<bullet> ?p2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.flip_eqvt",
     "?p \<bullet> (?a \<leftrightarrow> ?b) =
      (?p \<bullet> ?a \<leftrightarrow> ?p \<bullet> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.swap_eqvt",
     "?p \<bullet> (?a \<rightleftharpoons> ?b) =
      (?p \<bullet> ?a \<rightleftharpoons> ?p \<bullet> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.permute_Abs_lst",
     "?p \<bullet> ([?as]lst. ?x) = [?p \<bullet> ?as]lst. ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.permute_Abs_res",
     "?p \<bullet> ([?as]res. ?x) = [?p \<bullet> ?as]res. ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.permute_Abs_set",
     "?p \<bullet> ([?as]set. ?x) = [?p \<bullet> ?as]set. ?p \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.supp_of_finite_sets",
     "finite ?S ==> supp ?S = \<Union> (supp ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Nominal2_Base.Union_included_in_supp",
     "finite ?S ==> \<Union> (supp ` ?S) <= supp ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Nominal2_Base.fresh_finite_set_at_base",
     "finite ?S ==> atom ?a \<sharp> ?S = (?a ~: ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Base.atom_fresh_star_disjoint",
     "finite ?bs ==> ?as \<sharp>* ?bs = (?as Int ?bs = {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1)
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0)))),
    ("Nominal2_Base.perm_is_finite", "?f : perm ==> finite {a. ?f a ~= a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("Nominal2_Abs.Abs_fresh_aux",
     "?a \<sharp> [?cs]lst. ?x ==> ?a \<sharp> supp_lst ([?cs]lst. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Nominal2_Abs.Abs_fresh_aux",
     "?a \<sharp> [?bs]res. ?x ==> ?a \<sharp> supp_res ([?bs]res. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Nominal2_Abs.Abs_fresh_aux",
     "?a \<sharp> [?bs]set. ?x ==> ?a \<sharp> supp_set ([?bs]set. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Nominal2_Base.swap_different_sorts",
     "sort_of ?a ~= sort_of ?b ==> (?a \<rightleftharpoons> ?b) = 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Nominal2_Base.fresh_fun_eqvt_app",
     "[| eqvt ?f; ?a \<sharp> ?x |] ==> ?a \<sharp> ?f ?x",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_var 2, template_var 0))
           ))),
    ("Nominal2_Base.fresh_star_perm_set_conv",
     "[| ?as \<sharp>* ?p; finite ?as |] ==> supp ?p \<sharp>* ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Nominal2_Base.supp_is_subset",
     "[| ?S supports ?x; finite ?S |] ==> supp ?x <= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Nominal2_Base.fresh_conv_MOST",
     "?a \<sharp> ?x =
      (MOST b. (?a \<rightleftharpoons> b) \<bullet> ?x = ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty), template_hole 0))),
    ("Nominal2_Base.supp_of_finite_insert",
     "finite ?S ==> supp (insert ?x ?S) = supp ?x Un supp ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("Nominal2_Abs.Abs_finite_supp",
     "finite (supp ?x) ==> supp ([?as]res. ?x) = supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Abs.Abs_finite_supp",
     "finite (supp ?x) ==> supp ([?as]set. ?x) = supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Abs.Abs_supp_subset1",
     "finite (supp ?x) ==> supp ?x - ?as <= supp ([?as]res. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Abs.Abs_supp_subset1",
     "finite (supp ?x) ==> supp ?x - ?as <= supp ([?as]set. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Abs.Abs_supp_subset2",
     "finite (supp ?x) ==> supp ([?as]res. ?x) <= supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Abs.Abs_supp_subset2",
     "finite (supp ?x) ==> supp ([?as]set. ?x) <= supp ?x - ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("Nominal2_Base.swap_atom_simps",
     "sort_of ?a = sort_of ?b ==>
      (?a \<rightleftharpoons> ?b) \<bullet> ?a = ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Nominal2_Base.swap_atom_simps",
     "sort_of ?a = sort_of ?b ==>
      (?a \<rightleftharpoons> ?b) \<bullet> ?b = ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0),
         template_var 1))),
    ("Nominal2_Base.ds_fresh",
     "dset ?p ?q \<sharp>* ?x ==> ?p \<bullet> ?x = ?q \<bullet> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.finite_supp_eqvt_at",
     "[| eqvt_at ?f ?x; finite (supp ?x) |] ==> finite (supp (?f ?x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 0,
               template_app (template_var 1, template_var 0)))
           ))),
    ("Nominal2_Base.fresh_fun_app",
     "[| ?a \<sharp> ?f; ?a \<sharp> ?x |] ==> ?a \<sharp> ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_var 0))
           ))),
    ("Nominal2_Base.Union_finite_multiset",
     "finite (\<Union> {supp x |x. x :# ?M})",
     template_predicate
      (
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty)))
         )),
    ("Nominal2_Base.Sigma_eqvt",
     "?p \<bullet> ?X \<times> ?Y =
      (?p \<bullet> ?X) \<times> (?p \<bullet> ?Y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty))),
    ("Nominal2_Base.atom_components_eq_iff",
     "(?a = ?b) = (sort_of ?a = sort_of ?b & nat_of ?a = nat_of ?b)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Nominal2_Base.eqvts",
     "(ALL x:?p \<bullet> ?S. (?p \<bullet> ?P) x) = (ALL x:?S. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 2, template_var 1), t_empty))),
    ("Nominal2_Base.eqvts",
     "(EX x:?p \<bullet> ?S. (?p \<bullet> ?P) x) = (EX x:?S. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 2, template_var 1), t_empty))),
    ("Nominal2_Abs.Abs_finite_supp",
     "finite (supp ?x) ==> supp ([?bs]lst. ?x) = supp ?x - set ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Nominal2_Abs.Abs_supp_subset2",
     "finite (supp ?x) ==> supp ([?bs]lst. ?x) <= supp ?x - set ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Nominal2_Abs.Abs_supp_subset1",
     "finite (supp ?x) ==> supp ?x - set ?bs <= supp ([?bs]lst. ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Abs.alpha_refl",
     "?R ?x ?x ==> (?cs, ?x) \<approx>lst ?R ?f 0 (?cs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_var 3),
                 template_var 0),
               template_hole 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2))
           ))),
    ("Nominal2_Abs.alpha_refl",
     "?R ?x ?x ==> (?bs, ?x) \<approx>res ?R ?f 0 (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_var 3),
                 template_var 0),
               template_hole 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2))
           ))),
    ("Nominal2_Abs.alpha_refl",
     "?R ?x ?x ==> (?bs, ?x) \<approx>set ?R ?f 0 (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_var 3),
                 template_var 0),
               template_hole 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2))
           ))),
    ("Nominal2_Abs.Abs_eq_res_supp",
     "supp ?x <= ?bs ==> [?as]res. ?x = [?as Int ?bs]res. ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Nominal2_Abs.Abs_exhausts",
     "(!!as x. ?y2.0 = [as]res. x ==> ?P2.0) ==> ?P2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Abs.Abs_exhausts",
     "(!!as x. ?y1.0 = [as]set. x ==> ?P1.0) ==> ?P1.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Abs.Abs_exhausts",
     "(!!bs x. ?y3.0 = [bs]lst. x ==> ?P3.0) ==> ?P3.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Base.fresh_star_plus",
     "[| ?a \<sharp>* ?p; ?a \<sharp>* ?q |] ==> ?a \<sharp>* (?p + ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Base.fresh_plus_perm",
     "[| ?a \<sharp> ?p; ?a \<sharp> ?q |] ==> ?a \<sharp> ?p + ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Base.perm_comp",
     "[| ?f : perm; ?g : perm |] ==> ?f o ?g : perm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Nominal2_Base.all_eqvt2",
     "?p \<bullet> (ALL x. ?P x) =
      (ALL x. ?p \<bullet> ?P (- ?p \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("Nominal2_Base.ex_eqvt2",
     "?p \<bullet> (EX x. ?P x) =
      (EX x. ?p \<bullet> ?P (- ?p \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("Nominal2_Base.ex1_eqvt2",
     "?p \<bullet> (EX! x. ?P x) =
      (EX! x. ?p \<bullet> ?P (- ?p \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("Nominal2_Base.Union_supports_multiset",
     "\<Union> {supp x |x. x :# ?M} supports ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7, template_app (template_hole 6, t_empty))),
           template_var 0)
         )),
    ("Nominal2_Base.FRESH_f_iff",
     "finite (supp ?P) ==> (FRESH x. ?f (?P x)) = ?f (FRESH x. ?P x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app
          (template_var 0, template_app (template_hole 0, t_empty))))),
    ("Nominal2_Base.if_fresh_at_base",
     "atom ?a \<sharp> ?x ==> ?P (if ?a = ?x then ?t else ?s) = ?P ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 1),
             template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Nominal2_Base.if_fresh_at_base",
     "atom ?a \<sharp> ?x ==> ?P (if ?x = ?a then ?t else ?s) = ?P ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 4)),
               template_var 1),
             template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Nominal2_Abs.Abs_fresh_star2",
     "?as Int ?bs = {} ==> ?as \<sharp>* ([?bs]res. ?x) = ?as \<sharp>* ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Abs.Abs_fresh_star2",
     "?as Int ?bs = {} ==> ?as \<sharp>* ([?bs]set. ?x) = ?as \<sharp>* ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.plus_perm_eq",
     "supp ?p Int supp ?q = {} ==> ?p + ?q = ?q + ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Nominal2_Base.flip_at_base_simps",
     "sort_of (atom ?a) = sort_of (atom ?b) ==>
      (?a \<leftrightarrow> ?b) \<bullet> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("Nominal2_Base.flip_at_base_simps",
     "sort_of (atom ?a) = sort_of (atom ?b) ==>
      (?a \<leftrightarrow> ?b) \<bullet> ?b = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0),
         template_var 1))),
    ("Nominal2_Abs.alphas_abs_sym",
     "(?ds, ?x) \<approx>abs_lst (?es, ?y) ==>
      (?es, ?y) \<approx>abs_lst (?ds, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Nominal2_Abs.alphas_abs_sym",
     "(?bs, ?x) \<approx>abs_res (?cs, ?y) ==>
      (?cs, ?y) \<approx>abs_res (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Nominal2_Abs.alphas_abs_sym",
     "(?bs, ?x) \<approx>abs_set (?cs, ?y) ==>
      (?cs, ?y) \<approx>abs_set (?bs, ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Nominal2_Base.sort_ineq",
     "sort_of (atom ?a) ~= sort_of (atom ?b) ==> atom ?a ~= atom ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app
               (template_hole 3,
                template_app (template_hole 1, template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Nominal2_Base.Fresh_supports",
     "EX a. atom a \<sharp> (?h, ?h a) ==> supp ?h supports Fresh ?h",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Nominal2_Base.at_set_avoiding1",
     "[| finite ?xs; finite (supp ?c) |]
      ==> EX p. (p \<bullet> ?xs) \<sharp>* ?c",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Nominal2_Base.supp_eqvt_at",
     "[| eqvt_at ?f ?x; finite (supp ?x) |] ==> supp (?f ?x) <= supp ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0, template_app (template_var 1, template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Nominal2_Base.fresh_star_atom_set_conv",
     "[| ?as \<sharp>* ?bs; finite ?as; finite ?bs |]
      ==> ?bs \<sharp>* ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 0, template_var 1)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Nominal2_Base.permute_flip_at",
     "(?a \<leftrightarrow> ?b) \<bullet> ?c =
      (if ?c = ?a then ?b else if ?c = ?b then ?a else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 2)),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_var 2),
               template_var 0))
           ))),
    ("Nominal2_Base.if_eqvt",
     "?p \<bullet> (if ?b then ?x else ?y) =
      (if ?p \<bullet> ?b then ?p \<bullet> ?x else ?p \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Nominal2_Base.fun_upd_eqvt",
     "?p \<bullet> ?f(?x := ?y) = (?p \<bullet> ?f)
      (?p \<bullet> ?x := ?p \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Nominal2_Base.supp_of_multisets",
     "supp ?M = \<Union> {supp x |x. x :# ?M}",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("Nominal2_Base.perm_swap_eq",
     "((?a \<rightleftharpoons> ?b) \<bullet> ?p = ?p) =
      (?p \<bullet> (?a \<rightleftharpoons> ?b) =
       (?a \<rightleftharpoons> ?b))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_var 0),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Nominal2_Base.Ball_eqvt",
     "?p \<bullet> (ALL x:?S. ?P x) =
      (ALL x:?p \<bullet> ?S. (?p \<bullet> ?P) x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty))),
    ("Nominal2_Base.Bex_eqvt",
     "?p \<bullet> (EX x:?S. ?P x) =
      (EX x:?p \<bullet> ?S. (?p \<bullet> ?P) x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         t_empty))),
    ("Nominal2_Abs.Abs1_eq",
     "([[atom ?a]]lst. ?x = [[atom ?a]]lst. ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Abs.Abs1_eq",
     "([{atom ?a}]res. ?x = [{atom ?a}]res. ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Abs.Abs1_eq",
     "([{atom ?a}]set. ?x = [{atom ?a}]set. ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Base.finfun_update_eqvt",
     "?p \<bullet> finfun_update ?f ?a ?b =
      finfun_update (?p \<bullet> ?f) (?p \<bullet> ?a) (?p \<bullet> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Nominal2_Base.Union_included_multiset",
     "\<Union> {supp x |x. x :# ?M} <= supp ?M",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Nominal2_Base.fresh_finite_insert",
     "finite ?S ==>
      ?a \<sharp> insert ?x ?S = (?a \<sharp> ?x & ?a \<sharp> ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2))))),
    ("Nominal2_Base.smaller_supp",
     "?a : supp ?p ==>
      supp ((?p \<bullet> ?a \<rightleftharpoons> ?a) + ?p) < supp ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_var 1)),
             template_var 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Nominal2_Abs.Abs_fresh_star2",
     "?cs Int set ?ds = {} ==>
      ?cs \<sharp>* ([?ds]lst. ?x) = ?cs \<sharp>* ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 1)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Nominal2_Base.flip_at_base_simps",
     "sort_of (atom ?a) ~= sort_of (atom ?b) ==>
      (?a \<leftrightarrow> ?b) \<bullet> ?x = ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_var 0))),
    ("Nominal2_Base.obtain_at_base",
     "[| finite ?X; !!a. atom a ~: ?X ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Base.obtain_fresh'",
     "[| finite (supp ?x); !!a. atom a \<sharp> ?x ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Base.swap_fresh_fresh",
     "[| ?a \<sharp> ?x; ?b \<sharp> ?x |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_var 1))),
    ("Nominal2_Base.swap_set_both_in",
     "[| ?a : ?S; ?b : ?S |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?S = ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_var 1))),
    ("Nominal2_Base.perm_eq_iff2",
     "(?p = ?q) =
      (ALL a:supp ?p Un supp ?q. ?p \<bullet> a = ?q \<bullet> a)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0))),
         t_empty))),
    ("Nominal2_Abs.Abs_fresh_iff",
     "?a \<sharp> [?bs]res. ?x = (?a : ?bs | ?a ~: ?bs & ?a \<sharp> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Nominal2_Abs.Abs_fresh_iff",
     "?a \<sharp> [?bs]set. ?x = (?a : ?bs | ?a ~: ?bs & ?a \<sharp> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Nominal2_Base.supp_perm_pair",
     "(supp ?p <= {?a, ?b}) = (?p = 0 | ?p = (?b \<rightleftharpoons> ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Base.fresh_minus_atom_set",
     "finite ?S ==> ?a \<sharp> ?S - ?T = (?a ~: ?T --> ?a \<sharp> ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 2))))),
    ("Nominal2_Base.swap_at_base_simps",
     "sort_of (atom ?x) = sort_of (atom ?y) ==>
      (atom ?x \<rightleftharpoons> atom ?y) \<bullet> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_app (template_hole 3, template_var 0))),
           template_var 1),
         template_var 0))),
    ("Nominal2_Base.swap_at_base_simps",
     "sort_of (atom ?x) = sort_of (atom ?y) ==>
      (atom ?x \<rightleftharpoons> atom ?y) \<bullet> ?y = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_app (template_hole 3, template_var 0))),
           template_var 0),
         template_var 1))),
    ("Nominal2_Base.supp_of_finite_union",
     "[| finite ?S; finite ?T |] ==> supp (?S Un ?T) = supp ?S Un supp ?T",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Nominal2_Base.Fresh_apply'",
     "[| atom ?a \<sharp> ?h; atom ?a \<sharp> ?h ?a |]
      ==> Fresh ?h = ?h ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 3, template_var 1)),
              template_app (template_var 0, template_var 1))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_var 0, template_var 1)))),
    ("Nominal2_Base.supports_fresh",
     "[| ?S supports ?x; finite ?S; ?a ~: ?S |] ==> ?a \<sharp> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Nominal2_Base.eqvts",
     "prod_alpha (?p \<bullet> ?A) (?p \<bullet> ?B) (?p \<bullet> ?x)
       (?p \<bullet> ?y) =
      prod_alpha ?A ?B ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 4), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Nominal2_Base.the_eqvt",
     "EX! x. ?P x ==>
      ?p \<bullet> (THE x. ?P x) = (THE x. (?p \<bullet> ?P) x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Nominal2_Base.supp_plus_perm_eq",
     "supp ?p Int supp ?q = {} ==> supp (?p + ?q) = supp ?p Un supp ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Nominal2_Base.subsetCI",
     "(!!x. [| x : ?A; x ~: ?B |] ==> False) ==> ?A <= ?B",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Nominal2_Base.flip_at_base_simps",
     "[| ?a ~= ?c; ?b ~= ?c |]
      ==> (?a \<leftrightarrow> ?b) \<bullet> ?c = ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_var 1))),
    ("Nominal2_Base.swap_atom_simps",
     "[| ?c ~= ?a; ?c ~= ?b |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?c = ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("Nominal2_Base.swap_set_not_in",
     "[| ?a ~: ?S; ?b ~: ?S |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?S = ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_var 1))),
    ("Nominal2_Base.flip_fresh_fresh",
     "[| atom ?a \<sharp> ?x; atom ?b \<sharp> ?x |]
      ==> (?a \<leftrightarrow> ?b) \<bullet> ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_var 1))),
    ("Nominal2_Base.fresh_eqvt_at",
     "[| eqvt_at ?f ?x; finite (supp ?x); ?a \<sharp> ?x |]
      ==> ?a \<sharp> ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_var 2, template_var 1))
           ))),
    ("Nominal2_Abs.Abs_fresh_iff",
     "?a \<sharp> [?cs]lst. ?x =
      (?a : set ?cs | ?a ~: set ?cs & ?a \<sharp> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 3, template_var 1)))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Nominal2_Abs.Abs_eq_iff",
     "([?cs]lst. ?x = [?cs']lst. ?y) =
      (EX p. (?cs, ?x) \<approx>lst (=) supp p (?cs', ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Nominal2_Abs.Abs_eq_iff",
     "([?bs]res. ?x = [?bs']res. ?y) =
      (EX p. (?bs, ?x) \<approx>res (=) supp p (?bs', ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Nominal2_Abs.Abs_eq_iff",
     "([?bs]set. ?x = [?bs']set. ?y) =
      (EX p. (?bs, ?x) \<approx>set (=) supp p (?bs', ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Nominal2_Abs.alphas_abs",
     "((?bs, ?x) \<approx>abs_lst (?cs, ?y)) =
      (EX p. (?bs, ?x) \<approx>lst (=) supp p (?cs, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Abs.alphas_abs",
     "((?bs, ?x) \<approx>abs_res (?cs, ?y)) =
      (EX p. (?bs, ?x) \<approx>res (=) supp p (?cs, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Abs.alphas_abs",
     "((?bs, ?x) \<approx>abs_set (?cs, ?y)) =
      (EX p. (?bs, ?x) \<approx>set (=) supp p (?cs, ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Nominal2_Base.Fresh_eqvt",
     "EX a. atom a \<sharp> (?h, ?h a) ==>
      ?p \<bullet> Fresh ?h = Fresh (?p \<bullet> ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Nominal2_Base.supp_perm_perm_eq",
     "ALL a:supp ?x. ?p \<bullet> a = ?q \<bullet> a ==>
      ?p \<bullet> ?x = ?q \<bullet> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Nominal2_Base.set_renaming_perm2",
     "EX q. (ALL b:?bs. q \<bullet> b = ?p \<bullet> b) &
            supp q <= ?bs Un ?p \<bullet> ?bs",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Nominal2_Abs.Abs_eq_res_set",
     "([?bs]res. ?x = [?cs]res. ?y) =
      ([?bs Int supp ?x]set. ?x = [?cs Int supp ?y]set. ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 2))),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 0)))),
    ("Nominal2_Base.fresh_finite_union",
     "[| finite ?S; finite ?T |]
      ==> ?a \<sharp> ?S Un ?T = (?a \<sharp> ?S & ?a \<sharp> ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Nominal2_Base.swap_at_base_simps",
     "[| atom ?x ~= ?a; atom ?x ~= ?b |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?x = ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("Nominal2_Base.fresh_finfun_update",
     "[| ?a \<sharp> ?f; ?a \<sharp> ?x; ?a \<sharp> ?y |]
      ==> ?a \<sharp> finfun_update ?f ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Base.supp_swap",
     "supp (?a \<rightleftharpoons> ?b) =
      (if ?a = ?b | sort_of ?a ~= sort_of ?b then {} else {?a, ?b})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_var 0)),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_app (template_hole 2, template_var 0))))),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 1)))
           ))),
    ("Nominal2_Base.the_eqvt2",
     "EX! x. ?P x ==>
      ?p \<bullet> (THE x. ?P x) =
      (THE x. ?p \<bullet> ?P (- ?p \<bullet> x))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Nominal2_Base.obtain_atom",
     "[| finite ?X; !!a. [| a ~: ?X; sort_of a = ?s |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Base.Fresh_apply",
     "[| EX a. atom a \<sharp> (?h, ?h a); atom ?a \<sharp> ?h |]
      ==> Fresh ?h = ?h ?a",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 4, template_var 0)),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_var 1, template_var 0)))),
    ("Nominal2_Base.eqvts",
     "?p \<bullet> prod_fv ?A ?B (?x, ?y) =
      prod_fv (?p \<bullet> ?A) (?p \<bullet> ?B)
       (?p \<bullet> ?x, ?p \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0))))),
    ("Nominal2_Abs.supp_property_res",
     "(?as, ?x) \<approx>res (=) supp ?p (?as', ?x') ==>
      ?p \<bullet> (supp ?x Int ?as) = supp ?x' Int ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3)),
                    template_hole 4),
                  template_hole 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 3)),
             template_var 4)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_var 1)))),
    ("Nominal2_Base.list_renaming_perm",
     "EX q. (ALL b:set ?bs. q \<bullet> b = ?p \<bullet> b) &
            supp q <= set ?bs Un ?p \<bullet> set ?bs",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Nominal2_Base.Rep_perm_swap",
     "Rep_perm (?a \<rightleftharpoons> ?b) =
      (if sort_of ?a = sort_of ?b
       then %c. if ?a = c then ?b else if ?b = c then ?a else c else id)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0))),
               t_empty),
             template_hole 0)
           ))),
    ("Nominal2_Base.fresh_swap",
     "?a \<sharp> (?b \<rightleftharpoons> ?c) =
      (sort_of ?b ~= sort_of ?c |
       ?b = ?c | ?a \<sharp> ?b & ?a \<sharp> ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))))
           ))),
    ("Nominal2_Base.swap_atom",
     "(?a \<rightleftharpoons> ?b) \<bullet> ?c =
      (if sort_of ?a = sort_of ?b
       then if ?c = ?a then ?b else if ?c = ?b then ?a else ?c else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_app (template_hole 0, template_var 1))),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_var 2)),
                   template_var 1),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 1)),
                     template_var 2),
                   template_var 0))),
             template_var 0)
           ))),
    ("Nominal2_Abs.alphas_abs_eqvt",
     "(?ds, ?x) \<approx>abs_lst (?es, ?y) ==>
      (?p \<bullet> ?ds, ?p \<bullet> ?x) \<approx>abs_lst
      (?p \<bullet> ?es, ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alphas_abs_eqvt",
     "(?bs, ?x) \<approx>abs_res (?cs, ?y) ==>
      (?p \<bullet> ?bs, ?p \<bullet> ?x) \<approx>abs_res
      (?p \<bullet> ?cs, ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alphas_abs_eqvt",
     "(?bs, ?x) \<approx>abs_set (?cs, ?y) ==>
      (?p \<bullet> ?bs, ?p \<bullet> ?x) \<approx>abs_set
      (?p \<bullet> ?cs, ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Base.freshness_lemma",
     "EX a. atom a \<sharp> (?h, ?h a) ==>
      EX x. ALL a. atom a \<sharp> ?h --> ?h a = x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Base.freshness_lemma_unique",
     "EX a. atom a \<sharp> (?h, ?h a) ==>
      EX! x. ALL a. atom a \<sharp> ?h --> ?h a = x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Base.set_renaming_perm",
     "finite ?bs ==>
      EX q. (ALL b:?bs. q \<bullet> b = ?p \<bullet> b) &
            supp q <= ?bs Un ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Nominal2_Abs.alphas_abs_trans",
     "[| (?es, ?x) \<approx>abs_lst (?gs, ?y);
         (?gs, ?y) \<approx>abs_lst (?hs, ?z) |]
      ==> (?es, ?x) \<approx>abs_lst (?hs, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.alphas_abs_trans",
     "[| (?bs, ?x) \<approx>abs_res (?cs, ?y);
         (?cs, ?y) \<approx>abs_res (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>abs_res (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Abs.alphas_abs_trans",
     "[| (?bs, ?x) \<approx>abs_set (?cs, ?y);
         (?cs, ?y) \<approx>abs_set (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>abs_set (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Base.at_class_sort",
     "[| type_definition ?Rep ?Abs {a. sort_of a = ?s};
         !!a. atom a = ?Rep a |]
      ==> sort_of (atom ?a) = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_app (template_hole 5, t_empty))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Nominal2_Base.swap_set_in",
     "[| ?a : ?S; ?b ~: ?S; sort_of ?a = sort_of ?b |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?S ~= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 1)
                )
            ),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1),
             template_var 1)
           ))),
    ("Nominal2_Abs.disjoint_right_eq",
     "[| ?A Un ?B1.0 = ?A Un ?B2.0; ?A Int ?B1.0 = {}; ?A Int ?B2.0 = {} |]
      ==> ?B1.0 = ?B2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_hole 0),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 0),
          template_hole 0)],
       template_equation (template_var 1, template_var 0))),
    ("Nominal2_Abs.Abs_eq_iff2",
     "([?bs]res. ?x = [?bs']res. ?y) =
      (EX p. (?bs, ?x) \<approx>res (=) supp p (?bs', ?y) &
             supp p <= ?bs Un ?bs')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Nominal2_Abs.Abs_eq_iff2",
     "([?bs]set. ?x = [?bs']set. ?y) =
      (EX p. (?bs, ?x) \<approx>set (=) supp p (?bs', ?y) &
             supp p <= ?bs Un ?bs')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Nominal2_Abs.alphas_abs_stronger",
     "((?as, ?x) \<approx>abs_res (?as', ?x')) =
      (EX p. (?as, ?x) \<approx>res (=) supp p (?as', ?x') &
             supp p <= ?as Un ?as')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Nominal2_Abs.alphas_abs_stronger",
     "((?as, ?x) \<approx>abs_set (?as', ?x')) =
      (EX p. (?as, ?x) \<approx>set (=) supp p (?as', ?x') &
             supp p <= ?as Un ?as')",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Nominal2_Abs.alpha_res_alpha_set",
     "(?bs, ?x) \<approx>res (=) supp ?p (?cs, ?y) =
      (?bs Int supp ?x, ?x) \<approx>set (=) supp ?p (?cs Int supp ?y, ?y)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3)),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_app (template_hole 2, template_var 3))),
                       template_var 3)),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 2, template_var 0))),
               template_var 0))
           ))),
    ("Nominal2_Base.FRESH_binop_iff",
     "[| finite (supp ?P); finite (supp ?Q) |]
      ==> (FRESH x. ?binop (?P x) (?Q x)) =
          ?binop (FRESH x. ?P x) (FRESH x. ?Q x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app
            (template_var 0, template_app (template_hole 1, t_empty)),
           template_app (template_hole 0, t_empty))))),
    ("Nominal2_Base.FRESH_conj_iff",
     "[| finite (supp ?P); finite (supp ?Q) |]
      ==> (FRESH x. ?P x & ?Q x) = ((FRESH x. ?P x) & (FRESH x. ?Q x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app
            (template_hole 0, template_app (template_hole 1, t_empty)),
           template_app (template_hole 1, t_empty))))),
    ("Nominal2_Base.FRESH_disj_iff",
     "[| finite (supp ?P); finite (supp ?Q) |]
      ==> (FRESH x. ?P x | ?Q x) = ((FRESH x. ?P x) | (FRESH x. ?Q x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app
            (template_hole 0, template_app (template_hole 1, t_empty)),
           template_app (template_hole 1, t_empty))))),
    ("Nominal2_Base.at_set_avoiding_aux",
     "[| ?Xs <= ?As; finite ?As |]
      ==> EX p. p \<bullet> ?Xs Int ?As = {} &
                supp p = ?Xs Un p \<bullet> ?Xs",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Nominal2_Base.flip_triple",
     "[| ?a ~= ?b; ?c ~= ?b |]
      ==> (?a \<leftrightarrow> ?c) + (?b \<leftrightarrow> ?c) +
          (?a \<leftrightarrow> ?c) =
          (?a \<leftrightarrow> ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Nominal2_Base.at_set_avoiding2_atom",
     "[| finite (supp ?c); finite (supp ?x); ?a \<sharp> ?x |]
      ==> EX p. p \<bullet> ?a \<sharp> ?c & supp ?x \<sharp>* p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Abs.Abs_rename_res'",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]res. ?x = [q \<bullet> ?bs]res. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_rename_res",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]res. ?x = [?p \<bullet> ?bs]res. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_rename_set'",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]set. ?x = [q \<bullet> ?bs]set. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_rename_set",
     "(?p \<bullet> ?bs) \<sharp>* ?x ==>
      EX q. [?bs]set. ?x = [?p \<bullet> ?bs]set. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.alpha_abs_res_minimal",
     "(?as, ?x) \<approx>res (=) supp ?p (?as', ?x') ==>
      (?as Int supp ?x,
       ?x) \<approx>res (=) supp ?p (?as' Int supp ?x', ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3)),
                    template_hole 2),
                  template_hole 1),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_app (template_hole 1, template_var 3))),
                       template_var 3)),
                   template_hole 2),
                 template_hole 1),
               template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 1, template_var 0))),
               template_var 0))
           ))),
    ("Nominal2_Abs.alpha_abs_res_abs_set",
     "(?as, ?x) \<approx>res (=) supp ?p (?as', ?x') ==>
      (?as Int supp ?x,
       ?x) \<approx>set (=) supp ?p (?as' Int supp ?x', ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 3)),
                    template_hole 3),
                  template_hole 2),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 0, template_var 4),
                           template_app (template_hole 2, template_var 3))),
                       template_var 3)),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_hole 2, template_var 0))),
               template_var 0))
           ))),
    ("Nominal2_Abs.alpha_abs_set_abs_res",
     "(?as Int supp ?x,
       ?x) \<approx>set (=) supp ?p (?as' Int supp ?x', ?x') ==>
      (?as, ?x) \<approx>res (=) supp ?p (?as', ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 4),
                            template_app
                             (template_hole 2, template_var 3))),
                        template_var 3)),
                    template_hole 1),
                  template_hole 2),
                template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_app (template_hole 2, template_var 0))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 3)),
                   template_hole 1),
                 template_hole 2),
               template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Nominal2_Base.permI",
     "[| bij ?f; MOST x. ?f x = x; !!a. sort_of (?f a) = sort_of a |]
      ==> ?f : perm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 0),
                template_hole 8),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Nominal2_Abs.Abs_eq_iff2",
     "([?cs]lst. ?x = [?cs']lst. ?y) =
      (EX p. (?cs, ?x) \<approx>lst (=) supp p (?cs', ?y) &
             supp p <= set ?cs Un set ?cs')",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.alphas_abs_stronger",
     "((?bs, ?x) \<approx>abs_lst (?bs', ?x')) =
      (EX p. (?bs, ?x) \<approx>lst (=) supp p (?bs', ?x') &
             supp p <= set ?bs Un set ?bs')",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Nominal2_Abs.Abs_rename_lst'",
     "(?p \<bullet> set ?bs) \<sharp>* ?x ==>
      EX q. [?bs]lst. ?x = [q \<bullet> ?bs]lst. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Nominal2_Abs.Abs_rename_lst",
     "(?p \<bullet> set ?bs) \<sharp>* ?x ==>
      EX q. [?bs]lst. ?x = [?p \<bullet> ?bs]lst. q \<bullet> ?x &
            q \<bullet> ?bs = ?p \<bullet> ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app (template_hole 7, template_var 1))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Nominal2_Base.supp_is_least_supports",
     "[| ?S supports ?x; finite ?S;
         !!S'. [| finite S'; S' supports ?x |] ==> ?S <= S' |]
      ==> supp ?x = ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Nominal2_Abs.alpha_abs_res_stronger1",
     "(?as, ?x) \<approx>res (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>res (=) supp p (?as', ?x') &
            supp p <= ?as Un ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_hole 6),
                  template_hole 5),
                template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Abs.alpha_abs_set_stronger1",
     "(?as, ?x) \<approx>set (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>set (=) supp p (?as', ?x') &
            supp p <= ?as Un ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_hole 6),
                  template_hole 5),
                template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Base.at_set_avoiding2",
     "[| finite ?xs; finite (supp ?c); finite (supp ?x); ?xs \<sharp>* ?x |]
      ==> EX p. (p \<bullet> ?xs) \<sharp>* ?c & supp ?x \<sharp>* p",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 6, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Nominal2_Base.at_set_avoiding",
     "[| finite ?Xs; finite (supp ?c);
         !!p. [| (p \<bullet> ?Xs) \<sharp>* ?c;
                 supp p = ?Xs Un p \<bullet> ?Xs |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Nominal2_Abs.alpha_res",
     "(?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y) =
      (?f ?x - ?bs = ?f ?y - ?cs &
       (?f ?x - ?bs) \<sharp>* ?p & ?R (?p \<bullet> ?x) ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5)),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_var 3, template_var 5)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_var 3, template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_var 3, template_var 5)),
                       template_var 6)),
                   template_var 2)),
               template_app
                (template_app
                  (template_var 4,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 5)),
                 template_var 0)))
           ))),
    ("Nominal2_Abs.alpha_abs_lst_stronger1",
     "(?as, ?x) \<approx>lst (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>lst (=) supp p (?as', ?x') &
            supp p <= set ?as Un set ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3)),
                    template_hole 7),
                  template_hole 6),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs_swap1",
     "[| ?a ~: supp ?x - ?bs; ?b ~: supp ?x - ?bs |]
      ==> [?bs]res. ?x =
          [(?a \<rightleftharpoons> ?b) \<bullet> ?bs]res. (?a \<rightleftharpoons> ?b) \<bullet> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_var 2))))),
    ("Nominal2_Abs.Abs_swap1",
     "[| ?a ~: supp ?x - ?bs; ?b ~: supp ?x - ?bs |]
      ==> [?bs]set. ?x =
          [(?a \<rightleftharpoons> ?b) \<bullet> ?bs]set. (?a \<rightleftharpoons> ?b) \<bullet> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_var 2))))),
    ("Nominal2_Base.swap_set_in_eq",
     "[| ?a : ?S; ?b ~: ?S; sort_of ?a = sort_of ?b |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?S = ?S - {?a} Un {?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_var 1)
                )
            ),
        template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?ds,
       ?p \<bullet> ?x) \<approx>lst (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?es,
                ?p \<bullet> ?y) =
      (?ds, ?x) \<approx>lst ?R ?f ?q (?es, ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 7),
                       template_var 6)),
                   template_app
                    (template_app (template_hole 3, template_var 7),
                     template_var 5))),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_var 4)),
             template_app
              (template_app (template_hole 1, template_var 7),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 7),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 7),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 7),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 5)),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?bs,
       ?p \<bullet> ?x) \<approx>res (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?cs,
                ?p \<bullet> ?y) =
      (?bs, ?x) \<approx>res ?R ?f ?q (?cs, ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 7),
                       template_var 6)),
                   template_app
                    (template_app (template_hole 3, template_var 7),
                     template_var 5))),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_var 4)),
             template_app
              (template_app (template_hole 1, template_var 7),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 7),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 7),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 7),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 5)),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Nominal2_Base.eqvts",
     "(?p \<bullet> ?bs,
       ?p \<bullet> ?x) \<approx>set (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?cs,
                ?p \<bullet> ?y) =
      (?bs, ?x) \<approx>set ?R ?f ?q (?cs, ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 7),
                       template_var 6)),
                   template_app
                    (template_app (template_hole 3, template_var 7),
                     template_var 5))),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_var 4)),
             template_app
              (template_app (template_hole 1, template_var 7),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 7),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 7),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 7),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 5)),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Nominal2_Abs.Abs_swap2",
     "[| ?a ~: supp ?x - set ?bs; ?b ~: supp ?x - set ?bs |]
      ==> [?bs]lst. ?x =
          [(?a \<rightleftharpoons> ?b) \<bullet> ?bs]lst. (?a \<rightleftharpoons> ?b) \<bullet> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app (template_hole 5, template_var 1)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 2)),
                    template_app (template_hole 5, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_var 2))))),
    ("Nominal2_Abs.alpha_eqvt",
     "(?ds, ?x) \<approx>lst ?R ?f ?q (?es, ?y) ==>
      (?p \<bullet> ?ds,
       ?p \<bullet> ?x) \<approx>lst (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?es,
                ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6)),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 7)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 6))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alpha_eqvt",
     "(?bs, ?x) \<approx>res ?R ?f ?q (?cs, ?y) ==>
      (?p \<bullet> ?bs,
       ?p \<bullet> ?x) \<approx>res (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?cs,
                ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6)),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 7)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 6))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Abs.alpha_eqvt",
     "(?bs, ?x) \<approx>set ?R ?f ?q (?cs, ?y) ==>
      (?p \<bullet> ?bs,
       ?p \<bullet> ?x) \<approx>set (?p \<bullet> ?R) (?p \<bullet> ?f) (?p \<bullet> ?q) (?p \<bullet> ?cs,
                ?p \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6)),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 7)),
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_var 6))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 5)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))
           ))),
    ("Nominal2_Base.at_class",
     "[| type_definition ?Rep ?Abs {a. sort_of a = ?s};
         !!a. atom a = ?Rep a;
         !!p a. p \<bullet> a = ?Abs (p \<bullet> ?Rep a) |]
      ==> OFCLASS(?'a, at_class)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1),
              template_app (template_hole 11, t_empty))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 1, template_hole 0)))),
    ("Nominal2_Abs.alpha_abs_res_stronger1_aux",
     "(?as, ?x) \<approx>res (=) supp ?p' (?as', ?x') ==>
      EX p. (?as, ?x) \<approx>res (=) supp p (?as', ?x') &
            supp p <= supp ?x Int ?as Un supp ?x' Int ?as'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3)),
                    template_hole 7),
                  template_hole 6),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Nominal2_Abs.Abs1_eq_iff_fresh",
     "atom ?c \<sharp> (?a, ?b, ?x, ?y) ==>
      ([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      ((?a \<leftrightarrow> ?c) \<bullet> ?x =
       (?b \<leftrightarrow> ?c) \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 3)),
                 template_hole 3)),
             template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 2)),
                 template_hole 3)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4)),
             template_var 0))))),
    ("Nominal2_Abs.Abs1_eq_iff_fresh",
     "atom ?c \<sharp> (?a, ?b, ?x, ?y) ==>
      ([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      ((?a \<leftrightarrow> ?c) \<bullet> ?x =
       (?b \<leftrightarrow> ?c) \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 3)),
                 template_hole 3)),
             template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 2)),
                 template_hole 3)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4)),
             template_var 0))))),
    ("Nominal2_Abs.Abs1_eq_iff_fresh",
     "atom ?c \<sharp> (?a, ?b, ?x, ?y) ==>
      ([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      ((?a \<leftrightarrow> ?c) \<bullet> ?x =
       (?b \<leftrightarrow> ?c) \<bullet> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 3)),
                 template_hole 3)),
             template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_var 2)),
                 template_hole 3)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4)),
             template_var 0))))),
    ("Nominal2_Base.perm_simple_struct_induct",
     "[| ?P 0;
         !!p a b.
            [| ?P p; a ~= b; sort_of a = sort_of b |]
            ==> ?P ((a \<rightleftharpoons> b) + p) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Nominal2_Abs.alpha_sym",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R (- ?p \<bullet> ?y) ?x;
         (?ds, ?x) \<approx>lst ?R ?f ?p (?es, ?y) |]
      ==> (?es, ?y) \<approx>lst ?R ?f (- ?p) (?ds, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_var 6,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_var 4)
              )),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 2, template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R (- ?p \<bullet> ?y) ?x;
         (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>res ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_var 6,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_var 4)
              )),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 2, template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R (- ?p \<bullet> ?y) ?x;
         (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>set ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_var 6,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 5)),
                    template_var 3)),
                template_var 4)
              )),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 2, template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Base.at_base_class",
     "[| type_definition ?Rep ?Abs {a. sort_of a : range ?sort_fun};
         !!a. atom a = ?Rep a;
         !!p a. p \<bullet> a = ?Abs (p \<bullet> ?Rep a) |]
      ==> OFCLASS(?'a, at_base_class)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 2),
                template_var 1),
              template_app (template_hole 13, t_empty))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 1, template_hole 0)))),
    ("Nominal2_Abs.alpha_set",
     "(?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y) =
      (?f ?x - ?bs = ?f ?y - ?cs &
       (?f ?x - ?bs) \<sharp>* ?p &
       ?R (?p \<bullet> ?x) ?y & ?p \<bullet> ?bs = ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 5)),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_var 3, template_var 5)),
                     template_var 6)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_var 3, template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_var 3, template_var 5)),
                       template_var 6)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_var 4,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 5)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 6)),
                   template_var 1))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff",
     "([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       ?x = (?a \<leftrightarrow> ?b) \<bullet> ?y & atom ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 3)),
                   template_var 0))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff'",
     "([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       (?b \<leftrightarrow> ?a) \<bullet> ?x = ?y & atom ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 3)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 1)),
                   template_var 2))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff",
     "([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       ?x = (?a \<leftrightarrow> ?b) \<bullet> ?y & atom ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 3)),
                   template_var 0))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff'",
     "([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       (?b \<leftrightarrow> ?a) \<bullet> ?x = ?y & atom ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 3)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 1)),
                   template_var 2))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff",
     "([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       ?x = (?a \<leftrightarrow> ?b) \<bullet> ?y & atom ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 1)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 3)),
                   template_var 0))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff'",
     "([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b &
       (?b \<leftrightarrow> ?a) \<bullet> ?x = ?y & atom ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 3)),
               template_hole 8)),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 1)),
               template_hole 8)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 1),
                             template_var 3)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_var 1)),
                   template_var 2))))
           ))),
    ("Nominal2_Base.swap_rel_trans",
     "[| sort_of ?a = sort_of ?b; sort_of ?b = sort_of ?c;
         (?a \<rightleftharpoons> ?c) \<bullet> ?x = ?x;
         (?b \<rightleftharpoons> ?c) \<bullet> ?x = ?x |]
      ==> (?a \<rightleftharpoons> ?b) \<bullet> ?x = ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1)),
            template_var 0),
          template_var 0),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 0),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 0),
         template_var 0))),
    ("Nominal2_Base.at_set_avoiding3",
     "[| finite ?xs; finite (supp ?c); finite (supp ?x); ?xs \<sharp>* ?x |]
      ==> EX p. (p \<bullet> ?xs) \<sharp>* ?c &
                supp ?x \<sharp>* p & supp p = ?xs Un p \<bullet> ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 9, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Nominal2_Base.swap_triple",
     "[| ?a ~= ?b; ?c ~= ?b; sort_of ?a = sort_of ?b;
         sort_of ?b = sort_of ?c |]
      ==> (?a \<rightleftharpoons> ?c) + (?b \<rightleftharpoons> ?c) +
          (?a \<rightleftharpoons> ?c) =
          (?a \<rightleftharpoons> ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Nominal2_Abs.alpha_lst",
     "(?bs, ?x) \<approx>lst ?R ?f ?p (?cs, ?y) =
      (?f ?x - set ?bs = ?f ?y - set ?cs &
       (?f ?x - set ?bs) \<sharp>* ?p &
       ?R (?p \<bullet> ?x) ?y & ?p \<bullet> ?bs = ?cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5)),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_var 3, template_var 5)),
                     template_app (template_hole 4, template_var 6))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_var 3, template_var 0)),
                   template_app (template_hole 4, template_var 1)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_var 3, template_var 5)),
                       template_app (template_hole 4, template_var 6))),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_var 4,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 5)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 6)),
                   template_var 1))))
           ))),
    ("Nominal2_Abs.Abs1_eq_iff_all",
     "([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =
      (ALL c.
          atom c \<sharp> ?z -->
          atom c \<sharp> (?a, ?b, ?x, ?y) -->
          (?a \<leftrightarrow> c) \<bullet> ?x =
          (?b \<leftrightarrow> c) \<bullet> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 4)),
                 template_hole 10)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 2)),
               template_hole 10)),
           template_var 1)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.Abs1_eq_iff_all",
     "([{atom ?a}]res. ?x = [{atom ?b}]res. ?y) =
      (ALL c.
          atom c \<sharp> ?z -->
          atom c \<sharp> (?a, ?b, ?x, ?y) -->
          (?a \<leftrightarrow> c) \<bullet> ?x =
          (?b \<leftrightarrow> c) \<bullet> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 4)),
                 template_hole 10)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 2)),
               template_hole 10)),
           template_var 1)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.Abs1_eq_iff_all",
     "([{atom ?a}]set. ?x = [{atom ?b}]set. ?y) =
      (ALL c.
          atom c \<sharp> ?z -->
          atom c \<sharp> (?a, ?b, ?x, ?y) -->
          (?a \<leftrightarrow> c) \<bullet> ?x =
          (?b \<leftrightarrow> c) \<bullet> ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 4)),
                 template_hole 10)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 2)),
               template_hole 10)),
           template_var 1)),
       template_app (template_hole 9, t_empty))),
    ("Nominal2_Abs.alpha_sym_eqvt",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R ?y (?p \<bullet> ?x);
         ?p \<bullet> ?R = ?R; (?ds, ?x) \<approx>lst ?R ?f ?p (?es, ?y) |]
      ==> (?es, ?y) \<approx>lst ?R ?f (- ?p) (?ds, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4))
              )),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 6),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 0, template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym_eqvt",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R ?y (?p \<bullet> ?x);
         ?p \<bullet> ?R = ?R; (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>res ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4))
              )),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 6),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 0, template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_sym_eqvt",
     "[| ?R (?p \<bullet> ?x) ?y ==> ?R ?y (?p \<bullet> ?x);
         ?p \<bullet> ?R = ?R; (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y) |]
      ==> (?cs, ?y) \<approx>set ?R ?f (- ?p) (?bs, ?x)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4)),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4))
              )),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 6),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 4)),
                    template_var 6),
                  template_var 1),
                template_var 5),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 3)),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 0, template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 4))
           ))),
    ("Nominal2_Base.finite_supp_unique",
     "[| ?S supports ?x; finite ?S;
         !!a b.
            [| a : ?S; b ~: ?S; sort_of a = sort_of b |]
            ==> (a \<rightleftharpoons> b) \<bullet> ?x ~= ?x |]
      ==> supp ?x = ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Nominal2_Base.perm_simple_struct_induct2",
     "[| ?P 0;
         !!a b.
            [| sort_of a = sort_of b; a ~= b |]
            ==> ?P (a \<rightleftharpoons> b);
         !!p1 p2. [| ?P p1; ?P p2 |] ==> ?P (p1 + p2) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Nominal2_Base.perm_struct_induct",
     "[| supp ?p <= ?S; ?P 0;
         !!p a b.
            [| ?P p; supp p <= ?S; a : ?S; b : ?S; a ~= b;
               sort_of a = sort_of b |]
            ==> ?P ((a \<rightleftharpoons> b) + p) |]
      ==> ?P ?p",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 2),
          template_var 1),
        template_predicate (template_app (template_var 0, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Nominal2_Abs.alpha_trans",
     "[| [| ?R (?p \<bullet> ?x) ?y; ?R (?q \<bullet> ?y) ?z |]
         ==> ?R ((?q + ?p) \<bullet> ?x) ?z;
         (?es, ?x) \<approx>lst ?R ?f ?p (?gs, ?y);
         (?gs, ?y) \<approx>lst ?R ?f ?q (?hs, ?z) |]
      ==> (?es, ?x) \<approx>lst ?R ?f (?q + ?p) (?hs, ?z)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 9,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 7)),
                 template_var 6)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_var 9,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 6)),
                   template_var 4)
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 9,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 5),
                          template_var 8)),
                      template_var 7)),
                  template_var 4)
                ))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 7)),
                    template_var 9),
                  template_var 2),
                template_var 8),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 6)),
                    template_var 9),
                  template_var 2),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 7)),
                   template_var 9),
                 template_var 2),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 8)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_trans",
     "[| [| ?R (?p \<bullet> ?x) ?y; ?R (?q \<bullet> ?y) ?z |]
         ==> ?R ((?q + ?p) \<bullet> ?x) ?z;
         (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y);
         (?cs, ?y) \<approx>res ?R ?f ?q (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>res ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 9,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 7)),
                 template_var 6)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_var 9,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 6)),
                   template_var 4)
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 9,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 5),
                          template_var 8)),
                      template_var 7)),
                  template_var 4)
                ))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 7)),
                    template_var 9),
                  template_var 2),
                template_var 8),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 6)),
                    template_var 9),
                  template_var 2),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 7)),
                   template_var 9),
                 template_var 2),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 8)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_trans",
     "[| [| ?R (?p \<bullet> ?x) ?y; ?R (?q \<bullet> ?y) ?z |]
         ==> ?R ((?q + ?p) \<bullet> ?x) ?z;
         (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y);
         (?cs, ?y) \<approx>set ?R ?f ?q (?ds, ?z) |]
      ==> (?bs, ?x) \<approx>set ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 9,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 7)),
                 template_var 6)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_var 9,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 6)),
                   template_var 4)
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 9,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 5),
                          template_var 8)),
                      template_var 7)),
                  template_var 4)
                ))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 7)),
                    template_var 9),
                  template_var 2),
                template_var 8),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 6)),
                    template_var 9),
                  template_var 2),
                template_var 5),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 7)),
                   template_var 9),
                 template_var 2),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 8)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Nominal2_Abs.alpha_lst_trans_eqvt",
     "[| (?cs, ?y) \<approx>lst ?R ?f ?q (?ds, ?z);
         (?bs, ?x) \<approx>lst ?R ?f ?p (?cs, ?y); ?q \<bullet> ?R = ?R;
         [| ?R (?p \<bullet> ?x) ?y; ?R ?y (- ?q \<bullet> ?z) |]
         ==> ?R (?p \<bullet> ?x) (- ?q \<bullet> ?z) |]
      ==> (?bs, ?x) \<approx>lst ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_var 8)),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_var 7),
                  template_var 6),
                template_var 0),
              template_app
               (template_app (template_hole 5, template_var 9),
                template_var 8))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 7),
          template_var 7),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 7,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 8)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 7, template_var 8),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 5)),
                     template_var 3))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 7,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 5)),
                    template_var 3))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))
           ))),
    ("Nominal2_Abs.alpha_res_trans_eqvt",
     "[| (?cs, ?y) \<approx>res ?R ?f ?q (?ds, ?z);
         (?bs, ?x) \<approx>res ?R ?f ?p (?cs, ?y); ?q \<bullet> ?R = ?R;
         [| ?R (?p \<bullet> ?x) ?y; ?R ?y (- ?q \<bullet> ?z) |]
         ==> ?R (?p \<bullet> ?x) (- ?q \<bullet> ?z) |]
      ==> (?bs, ?x) \<approx>res ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_var 8)),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_var 7),
                  template_var 6),
                template_var 0),
              template_app
               (template_app (template_hole 5, template_var 9),
                template_var 8))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 7),
          template_var 7),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 7,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 8)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 7, template_var 8),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 5)),
                     template_var 3))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 7,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 5)),
                    template_var 3))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))
           ))),
    ("Nominal2_Abs.alpha_set_trans_eqvt",
     "[| (?cs, ?y) \<approx>set ?R ?f ?q (?ds, ?z);
         (?bs, ?x) \<approx>set ?R ?f ?p (?cs, ?y); ?q \<bullet> ?R = ?R;
         [| ?R (?p \<bullet> ?x) ?y; ?R ?y (- ?q \<bullet> ?z) |]
         ==> ?R (?p \<bullet> ?x) (- ?q \<bullet> ?z) |]
      ==> (?bs, ?x) \<approx>set ?R ?f (?q + ?p) (?ds, ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_var 8)),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_var 7),
                  template_var 6),
                template_var 0),
              template_app
               (template_app (template_hole 5, template_var 9),
                template_var 8))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 7),
          template_var 7),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_var 7,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 8)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_var 7, template_var 8),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 5)),
                     template_var 3))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 7,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 5)),
                    template_var 3))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)),
                   template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3))
           ))),
    ("Nominal2_Base.perm_struct_induct2",
     "[| supp ?p <= ?S; ?P 0;
         !!a b.
            [| sort_of a = sort_of b; a ~= b; a : ?S; b : ?S |]
            ==> ?P (a \<rightleftharpoons> b);
         !!p1 p2.
            [| ?P p1; ?P p2; supp p1 <= ?S; supp p2 <= ?S |]
            ==> ?P (p1 + p2) |]
      ==> ?P ?p",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 2),
          template_var 1),
        template_predicate (template_app (template_var 0, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Nominal2_FCB.Abs_lst1_fcb2",
     "[| [[?a]]lst. ?x = [[?b]]lst. ?y; ?a \<sharp> ?f ?a ?x ?c;
         {?a, ?b} \<sharp>* ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?a ?x ?c =
              ?f (p \<bullet> ?a) (p \<bullet> ?x) ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?b ?y ?c =
              ?f (p \<bullet> ?b) (p \<bullet> ?y) ?c |]
      ==> ?f ?a ?x ?c = ?f ?b ?y ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 5),
                template_hole 10)),
            template_var 4),
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 3),
                template_hole 10)),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app
                 (template_app (template_var 1, template_var 5),
                  template_var 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_hole 6))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_var 1, template_var 5), template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_var 1, template_var 3), template_var 2),
           template_var 0)))),
    ("Nominal2_FCB.Abs_lst_fcb2",
     "[| [?as]lst. ?x = [?bs]lst. ?y; set ?as \<sharp>* ?f ?as ?x ?c;
         set ?as \<sharp>* ?c; set ?bs \<sharp>* ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?as ?x ?c =
              ?f (p \<bullet> ?as) (p \<bullet> ?x) ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?bs ?y ?c =
              ?f (p \<bullet> ?bs) (p \<bullet> ?y) ?c |]
      ==> ?f ?as ?x ?c = ?f ?bs ?y ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 5)),
              template_app
               (template_app
                 (template_app (template_var 1, template_var 5),
                  template_var 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 7, template_var 5)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 7, template_var 3)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_var 1, template_var 5), template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_var 1, template_var 3), template_var 2),
           template_var 0)))),
    ("Nominal2_FCB.Abs_lst1_fcb2'",
     "[| [[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y;
         atom ?a \<sharp> ?f ?a ?x ?c; {atom ?a, atom ?b} \<sharp>* ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?a ?x ?c =
              ?f (p \<bullet> ?a) (p \<bullet> ?x) ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?b ?y ?c =
              ?f (p \<bullet> ?b) (p \<bullet> ?y) ?c |]
      ==> ?f ?a ?x ?c = ?f ?b ?y ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 5)),
                template_hole 10)),
            template_var 4),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_hole 10)),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_app
                 (template_app (template_var 1, template_var 5),
                  template_var 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 11, template_var 5)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 11, template_var 3)),
                    template_hole 6))),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_var 1, template_var 5), template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_var 1, template_var 3), template_var 2),
           template_var 0)))),
    ("Nominal2_FCB.Abs_set_fcb2",
     "[| [?as]set. ?x = [?bs]set. ?y; finite ?as; finite ?bs;
         ?as \<sharp>* ?f ?as ?x ?c; ?as \<sharp>* ?c; ?bs \<sharp>* ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?as ?x ?c =
              ?f (p \<bullet> ?as) (p \<bullet> ?x) ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f ?bs ?y ?c =
              ?f (p \<bullet> ?bs) (p \<bullet> ?y) ?c |]
      ==> ?f ?as ?x ?c = ?f ?bs ?y ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 5)),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app
                 (template_app (template_var 1, template_var 5),
                  template_var 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_var 1, template_var 5), template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_var 1, template_var 3), template_var 2),
           template_var 0)))),
    ("Nominal2_FCB.Abs_set_fcb",
     "[| [?ba ?xs]set. ?T = [?ba ?ys]set. ?S;
         !!x. x : ?ba ?xs ==> x \<sharp> ?f ?xs ?T;
         !!x. [| supp ?T - ?ba ?xs = supp ?S - ?ba ?ys; x : ?ba ?ys |]
              ==> x \<sharp> ?f ?xs ?T;
         !!p. [| p \<bullet> ?T = ?S; p \<bullet> ?ba ?xs = ?ba ?ys;
                 supp p <= ?ba ?xs Un ?ba ?ys |]
              ==> p \<bullet> ?f ?xs ?T = ?f ?ys ?S |]
      ==> ?f ?xs ?T = ?f ?ys ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app (template_var 5, template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_hole 15,
              template_app (template_var 5, template_var 2)),
            template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 0, template_var 4), template_var 3),
         template_app
          (template_app (template_var 0, template_var 2),
           template_var 1)))),
    ("Nominal2_FCB.Abs_lst_fcb",
     "[| [?ba ?xs]lst. ?T = [?ba ?ys]lst. ?S;
         !!x. x : set (?ba ?xs) ==> x \<sharp> ?f ?xs ?T;
         !!x. [| supp ?T - set (?ba ?xs) = supp ?S - set (?ba ?ys);
                 x : set (?ba ?ys) |]
              ==> x \<sharp> ?f ?xs ?T;
         !!p. [| p \<bullet> ?T = ?S; p \<bullet> ?ba ?xs = ?ba ?ys;
                 supp p <= set (?ba ?xs) Un set (?ba ?ys) |]
              ==> p \<bullet> ?f ?xs ?T = ?f ?ys ?S |]
      ==> ?f ?xs ?T = ?f ?ys ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app (template_var 5, template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_hole 17,
              template_app (template_var 5, template_var 2)),
            template_var 1)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 0, template_var 4), template_var 3),
         template_app
          (template_app (template_var 0, template_var 2),
           template_var 1)))),
    ("Nominal2_FCB.Abs_res_fcb2",
     "[| [?as]res. ?x = [?bs]res. ?y; finite ?as; finite ?bs;
         (?as Int supp ?x) \<sharp>* ?f (?as Int supp ?x) ?x ?c;
         ?as \<sharp>* ?c; ?bs \<sharp>* ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f (?as Int supp ?x) ?x ?c =
              ?f (p \<bullet> (?as Int supp ?x)) (p \<bullet> ?x) ?c;
         !!p. supp p \<sharp>* ?c ==>
              p \<bullet> ?f (?bs Int supp ?y) ?y ?c =
              ?f (p \<bullet> (?bs Int supp ?y)) (p \<bullet> ?y) ?c |]
      ==> ?f (?as Int supp ?x) ?x ?c = ?f (?bs Int supp ?y) ?y ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app (template_hole 7, template_var 4))),
              template_app
               (template_app
                 (template_app
                   (template_var 1,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_app (template_hole 7, template_var 4))),
                  template_var 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_var 1,
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_app (template_hole 7, template_var 4))),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_var 1,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_app (template_hole 7, template_var 2))),
             template_var 2),
           template_var 0)))),
    ("Nominal2_FCB.Abs_lst1_fcb",
     "[| [[atom ?x]]lst. ?T = [[atom ?y]]lst. ?S;
         [| ?x ~= ?y; atom ?y \<sharp> ?T;
            atom ?x \<sharp> (?y \<leftrightarrow> ?x) \<bullet> ?T |]
         ==> atom ?x \<sharp> ?f ?x ?T;
         [| ?x ~= ?y; atom ?y \<sharp> ?T;
            atom ?x \<sharp> (?y \<leftrightarrow> ?x) \<bullet> ?T |]
         ==> atom ?y \<sharp> ?f ?x ?T;
         [| ?S = (?x \<leftrightarrow> ?y) \<bullet> ?T; ?x ~= ?y;
            atom ?y \<sharp> ?T; atom ?x \<sharp> ?S |]
         ==> (?x \<leftrightarrow> ?y) \<bullet> ?f ?x ?T = ?f ?y ?S |]
      ==> ?f ?x ?T = ?f ?y ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 4)),
                template_hole 9)),
            template_var 3),
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                template_hole 9)),
            template_var 1)),
        template_implication
         ([template_negation
            (template_equation (template_var 4, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 10, template_var 2)),
                   template_var 3)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 10, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_var 4)),
                       template_var 3))
                   )],
              template_predicate
               (
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 10, template_var 4)),
                    template_app
                     (template_app (template_var 0, template_var 4),
                      template_var 3))
                  )))),
        template_implication
         ([template_negation
            (template_equation (template_var 4, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 10, template_var 2)),
                   template_var 3)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 10, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_var 4)),
                       template_var 3))
                   )],
              template_predicate
               (
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 10, template_var 2)),
                    template_app
                     (template_app (template_var 0, template_var 4),
                      template_var 3))
                  )))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 2)),
               template_var 3))],
          template_implication
           ([template_negation
              (template_equation (template_var 4, template_var 2))],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 10, template_var 2)),
                     template_var 3)
                   )],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 10, template_var 4)),
                       template_var 1)
                     )],
                template_equation
                 (template_app
                   (template_app
                     (template_hole 0,
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 2)),
                    template_app
                     (template_app (template_var 0, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_var 0, template_var 2),
                    template_var 1))))))],
       template_equation
        (template_app
          (template_app (template_var 0, template_var 4), template_var 3),
         template_app
          (template_app (template_var 0, template_var 2),
           template_var 1)))),
    ("Nominal2_FCB.Abs_res_fcb",
     "[| [atom ` ?xs]res. ?T = [atom ` ?ys]res. ?S;
         !!x. [| x : atom ` ?xs; x : supp ?T |] ==> x \<sharp> ?f ?xs ?T;
         !!x. [| supp ?T - atom ` ?xs = supp ?S - atom ` ?ys;
                 x : atom ` ?ys; x : supp ?S |]
              ==> x \<sharp> ?f ?xs ?T;
         !!p. [| p \<bullet> ?T = ?S;
                 supp p <= atom ` ?xs Int supp ?T Un atom ` ?ys Int supp ?S;
                 p \<bullet> (atom ` ?xs Int supp ?T) =
                 atom ` ?ys Int supp ?S |]
              ==> p \<bullet> ?f ?xs ?T = ?f ?ys ?S |]
      ==> ?f ?xs ?T = ?f ?ys ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 18,
              template_app
               (template_app (template_hole 17, template_hole 16),
                template_var 4)),
            template_var 3),
          template_app
           (template_app
             (template_hole 18,
              template_app
               (template_app (template_hole 17, template_hole 16),
                template_var 2)),
            template_var 1)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 0, template_var 4), template_var 3),
         template_app
          (template_app (template_var 0, template_var 2),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Nominal2MoreTemplates"
### 0.588s elapsed time, 0.739s cpu time, 0.050s GC time
val it = (): unit
