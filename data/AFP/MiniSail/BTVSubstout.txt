Loading theory "Draft.Nominal-Utils" (required by "Draft.BTVSubstTemplates" via "Draft.BTVSubst" via "Draft.Syntax")
Loading theory "Draft.Templates" (required by "Draft.BTVSubstTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BTVSubstTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.125s cpu time, 0.087s GC time
### theory "Draft.Nominal-Utils"
### 0.652s elapsed time, 1.316s cpu time, 0.087s GC time
Loading theory "Draft.Syntax" (required by "Draft.BTVSubstTemplates" via "Draft.BTVSubst")
### Ambiguous input (line 265 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 290 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 475 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 499 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 552 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 592 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 601 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 606 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  \<Delta> :: pt
  permute_\<Delta> == permute :: perm => \<Delta> => \<Delta>
consts
  permute_\<Delta> :: "perm => \<Delta> => \<Delta>"
instantiation
  \<Gamma> :: pt
  permute_\<Gamma> == permute :: perm => \<Gamma> => \<Gamma>
consts
  permute_\<Gamma> :: "perm => \<Gamma> => \<Gamma>"
### Ambiguous input (line 782 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 790 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^const>List.append" ("_position" g1) ("_position" g2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^fixed>append_g" ("_position" g1) ("_position" g2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### GNil @ ?y == ?y
### Ambiguous input (line 816 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 834 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>List.append" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 838 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 857 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 862 of "$AFP/MiniSail/Syntax.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 867 of "$AFP/MiniSail/Syntax.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 919 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 932 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 937 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 948 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 964 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 965 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1086 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "split"
  Proving monotonicity ...
### theory "Draft.Syntax"
### 26.889s elapsed time, 28.761s cpu time, 2.847s GC time
Loading theory "Draft.BTVSubst" (required by "Draft.BTVSubstTemplates")
class has_subst_b = fs +
  fixes subst_b :: "'a => bv => b => 'a"
  assumes
    "fresh_subst_if":
      "!!j t i x.
          j \<sharp> t[i::=x]\<^sub>b =
          (atom i \<sharp> t & j \<sharp> t |
           j \<sharp> x & (j \<sharp> t | j = atom i))"
    and
    "forget_subst":
      "!!a tm x. atom a \<sharp> tm ==> tm[a::=x]\<^sub>b = tm"
    and "subst_id": "!!tm a. tm[a::=B_var a]\<^sub>b = tm"
    and
    "eqvt":
      "!!p t1 x1 v.
          p \<bullet> t1[x1::=v]\<^sub>b =
          (p \<bullet> t1)[p \<bullet> x1::=p \<bullet> v]\<^sub>b"
    and
    "flip_subst":
      "!!bv c z.
          atom bv \<sharp> c ==>
          (bv \<leftrightarrow> z) \<bullet> c = c[z::=B_var bv]\<^sub>b"
    and
    "flip_subst_subst":
      "!!bv c z v.
          atom bv \<sharp> c ==>
          ((bv \<leftrightarrow> z) \<bullet> c)[bv::=v]\<^sub>b =
          c[z::=v]\<^sub>b"
instantiation
  b :: has_subst_b
  subst_b_b == subst_b :: b => bv => b => b
instantiation
  v :: has_subst_b
  subst_b_v == subst_b :: v => bv => b => v
instantiation
  ce :: has_subst_b
  subst_b_ce == subst_b :: ce => bv => b => ce
instantiation
  c :: has_subst_b
  subst_b_c == subst_b :: c => bv => b => c
instantiation
  \<tau> :: has_subst_b
  subst_b_\<tau> == subst_b :: \<tau> => bv => b => \<tau>
instantiation
  e :: has_subst_b
  subst_b_e == subst_b :: e => bv => b => e
instantiation
  s :: has_subst_b
  subst_b_s == subst_b :: s => bv => b => s
instantiation
  fun_typ :: has_subst_b
  subst_b_fun_typ == subst_b :: fun_typ => bv => b => fun_typ
instantiation
  fun_typ_q :: has_subst_b
  subst_b_fun_typ_q == subst_b :: fun_typ_q => bv => b => fun_typ_q
instantiation
  \<Gamma> :: has_subst_b
  subst_b_\<Gamma> == subst_b :: \<Gamma> => bv => b => \<Gamma>
instantiation
  \<Delta> :: has_subst_b
  subst_b_\<Delta> == subst_b :: \<Delta> => bv => b => \<Delta>
### theory "Draft.BTVSubst"
### 2.542s elapsed time, 2.966s cpu time, 0.275s GC time
Loading theory "Draft.BTVSubstTemplates"
val templateLemmas =
   [("BTVSubst.ms_fresh_all", "?a \<sharp> ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> (FALSE)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> (TRUE)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> L_false",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> L_true",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> L_unit",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> eq",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> leq",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> plus",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> []\<^sub>\<Delta>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.fresh_intros", "?a \<sharp> GNil",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("BTVSubst.fresh_intros", "atom ?x \<sharp> ?b",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("BTVSubst.fresh_intros", "atom ?u ~: supp ?b",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("BTVSubst.fresh_intros", "atom ?x ~: supp ?bs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("BTVSubst.subst_b_simps",
     "B_bitvec[?bv1.0::=?b]\<^sub>b\<^sub>b = B_bitvec",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("BTVSubst.subst_b_simps",
     "B_bool[?bv1.0::=?b]\<^sub>b\<^sub>b = B_bool",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("BTVSubst.subst_b_simps", "B_int[?bv1.0::=?b]\<^sub>b\<^sub>b = B_int",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("BTVSubst.subst_b_simps",
     "B_unit[?bv1.0::=?b]\<^sub>b\<^sub>b = B_unit",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("BTVSubst.subst_b_simps", "(FALSE)[?x::=?v]\<^sub>c\<^sub>b = (FALSE)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("BTVSubst.subst_b_simps", "(TRUE)[?x::=?v]\<^sub>c\<^sub>b = (TRUE)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("BTVSubst.fresh_intros", "atom ?u ~: atom ` ?xs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("BTVSubst.fresh_intros", "atom ?x ~: atom ` ?us",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("BTVSubst.fresh_intros", "atom ?bv ~: atom ` ?xs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("BTVSubst.subst_sb_id", "?A[?a::=B_var ?a]\<^sub>s\<^sub>b = ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("BTVSubst.subst_branchb_id", "subst_branchb ?B ?a (B_var ?a) = ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("BTVSubst.subst_branchlb_id", "subst_branchlb ?C ?a (B_var ?a) = ?C",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> (\<not> ?c ) = ?a \<sharp> ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [#1?v ]\<^sup>e = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [| ?v |]\<^sup>e = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> [ ?u ]\<^sup>e = ?a \<sharp> ?u",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [#2?v ]\<^sup>e = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> [ ?v ]\<^sup>e = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> L_bitvec ?list = ?a \<sharp> ?list",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> L_num ?int = ?a \<sharp> ?int",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> [?v]\<^sup>s = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> [ ?l ]\<^sup>v = ?a \<sharp> ?l",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> [ ?x ]\<^sup>v = ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [#1?ce]\<^sup>c\<^sup>e = ?a \<sharp> ?ce",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [| ?ce |]\<^sup>c\<^sup>e = ?a \<sharp> ?ce",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [#2?ce]\<^sup>c\<^sup>e = ?a \<sharp> ?ce",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?v ]\<^sup>c\<^sup>e = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> { ?branch_s } = ?a \<sharp> ?branch_s",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BTVSubst.subst_b_simps",
     "(B_id ?s)[?bv1.0::=?b]\<^sub>b\<^sub>b = B_id ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("BTVSubst.subst_b_base_for_lit",
     "(base_for_lit ?l)[?bv::=?b]\<^sub>b\<^sub>b = base_for_lit ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("BTVSubst.subst_b_simps",
     "[ ?u ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b = [ ?u ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("BTVSubst.subst_b_simps",
     "[ ?l ]\<^sup>v[?x::=?v]\<^sub>v\<^sub>b = [ ?l ]\<^sup>v",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("BTVSubst.subst_b_simps",
     "[ ?y ]\<^sup>v[?x::=?v]\<^sub>v\<^sub>b = [ ?y ]\<^sup>v",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("BTVSubst.ms_fresh_all", "?a \<sharp> ?b = (?a ~= atom ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_var 1, template_app (template_hole 0, template_var 0))
           ))),
    ("BTVSubst.subst_b_simps",
     "(\<not> ?c )[?x::=?v]\<^sub>c\<^sub>b =
      (\<not> ?c[?x::=?v]\<^sub>c\<^sub>b )",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[#1?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [#1?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[| ?v' |]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [| ?v'[?bv::=?b]\<^sub>v\<^sub>b |]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[#2?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [#2?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[?v']\<^sup>s[?bv::=?b]\<^sub>s\<^sub>b =
      [?v'[?bv::=?b]\<^sub>v\<^sub>b]\<^sup>s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[#1?v']\<^sup>c\<^sup>e[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b =
      [#1?v'[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b]\<^sup>c\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[| ?v' |]\<^sup>c\<^sup>e[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b =
      [| ?v'[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b |]\<^sup>c\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[#2?v']\<^sup>c\<^sup>e[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b =
      [#2?v'[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b]\<^sup>c\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?v' ]\<^sup>c\<^sup>e[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b =
      [ ?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>c\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_fresh_u_cls",
     "atom ?x \<sharp> ?tm = atom ?x \<sharp> ?tm[?bv::=?b']\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 3)),
         template_var 2),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.forget_subst_sb",
     "atom ?a \<sharp> ?A ==> ?A[?a::=?x]\<^sub>s\<^sub>b = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("BTVSubst.forget_subst_branchb",
     "atom ?a \<sharp> ?B ==> subst_branchb ?B ?a ?x = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("BTVSubst.forget_subst_branchlb",
     "atom ?a \<sharp> ?C ==> subst_branchlb ?C ?a ?x = ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("BTVSubst.ms_fresh_all",
     "atom ?x \<sharp> ?\<Gamma>' @ ?\<Gamma> ==>
      atom ?x \<sharp> ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 0)
           ))),
    ("BTVSubst.ms_fresh_all",
     "sort_of ?a ~= sort_of (atom ?b) ==> ?a \<sharp> ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> (?c1.0  AND  ?c2.0 ) =
      (?a \<sharp> ?c1.0 & ?a \<sharp> ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> (?c1.0 OR ?c2.0 ) =
      (?a \<sharp> ?c1.0 & ?a \<sharp> ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> (?ce1.0  ==  ?ce2.0 ) =
      (?a \<sharp> ?ce1.0 & ?a \<sharp> ?ce2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> (?c1.0  IMP  ?c2.0 ) =
      (?a \<sharp> ?c1.0 & ?a \<sharp> ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?list  ?v  ]\<^sup>e =
      (?a \<sharp> ?list & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?v1.0 @@ ?v2.0 ]\<^sup>e =
      (?a \<sharp> ?v1.0 & ?a \<sharp> ?v2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?v1.0  ?v2.0 ]\<^sup>e =
      (?a \<sharp> ?v1.0 & ?a \<sharp> ?v2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> ASSERT ?c IN ?s  = (?a \<sharp> ?c & ?a \<sharp> ?s)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> ?u ::= ?v = (?a \<sharp> ?u & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> MATCH ?v WITH { ?branch_list } =
      (?a \<sharp> ?v & ?a \<sharp> ?branch_list)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp>  ?s1.0 ;; ?s2.0  =
      (?a \<sharp> ?s1.0 & ?a \<sharp> ?s2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> WHILE ?s1.0 DO { ?s2.0 }  =
      (?a \<sharp> ?s1.0 & ?a \<sharp> ?s2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?v1.0 , ?v2.0 ]\<^sup>v =
      (?a \<sharp> ?v1.0 & ?a \<sharp> ?v2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?ce1.0 @@ ?ce2.0 ]\<^sup>c\<^sup>e =
      (?a \<sharp> ?ce1.0 & ?a \<sharp> ?ce2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> ?x #\<^sub>\<Delta> ?xs =
      (?a \<sharp> ?x & ?a \<sharp> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> ?x #\<^sub>\<Gamma> ?xs =
      (?a \<sharp> ?x & ?a \<sharp> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> ?xs @ ?ys = (?a \<sharp> ?xs & ?a \<sharp> ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b) = (?x \<sharp> ?a & ?x \<sharp> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp>  ?branch_s | ?branch_list   =
      (?a \<sharp> ?branch_s & ?a \<sharp> ?branch_list)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "(B_var ?bv2.0)[?bv1.0::=?b]\<^sub>b\<^sub>b =
      (if ?bv1.0 = ?bv2.0 then ?b else B_var ?bv2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0),
             template_app (template_hole 2, template_var 2))
           ))),
    ("BTVSubst.subst_b_simps",
     "(B_app ?s ?b2.0)[?bv1.0::=?b]\<^sub>b\<^sub>b =
      B_app ?s ?b2.0[?bv1.0::=?b]\<^sub>b\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?f  ?v'  ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?f  ?v'[?bv::=?b]\<^sub>v\<^sub>b  ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "?y ::= ?v'[?bv::=?b]\<^sub>s\<^sub>b =
      ?y ::= ?v'[?bv::=?b]\<^sub>v\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?c ==>
      atom ?x \<sharp> ?c[?bv::=?b']\<^sub>c\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?c ==>
      atom ?x \<sharp> ?c[?bv::=?b']\<^sub>c\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?e ==>
      atom ?x \<sharp> ?e[?bv::=?b']\<^sub>e\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?e ==>
      atom ?x \<sharp> ?e[?bv::=?b']\<^sub>e\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?s ==>
      atom ?x \<sharp> ?s[?bv::=?b']\<^sub>s\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?s ==>
      atom ?x \<sharp> ?s[?bv::=?b']\<^sub>s\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?v ==>
      atom ?x \<sharp> ?v[?bv::=?b']\<^sub>v\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?v ==>
      atom ?x \<sharp> ?v[?bv::=?b']\<^sub>v\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?ce ==>
      atom ?x \<sharp> ?ce[?bv::=?b']\<^sub>c\<^sub>e\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?ce ==>
      atom ?x \<sharp> ?ce[?bv::=?b']\<^sub>c\<^sub>e\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?t ==>
      atom ?x \<sharp> ?t[?bv::=?b']\<^sub>\<tau>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?t ==>
      atom ?x \<sharp> ?t[?bv::=?b']\<^sub>\<tau>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_db_u_fresh",
     "atom ?u \<sharp> ?D ==>
      atom ?u \<sharp> ?D[?bv::=?b]\<^sub>\<Delta>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_d_b_u_fresh",
     "atom ?x \<sharp> ?\<Gamma> ==>
      atom ?x \<sharp> ?\<Gamma>[?bv::=?b]\<^sub>\<Delta>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?d ==>
      atom ?x \<sharp> ?d[?bv::=?b']\<^sub>\<Delta>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_d_b_x_fresh",
     "atom ?x \<sharp> ?\<Delta> ==>
      atom ?x \<sharp> ?\<Delta>[?bv::=?b]\<^sub>\<Delta>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?d ==>
      atom ?x \<sharp> ?d[?bv::=?b']\<^sub>\<Delta>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_g_b_u_fresh",
     "atom ?x \<sharp> ?\<Gamma> ==>
      atom ?x \<sharp> ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_u",
     "atom ?x \<sharp> ?g ==>
      atom ?x \<sharp> ?g[?bv::=?b']\<^sub>\<Gamma>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_g_b_x_fresh",
     "atom ?x \<sharp> ?\<Gamma> ==>
      atom ?x \<sharp> ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_fresh_x",
     "atom ?x \<sharp> ?g ==>
      atom ?x \<sharp> ?g[?bv::=?b']\<^sub>\<Gamma>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("BTVSubst.subst_b_simps",
     "(V_cons ?tyid ?c ?v')[?x::=?v]\<^sub>v\<^sub>b =
      V_cons ?tyid ?c (?v'[?x::=?v]\<^sub>v\<^sub>b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "subst_branchb  ?dc ?x1.0 \<Rightarrow> ?s'  ?bv ?b =
       ?dc ?x1.0 \<Rightarrow> ?s'[?bv::=?b]\<^sub>s\<^sub>b ",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "[| toSet ?G <= toSet ?G'; ?x \<sharp> ?G' |] ==> ?x \<sharp> ?G",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("BTVSubst.subst_b_simps",
     "[ ?b1.0 , ?b2.0 ]\<^sup>b[?bv1.0::=?b]\<^sub>b\<^sub>b =
      [ ?b1.0[?bv1.0::=?b]\<^sub>b\<^sub>b , ?b2.0[?bv1.0::=?b]\<^sub>b\<^sub>b ]\<^sup>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "(?c1.0  AND  ?c2.0 )[?x::=?v]\<^sub>c\<^sub>b =
      (?c1.0[?x::=?v]\<^sub>c\<^sub>b  AND  ?c2.0[?x::=?v]\<^sub>c\<^sub>b )",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "(?c1.0 OR ?c2.0 )[?x::=?v]\<^sub>c\<^sub>b =
      (?c1.0[?x::=?v]\<^sub>c\<^sub>b OR ?c2.0[?x::=?v]\<^sub>c\<^sub>b )",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "(?e1.0  ==  ?e2.0 )[?x::=?v]\<^sub>c\<^sub>b =
      (?e1.0[?x::=?v]\<^sub>c\<^sub>e\<^sub>b  ==  ?e2.0[?x::=?v]\<^sub>c\<^sub>e\<^sub>b )",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "(?c1.0  IMP  ?c2.0 )[?x::=?v]\<^sub>c\<^sub>b =
      (?c1.0[?x::=?v]\<^sub>c\<^sub>b  IMP  ?c2.0[?x::=?v]\<^sub>c\<^sub>b )",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?v1.0 @@ ?v2.0 ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?v1.0[?bv::=?b]\<^sub>v\<^sub>b @@ ?v2.0[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?v1.0  ?v2.0 ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?v1.0[?bv::=?b]\<^sub>v\<^sub>b 
      ?v2.0[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "ASSERT ?c IN ?s [?bv::=?b]\<^sub>s\<^sub>b =
      ASSERT ?c[?bv::=?b]\<^sub>c\<^sub>b IN ?s[?bv::=?b]\<^sub>s\<^sub>b ",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "MATCH ?v' WITH { ?cs }[?bv::=?b]\<^sub>s\<^sub>b =
      MATCH ?v'[?bv::=?b]\<^sub>v\<^sub>b WITH { subst_branchlb ?cs ?bv
            ?b }",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "( ?s1.0 ;; ?s2.0 )[?bv::=?b]\<^sub>s\<^sub>b =
       ?s1.0[?bv::=?b]\<^sub>s\<^sub>b ;; ?s2.0[?bv::=?b]\<^sub>s\<^sub>b ",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "(WHILE ?s1.0 DO { ?s2.0 } )[?bv::=?b]\<^sub>s\<^sub>b =
      WHILE ?s1.0[?bv::=?b]\<^sub>s\<^sub>b DO { ?s2.0[?bv::=?b]\<^sub>s\<^sub>b } ",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?v1.0 , ?v2.0 ]\<^sup>v[?x::=?v]\<^sub>v\<^sub>b =
      [ ?v1.0[?x::=?v]\<^sub>v\<^sub>b , ?v2.0[?x::=?v]\<^sub>v\<^sub>b ]\<^sup>v",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?v1.0 @@ ?v2.0 ]\<^sup>c\<^sup>e[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b =
      [ ?v1.0[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b @@ ?v2.0[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b ]\<^sup>c\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.flip_subst_s",
     "atom ?bv \<sharp> ?s ==>
      (?bv \<leftrightarrow> ?z) \<bullet> ?s =
      ?s[?z::=B_var ?bv]\<^sub>s\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("BTVSubst.flip_subst_s",
     "atom ?bv \<sharp> ?cs ==>
      (?bv \<leftrightarrow> ?z) \<bullet> ?cs =
      subst_branchb ?cs ?z (B_var ?bv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("BTVSubst.flip_subst_s",
     "atom ?bv \<sharp> ?css ==>
      (?bv \<leftrightarrow> ?z) \<bullet> ?css =
      subst_branchlb ?css ?z (B_var ?bv)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [?list [ ?b ]  ?v ]\<^sup>e =
      (?a \<sharp> ?list & ?a \<sharp> ?b & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?opp ?v1.0 ?v2.0 ]\<^sup>e =
      (?a \<sharp> ?opp & ?a \<sharp> ?v1.0 & ?a \<sharp> ?v2.0)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> IF ?v THEN ?s1.0 ELSE ?s2.0 =
      (?a \<sharp> ?v & ?a \<sharp> ?s1.0 & ?a \<sharp> ?s2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0))))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> V_cons ?list1.0 ?list2.0 ?v =
      (?a \<sharp> ?list1.0 & ?a \<sharp> ?list2.0 & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0))))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> [ ?opp ?ce1.0 ?ce2.0 ]\<^sup>c\<^sup>e =
      (?a \<sharp> ?opp & ?a \<sharp> ?ce1.0 & ?a \<sharp> ?ce2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0))))),
    ("BTVSubst.subst_b_simps",
     "[?f [ ?b' ]  ?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [?f [ ?b'[?bv::=?b]\<^sub>b\<^sub>b ]  ?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?opp ?v1.0 ?v2.0 ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?opp ?v1.0[?bv::=?b]\<^sub>v\<^sub>b ?v2.0[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "LET ?y = ?e IN ?s[?bv::=?b]\<^sub>s\<^sub>b =
      LET ?y = ?e[?bv::=?b]\<^sub>e\<^sub>b IN ?s[?bv::=?b]\<^sub>s\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "[ ?opp ?v1.0 ?v2.0 ]\<^sup>c\<^sup>e[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b =
      [ ?opp ?v1.0[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b ?v2.0[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b ]\<^sup>c\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "\<lbrace> ?z : ?b2.0  | ?c \<rbrace>[?bv1.0::=?b1.0]\<^sub>\<tau>\<^sub>b =
      \<lbrace> ?z : ?b2.0[?bv1.0::=?b1.0]\<^sub>b\<^sub>b  | ?c[?bv1.0::=?b1.0]\<^sub>c\<^sub>b \<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c) =
      (?x \<sharp> ?a & ?x \<sharp> ?b & ?x \<sharp> ?c)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("BTVSubst.flip_subst_subst_s",
     "atom ?bv \<sharp> ?s ==>
      ((?bv \<leftrightarrow> ?z) \<bullet> ?s)[?bv::=?v]\<^sub>s\<^sub>b =
      ?s[?z::=?v]\<^sub>s\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_var 2)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.flip_bt_subst4",
     "atom ?bv \<sharp> ?t ==>
      ?t[?bv'::=?b]\<^sub>\<tau>\<^sub>b =
      ((?bv' \<leftrightarrow> ?bv) \<bullet> ?t)[?bv::=?b]\<^sub>\<tau>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_var 2)),
             template_var 3),
           template_var 0)))),
    ("BTVSubst.flip_subst_subst_s",
     "atom ?bv \<sharp> ?cs ==>
      subst_branchb ((?bv \<leftrightarrow> ?z) \<bullet> ?cs) ?bv ?v =
      subst_branchb ?cs ?z ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_var 2)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.flip_subst_subst_s",
     "atom ?bv \<sharp> ?css ==>
      subst_branchlb ((?bv \<leftrightarrow> ?z) \<bullet> ?css) ?bv ?v =
      subst_branchlb ?css ?z ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_var 2)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "(V_consp ?tyid ?c ?b ?v')[?x::=?v]\<^sub>v\<^sub>b =
      V_consp ?tyid ?c ?b[?x::=?v]\<^sub>b\<^sub>b
       (?v'[?x::=?v]\<^sub>v\<^sub>b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_d_b_member",
     "(?u, ?\<tau>) : setD ?\<Delta> ==>
      (?u, ?\<tau>[?bv::=?b]\<^sub>\<tau>\<^sub>b)
      : setD ?\<Delta>[?bv::=?b]\<^sub>\<Delta>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("BTVSubst.subst_b_simps",
     "(IF ?v' THEN ?s1.0 ELSE ?s2.0)[?bv::=?b]\<^sub>s\<^sub>b =
      IF ?v'[?bv::=?b]\<^sub>v\<^sub>b THEN ?s1.0[?bv::=?b]\<^sub>s\<^sub>b ELSE ?s2.0[?bv::=?b]\<^sub>s\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_bb_commute",
     "atom ?j \<sharp> ?A ==>
      ?A[?i::=?t]\<^sub>b\<^sub>b[?j::=?u]\<^sub>b\<^sub>b =
      ?A[?i::=?t[?j::=?u]\<^sub>b\<^sub>b]\<^sub>b\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0))))),
    ("BTVSubst.subst_cb_commute",
     "atom ?j \<sharp> ?A ==>
      (?A[?i::=?t]\<^sub>c\<^sub>b)[?j::=?u]\<^sub>c\<^sub>b =
      ?A[?i::=?t[?j::=?u]\<^sub>b\<^sub>b]\<^sub>c\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0))))),
    ("BTVSubst.subst_vb_commute",
     "atom ?j \<sharp> ?A ==>
      (?A[?i::=?t]\<^sub>v\<^sub>b)[?j::=?u]\<^sub>v\<^sub>b =
      ?A[?i::=?t[?j::=?u]\<^sub>b\<^sub>b]\<^sub>v\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0))))),
    ("BTVSubst.subst_ceb_commute",
     "atom ?j \<sharp> ?A ==>
      (?A[?i::=?t]\<^sub>c\<^sub>e\<^sub>b)[?j::=?u]\<^sub>c\<^sub>e\<^sub>b =
      ?A[?i::=?t[?j::=?u]\<^sub>b\<^sub>b]\<^sub>c\<^sub>e\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0))))),
    ("BTVSubst.subst_tb_commute",
     "atom ?j \<sharp> ?A ==>
      ?A[?i::=?t]\<^sub>\<tau>\<^sub>b[?j::=?u]\<^sub>\<tau>\<^sub>b =
      ?A[?i::=?t[?j::=?u]\<^sub>b\<^sub>b]\<^sub>\<tau>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4),
             template_var 0))))),
    ("BTVSubst.flip_b_subst4",
     "atom ?c \<sharp> (?b1.0, ?bv1.0) ==>
      ?b1.0[?bv1.0::=?b]\<^sub>b\<^sub>b =
      ((?bv1.0 \<leftrightarrow> ?c) \<bullet> ?b1.0)[?c::=?b]\<^sub>b\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_var 2)),
             template_var 3),
           template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> LET ?x = ?e IN ?s =
      ((?a \<sharp> ?s | ?a : set [atom ?x]) & ?a \<sharp> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_hole 1))))),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> \<lbrace> ?x : ?b  | ?c \<rbrace> =
      ((?a \<sharp> ?c | ?a : set [atom ?x]) & ?a \<sharp> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_hole 1))))),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp>  ?list ?x \<Rightarrow> ?s  =
      ((?a \<sharp> ?s | ?a : set [atom ?x]) & ?a \<sharp> ?list)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_hole 1))))),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> V_consp ?list1.0 ?list2.0 ?b ?v =
      (?a \<sharp> ?list1.0 &
       ?a \<sharp> ?list2.0 & ?a \<sharp> ?b & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 0)))))),
    ("BTVSubst.subst_b_simps",
     "LET ?y : ?t = ?s1.0 IN ?s2.0[?bv::=?b]\<^sub>s\<^sub>b =
      LET ?y : ?t[?bv::=?b]\<^sub>\<tau>\<^sub>b = ?s1.0[?bv::=?b]\<^sub>s\<^sub>b IN ?s2.0[?bv::=?b]\<^sub>s\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_b_simps",
     "VAR ?u : ?\<tau> = ?v' IN ?s[?bv::=?b]\<^sub>s\<^sub>b =
      VAR ?u : ?\<tau>[?bv::=?b]\<^sub>\<tau>\<^sub>b = ?v'[?bv::=?b]\<^sub>v\<^sub>b IN ?s[?bv::=?b]\<^sub>s\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = B_bitvec |]
      ==> ?b2.0 = B_bitvec",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_equation (template_var 3, template_hole 0)],
       template_equation (template_var 2, template_hole 0))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = B_bool |]
      ==> ?b2.0 = B_bool",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_equation (template_var 3, template_hole 0)],
       template_equation (template_var 2, template_hole 0))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = B_int |]
      ==> ?b2.0 = B_int",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_equation (template_var 3, template_hole 0)],
       template_equation (template_var 2, template_hole 0))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = B_unit |]
      ==> ?b2.0 = B_unit",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_equation (template_var 3, template_hole 0)],
       template_equation (template_var 2, template_hole 0))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d) =
      (?x \<sharp> ?a & ?x \<sharp> ?b & ?x \<sharp> ?c & ?x \<sharp> ?d)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 4),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0)))))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = B_id ?tyid |]
      ==> ?b2.0 = B_id ?tyid",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1)),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 1, template_var 2))
            ),
        template_equation
         (template_var 4, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 3, template_app (template_hole 0, template_var 0)))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = B_var ?bv' |]
      ==> ?b2.0 = B_var ?bv'",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1)),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 0, template_var 2))
            ),
        template_equation
         (template_var 4, template_app (template_hole 0, template_var 0))],
       template_equation
        (template_var 3, template_app (template_hole 0, template_var 0)))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> LET ?x : ?\<tau> = ?s1.0 IN ?s2.0 =
      ((?a \<sharp> ?s2.0 | ?a : set [atom ?x]) &
       ?a \<sharp> ?\<tau> & ?a \<sharp> ?s1.0)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 9, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 3)),
                   template_hole 1))))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 9, template_var 4),
             template_var 1))))),
    ("BTVSubst.ms_fresh_all",
     "?a \<sharp> VAR ?u : ?\<tau> = ?v IN ?s =
      ((?a \<sharp> ?s | ?a : set [atom ?u]) &
       ?a \<sharp> ?\<tau> & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 10, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 6, template_var 4),
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   template_hole 2))))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1))))),
    ("BTVSubst.subst_b_lookup",
     "Some (?b, ?c) = lookup ?\<Gamma> ?x ==>
      Some (?b[?bv::=?b']\<^sub>b\<^sub>b, ?c[?bv::=?b']\<^sub>c\<^sub>b) =
      lookup ?\<Gamma>[?bv::=?b']\<^sub>\<Gamma>\<^sub>b ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2)))),
    ("BTVSubst.fresh_subst_sb_if",
     "?j \<sharp> ?A[?i::=?x]\<^sub>s\<^sub>b =
      (atom ?i \<sharp> ?A & ?j \<sharp> ?A |
       ?j \<sharp> ?x & (?j \<sharp> ?A | ?j = atom ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 2, template_var 1)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_app (template_hole 2, template_var 1)))))
           ))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b & ?x \<sharp> ?c & ?x \<sharp> ?d & ?x \<sharp> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 5),
         template_app
          (template_app (template_hole 9, template_var 4),
           template_app
            (template_app (template_hole 8, template_var 3),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0))))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 5),
               template_var 3)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0))))))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = B_app ?tyid ?b11.0 |]
      ==> EX b11'.
             ?b11.0 = b11'[?bv::=?b]\<^sub>b\<^sub>b &
             ?b2.0 = B_app ?tyid b11'",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (
            template_equation
             (template_var 4,
              template_app (template_hole 3, template_var 3))
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c & ?x \<sharp> ?d & ?x \<sharp> ?e & ?x \<sharp> ?f)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 6),
         template_app
          (template_app (template_hole 11, template_var 5),
           template_app
            (template_app (template_hole 10, template_var 4),
             template_app
              (template_app (template_hole 9, template_var 3),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)))))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 6),
             template_var 5)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_var 6),
               template_var 4)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 0)))))))),
    ("BTVSubst.subst_bt_flip_sym",
     "[| atom ?bv \<sharp> ?b;
         atom ?bv \<sharp> (?bv1.0, ?bv2.0, ?t1.0, ?t2.0);
         (?bv1.0 \<leftrightarrow> ?bv) \<bullet> ?t1.0 =
         (?bv2.0 \<leftrightarrow> ?bv) \<bullet> ?t2.0 |]
      ==> ?t1.0[?bv1.0::=?b]\<^sub>\<tau>\<^sub>b =
          ?t2.0[?bv2.0::=?b]\<^sub>\<tau>\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 5)),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 5)),
            template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 5)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 4)))),
    ("BTVSubst.subst_bb_flip_sym",
     "[| atom ?c \<sharp> ?b;
         atom ?c \<sharp> (?bv1.0, ?bv2.0, ?b1.0, ?b2.0);
         (?bv1.0 \<leftrightarrow> ?c) \<bullet> ?b1.0 =
         (?bv2.0 \<leftrightarrow> ?c) \<bullet> ?b2.0 |]
      ==> ?b1.0[?bv1.0::=?b]\<^sub>b\<^sub>b =
          ?b2.0[?bv2.0::=?b]\<^sub>b\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 5)),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 5)),
            template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 5)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 4)))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d & ?x \<sharp> ?e & ?x \<sharp> ?f & ?x \<sharp> ?g)",
     template_equation
      (template_app
        (template_app (template_hole 14, template_var 7),
         template_app
          (template_app (template_hole 13, template_var 6),
           template_app
            (template_app (template_hole 12, template_var 5),
             template_app
              (template_app (template_hole 11, template_var 4),
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0))))))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 7),
             template_var 6)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 5, template_var 7),
               template_var 5)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 4, template_var 7),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 3, template_var 7),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 2, template_var 7),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 0))))))))),
    ("BTVSubst.subst_bb_inject",
     "[| ?b1.0 = ?b2.0[?bv::=?b]\<^sub>b\<^sub>b; ?b2.0 ~= B_var ?bv;
         ?b1.0 = [ ?b11.0 , ?b12.0 ]\<^sup>b |]
      ==> EX b11' b12'.
             ?b11.0 = b11'[?bv::=?b]\<^sub>b\<^sub>b &
             ?b12.0 = b12'[?bv::=?b]\<^sub>b\<^sub>b &
             ?b2.0 = [ b11' , b12' ]\<^sup>b",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (
            template_equation
             (template_var 4,
              template_app (template_hole 3, template_var 3))
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e & ?x \<sharp> ?f & ?x \<sharp> ?g & ?x \<sharp> ?h)",
     template_equation
      (template_app
        (template_app (template_hole 16, template_var 8),
         template_app
          (template_app (template_hole 15, template_var 7),
           template_app
            (template_app (template_hole 14, template_var 6),
             template_app
              (template_app (template_hole 13, template_var 5),
               template_app
                (template_app (template_hole 12, template_var 4),
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_app
                      (template_app (template_hole 9, template_var 1),
                       template_var 0)))))))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 8),
             template_var 7)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 6, template_var 8),
               template_var 6)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_var 8),
                 template_var 5)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 4, template_var 8),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 2, template_var 8),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 1, template_var 8),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 0, template_var 8),
                       template_var 0)))))))))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e &
       ?x \<sharp> ?f & ?x \<sharp> ?g & ?x \<sharp> ?h & ?x \<sharp> ?i)",
     template_equation
      (template_app
        (template_app (template_hole 18, template_var 9),
         template_app
          (template_app (template_hole 17, template_var 8),
           template_app
            (template_app (template_hole 16, template_var 7),
             template_app
              (template_app (template_hole 15, template_var 6),
               template_app
                (template_app (template_hole 14, template_var 5),
                 template_app
                  (template_app (template_hole 13, template_var 4),
                   template_app
                    (template_app (template_hole 12, template_var 3),
                     template_app
                      (template_app (template_hole 11, template_var 2),
                       template_app
                        (template_app (template_hole 10, template_var 1),
                         template_var 0))))))))),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 9),
             template_var 8)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 7, template_var 9),
               template_var 7)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 6, template_var 9),
                 template_var 6)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 5, template_var 9),
                   template_var 5)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 4, template_var 9),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 3, template_var 9),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 2, template_var 9),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 1, template_var 9),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 0, template_var 9),
                         template_var 0))))))))))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e &
       ?x \<sharp> ?f &
       ?x \<sharp> ?g & ?x \<sharp> ?h & ?x \<sharp> ?i & ?x \<sharp> ?j)",
     template_equation
      (template_app
        (template_app (template_hole 20, template_var 10),
         template_app
          (template_app (template_hole 19, template_var 9),
           template_app
            (template_app (template_hole 18, template_var 8),
             template_app
              (template_app (template_hole 17, template_var 7),
               template_app
                (template_app (template_hole 16, template_var 6),
                 template_app
                  (template_app (template_hole 15, template_var 5),
                   template_app
                    (template_app (template_hole 14, template_var 4),
                     template_app
                      (template_app (template_hole 13, template_var 3),
                       template_app
                        (template_app (template_hole 12, template_var 2),
                         template_app
                          (template_app (template_hole 11, template_var 1),
                           template_var 0)))))))))),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 10),
             template_var 9)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 8, template_var 10),
               template_var 8)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 7, template_var 10),
                 template_var 7)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 6, template_var 10),
                   template_var 6)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 5, template_var 10),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 4, template_var 10),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 3, template_var 10),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 2, template_var 10),
                           template_var 2)),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_hole 1, template_var 10),
                             template_var 1)),
                         template_app
                          (template_app (template_hole 0, template_var 10),
                           template_var 0)))))))))))),
    ("BTVSubst.ms_fresh_all",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e &
       ?x \<sharp> ?f &
       ?x \<sharp> ?g &
       ?x \<sharp> ?h &
       ?x \<sharp> ?i & ?x \<sharp> ?j & ?x \<sharp> ?k & ?x \<sharp> ?l)",
     template_equation
      (template_app
        (template_app (template_hole 24, template_var 12),
         template_app
          (template_app (template_hole 23, template_var 11),
           template_app
            (template_app (template_hole 22, template_var 10),
             template_app
              (template_app (template_hole 21, template_var 9),
               template_app
                (template_app (template_hole 20, template_var 8),
                 template_app
                  (template_app (template_hole 19, template_var 7),
                   template_app
                    (template_app (template_hole 18, template_var 6),
                     template_app
                      (template_app (template_hole 17, template_var 5),
                       template_app
                        (template_app (template_hole 16, template_var 4),
                         template_app
                          (template_app (template_hole 15, template_var 3),
                           template_app
                            (template_app
                              (template_hole 14, template_var 2),
                             template_app
                              (template_app
                                (template_hole 13, template_var 1),
                               template_var 0)))))))))))),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 12),
             template_var 11)),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 10, template_var 12),
               template_var 10)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 9, template_var 12),
                 template_var 9)),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 8, template_var 12),
                   template_var 8)),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 7, template_var 12),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 6, template_var 12),
                       template_var 6)),
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 5, template_var 12),
                         template_var 5)),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app (template_hole 4, template_var 12),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_app
                              (template_hole 3, template_var 12),
                             template_var 3)),
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_app
                                (template_hole 2, template_var 12),
                               template_var 2)),
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_app
                                  (template_hole 1, template_var 12),
                                 template_var 1)),
                             template_app
                              (template_app
                                (template_hole 0, template_var 12),
                               template_var 0))))))))))))))]:
   (string * thm * template) list
### theory "Draft.BTVSubstTemplates"
### 0.823s elapsed time, 0.960s cpu time, 0.000s GC time
val it = (): unit
