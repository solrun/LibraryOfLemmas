Loading theory "Draft.Nominal-Utils" (required by "Draft.SyntaxLTemplates" via "Draft.SyntaxL" via "Draft.Syntax")
Loading theory "Draft.Templates" (required by "Draft.SyntaxLTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.156s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SyntaxLTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.129s cpu time, 0.094s GC time
### theory "Draft.Nominal-Utils"
### 0.640s elapsed time, 1.302s cpu time, 0.094s GC time
Loading theory "Draft.Syntax" (required by "Draft.SyntaxLTemplates" via "Draft.SyntaxL")
### Ambiguous input (line 265 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 290 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 475 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 499 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 552 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 592 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 601 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 606 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  \<Delta> :: pt
  permute_\<Delta> == permute :: perm => \<Delta> => \<Delta>
consts
  permute_\<Delta> :: "perm => \<Delta> => \<Delta>"
instantiation
  \<Gamma> :: pt
  permute_\<Gamma> == permute :: perm => \<Gamma> => \<Gamma>
consts
  permute_\<Gamma> :: "perm => \<Gamma> => \<Gamma>"
### Ambiguous input (line 782 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 790 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^const>List.append" ("_position" g1) ("_position" g2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^fixed>append_g" ("_position" g1) ("_position" g2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### GNil @ ?y == ?y
### Ambiguous input (line 816 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 834 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>List.append" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 838 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 857 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 862 of "$AFP/MiniSail/Syntax.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 867 of "$AFP/MiniSail/Syntax.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 919 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 932 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 937 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 948 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 964 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 965 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1086 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "split"
  Proving monotonicity ...
### theory "Draft.Syntax"
### 25.084s elapsed time, 27.427s cpu time, 3.593s GC time
Loading theory "Draft.IVSubst" (required by "Draft.SyntaxLTemplates" via "Draft.SyntaxL")
### Ambiguous input (line 20 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" c))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" c))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subst_v"
###         ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###           ("\<^const>Syntax.V_var" ("_position" x)))
###         ("_position" x) ("_position" b))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subst_v"
###         ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###           ("\<^const>Syntax.V_lit" ("_position" x)))
###         ("_position" x) ("_position" b))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class has_subst_v = fs +
  fixes subst_v :: "'a => x => v => 'a"
  assumes
    "fresh_subst_v_if":
      "!!y a x v.
          y \<sharp> a[x::=v]\<^sub>v =
          (atom x \<sharp> a & y \<sharp> a |
           y \<sharp> v & (y \<sharp> a | y = atom x))"
    and
    "forget_subst_v": "!!x a v. atom x \<sharp> a ==> a[x::=v]\<^sub>v = a"
    and "subst_v_id": "!!a x. a[x::=[ x ]\<^sup>v]\<^sub>v = a"
    and
    "eqvt":
      "!!p a x v.
          p \<bullet> a[x::=v]\<^sub>v =
          (p \<bullet> a)[p \<bullet> x::=p \<bullet> v]\<^sub>v"
    and
    "flip_subst_v":
      "!!x c z.
          atom x \<sharp> c ==>
          (x \<leftrightarrow> z) \<bullet> c =
          c[z::=[ x ]\<^sup>v]\<^sub>v"
    and
    "subst_v_simple_commute":
      "!!x c z b.
          atom x \<sharp> c ==>
          c[z::=[ x ]\<^sup>v]\<^sub>v[x::=b]\<^sub>v = c[z::=b]\<^sub>v"
### Ambiguous input (line 28 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_lit" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_lit" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_var" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_var" ("_position" x1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_var" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_var" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_lit" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_lit" ("_position" x')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  v :: has_subst_v
  subst_v_v == subst_v :: v => x => v => v
### Ambiguous input (line 209 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_ev_abbrev"
###       ("_applC" ("_position" AE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("_applC" ("_position" AE_val)
###       ("_applC" ("_position" V_var) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_ev_abbrev"
###       ("_applC" ("_position" AE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("_applC" ("_position" AE_val)
###       ("_applC" ("_position" V_var) ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  e :: has_subst_v
  subst_v_e == subst_v :: e => x => v => e
### Ambiguous input (line 330 of "$AFP/MiniSail/IVSubst.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  ce :: has_subst_v
  subst_v_ce == subst_v :: ce => x => v => ce
### Ambiguous input (line 388 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Syntax.C_eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Pure.eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Syntax.C_eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Pure.eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  c :: has_subst_v
  subst_v_c == subst_v :: c => x => v => c
### Ambiguous input (line 470 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_var" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_var" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_lit" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_lit" ("_position" z1')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x)))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x)))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x)))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x)))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 558 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" xa))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" xa))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 559 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" xa))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("\<^const>Syntax.V_var" ("_position" x))))))
###         ("_position" \<Gamma>)))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" xa))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" xa))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("\<^const>Syntax.V_lit" ("_position" x))))))
###         ("_position" \<Gamma>)))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" xa))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  \<tau> :: has_subst_v
  subst_v_\<tau> == subst_v :: \<tau> => x => v => \<tau>
### Ambiguous input (line 711 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" c_of)
###         ("_cargs"
###           ("_applC" ("_position" T_refined_type)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b) ("_position" c))))
###           ("_position" x)))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" c_of)
###         ("_cargs"
###           ("_applC" ("_position" T_refined_type)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b) ("_position" c))))
###           ("_position" x)))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 827 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))
###     ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))
###     ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 854 of "$AFP/MiniSail/IVSubst.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_lit" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_lit" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1073 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst_branchv_abbrev" ("_position" s) ("_position" x)
###     ("_position" v))
###   ("_applC" ("_position" subst_branchv)
###     ("_cargs" ("_position" s) ("_cargs" ("_position" x) ("_position" v)))))
### ("\<^const>Pure.eq"
###   ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###     ("_position" v))
###   ("_applC" ("_position" subst_branchv)
###     ("_cargs" ("_position" s) ("_cargs" ("_position" x) ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1160 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" sa)
###       ("_position" xa) ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" sa)
###       ("_position" xa) ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" sa) ("_position" xa)
###       ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" sa) ("_position" xa)
###       ("_position" v'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1177 of "$AFP/MiniSail/IVSubst.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_var" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_var" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                 ("_position" za)
###                 ("\<^const>Syntax.V_var" ("_position" z1))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_lit" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_lit" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                 ("_position" za)
###                 ("\<^const>Syntax.V_lit" ("_position" z1))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1179 of "$AFP/MiniSail/IVSubst.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1200 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###         ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###         ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" cs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" cs))
###       ("_applC" ("_position" subst_branchv)
###         ("_cargs" ("_position" cs)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_lit" ("_position" x))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" cs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" cs))
###       ("_applC" ("_position" subst_branchv)
###         ("_cargs" ("_position" cs)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_var" ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1202 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" css)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" css))
###       ("_applC" ("_position" subst_branchlv)
###         ("_cargs" ("_position" css)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_lit" ("_position" x))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" css)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" css))
###       ("_applC" ("_position" subst_branchlv)
###         ("_cargs" ("_position" css)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_var" ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  s :: has_subst_v
  subst_v_s == subst_v :: s => x => v => s
### Ambiguous input (line 1253 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" subst_ft_v)
###         ("_cargs"
###           ("_applC" ("_position" AF_fun_typ)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" t)
###                     ("_constrain" ("_position" s) ("_type_name" s)))))))
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" z)
###           ("_cargs" ("_position" b)
###             ("_cargs"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" x) ("_position" v))
###               ("_cargs"
###                 ("\<^const>IVSubst.subst_tv_abbrev" ("_position" t)
###                   ("_position" x) ("_position" v))
###                 ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###                   ("_position" x) ("_position" v))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" subst_ft_v)
###         ("_cargs"
###           ("_applC" ("_position" AF_fun_typ)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" t)
###                     ("_constrain" ("_position" s) ("_type_name" s)))))))
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" z)
###           ("_cargs" ("_position" b)
###             ("_cargs"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" x) ("_position" v))
###               ("_cargs"
###                 ("\<^const>IVSubst.subst_tv_abbrev" ("_position" t)
###                   ("_position" x) ("_position" v))
###                 ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s)
###                   ("_position" x) ("_position" v))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun_typ :: has_subst_v
  subst_v_fun_typ == subst_v :: fun_typ => x => v => fun_typ
instantiation
  fun_typ_q :: has_subst_v
  subst_v_fun_typ_q == subst_v :: fun_typ_q => x => v => fun_typ_q
### Ambiguous input (line 1443 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>List.append"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>List.append"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>Syntax.append_g"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>Syntax.append_g"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.IVSubst"
### 2.835s elapsed time, 4.007s cpu time, 1.348s GC time
Loading theory "Draft.SyntaxL" (required by "Draft.SyntaxLTemplates")
### Ambiguous input (line 19 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" z)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" x))))))
###     ("\<^const>Set.union"
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" supp) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" z)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" x))))))
###     ("\<^const>Set.union"
###       ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" supp) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 131 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>Syntax.append_g" ("_position" xs1)
###             ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>List.append" ("_position" xs1) ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>Syntax.append_g" ("_position" xs1)
###             ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>List.append" ("_position" xs1) ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" toSet) ("_position" xs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ys) ("_position" zs))
###       ("\<^const>HOL.eq" ("_position" xs)
###         ("\<^const>List.append" ("_position" ys)
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" zs)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" toSet) ("_position" xs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ys) ("_position" zs))
###       ("\<^const>HOL.eq" ("_position" xs)
###         ("\<^const>Syntax.append_g" ("_position" ys)
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" zs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" G) ("_position" G'))
###     ("\<^const>HOL.eq" ("_position" \<Gamma>)
###       ("\<^const>List.append" ("_position" G')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" G))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" G) ("_position" G'))
###     ("\<^const>HOL.eq" ("_position" \<Gamma>)
###       ("\<^const>Syntax.append_g" ("_position" G')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" G))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 160 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("\<^const>Syntax.AS_final"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("\<^const>Syntax.AS_final"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("_Finset"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("_Finset"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_Ball"
###       ("_pattern" ("_position" x')
###         ("_patterns" ("_position" b') ("_position" c')))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x')
###           ("_cargs" ("_position" b') ("_position" c')))))
###     ("\<^const>HOL.conj"
###       ("_Ball"
###         ("_pattern" ("_position" x')
###           ("_patterns" ("_position" b') ("_position" c')))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x')
###             ("_cargs" ("_position" b') ("_position" c')))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("_Ball"
###           ("_pattern" ("_position" x')
###             ("_patterns" ("_position" b') ("_position" c')))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" x')
###               ("_cargs" ("_position" b') ("_position" c')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_Ball"
###       ("_pattern" ("_position" x')
###         ("_patterns" ("_position" b') ("_position" c')))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x')
###           ("_cargs" ("_position" b') ("_position" c')))))
###     ("\<^const>HOL.conj"
###       ("_Ball"
###         ("_pattern" ("_position" x')
###           ("_patterns" ("_position" b') ("_position" c')))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x')
###             ("_cargs" ("_position" b') ("_position" c')))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("_Ball"
###           ("_pattern" ("_position" x')
###             ("_patterns" ("_position" b') ("_position" c')))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" x')
###               ("_cargs" ("_position" b') ("_position" c')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" GNil)
###     ("\<^const>List.append" ("_position" G1) ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" GNil)
###     ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>List.append" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>List.append" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>Syntax.append_g" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>Syntax.append_g" ("_position" ys')
###               ("_position" zs))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SyntaxL"
### 0.208s elapsed time, 0.251s cpu time, 0.038s GC time
Loading theory "Draft.SyntaxLTemplates"
val templateLemmas =
   [("SyntaxL.u_fresh_c", "atom ?u \<sharp> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("SyntaxL.u_fresh_v", "atom ?u \<sharp> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("SyntaxL.u_fresh_ce", "atom ?u \<sharp> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("SyntaxL.u_fresh_t", "atom ?u \<sharp> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("SyntaxL.u_fresh_g", "atom ?u \<sharp> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("SyntaxL.rig_dom_eq",
     "Syntax.dom (?G[?x\<longmapsto>?c]) = Syntax.dom ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("SyntaxL.fresh_x_neq", "atom ?x \<sharp> ?y = (?x ~= ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("SyntaxL.supp_list_member", "?x : set ?l ==> supp ?x <= supp ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("SyntaxL.bv_not_in_bset_supp",
     "?bv |\<notin>| ?B ==> atom ?bv ~: supp ?B",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("SyntaxL.lookup_not_empty",
     "Some ?\<tau> = lookup ?G ?x ==> ?G ~= GNil",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("SyntaxL.fresh_d_fst_d",
     "atom ?u \<sharp> ?\<delta> ==> ?u ~: fst ` set ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("SyntaxL.u_fresh_d", "atom ?u \<sharp> ?D ==> ?u ~: fst ` setD ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("SyntaxL.fresh_d_not_in",
     "atom ?u2.0 \<sharp> ?\<Delta>' ==> ?u2.0 ~: fst ` setD ?\<Delta>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("SyntaxL.GNil_append",
     "GNil = ?G1.0 @ ?G2.0 ==> ?G1.0 = GNil & ?G2.0 = GNil",
     template_implication
      ([template_equation
         (template_hole 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))
           ))),
    ("SyntaxL.b_of_c_of_eq",
     "atom ?z \<sharp> ?\<tau> ==>
      \<lbrace> ?z : b_of ?\<tau>  | c_of ?\<tau> ?z \<rbrace> = ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("SyntaxL.lookup_fun_member",
     "Some (AF_fundef ?f ?ft) = lookup_fun ?\<Phi> ?f ==>
      AF_fundef ?f ?ft : set ?\<Phi>",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SyntaxL.lookup_x",
     "Some (?b, ?c) = lookup ?G ?x ==> ?x : fst ` toSet ?G",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("SyntaxL.split_G",
     "?x : toSet ?xs ==> EX ys zs. ?xs = ys @ ?x #\<^sub>\<Gamma> zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("SyntaxL.exist_fresh_bv",
     "EX bva2 dclist2.
         AF_typedef_poly ?tyid ?bva ?dclist =
         AF_typedef_poly ?tyid bva2 dclist2 &
         atom bva2 \<sharp> ?tm",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("SyntaxL.lookup_in_g",
     "Some (?b, ?c) = lookup ?\<Gamma> ?x ==>
      (?x, ?b, ?c) : toSet ?\<Gamma>",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SyntaxL.lookup_in_rig_eq",
     "Some (?b, ?c) = lookup ?\<Gamma> ?x ==>
      Some (?b, ?c') = lookup (?\<Gamma>[?x\<longmapsto>?c']) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 1)))),
    ("SyntaxL.GCons_eq_appendI",
     "[| ?x #\<^sub>\<Gamma> ?xs1.0 = ?ys; ?xs = ?xs1.0 @ ?zs |]
      ==> ?x #\<^sub>\<Gamma> ?xs = ?ys @ ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 4), template_var 3),
          template_var 2),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SyntaxL.supp_v_tau",
     "atom ?z \<sharp> ?v ==>
      supp
       \<lbrace> ?z : ?b  | [ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ ?v ]\<^sup>c\<^sup>e  \<rbrace> =
      supp ?v Un supp ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2))),
               template_app (template_hole 4, template_var 1)))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("SyntaxL.lookup_in_rig",
     "Some (?b, ?c) = lookup ?\<Gamma> ?y ==>
      EX c''. Some (?b, c'') = lookup (?\<Gamma>[?x\<longmapsto>?c']) ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SyntaxL.fun_arg_unique_aux",
     "AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1' ?s1' =
      AF_fun_typ ?x2.0 ?b2.0 ?c2.0 ?\<tau>2' ?s2' ==>
      \<lbrace> ?x1.0 : ?b1.0  | ?c1.0 \<rbrace> =
      \<lbrace> ?x2.0 : ?b2.0  | ?c2.0 \<rbrace>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6),
            template_var 5),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 9),
             template_var 8),
           template_var 7),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 2)))),
    ("SyntaxL.obtain_fresh_bv",
     "(!!bva2 dclist2.
          AF_typedef_poly ?tyid ?bva ?dclist =
          AF_typedef_poly ?tyid bva2 dclist2 &
          atom bva2 \<sharp> ?tm ==>
          ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("SyntaxL.supp_v_var_tau",
     "?z ~= ?x ==>
      supp
       \<lbrace> ?z : ?b  | [ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  \<rbrace> =
      {atom ?x} Un supp ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_var 0),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1))))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_hole 1)),
           template_app (template_hole 0, template_var 0))))),
    ("SyntaxL.lookup_inside",
     "?x ~: fst ` toSet ?\<Gamma>' ==>
      Some (?b1.0, ?c1.0) =
      lookup (?\<Gamma>' @ (?x, ?b1.0, ?c1.0) #\<^sub>\<Gamma> ?\<Gamma>)
       ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app (template_hole 7, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1))),
                 template_var 0))),
           template_var 4)))),
    ("SyntaxL.lookup_split",
     "Some (?b, ?c) = lookup ?\<Gamma> ?x ==>
      EX G G'. ?\<Gamma> = G' @ (?x, ?b, ?c) #\<^sub>\<Gamma> G",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("SyntaxL.lookup_in_rig_neq",
     "[| Some (?b, ?c) = lookup ?\<Gamma> ?y; ?x ~= ?y |]
      ==> Some (?b, ?c) = lookup (?\<Gamma>[?x\<longmapsto>?c']) ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2)))),
    ("SyntaxL.lookup_options",
     "Some (?b, ?c) = lookup (?xt #\<^sub>\<Gamma> ?G) ?x ==>
      (?x, ?b, ?c) = ?xt | Some (?b, ?c) = lookup ?G ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_app (template_hole 5, template_var 4),
                       template_var 3))),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("SyntaxL.dclist_distinct_unique",
     "[| (?dc, ?const) : set ?dclist2.0;
         (?cons, ?const1.0) : set ?dclist2.0; ?dc = ?cons;
         distinct (map fst ?dclist2.0) |]
      ==> ?const = ?const1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app (template_hole 5, template_var 2))
            ),
        template_equation (template_var 4, template_var 1),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2))
            )],
       template_equation (template_var 3, template_var 0))),
    ("SyntaxL.GCons_eq_append_conv",
     "(?x #\<^sub>\<Gamma> ?xs = ?ys @ ?zs) =
      (?ys = GNil & ?x #\<^sub>\<Gamma> ?xs = ?zs |
       (EX ys'. ?x #\<^sub>\<Gamma> ys' = ?ys & ?xs = ys' @ ?zs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 2)),
                   template_var 0))),
             template_app (template_hole 0, t_empty))
           ))),
    ("SyntaxL.fun_typ_flip",
     "(?bv1.0 \<leftrightarrow> ?c) \<bullet> AF_fun_typ ?x1.0 ?b1.0 ?c1.0
         ?\<tau>1.0 ?s1.0 =
      AF_fun_typ ?x1.0 ((?bv1.0 \<leftrightarrow> ?c) \<bullet> ?b1.0)
       ((?bv1.0 \<leftrightarrow> ?c) \<bullet> ?c1.0)
       ((?bv1.0 \<leftrightarrow> ?c) \<bullet> ?\<tau>1.0)
       ((?bv1.0 \<leftrightarrow> ?c) \<bullet> ?s1.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 6),
             template_var 5)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 5, template_var 6),
                     template_var 5)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 5)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 6),
               template_var 5)),
           template_var 0)))),
    ("SyntaxL.obtain_fresh_z3",
     "(!!z. \<lbrace> ?x : ?b  | ?c \<rbrace> =
            \<lbrace> z : ?b  | ?c[?x::=[ z ]\<^sup>v]\<^sub>c\<^sub>v \<rbrace> &
            atom z \<sharp> ?tm & atom z \<sharp> (?x, ?c) ==>
            ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("SyntaxL.lookup_restrict",
     "[| Some (?b', ?c') =
         lookup (?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>) ?y;
         ?x ~= ?y |]
      ==> Some (?b', ?c') = lookup (?\<Gamma>' @ ?\<Gamma>) ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 6)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app
                       (template_app (template_hole 6, template_var 3),
                        template_var 2))),
                  template_var 1))),
            template_var 0)),
        template_negation
         (template_equation (template_var 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 7),
             template_var 6)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 5),
               template_var 1)),
           template_var 0)))),
    ("SyntaxL.toSet_splitU",
     "((?x', ?b', ?c')
       : toSet (?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>)) =
      ((?x', ?b', ?c')
       : toSet ?\<Gamma>' Un {(?x, ?b, ?c)} Un toSet ?\<Gamma>)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 7),
             template_app
              (template_app (template_hole 6, template_var 6),
               template_var 5))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1))),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 7),
             template_app
              (template_app (template_hole 6, template_var 6),
               template_var 5))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 5, template_var 4)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 1))),
                 template_hole 0))),
           template_app (template_hole 5, template_var 0))))),
    ("SyntaxL.lookup_inside2",
     "[| Some (?b1.0, ?c1.0) =
         lookup (?\<Gamma>' @ (?x, ?b0.0, ?c0.0) #\<^sub>\<Gamma> ?\<Gamma>)
          ?y;
         ?x ~= ?y |]
      ==> Some (?b1.0, ?c1.0) =
          lookup (?\<Gamma>' @ (?x, ?b0.0, ?c0') #\<^sub>\<Gamma> ?\<Gamma>)
           ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 8),
              template_var 7)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 6),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3))),
                  template_var 2))),
            template_var 1)),
        template_negation
         (template_equation (template_var 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 8),
             template_var 7)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 6),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 5),
                     template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 0))),
                 template_var 2))),
           template_var 1)))),
    ("SyntaxL.toSet_splitP",
     "(ALL (x', b', c')
           :toSet (?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>).
          ?P x' b' c') =
      ((ALL (x', b', c'):toSet ?\<Gamma>'. ?P x' b' c') &
       ?P ?x ?b ?c & (ALL (x', b', c'):toSet ?\<Gamma>. ?P x' b' c'))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 5),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2))),
                 template_var 1)))),
         template_app (template_hole 2, t_empty)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 5)),
             template_app (template_hole 2, t_empty))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 1)),
             template_app (template_hole 2, t_empty))))))]:
   (string * thm * template) list
### theory "Draft.SyntaxLTemplates"
### 0.806s elapsed time, 1.006s cpu time, 0.123s GC time
val it = (): unit
