Loading theory "Draft.Nominal-Utils" (required by "Draft.WellformedLTemplates" via "Draft.WellformedL" via "Draft.Wellformed" via "Draft.IVSubst" via "Draft.Syntax")
Loading theory "Draft.Templates" (required by "Draft.WellformedLTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WellformedLTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.551s elapsed time, 1.126s cpu time, 0.088s GC time
### theory "Draft.Nominal-Utils"
### 0.651s elapsed time, 1.317s cpu time, 0.088s GC time
Loading theory "Draft.Syntax" (required by "Draft.WellformedLTemplates" via "Draft.WellformedL" via "Draft.Wellformed" via "Draft.IVSubst")
### Ambiguous input (line 265 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 290 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 475 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 499 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 552 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 592 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 601 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 606 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  \<Delta> :: pt
  permute_\<Delta> == permute :: perm => \<Delta> => \<Delta>
consts
  permute_\<Delta> :: "perm => \<Delta> => \<Delta>"
instantiation
  \<Gamma> :: pt
  permute_\<Gamma> == permute :: perm => \<Gamma> => \<Gamma>
consts
  permute_\<Gamma> :: "perm => \<Gamma> => \<Gamma>"
### Ambiguous input (line 782 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 790 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^const>List.append" ("_position" g1) ("_position" g2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^fixed>append_g" ("_position" g1) ("_position" g2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### GNil @ ?y == ?y
### Ambiguous input (line 816 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 834 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>List.append" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 838 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 857 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 862 of "$AFP/MiniSail/Syntax.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 867 of "$AFP/MiniSail/Syntax.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 919 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 932 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 937 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 948 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 964 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 965 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1086 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "split"
  Proving monotonicity ...
### theory "Draft.Syntax"
### 25.432s elapsed time, 27.769s cpu time, 3.561s GC time
Loading theory "Draft.BTVSubst" (required by "Draft.WellformedLTemplates" via "Draft.WellformedL" via "Draft.Wellformed")
Loading theory "Draft.IVSubst" (required by "Draft.WellformedLTemplates" via "Draft.WellformedL" via "Draft.Wellformed")
### Ambiguous input (line 20 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" c))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" c))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subst_v"
###         ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###           ("\<^const>Syntax.V_var" ("_position" x)))
###         ("_position" x) ("_position" b))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subst_v"
###         ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###           ("\<^const>Syntax.V_lit" ("_position" x)))
###         ("_position" x) ("_position" b))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class has_subst_b = fs +
  fixes subst_b :: "'a => bv => b => 'a"
  assumes
    "fresh_subst_if":
      "!!j t i x.
          j \<sharp> t[i::=x]\<^sub>b =
          (atom i \<sharp> t & j \<sharp> t |
           j \<sharp> x & (j \<sharp> t | j = atom i))"
    and
    "forget_subst":
      "!!a tm x. atom a \<sharp> tm ==> tm[a::=x]\<^sub>b = tm"
    and "subst_id": "!!tm a. tm[a::=B_var a]\<^sub>b = tm"
    and
    "eqvt":
      "!!p t1 x1 v.
          p \<bullet> t1[x1::=v]\<^sub>b =
          (p \<bullet> t1)[p \<bullet> x1::=p \<bullet> v]\<^sub>b"
    and
    "flip_subst":
      "!!bv c z.
          atom bv \<sharp> c ==>
          (bv \<leftrightarrow> z) \<bullet> c = c[z::=B_var bv]\<^sub>b"
    and
    "flip_subst_subst":
      "!!bv c z v.
          atom bv \<sharp> c ==>
          ((bv \<leftrightarrow> z) \<bullet> c)[bv::=v]\<^sub>b =
          c[z::=v]\<^sub>b"
class has_subst_v = fs +
  fixes subst_v :: "'a => x => v => 'a"
  assumes
    "fresh_subst_v_if":
      "!!y a x v.
          y \<sharp> a[x::=v]\<^sub>v =
          (atom x \<sharp> a & y \<sharp> a |
           y \<sharp> v & (y \<sharp> a | y = atom x))"
    and
    "forget_subst_v": "!!x a v. atom x \<sharp> a ==> a[x::=v]\<^sub>v = a"
    and "subst_v_id": "!!a x. a[x::=[ x ]\<^sup>v]\<^sub>v = a"
    and
    "eqvt":
      "!!p a x v.
          p \<bullet> a[x::=v]\<^sub>v =
          (p \<bullet> a)[p \<bullet> x::=p \<bullet> v]\<^sub>v"
    and
    "flip_subst_v":
      "!!x c z.
          atom x \<sharp> c ==>
          (x \<leftrightarrow> z) \<bullet> c =
          c[z::=[ x ]\<^sup>v]\<^sub>v"
    and
    "subst_v_simple_commute":
      "!!x c z b.
          atom x \<sharp> c ==>
          c[z::=[ x ]\<^sup>v]\<^sub>v[x::=b]\<^sub>v = c[z::=b]\<^sub>v"
### Ambiguous input (line 28 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_lit" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_lit" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_var" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_var" ("_position" x1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_var" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_var" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_lit" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_lit" ("_position" x')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  b :: has_subst_b
  subst_b_b == subst_b :: b => bv => b => b
instantiation
  v :: has_subst_v
  subst_v_v == subst_v :: v => x => v => v
instantiation
  v :: has_subst_b
  subst_b_v == subst_b :: v => bv => b => v
### Ambiguous input (line 209 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_ev_abbrev"
###       ("_applC" ("_position" AE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("_applC" ("_position" AE_val)
###       ("_applC" ("_position" V_var) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_ev_abbrev"
###       ("_applC" ("_position" AE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("_applC" ("_position" AE_val)
###       ("_applC" ("_position" V_var) ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  e :: has_subst_v
  subst_v_e == subst_v :: e => x => v => e
instantiation
  ce :: has_subst_b
  subst_b_ce == subst_b :: ce => bv => b => ce
### Ambiguous input (line 330 of "$AFP/MiniSail/IVSubst.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  ce :: has_subst_v
  subst_v_ce == subst_v :: ce => x => v => ce
### Ambiguous input (line 388 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Syntax.C_eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Pure.eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Syntax.C_eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Pure.eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  c :: has_subst_b
  subst_b_c == subst_b :: c => bv => b => c
instantiation
  \<tau> :: has_subst_b
  subst_b_\<tau> == subst_b :: \<tau> => bv => b => \<tau>
instantiation
  c :: has_subst_v
  subst_v_c == subst_v :: c => x => v => c
### Ambiguous input (line 470 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_var" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_var" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_lit" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_lit" ("_position" z1')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x)))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x)))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x)))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x)))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 558 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" xa))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" xa))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 559 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" xa))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("\<^const>Syntax.V_var" ("_position" x))))))
###         ("_position" \<Gamma>)))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" xa))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" xa))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("\<^const>Syntax.V_lit" ("_position" x))))))
###         ("_position" \<Gamma>)))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" xa))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  e :: has_subst_b
  subst_b_e == subst_b :: e => bv => b => e
instantiation
  \<tau> :: has_subst_v
  subst_v_\<tau> == subst_v :: \<tau> => x => v => \<tau>
### Ambiguous input (line 711 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" c_of)
###         ("_cargs"
###           ("_applC" ("_position" T_refined_type)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b) ("_position" c))))
###           ("_position" x)))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" c_of)
###         ("_cargs"
###           ("_applC" ("_position" T_refined_type)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b) ("_position" c))))
###           ("_position" x)))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 827 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))
###     ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))
###     ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 854 of "$AFP/MiniSail/IVSubst.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_lit" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_lit" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  s :: has_subst_b
  subst_b_s == subst_b :: s => bv => b => s
instantiation
  fun_typ :: has_subst_b
  subst_b_fun_typ == subst_b :: fun_typ => bv => b => fun_typ
instantiation
  fun_typ_q :: has_subst_b
  subst_b_fun_typ_q == subst_b :: fun_typ_q => bv => b => fun_typ_q
instantiation
  \<Gamma> :: has_subst_b
  subst_b_\<Gamma> == subst_b :: \<Gamma> => bv => b => \<Gamma>
instantiation
  \<Delta> :: has_subst_b
  subst_b_\<Delta> == subst_b :: \<Delta> => bv => b => \<Delta>
### Ambiguous input (line 1073 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst_branchv_abbrev" ("_position" s) ("_position" x)
###     ("_position" v))
###   ("_applC" ("_position" subst_branchv)
###     ("_cargs" ("_position" s) ("_cargs" ("_position" x) ("_position" v)))))
### ("\<^const>Pure.eq"
###   ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###     ("_position" v))
###   ("_applC" ("_position" subst_branchv)
###     ("_cargs" ("_position" s) ("_cargs" ("_position" x) ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BTVSubst"
### 3.063s elapsed time, 7.034s cpu time, 1.791s GC time
### Ambiguous input (line 1160 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" sa)
###       ("_position" xa) ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" sa)
###       ("_position" xa) ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" sa) ("_position" xa)
###       ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" sa) ("_position" xa)
###       ("_position" v'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1177 of "$AFP/MiniSail/IVSubst.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_var" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_var" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                 ("_position" za)
###                 ("\<^const>Syntax.V_var" ("_position" z1))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_lit" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_lit" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                 ("_position" za)
###                 ("\<^const>Syntax.V_lit" ("_position" z1))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1179 of "$AFP/MiniSail/IVSubst.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1200 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###         ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###         ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" cs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" cs))
###       ("_applC" ("_position" subst_branchv)
###         ("_cargs" ("_position" cs)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_lit" ("_position" x))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" cs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" cs))
###       ("_applC" ("_position" subst_branchv)
###         ("_cargs" ("_position" cs)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_var" ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1202 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" css)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" css))
###       ("_applC" ("_position" subst_branchlv)
###         ("_cargs" ("_position" css)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_lit" ("_position" x))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" css)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" css))
###       ("_applC" ("_position" subst_branchlv)
###         ("_cargs" ("_position" css)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_var" ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  s :: has_subst_v
  subst_v_s == subst_v :: s => x => v => s
### Ambiguous input (line 1253 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" subst_ft_v)
###         ("_cargs"
###           ("_applC" ("_position" AF_fun_typ)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" t)
###                     ("_constrain" ("_position" s) ("_type_name" s)))))))
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" z)
###           ("_cargs" ("_position" b)
###             ("_cargs"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" x) ("_position" v))
###               ("_cargs"
###                 ("\<^const>IVSubst.subst_tv_abbrev" ("_position" t)
###                   ("_position" x) ("_position" v))
###                 ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###                   ("_position" x) ("_position" v))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" subst_ft_v)
###         ("_cargs"
###           ("_applC" ("_position" AF_fun_typ)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" t)
###                     ("_constrain" ("_position" s) ("_type_name" s)))))))
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" z)
###           ("_cargs" ("_position" b)
###             ("_cargs"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" x) ("_position" v))
###               ("_cargs"
###                 ("\<^const>IVSubst.subst_tv_abbrev" ("_position" t)
###                   ("_position" x) ("_position" v))
###                 ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s)
###                   ("_position" x) ("_position" v))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun_typ :: has_subst_v
  subst_v_fun_typ == subst_v :: fun_typ => x => v => fun_typ
instantiation
  fun_typ_q :: has_subst_v
  subst_v_fun_typ_q == subst_v :: fun_typ_q => x => v => fun_typ_q
### Ambiguous input (line 1443 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>List.append"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>List.append"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>Syntax.append_g"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>Syntax.append_g"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.IVSubst"
### 3.309s elapsed time, 7.303s cpu time, 1.791s GC time
Loading theory "Draft.Wellformed" (required by "Draft.WellformedLTemplates" via "Draft.WellformedL")
Loading theory "Draft.SyntaxL" (required by "Draft.WellformedLTemplates" via "Draft.WellformedL")
### Ambiguous input (line 19 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" z)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" x))))))
###     ("\<^const>Set.union"
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" supp) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" z)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" x))))))
###     ("\<^const>Set.union"
###       ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" supp) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 131 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>Syntax.append_g" ("_position" xs1)
###             ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>List.append" ("_position" xs1) ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>Syntax.append_g" ("_position" xs1)
###             ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>List.append" ("_position" xs1) ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" toSet) ("_position" xs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ys) ("_position" zs))
###       ("\<^const>HOL.eq" ("_position" xs)
###         ("\<^const>List.append" ("_position" ys)
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" zs)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" toSet) ("_position" xs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ys) ("_position" zs))
###       ("\<^const>HOL.eq" ("_position" xs)
###         ("\<^const>Syntax.append_g" ("_position" ys)
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" zs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" G) ("_position" G'))
###     ("\<^const>HOL.eq" ("_position" \<Gamma>)
###       ("\<^const>List.append" ("_position" G')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" G))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" G) ("_position" G'))
###     ("\<^const>HOL.eq" ("_position" \<Gamma>)
###       ("\<^const>Syntax.append_g" ("_position" G')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" G))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 160 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("\<^const>Syntax.AS_final"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("\<^const>Syntax.AS_final"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("_Finset"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("_Finset"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_Ball"
###       ("_pattern" ("_position" x')
###         ("_patterns" ("_position" b') ("_position" c')))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x')
###           ("_cargs" ("_position" b') ("_position" c')))))
###     ("\<^const>HOL.conj"
###       ("_Ball"
###         ("_pattern" ("_position" x')
###           ("_patterns" ("_position" b') ("_position" c')))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x')
###             ("_cargs" ("_position" b') ("_position" c')))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("_Ball"
###           ("_pattern" ("_position" x')
###             ("_patterns" ("_position" b') ("_position" c')))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" x')
###               ("_cargs" ("_position" b') ("_position" c')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_Ball"
###       ("_pattern" ("_position" x')
###         ("_patterns" ("_position" b') ("_position" c')))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x')
###           ("_cargs" ("_position" b') ("_position" c')))))
###     ("\<^const>HOL.conj"
###       ("_Ball"
###         ("_pattern" ("_position" x')
###           ("_patterns" ("_position" b') ("_position" c')))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x')
###             ("_cargs" ("_position" b') ("_position" c')))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("_Ball"
###           ("_pattern" ("_position" x')
###             ("_patterns" ("_position" b') ("_position" c')))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" x')
###               ("_cargs" ("_position" b') ("_position" c')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" GNil)
###     ("\<^const>List.append" ("_position" G1) ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" GNil)
###     ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>List.append" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>List.append" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>Syntax.append_g" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>Syntax.append_g" ("_position" ys')
###               ("_position" zs))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SyntaxL"
### 0.206s elapsed time, 0.427s cpu time, 0.000s GC time
### Ambiguous input (line 31 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_int))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_int))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bool))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bool))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_unit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_unit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bitvec))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bitvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/MiniSail/Wellformed.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Gamma>)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/MiniSail/Wellformed.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.not_member"
###           ("_applC" ("_position" name_of_type) ("_position" tdef))
###           ("\<^const>Set.image" ("_position" name_of_type)
###             ("_applC" ("_position" set) ("_position" \<Theta>))))
###         ("\<^fixed>wfTh" ("_position" \<Theta>)) ("_position" \<Theta>)
###         ("_position" tdef))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.not_member"
###           ("_applC" ("_position" name_of_type) ("_position" tdef))
###           ("\<^const>Set.image" ("_position" name_of_type)
###             ("_applC" ("_position" set) ("_position" \<Theta>))))
###         ("\<^fixed>wfTh" ("_position" \<Theta>)) ("_position" \<Theta>)
###         ("_position" tdef))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.not_member"
###           ("_applC" ("_position" name_of_type) ("_position" tdef))
###           ("\<^const>Set.image" ("_position" name_of_type)
###             ("_applC" ("_position" set) ("_position" \<Theta>))))
###         ("\<^fixed>wfTh" ("_position" \<Theta>)) ("_position" \<Theta>)
###         ("_position" tdef))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("\<^fixed>wfTh" ("_position" \<Theta>))
###           ("_position" \<Theta>) ("_position" tdef)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("\<^fixed>wfTh" ("_position" \<Theta>))
###           ("_position" \<Theta>) ("_position" tdef)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTh"
###           ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<Theta>)
###             ("_position" tdef))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTh"
###           ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<Theta>)
###             ("_position" tdef))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Theta>) ("_position" tdef))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###         ("_position" GNil) ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###         ("_position" GNil) ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###         ("_position" GNil) ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("\<^const>FSet.fempty") ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("\<^const>FSet.fempty") ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("\<^const>FSet.fempty"))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" GNil) ("_position" lst))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>)
###         ("_insert_fset" ("_position" bv)) ("_position" GNil)
###         ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>)
###         ("_insert_fset" ("_position" bv)) ("_position" GNil)
###         ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>)
###         ("_insert_fset" ("_position" bv)) ("_position" GNil)
###         ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_insert_fset" ("_position" bv)) ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_insert_fset" ("_position" bv)) ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_insert_fset" ("_position" bv)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" GNil) ("_position" lst))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/MiniSail/Wellformed.thy") produces 54 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b1))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b1))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTs"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b1))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^fixed>wfC" ("_position" b1) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/MiniSail/Wellformed.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" s) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_id) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" s) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_id) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfTD" ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_position" b')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" v) ("_position" b'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" v) ("_position" b'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/MiniSail/Wellformed.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("\<^fixed>wfTh" ("_position" \<Theta>))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("\<^fixed>wfTh" ("_position" \<Theta>))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("\<^fixed>wfTh" ("_position" \<Theta>))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_applC" ("_position" AF_typedef_poly)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" bv) ("_position" dclist))))
###               ("_applC" ("_position" set) ("_position" \<Theta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/MiniSail/Wellformed.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" z)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" z)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" z)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" z)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/MiniSail/Wellformed.thy") produces 198 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" dc)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" set) ("_position" ts)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_constrain"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" ts))
###               ("_tapp"
###                 ("\<^type>Product_Type.prod" ("_type_name" string)
###                   ("_type_name" \<tau>))
###                 ("_type_name" list))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" dc)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" set) ("_position" ts)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_constrain"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" ts))
###               ("_tapp"
###                 ("\<^type>Product_Type.prod" ("_type_name" string)
###                   ("_type_name" \<tau>))
###                 ("_type_name" list))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" dc)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" set) ("_position" ts)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_constrain"
###                 ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" ts))
###                 ("_tapp"
###                   ("\<^type>Product_Type.prod" ("_type_name" string)
###                     ("_type_name" \<tau>))
###                   ("_type_name" list)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" dc)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" set) ("_position" ts)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_constrain"
###               ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" ts))
###               ("_tapp"
###                 ("\<^type>Product_Type.prod" ("_type_name" string)
###                   ("_type_name" \<tau>))
###                 ("_type_name" list))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/MiniSail/Wellformed.thy") produces 192 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" e2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" e2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" e2) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/MiniSail/Wellformed.thy") produces 240 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTs"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" b)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" bv))
###               ("_tuple" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" v))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" b)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" bv))
###               ("_tuple" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" v))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_tuple" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" b)
###                         ("_tuple_arg" ("_position" v))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>)
###                   ("\<^const>Set.member" ("_position" v)
###                     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                       ("_position" bv) ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTs"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" b)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" bv))
###               ("_tuple" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" v))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/MiniSail/Wellformed.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" GNil))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" GNil))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/MiniSail/Wellformed.thy") produces 72 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" c)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" wfB)
###                   ("_cargs" ("_position" \<Theta>)
###                     ("_cargs" ("_position" \<B>) ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 80 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfV", "wfC", "wfG", "wfT", "wfTs", "wfTh", "wfB", "wfCE", "wfTD"
  Proving monotonicity ...
### Ambiguous input (line 174 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 177 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" C_not) ("_position" c1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" C_not) ("_position" c1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" C_not) ("_position" c1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_var) ("_position" x))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_var) ("_position" x))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_pair)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_pair)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_cons)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc) ("_position" v))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_cons)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc) ("_position" v))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_cons)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc) ("_position" v))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_cons)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" v))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_cons)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" v))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_consp)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc)
###           ("_cargs" ("_position" b) ("_position" v)))))
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_consp)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc)
###           ("_cargs" ("_position" b) ("_position" v)))))
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_fst) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_fst) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_fst) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_fst) ("_position" v1))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_fst) ("_position" v1))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_snd) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_snd) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_snd) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_snd) ("_position" v1))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_snd) ("_position" v1))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_len) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_len) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_len) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_len) ("_position" v1))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_len) ("_position" v1))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 197 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 201 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_constrain" ("_position" \<tau>) ("_type_name" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_constrain" ("_position" \<tau>) ("_type_name" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_constrain" ("_position" \<tau>) ("_type_name" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))
###     ("_type_name" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))
###     ("_type_name" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))
###     ("_type_name" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 208 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_false"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_false"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain" ("\<^const>List.list.Nil")
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain" ("\<^const>List.list.Nil")
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain" ("\<^const>List.list.Nil")
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_pair)
###       ("_cargs" ("_position" b1) ("_position" b2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_pair)
###       ("_cargs" ("_position" b1) ("_position" b2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 224 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_id) ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_id) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_app)
###       ("_cargs" ("_position" s) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_app)
###       ("_cargs" ("_position" s) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 466 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/MiniSail/Wellformed.thy") produces 440 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ" ("_position" \<Gamma>) ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_unit))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_unit))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_unit))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_unit))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_unit))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 260 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/MiniSail/Wellformed.thy") produces 340 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFTQ"
###             ("_applC" ("_position" wfD)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_position" \<Delta>)))))
###             ("_position" \<Theta>) ("_position" \<Phi>)))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                       ("_position" dclist)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfB"
###             ("_applC" ("_position" wfD)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_position" \<Delta>)))))
###             ("_position" \<Theta>) ("_position" \<Phi>)))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                       ("_position" dclist)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfG"
###             ("_applC" ("_position" wfD)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_position" \<Delta>)))))
###             ("_position" \<Theta>) ("_position" \<Phi>)))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                       ("_position" dclist)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<Delta>)
###                         ("_position" tid) ("_position" dclist)
###                         ("\<^const>Set.member" ("_position" cs)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###               ("_position" \<Phi>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<Delta>)
###                         ("_position" tid) ("_position" dclist)
###                         ("\<^const>Set.member" ("_position" cs)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 429 of "$AFP/MiniSail/Wellformed.thy") produces 140 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args"
###                     ("_applC" ("_position" b_of) ("_position" \<tau>))
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" x))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_arg" ("_position" \<tau>))))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args"
###                     ("_applC" ("_position" b_of) ("_position" \<tau>))
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" x))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_arg" ("_position" \<tau>))))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args"
###                     ("_applC" ("_position" b_of) ("_position" \<tau>))
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" x))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_arg" ("_position" \<tau>))))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_arg" ("_position" \<tau>))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_arg" ("_position" \<tau>))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 436 of "$AFP/MiniSail/Wellformed.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfFT" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfTs" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfT" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfC" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfFTQ" ("_position" dc) ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfB" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfG" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfPhi" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Wellformed.wfTD" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 441 of "$AFP/MiniSail/Wellformed.thy") produces 272 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfFT" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfTs" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfT" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfC" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfFTQ" ("_position" dc) ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b))))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^fixed>wfD" ("_position" \<Delta>)
###                               ("_position" tid) ("_position" dclist)
###                               ("\<^const>Set.member" ("_position" css)
###                                 ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfB" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b))))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^fixed>wfD" ("_position" \<Delta>)
###                               ("_position" tid) ("_position" dclist)
###                               ("\<^const>Set.member" ("_position" css)
###                                 ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfG" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b))))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^fixed>wfD" ("_position" \<Delta>)
###                               ("_position" tid) ("_position" dclist)
###                               ("\<^const>Set.member" ("_position" css)
###                                 ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfPhi" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^fixed>wfD" ("_position" \<Delta>)
###                                 ("_position" tid) ("_position" dclist)
###                                 ("\<^const>Set.member" ("_position" css)
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Wellformed.wfTD" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^fixed>wfD" ("_position" \<Delta>)
###                                 ("_position" tid) ("_position" dclist)
###                                 ("\<^const>Set.member" ("_position" css)
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 447 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 449 of "$AFP/MiniSail/Wellformed.thy") produces 900 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_constrain"
###           ("\<^fixed>wfFTQ" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>))
###           ("_type_name" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" u)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" setD) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_constrain"
###           ("\<^const>Wellformed.wfB" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_type_name" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" u)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" setD) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_constrain"
###           ("\<^const>Wellformed.wfG" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_type_name" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" u)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" setD) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfPhi" ("_position" \<Gamma>) ("_position" \<Delta>))
###             ("_type_name" \<Delta>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.not_member" ("_position" u)
###                 ("\<^const>Set.image" ("_position" fst)
###                   ("_applC" ("_position" setD)
###                     ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^const>Wellformed.wfTD" ("_position" \<Gamma>)
###               ("_position" \<Delta>))
###             ("_type_name" \<Delta>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.not_member" ("_position" u)
###                 ("\<^const>Set.image" ("_position" fst)
###                   ("_applC" ("_position" setD)
###                     ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 456 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfPhi" ("_position" \<Theta>) ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 458 of "$AFP/MiniSail/Wellformed.thy") produces 210 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^const>Wellformed.wfT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 465 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 468 of "$AFP/MiniSail/Wellformed.thy") produces 13000 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfPhi" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("\<^const>Syntax.AS_final"
###               ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("\<^const>Syntax.AS_final"
###               ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("\<^const>Syntax.AS_final"
###               ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfPhi" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("\<^const>Syntax.AS_final"
###                 ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("\<^const>Syntax.AS_final"
###                 ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/MiniSail/Wellformed.thy") produces 9980 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 347 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 354 of "$AFP/MiniSail/Wellformed.thy") produces 480 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 361 of "$AFP/MiniSail/Wellformed.thy") produces 280 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFT" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfT" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfC" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfFTQ"
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b')
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" e)
###                                 ("_tuple_arg"
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfB"
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b')
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" e)
###                                 ("_tuple_arg"
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfG"
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b')
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" e)
###                                 ("_tuple_arg"
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s) ("_position" b))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" e)
###                                   ("_tuple_arg"
###                                     ("_position" b))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s) ("_position" b))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" e)
###                                   ("_tuple_arg"
###                                     ("_position" b))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 369 of "$AFP/MiniSail/Wellformed.thy") produces 2800 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" B_bool)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" c)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" c)
###                                 ("_tuple_args" ("_position" b)
###                                   ("_tuple_arg"
###                                     ("_position" s))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" B_bool)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" c)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" c)
###                                 ("_tuple_args" ("_position" b)
###                                   ("_tuple_arg"
###                                     ("_position" s))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" B_bool)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" c)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" c)
###                                 ("_tuple_args" ("_position" b)
###                                   ("_tuple_arg"
###                                     ("_position" s))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" c)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" c)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" s)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" c)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" c)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" s)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 283 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 299 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 377 of "$AFP/MiniSail/Wellformed.thy") produces 9368 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ" ("_position" \<Gamma>) ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<tau>)))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("\<^const>Syntax.\<Gamma>.GCons"
###                         ("_tuple" ("_position" x)
###                           ("_tuple_args"
###                             ("_applC" ("_position" b_of)
###                               ("_position" \<tau>))
###                             ("_tuple_arg" ("_position" C_true))))
###                         ("_position" \<Gamma>))
###                       ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" x))
###                         ("_tuple" ("_position" \<Phi>)
###                           ("_tuple_args" ("_position" \<Theta>)
###                             ("_tuple_args" ("_position" \<B>)
###                               ("_tuple_args" ("_position" \<Gamma>)
###                                 ("_tuple_args" ("_position" \<Delta>)
###                                   ("_tuple_args" ("_position" s1)
###                                     ("_tuple_args" ("_position" b)
### ("_tuple_arg" ("_position" \<tau>))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<tau>)))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("\<^const>Syntax.\<Gamma>.GCons"
###                         ("_tuple" ("_position" x)
###                           ("_tuple_args"
###                             ("_applC" ("_position" b_of)
###                               ("_position" \<tau>))
###                             ("_tuple_arg" ("_position" C_true))))
###                         ("_position" \<Gamma>))
###                       ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" x))
###                         ("_tuple" ("_position" \<Phi>)
###                           ("_tuple_args" ("_position" \<Theta>)
###                             ("_tuple_args" ("_position" \<B>)
###                               ("_tuple_args" ("_position" \<Gamma>)
###                                 ("_tuple_args" ("_position" \<Delta>)
###                                   ("_tuple_args" ("_position" s1)
###                                     ("_tuple_args" ("_position" b)
### ("_tuple_arg" ("_position" \<tau>))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<tau>)))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("\<^const>Syntax.\<Gamma>.GCons"
###                         ("_tuple" ("_position" x)
###                           ("_tuple_args"
###                             ("_applC" ("_position" b_of)
###                               ("_position" \<tau>))
###                             ("_tuple_arg" ("_position" C_true))))
###                         ("_position" \<Gamma>))
###                       ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" x))
###                         ("_tuple" ("_position" \<Phi>)
###                           ("_tuple_args" ("_position" \<Theta>)
###                             ("_tuple_args" ("_position" \<B>)
###                               ("_tuple_args" ("_position" \<Gamma>)
###                                 ("_tuple_args" ("_position" \<Delta>)
###                                   ("_tuple_args" ("_position" s1)
###                                     ("_tuple_args" ("_position" b)
### ("_tuple_arg" ("_position" \<tau>))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<tau>)))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("\<^const>Syntax.\<Gamma>.GCons"
###                           ("_tuple" ("_position" x)
###                             ("_tuple_args"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_tuple_arg" ("_position" C_true))))
###                           ("_position" \<Gamma>))
###                         ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal2_Base.pt_class.fresh"
###                           ("_applC" ("_position" atom) ("_position" x))
###                           ("_tuple" ("_position" \<Phi>)
###                             ("_tuple_args" ("_position" \<Theta>)
###                               ("_tuple_args" ("_position" \<B>)
###                                 ("_tuple_args" ("_position" \<Gamma>)
###                                   ("_tuple_args" ("_position" \<Delta>)
###                                     ("_tuple_args" ("_position" s1)
### ("_tuple_args" ("_position" b)
###   ("_tuple_arg" ("_position" \<tau>)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<tau>)))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("\<^const>Syntax.\<Gamma>.GCons"
###                           ("_tuple" ("_position" x)
###                             ("_tuple_args"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_tuple_arg" ("_position" C_true))))
###                           ("_position" \<Gamma>))
###                         ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal2_Base.pt_class.fresh"
###                           ("_applC" ("_position" atom) ("_position" x))
###                           ("_tuple" ("_position" \<Phi>)
###                             ("_tuple_args" ("_position" \<Theta>)
###                               ("_tuple_args" ("_position" \<B>)
###                                 ("_tuple_args" ("_position" \<Gamma>)
###                                   ("_tuple_args" ("_position" \<Delta>)
###                                     ("_tuple_args" ("_position" s1)
### ("_tuple_args" ("_position" b)
###   ("_tuple_arg" ("_position" \<tau>)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 385 of "$AFP/MiniSail/Wellformed.thy") produces 5596 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFTQ" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfPhi" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("_position" \<Gamma>) ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("_position" \<Gamma>) ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 392 of "$AFP/MiniSail/Wellformed.thy") produces 408 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFTQ" ("_position" \<B>) ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" u))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<tau>)
###                           ("_tuple_args" ("_position" v)
###                             ("_tuple_arg" ("_position" b)))))))))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("\<^const>Syntax.\<Delta>.DCons"
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" \<tau>)))
###                       ("_position" \<Delta>))
###                     ("\<^const>Set.member" ("_position" s)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfB" ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" u))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<tau>)
###                           ("_tuple_args" ("_position" v)
###                             ("_tuple_arg" ("_position" b)))))))))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("\<^const>Syntax.\<Delta>.DCons"
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" \<tau>)))
###                       ("_position" \<Delta>))
###                     ("\<^const>Set.member" ("_position" s)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfG" ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" u))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<tau>)
###                           ("_tuple_args" ("_position" v)
###                             ("_tuple_arg" ("_position" b)))))))))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("\<^const>Syntax.\<Delta>.DCons"
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" \<tau>)))
###                       ("_position" \<Delta>))
###                     ("\<^const>Set.member" ("_position" s)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfPhi" ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" u))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<tau>)
###                             ("_tuple_args" ("_position" v)
###                               ("_tuple_arg" ("_position" b)))))))))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>)
###                       ("\<^const>Syntax.\<Delta>.DCons"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" \<tau>)))
###                         ("_position" \<Delta>))
###                       ("\<^const>Set.member" ("_position" s)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfTD" ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" u))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<tau>)
###                             ("_tuple_args" ("_position" v)
###                               ("_tuple_arg" ("_position" b)))))))))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>)
###                       ("\<^const>Syntax.\<Delta>.DCons"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" \<tau>)))
###                         ("_position" \<Delta>))
###                       ("\<^const>Set.member" ("_position" s)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 400 of "$AFP/MiniSail/Wellformed.thy") produces 3672 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfD"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFT"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_applC" ("_position" setD) ("_position" \<Delta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFTQ"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_applC" ("_position" setD) ("_position" \<Delta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_applC" ("_position" setD) ("_position" \<Delta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfD"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFT"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/MiniSail/Wellformed.thy") produces 440 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ" ("_position" \<Gamma>) ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_bool))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_bool))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_bool))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_bool))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_bool))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 314 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 329 of "$AFP/MiniSail/Wellformed.thy") produces 688 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfE", "wfS", "wfCS", "wfCSS", "wfPhi", "wfD", "wfFTQ", "wfFT"
  Proving monotonicity ...
### Ambiguous input (line 478 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 488 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_mvar) ("_position" u)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_mvar) ("_position" u)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 479 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 489 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 480 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 481 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 482 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 483 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 484 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_len) ("_position" v1)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_len) ("_position" v1)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 485 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 486 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_app)
###       ("_cargs" ("_position" f) ("_position" v)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_app)
###       ("_cargs" ("_position" f) ("_position" v)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 487 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_appP)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" b') ("_position" v))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_appP)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" b') ("_position" v))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 496 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("\<^const>List.list.Nil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 497 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" AF_fundef)
###         ("_cargs" ("_position" f) ("_position" ft)))
###       ("_position" \<Pi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" AF_fundef)
###         ("_cargs" ("_position" f) ("_position" ft)))
###       ("_position" \<Pi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 498 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" fd) ("_position" \<Phi>))
###       ("_type_name" \<Phi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" fd) ("_position" \<Phi>))
###       ("_type_name" \<Phi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 503 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none) ("_position" ft))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none) ("_position" ft))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none) ("_position" ft))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 504 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv) ("_position" ft)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv) ("_position" ft)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv) ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 508 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 513 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 514 of "$AFP/MiniSail/Wellformed.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfC" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfT" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfD" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfVDs"
  Proving monotonicity ...
### theory "Draft.Wellformed"
### 68.882s elapsed time, 183.115s cpu time, 47.293s GC time
Loading theory "Draft.WellformedL" (required by "Draft.WellformedLTemplates")
### Ambiguous input (line 30 of "$AFP/MiniSail/WellformedL.thy") produces 1323 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfD"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfD"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfD"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))
###         ("_applC" ("_position" wfB)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" \<B>) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))
###         ("_applC" ("_position" wfB)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" \<B>) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))
###         ("_applC" ("_position" wfB)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" \<B>) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" zbc)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" zbc)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" zbc)
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/MiniSail/WellformedL.thy") produces 42 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 197 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/MiniSail/WellformedL.thy") produces 190 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/MiniSail/WellformedL.thy") produces 42 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/MiniSail/WellformedL.thy") produces 1626 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/MiniSail/WellformedL.thy") produces 1626 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/MiniSail/WellformedL.thy") produces 813 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/MiniSail/WellformedL.thy") produces 813 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 235 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 236 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 238 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 270 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 303 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 305 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 311 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 325 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 349 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 349 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 350 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 354 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 373 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 374 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 386 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 387 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 388 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 392 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 394 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" td))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" td))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" e))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("_applC" ("_position" supp) ("_position" \<B>)))
###         ("\<^const>Set.image" ("_position" atom)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" e))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("_applC" ("_position" supp) ("_position" \<B>)))
###         ("\<^const>Set.image" ("_position" atom)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 503 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>)))))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>)))))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 506 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" \<Phi>))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" \<Phi>))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 507 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 508 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" ftq))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" ftq))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" ftq))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 677 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 707 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 790 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 791 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 866 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 896 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 902 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 910 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 917 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 928 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z2) ("_position" b)
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" L_false)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" z2)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z2) ("_position" b)
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" L_false))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" z2))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 981 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 981 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 992 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" e) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" e) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1017 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1030 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" s) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" s) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1060 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1079 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1084 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1084 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1094 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1094 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1100 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1108 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1109 of "$AFP/MiniSail/WellformedL.thy") produces 340 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" b')
###         ("\<^const>HOL.not_equal" ("_position" x') ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" b')
###         ("\<^const>HOL.not_equal" ("_position" x') ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" b')
###         ("\<^const>HOL.not_equal" ("_position" x') ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" x'))
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" b')
###           ("\<^const>HOL.not_equal" ("_position" x') ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" x'))
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" b')
###           ("\<^const>HOL.not_equal" ("_position" x') ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" x'))
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" b')
###           ("\<^const>HOL.not_equal" ("_position" x') ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1123 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1155 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1156 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1168 of "$AFP/MiniSail/WellformedL.thy") produces 196 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1170 of "$AFP/MiniSail/WellformedL.thy") produces 100 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1171 of "$AFP/MiniSail/WellformedL.thy") produces 36 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1172 of "$AFP/MiniSail/WellformedL.thy") produces 100 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1173 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1176 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1178 of "$AFP/MiniSail/WellformedL.thy") produces 196 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1179 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1322 of "$AFP/MiniSail/WellformedL.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1323 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1326 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1327 of "$AFP/MiniSail/WellformedL.thy") produces 100 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1328 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1329 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1405 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1429 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1430 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1431 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1432 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1433 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1435 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1436 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1437 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_position" td))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_position" td))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_position" td))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_position" td))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1478 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1479 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1482 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1483 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1484 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1485 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1571 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1607 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1630 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("_applC" ("_position" AF_typedef)
###       ("_cargs" ("_position" tid) ("_position" dclist)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_applC" ("_position" AF_typedef)
###       ("_cargs" ("_position" tid) ("_position" dclist)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1641 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1721 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1763 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" t))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" bv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" t))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" bv)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1779 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" bv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" bv)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1784 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                     ("_position" z)
###                     ("_applC" ("_position" V_var) ("_position" x))))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                     ("_position" z)
###                     ("_applC" ("_position" V_var) ("_position" x))))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1785 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1840 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1879 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1880 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1892 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1964 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1965 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s1)
###     ("_applC" ("_position" b_of) ("_position" t1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s1)
###     ("_applC" ("_position" b_of) ("_position" t1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1966 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x2)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s2)
###     ("_applC" ("_position" b_of) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x2)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s2)
###     ("_applC" ("_position" b_of) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1993 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2013 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2014 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2019 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2019 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2032 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2047 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_position" \<Phi>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2092 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2093 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2094 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###         ("_position" \<B>') ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###         ("_position" \<B>') ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###         ("_position" \<B>') ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2095 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2096 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2099 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2100 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2126 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2127 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2130 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2131 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2132 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2133 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2274 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2275 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2280 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2281 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2286 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2286 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2287 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b) ("_position" bv)
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2333 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2333 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2334 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev"
###       ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev"
###       ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev"
###       ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2355 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2355 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2372 of "$AFP/MiniSail/WellformedL.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2373 of "$AFP/MiniSail/WellformedL.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2374 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2375 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2376 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2377 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2378 of "$AFP/MiniSail/WellformedL.thy") produces 18 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2379 of "$AFP/MiniSail/WellformedL.thy") produces 50 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2491 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2492 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2511 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2512 of "$AFP/MiniSail/WellformedL.thy") produces 168 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("_position" \<tau>))
###       ("_position" \<Theta>))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2531 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2532 of "$AFP/MiniSail/WellformedL.thy") produces 168 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("_position" \<tau>))
###       ("_position" \<Theta>))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2540 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2541 of "$AFP/MiniSail/WellformedL.thy") produces 580 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2568 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2569 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2581 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2581 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_position" \<Phi>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2582 of "$AFP/MiniSail/WellformedL.thy") produces 168 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("_position" \<tau>))
###       ("_position" \<Theta>))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2610 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2611 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2616 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2625 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2626 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp) ("_position" \<tau>))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp) ("_position" \<tau>))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2631 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2632 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2640 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2641 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2651 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2651 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_position" \<Phi>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2652 of "$AFP/MiniSail/WellformedL.thy") produces 580 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2682 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2683 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2716 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2725 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2732 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2733 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" bv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" bv)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2743 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2753 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2778 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s1')
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s2')
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s1') ("_position" x1)
###       ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s2')
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s1')
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s2') ("_position" x2)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s1') ("_position" x1)
###       ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s2') ("_position" x2)
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2826 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2845 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###           ("_position" x) ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###           ("_position" x) ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###           ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###           ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2858 of "$AFP/MiniSail/WellformedL.thy") produces 21 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2859 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2860 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2861 of "$AFP/MiniSail/WellformedL.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2862 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2864 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2865 of "$AFP/MiniSail/WellformedL.thy") produces 21 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2866 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2918 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2919 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2920 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2921 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2922 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2923 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2924 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2925 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3032 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3033 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3034 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3035 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3036 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3039 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3040 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3072 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3073 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3074 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3075 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3076 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3077 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3078 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3079 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3160 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3160 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3161 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3170 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3170 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3171 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3193 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3193 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3194 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3215 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3215 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3216 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3221 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3221 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3222 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3229 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3254 of "$AFP/MiniSail/WellformedL.thy") produces 20 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3255 of "$AFP/MiniSail/WellformedL.thy") produces 20 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3256 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3257 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3258 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3259 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3260 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3261 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3402 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3403 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3423 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3423 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e2) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e2) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3424 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3443 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z1)
###             ("_applC" ("_position" b_of) ("_position" t))
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" l)))
###                 ("_applC" ("_position" c_of)
###                   ("_cargs" ("_position" t) ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z1)
###             ("_applC" ("_position" b_of) ("_position" t))
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" l))))
###               ("_applC" ("_position" c_of)
###                 ("_cargs" ("_position" t) ("_position" z1))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3464 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3465 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3466 of "$AFP/MiniSail/WellformedL.thy") produces 40 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3480 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3481 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3486 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3487 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3503 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3503 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3504 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3515 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3526 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3527 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3540 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3540 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3541 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3560 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3560 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3561 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3568 of "$AFP/MiniSail/WellformedL.thy") produces 980 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3569 of "$AFP/MiniSail/WellformedL.thy") produces 500 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3570 of "$AFP/MiniSail/WellformedL.thy") produces 180 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3571 of "$AFP/MiniSail/WellformedL.thy") produces 500 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3572 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3574 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3575 of "$AFP/MiniSail/WellformedL.thy") produces 980 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3576 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3656 of "$AFP/MiniSail/WellformedL.thy") produces 80 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3657 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3660 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3661 of "$AFP/MiniSail/WellformedL.thy") produces 500 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3662 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3663 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3771 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3772 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" y))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" y))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" y))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3795 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3796 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3812 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3813 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3821 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3822 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3830 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3830 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3831 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3838 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3838 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3839 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3877 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.replace_in_g" ("_position" G) ("_position" x')
###       ("_position" c''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.replace_in_g" ("_position" G) ("_position" x')
###       ("_position" c''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.replace_in_g" ("_position" G) ("_position" x')
###       ("_position" c''))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3877 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3885 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3886 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3908 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3909 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3960 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_var" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_var" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_lit" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_lit" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3961 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3962 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c')
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" lookup)
###         ("_cargs"
###           ("\<^const>List.append"
###             ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###               ("_position" x') ("_position" v'))
###             ("_position" \<Gamma>))
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c')
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" lookup)
###         ("_cargs"
###           ("\<^const>Syntax.append_g"
###             ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###               ("_position" x') ("_position" v'))
###             ("_position" \<Gamma>))
###           ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3967 of "$AFP/MiniSail/WellformedL.thy") produces 686 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3968 of "$AFP/MiniSail/WellformedL.thy") produces 350 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3969 of "$AFP/MiniSail/WellformedL.thy") produces 126 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3970 of "$AFP/MiniSail/WellformedL.thy") produces 350 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3971 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3973 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3974 of "$AFP/MiniSail/WellformedL.thy") produces 686 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3975 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4142 of "$AFP/MiniSail/WellformedL.thy") produces 56 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4143 of "$AFP/MiniSail/WellformedL.thy") produces 112 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4144 of "$AFP/MiniSail/WellformedL.thy") produces 14 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4145 of "$AFP/MiniSail/WellformedL.thy") produces 14 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4146 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4147 of "$AFP/MiniSail/WellformedL.thy") produces 350 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4148 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4149 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4353 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4354 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4358 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4358 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4359 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4375 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4375 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4376 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4393 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfC)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" c))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfC)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4393 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4394 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4401 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" B)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" B)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4414 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4415 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4416 of "$AFP/MiniSail/WellformedL.thy") produces 27 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4417 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4418 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4420 of "$AFP/MiniSail/WellformedL.thy") produces 27 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4421 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4422 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4562 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4563 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4566 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4567 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4568 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4569 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4706 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4706 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4707 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4717 of "$AFP/MiniSail/WellformedL.thy") produces 245 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4718 of "$AFP/MiniSail/WellformedL.thy") produces 125 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4719 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4720 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4721 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4723 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4724 of "$AFP/MiniSail/WellformedL.thy") produces 245 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4725 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellformedL"
### 9.597s elapsed time, 16.048s cpu time, 1.054s GC time
Loading theory "Draft.WellformedLTemplates"
val templateLemmas =
   [("WellformedL.freshers", "?a \<sharp> B_bitvec",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("WellformedL.freshers", "?a \<sharp> B_bool",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("WellformedL.freshers", "?a \<sharp> B_int",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("WellformedL.freshers", "?a \<sharp> B_unit",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("WellformedL.freshers", "?a \<sharp> (FALSE)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("WellformedL.freshers", "?a \<sharp> (TRUE)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("WellformedL.freshers", "?a \<sharp> GNil",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("WellformedL.wf_weakening",
     "   \<turnstile>\<^sub>w\<^sub>f ?P  ==> True",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("WellformedL.wfX_wfB",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==> True",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("WellformedL.u_not_in_dom_g", "atom ?u ~: atom_dom ?G",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("WellformedL.x_not_in_u_set", "atom ?x ~: supp ?us",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("WellformedL.bv_not_in_dom_g", "atom ?bv ~: atom_dom ?G",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("WellformedL.wf_b_subst_lemmas",
     "B_bitvec[?bv1.0::=?b]\<^sub>b\<^sub>b = B_bitvec",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("WellformedL.wf_b_subst_lemmas",
     "B_bool[?bv1.0::=?b]\<^sub>b\<^sub>b = B_bool",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("WellformedL.wf_b_subst_lemmas",
     "B_int[?bv1.0::=?b]\<^sub>b\<^sub>b = B_int",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("WellformedL.wf_b_subst_lemmas",
     "B_unit[?bv1.0::=?b]\<^sub>b\<^sub>b = B_unit",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("WellformedL.b_of_supp", "supp (b_of ?t) <= supp ?t",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  ==> True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta> \<turnstile>\<^sub>w\<^sub>f ?td  ==> True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.beta_flip_eq",
     "(?x \<leftrightarrow> ?xa) \<bullet> ?\<B> = ?\<B>",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_var 0)),
    ("WellformedL.wf_intros",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f [] ",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wfPhi_wf",
     " ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  ==>
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("WellformedL.wfTD_wf",
     " ?\<Theta> \<turnstile>\<^sub>w\<^sub>f ?td  ==>
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  ==> True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f ?ftq  ==> True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==> True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.freshers", "?a \<sharp> B_id ?list = ?a \<sharp> ?list",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("WellformedL.freshers", "?a \<sharp> B_var ?bv = ?a \<sharp> ?bv",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("WellformedL.freshers", "?a \<sharp> (\<not> ?c ) = ?a \<sharp> ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("WellformedL.wf_b_subst_lemmas",
     "?a \<sharp> [#1?v ]\<^sup>e = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("WellformedL.freshers", "?a \<sharp> [ ?l ]\<^sup>v = ?a \<sharp> ?l",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("WellformedL.freshers", "?a \<sharp> [ ?x ]\<^sup>v = ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("WellformedL.freshers",
     "?a \<sharp> [#1?ce]\<^sup>c\<^sup>e = ?a \<sharp> ?ce",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("WellformedL.freshers",
     "?a \<sharp> [| ?ce |]\<^sup>c\<^sup>e = ?a \<sharp> ?ce",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("WellformedL.freshers",
     "?a \<sharp> [#2?ce]\<^sup>c\<^sup>e = ?a \<sharp> ?ce",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("WellformedL.freshers",
     "?a \<sharp> [ ?v ]\<^sup>c\<^sup>e = ?a \<sharp> ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("WellformedL.wf_b_subst_lemmas",
     "(B_id ?s)[?bv1.0::=?b]\<^sub>b\<^sub>b = B_id ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("WellformedL.wf_b_subst_lemmas",
     "[ ?u ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b = [ ?u ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("WellformedL.wfTh_fresh",
     "   \<turnstile>\<^sub>w\<^sub>f ?T  ==> atom ?x \<sharp> ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wfTh_supp",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==> supp ?\<Theta> = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("WellformedL.wf_intros",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f B_bitvec ",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f B_bool ",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f B_int ",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f B_unit ",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f GNil ",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wfB_wf",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  ==>
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("WellformedL.wfG_wf",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wf_subst",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wf_trans",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wfX_wfB",
     " ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.freshers", "?a \<sharp> ?b = (?a ~= atom ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_var 1, template_app (template_hole 0, template_var 0))
           ))),
    ("WellformedL.wfPhi_fresh",
     " ?T  \<turnstile>\<^sub>w\<^sub>f ?P  ==> atom ?x \<sharp> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wfPhi_supp",
     " ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  ==>
      supp ?\<Phi> = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("WellformedL.wfTD_supp",
     " ?\<Theta> \<turnstile>\<^sub>w\<^sub>f ?td  ==> supp ?td <= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("WellformedL.wf_strong_elim",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b'  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.wf_supp",
     " ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f ?ftq  ==>
      supp ?ftq = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("WellformedL.b_of_subst_bb_commute",
     "b_of ?\<tau>[?bv::=?b]\<^sub>\<tau>\<^sub>b =
      (b_of ?\<tau>)[?bv::=?b]\<^sub>b\<^sub>b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0))),
    ("WellformedL.wf_b_subst_lemmas",
     "[#1?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [#1?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "[| ?v' |]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [| ?v'[?bv::=?b]\<^sub>v\<^sub>b |]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "[#2?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [#2?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "[ ?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.theta_flip_eq",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
      (?x \<leftrightarrow> ?xa) \<bullet> ?\<Theta> = ?\<Theta>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("WellformedL.theta_flip_eq2",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
      (?z \<leftrightarrow> ?za) \<bullet> ?\<Theta> = ?\<Theta>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("WellformedL.wfB_supp",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  ==>
      supp ?b <= supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("WellformedL.wfG_supp",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
      atom_dom ?\<Gamma> <= supp ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
       ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f FALSE ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
       ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f TRUE ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
       ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f []\<^sub>\<Delta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
       ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [] ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("WellformedL.wfT_nil_supp",
     " ?\<Theta> ; {||} ; GNil   \<turnstile>\<^sub>w\<^sub>f ?t  ==>
      supp ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4),
                template_hole 3),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("WellformedL.wfTs_distinct",
     " ?\<Theta> ; ?B  ; GNil \<turnstile>\<^sub>w\<^sub>f ?dclist  ==>
      distinct (map fst ?dclist)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("WellformedL.wf_b_subst",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.phi_flip_eq",
     " ?T  \<turnstile>\<^sub>w\<^sub>f ?P  ==>
      (?x \<leftrightarrow> ?xa) \<bullet> ?P = ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("WellformedL.wf_b_subst_lemmas",
     "atom ?a \<sharp> ?tm ==> ?tm[?a::=?x]\<^sub>b = ?tm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("WellformedL.wfFTQ_wf",
     " ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f ?ftq  ==>
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("WellformedL.u_not_in_g",
     " ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G  ==>
      atom ?u ~: supp ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<Phi> ; {||} \<turnstile>\<^sub>w\<^sub>f ?ft  ==>
       ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f AF_fun_typ_none
                    ?ft ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("WellformedL.wf_supp",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft  ==>
      supp ?ft <= supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("WellformedL.wfT_wfB",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f b_of ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; {||}  ; GNil \<turnstile>\<^sub>w\<^sub>f ?lst  ==>
       ?\<Theta> \<turnstile>\<^sub>w\<^sub>f AF_typedef ?s ?lst ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_hole 3),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("WellformedL.wfCE_wfB",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("WellformedL.wfG_cons2",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?zbc #\<^sub>\<Gamma>
          ?\<Gamma>  ==>
       ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("WellformedL.wfG_suffix",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @ ?\<Gamma>  ==>
       ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("WellformedL.wfV_supp_nil",
     " ?P ; {||} ; GNil \<turnstile>\<^sub>w\<^sub>f ?v : ?b  ==>
      supp ?v = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_hole 4),
                  template_hole 3),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("WellformedL.wfV_wfB",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("WellformedL.freshers",
     "sort_of ?a ~= sort_of (atom ?b) ==> ?a \<sharp> ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("WellformedL.freshers",
     "?a \<sharp> B_app ?list ?b = (?a \<sharp> ?list & ?a \<sharp> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> [ ?b1.0 , ?b2.0 ]\<^sup>b =
      (?a \<sharp> ?b1.0 & ?a \<sharp> ?b2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> (?c1.0  AND  ?c2.0 ) =
      (?a \<sharp> ?c1.0 & ?a \<sharp> ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> (?c1.0 OR ?c2.0 ) =
      (?a \<sharp> ?c1.0 & ?a \<sharp> ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> (?ce1.0  ==  ?ce2.0 ) =
      (?a \<sharp> ?ce1.0 & ?a \<sharp> ?ce2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> (?c1.0  IMP  ?c2.0 ) =
      (?a \<sharp> ?c1.0 & ?a \<sharp> ?c2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> [ ?v1.0 , ?v2.0 ]\<^sup>v =
      (?a \<sharp> ?v1.0 & ?a \<sharp> ?v2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> [ ?ce1.0 @@ ?ce2.0 ]\<^sup>c\<^sup>e =
      (?a \<sharp> ?ce1.0 & ?a \<sharp> ?ce2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> ?x #\<^sub>\<Gamma> ?xs =
      (?a \<sharp> ?x & ?a \<sharp> ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("WellformedL.freshers",
     "?a \<sharp> (?x, ?y) = (?a \<sharp> ?x & ?a \<sharp> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "(B_var ?bv2.0)[?bv1.0::=?b]\<^sub>b\<^sub>b =
      (if ?bv1.0 = ?bv2.0 then ?b else B_var ?bv2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0),
             template_app (template_hole 2, template_var 2))
           ))),
    ("WellformedL.wf_b_subst_lemmas",
     "(B_app ?s ?b2.0)[?bv1.0::=?b]\<^sub>b\<^sub>b =
      B_app ?s ?b2.0[?bv1.0::=?b]\<^sub>b\<^sub>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "[ ?f  ?v'  ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?f  ?v'[?bv::=?b]\<^sub>v\<^sub>b  ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0  ==>
       ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<not> ?c1.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("WellformedL.wfFT_wf",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft  ==>
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("WellformedL.u_not_in_t",
     " ?\<Theta> ; ?B ; ?G   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
      atom ?u ~: supp ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("WellformedL.wf_b_subst",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 1, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.lookup_wfTD",
     "[| ?td : set ?\<Theta>;    \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  |]
      ==>  ?\<Theta> \<turnstile>\<^sub>w\<^sub>f ?td ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("WellformedL.wf_b_subst_lemmas",
     "(?z \<sharp> ?v1.0 & ?z \<sharp> ?v2.0) =
      ?z \<sharp> [ ?opp ?v1.0 ?v2.0 ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 3), template_var 1)),
       template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
       ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ ?l ]\<^sup>v : base_for_lit
        ?l ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("WellformedL.wfC_wf",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("WellformedL.wfD_wf",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("WellformedL.flip_u_eq",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
      (?u \<leftrightarrow> ?u') \<bullet> ?\<B> = ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 4),
         template_var 4))),
    ("WellformedL.flip_u_eq",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
      (?u \<leftrightarrow> ?u') \<bullet> ?\<Theta> = ?\<Theta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 5),
         template_var 5))),
    ("WellformedL.flip_u_eq",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
      (?u \<leftrightarrow> ?u') \<bullet> ?\<tau> = ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_var 2))),
    ("WellformedL.flip_u_eq",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
      (?u \<leftrightarrow> ?u') \<bullet> ?\<Gamma> = ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 3),
         template_var 3))),
    ("WellformedL.wfTs_wf",
     " ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("WellformedL.wfE_wfB",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 4),
             template_var 0)
           ))),
    ("WellformedL.wfS_wfB",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 4),
             template_var 0)
           ))),
    ("WellformedL.wf_b_subst",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b  ==>
      True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 1, template_var 9),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("WellformedL.setD_ConsD",
     "(?ut : setD (?ut' #\<^sub>\<Delta> ?D)) =
      (?ut = ?ut' | ?ut : setD ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 3, template_var 0)))
           ))),
    ("WellformedL.wfC_supp",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  ==>
      supp ?c <= atom_dom ?\<Gamma> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 2))))),
    ("WellformedL.wfT_supp",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
      supp ?\<tau> <= atom_dom ?\<Gamma> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 2))))),
    ("WellformedL.wfTs_supp",
     " ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts  ==>
      supp ?ts <= atom_dom ?\<Gamma> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 2))))),
    ("WellformedL.wfCE_wf",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app (template_hole 0, template_var 4))
           ))),
    ("WellformedL.wf_intros",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_bitvec  ==>
        ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [| ?v1.0 |]\<^sup>c\<^sup>e : B_int ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("WellformedL.wfV_wf",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app (template_hole 0, template_var 4))
           ))),
    ("WellformedL.wfV_wfCE",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  ==>
        ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ ?v ]\<^sup>c\<^sup>e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<Phi> ; {|?bv|} \<turnstile>\<^sub>w\<^sub>f ?ft  ==>
       ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f AF_fun_typ_some ?bv
                    ?ft ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; {|?bv|}  ; GNil \<turnstile>\<^sub>w\<^sub>f ?lst  ==>
       ?\<Theta> \<turnstile>\<^sub>w\<^sub>f AF_typedef_poly ?s ?bv ?lst ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_hole 3)),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("WellformedL.wfG_b_weakening",
     "[| ?\<B> |\<subseteq>| ?\<B>';
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  |]
      ==>  ?\<Theta> ; ?\<B>'  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("WellformedL.wfB_weakening",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>'  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>'  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("WellformedL.wf_b_subst_lemmas",
     "[ ?b1.0 , ?b2.0 ]\<^sup>b[?bv1.0::=?b]\<^sub>b\<^sub>b =
      [ ?b1.0[?bv1.0::=?b]\<^sub>b\<^sub>b , ?b2.0[?bv1.0::=?b]\<^sub>b\<^sub>b ]\<^sup>b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "[ ?v1.0 @@ ?v2.0 ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?v1.0[?bv::=?b]\<^sub>v\<^sub>b @@ ?v2.0[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "[ ?v1.0  ?v2.0 ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?v1.0[?bv::=?b]\<^sub>v\<^sub>b 
      ?v2.0[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wfCE_supp",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b  ==>
      supp ?ce <= atom_dom ?\<Gamma> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 0, template_var 3))))),
    ("WellformedL.wfV_supp",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  ==>
      supp ?v <= atom_dom ?\<Gamma> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 0, template_var 3))))),
    ("WellformedL.wfCSS_wfB",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 1, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 8),
               template_var 6),
             template_var 0)
           ))),
    ("WellformedL.wfTh_dclist_distinct",
     "[| AF_typedef ?s ?dclist : set ?P;
            \<turnstile>\<^sub>w\<^sub>f ?P  |]
      ==> distinct (map fst ?dclist)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))
           ))),
    ("WellformedL.wfG_inside_x_in_atom_dom",
     "atom ?x
      : atom_dom
         (?\<Gamma>' @
          (?x, ?b, ?c[?z::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
          ?\<Gamma>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 5)),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 2),
                           template_var 1),
                         template_app (template_hole 0, template_var 5))))),
                 template_var 0))))
         )),
    ("WellformedL.wfG_dom_supp",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G  ==>
      (atom ?x : atom_dom ?G) = (atom ?x : supp ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("WellformedL.wfG_x_fresh",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G  ==>
      (atom ?x ~: atom_dom ?G) = atom ?x \<sharp> ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1)))),
    ("WellformedL.wf_intros",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : [ ?b1.0 , ?b2.0 ]\<^sup>b  ==>
        ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [#1?v1.0]\<^sup>c\<^sup>e : ?b1.0 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("WellformedL.wf_intros",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : [ ?b1.0 , ?b2.0 ]\<^sup>b  ==>
        ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [#2?v1.0]\<^sup>c\<^sup>e : ?b2.0 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("WellformedL.wfCS_wfB",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 1, template_var 9),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 9),
               template_var 7),
             template_var 0)
           ))),
    ("WellformedL.wf_intros",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         AF_typedef ?s ?dclist : set ?\<Theta> |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f B_id ?s ",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("WellformedL.wfT_b_weakening",
     "[| ?\<B> |\<subseteq>| ?\<B>';
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  |]
      ==>  ?\<Theta> ; ?\<B>' ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("WellformedL.wfD_x_fresh",
     "[| atom ?x \<sharp> ?\<Gamma>;
          ?P ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  |]
      ==> atom ?x \<sharp> ?\<Delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 4)),
             template_var 0)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>' ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>' ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfX_wfB",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B>' \<turnstile>\<^sub>w\<^sub>f ?ft ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>' ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfT_x_fresh",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==> atom ?x \<sharp> ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>'  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.freshers",
     "?a \<sharp> V_cons ?list1.0 ?list2.0 ?v =
      (?a \<sharp> ?list1.0 & ?a \<sharp> ?list2.0 & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0))))),
    ("WellformedL.freshers",
     "?a \<sharp> [ ?opp ?ce1.0 ?ce2.0 ]\<^sup>c\<^sup>e =
      (?a \<sharp> ?opp & ?a \<sharp> ?ce1.0 & ?a \<sharp> ?ce2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0))))),
    ("WellformedL.wf_b_subst_lemmas",
     "[?f [ ?b' ]  ?v' ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [?f [ ?b'[?bv::=?b]\<^sub>b\<^sub>b ]  ?v'[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_b_subst_lemmas",
     "[ ?opp ?v1.0 ?v2.0 ]\<^sup>e[?bv::=?b]\<^sub>e\<^sub>b =
      [ ?opp ?v1.0[?bv::=?b]\<^sub>v\<^sub>b ?v2.0[?bv::=?b]\<^sub>v\<^sub>b ]\<^sup>e",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wfD_wfT",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  ==>
      ALL (u, \<tau>):setD ?\<Delta>.
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, t_empty))
           ))),
    ("WellformedL.wfG_inside_fresh_suffix",
     " ?P ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
       (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>  ==>
      atom ?x \<sharp> ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_app
                       (template_app (template_hole 2, template_var 2),
                        template_var 1))),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b1.0 ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b2.0  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f [ ?b1.0 , ?b2.0 ]\<^sup>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("WellformedL.replace_in_g_forget",
     "[|  ?P ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G ; atom ?x \<sharp> ?G |]
      ==> ?G[?x\<longmapsto>?c] = ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("WellformedL.wfT_weakening_nil",
     "[|  ?\<Theta> ; {||} ; GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta> ; ?\<B>'  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>'  |]
      ==>  ?\<Theta> ; ?\<B>' ; ?\<Gamma>'   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_hole 2),
                template_hole 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("WellformedL.wfCE_b_fresh",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
         ?bv |\<notin>| ?\<B> |]
      ==> atom ?bv \<sharp> ?ce",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 2)
           ))),
    ("WellformedL.wfV_b_fresh",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         ?bv |\<notin>| ?\<B> |]
      ==> atom ?bv \<sharp> ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 4)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 2)
           ))),
    ("WellformedL.wfV_x_fresh",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==> atom ?x \<sharp> ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)),
             template_var 2)
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c) =
      (?x \<sharp> ?a & ?x \<sharp> ?b & ?x \<sharp> ?c)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("WellformedL.subst_b_lookup_d",
     "?u ~: fst ` setD ?\<Delta> ==>
      ?u ~: fst ` setD ?\<Delta>[?bv::=?b]\<^sub>\<Delta>\<^sub>b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_app (template_hole 1, template_var 2)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1),
                       template_var 0))))
               )
           ))),
    ("WellformedL.wb_b_weakening",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>   ?\<Theta> ; ?\<B>' ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>' ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>'  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> \<turnstile>\<^sub>w\<^sub>f ?td ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' \<turnstile>\<^sub>w\<^sub>f ?td ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 1)
           ))),
    ("WellformedL.wfT_wf",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  &
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f b_of ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("WellformedL.fresh_restrict",
     "atom
       ?y \<sharp> ?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ==>
      atom ?y \<sharp> ?\<Gamma>' @ ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 5)),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 3),
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 1))),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 5)),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 0))
           ))),
    ("WellformedL.wfG_inside_fresh",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
          (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>  ==>
      atom ?x ~: atom_dom ?\<Gamma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_var 1))),
                  template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_app (template_hole 0, template_var 4))
               )
           ))),
    ("WellformedL.replace_in_g_forget",
     "[|  ?P ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G ;
         atom ?x ~: atom_dom ?G |]
      ==> ?G[?x\<longmapsto>?c] = ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_app (template_hole 2, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("WellformedL.wfT_TRUE",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
          ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | TRUE \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1),
               template_hole 0))
           ))),
    ("WellformedL.wfG_wfB",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         ?b : fst ` snd ` toSet ?\<Gamma> |]
      ==>  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("WellformedL.wfG_fresh_x",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?z \<sharp> ?\<Gamma> |]
      ==> atom ?z \<sharp> (?\<Theta>, ?\<B>, ?\<Gamma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("WellformedL.wfG_lookup_wf",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         Some (?b, ?c) = lookup ?\<Gamma> ?x |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 4),
             template_var 2)
           ))),
    ("WellformedL.wfTs_wfT",
     "[|  ?\<Theta> ; ?\<B>  ; GNil \<turnstile>\<^sub>w\<^sub>f ?dclist ;
         (?dc, ?t) : set ?dclist |]
      ==>  ?\<Theta> ; ?\<B> ; GNil   \<turnstile>\<^sub>w\<^sub>f ?t ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_hole 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_hole 4),
             template_var 0)
           ))),
    ("WellformedL.wfTs_supp_t",
     "[| (?c, ?t) : set ?dclist;
          ?\<Theta> ; ?B  ; GNil \<turnstile>\<^sub>w\<^sub>f ?dclist  |]
      ==> supp ?t <= supp ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0),
                template_hole 3),
              template_var 2)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("WellformedL.wfTh_wfTs_poly",
     "[| AF_typedef_poly ?tyid ?bva ?dclist : set ?P;
            \<turnstile>\<^sub>w\<^sub>f ?P  |]
      ==>  ?P ; {|?bva|}  ; GNil \<turnstile>\<^sub>w\<^sub>f ?dclist ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_hole 0),
             template_var 1)
           ))),
    ("WellformedL.wfE_x_fresh",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==> atom ?x \<sharp> ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)),
             template_var 2)
           ))),
    ("WellformedL.wfS_x_fresh",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==> atom ?x \<sharp> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0)),
             template_var 2)
           ))),
    ("WellformedL.subst_c_TRUE_FALSE",
     "?c ~: {TRUE, FALSE} ==>
      ?c[?x::=?v']\<^sub>c\<^sub>v ~: {TRUE, FALSE}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app
                     (template_app (template_hole 4, template_hole 2),
                      template_hole 1)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 4, template_hole 2),
                     template_hole 1)))
               )
           ))),
    ("WellformedL.wf_not_in_prefix",
     " ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
              (?x, ?b1.0, ?c1.0) #\<^sub>\<Gamma> ?\<Gamma>  ==>
      ?x ~: fst ` toSet ?\<Gamma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1))),
                  template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 4)))
               )
           ))),
    ("WellformedL.wfPhi_lookup_fun_unique",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
         AF_fundef ?f ?fd : set ?\<Phi> |]
      ==> Some (AF_fundef ?f ?fd) = lookup_fun ?\<Phi> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0 ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c2.0  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0  AND  ?c2.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0 ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c2.0  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0 OR ?c2.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0 ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c2.0  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0  IMP  ?c2.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("WellformedL.wfB_subst_wfB",
     "[|  ?\<Theta> ; {|?bv|}  \<turnstile>\<^sub>w\<^sub>f ?b ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b'  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b[?bv::=?b']\<^sub>b\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_hole 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 0))
           ))),
    ("WellformedL.wfG_wfC_inside",
     "[| (?x, ?b, ?c) : toSet ?G;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==>  ?\<Theta> ; ?B ; ?G   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2),
             template_var 3)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f ?ftq ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>'  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f ?ftq ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfD_supp",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  ==>
      supp ?\<Delta>
      <= atom ` fst ` setD ?\<Delta> Un atom_dom ?\<Gamma> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_var 0)))),
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 0, template_var 2))))),
    ("WellformedL.wb_phi_weakening",
     "[|  ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f ?ftq ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>' ;
         set ?\<Phi> <= set ?\<Phi>' |]
      ==>  ?\<Theta>  ; ?\<Phi>' \<turnstile>\<^sub>w\<^sub>f ?ftq ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("WellformedL.freshers",
     "?a \<sharp> V_consp ?list1.0 ?list2.0 ?b ?v =
      (?a \<sharp> ?list1.0 &
       ?a \<sharp> ?list2.0 & ?a \<sharp> ?b & ?a \<sharp> ?v)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 0)))))),
    ("WellformedL.wfT_supp_c",
     " ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace>  ==>
      supp ?c - {atom ?z} <= atom_dom ?\<Gamma> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 0, template_var 4))))),
    ("WellformedL.wfG_wfC",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
           ?c) #\<^sub>\<Gamma>
          ?\<Gamma>  ==>
       ?P ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                    ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_hole 0))),
                 template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wfG_cons_wfC",
     " ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
               ?c) #\<^sub>\<Gamma>
              ?\<Gamma>  ==>
       ?\<Theta> ; ?B ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                        ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_hole 0))),
                 template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wfC_refl",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b',
                  ?c') #\<^sub>\<Gamma>
                 ?\<Gamma>  ==>
       ?\<Theta> ; ?\<B> ; (?x, ?b', ?c') #\<^sub>\<Gamma>
                           ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1))),
                 template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wfG_intros2",
     " ?P ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                    ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  ==>
       ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
           ?c) #\<^sub>\<Gamma>
          ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_app
                       (template_app (template_hole 2, template_var 2),
                        template_hole 1))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0))),
               template_var 1))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         Some (?b, ?c) = lookup ?\<Gamma> ?x |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ ?x ]\<^sup>v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 3),
               template_app (template_hole 0, template_var 0)),
             template_var 2)
           ))),
    ("WellformedL.wf_intros",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?e1.0 : ?b ;
           ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?e2.0 : ?b  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?e1.0  ==  ?e2.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B>' ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B>' ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfTh_dclist_unique",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         AF_typedef ?tid ?dclist1.0 : set ?\<Theta>;
         AF_typedef ?tid ?dclist2.0 : set ?\<Theta> |]
      ==> ?dclist1.0 = ?dclist2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<Phi> ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_intros",
     "[| name_of_type ?tdef ~: name_of_type ` set ?\<Theta>;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
          ?\<Theta> \<turnstile>\<^sub>w\<^sub>f ?tdef  |]
      ==>    \<turnstile>\<^sub>w\<^sub>f ?tdef # ?\<Theta> ",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)),
                  template_app
                   (template_app (template_hole 4, template_hole 5),
                    template_app (template_hole 3, template_var 0)))
                )
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("WellformedL.wfC_supp_cons",
     " ?P ; ?\<B> ; (?x', ?b', TRUE) #\<^sub>\<Gamma>
                    ?G   \<turnstile>\<^sub>w\<^sub>f ?c'  ==>
      supp ?c' <= supp ?G Un supp ?x' Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_hole 6))),
                  template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 3))),
           template_app (template_hole 0, template_var 4))))),
    ("WellformedL.wfC_supp_cons",
     " ?P ; ?\<B> ; (?x', ?b', TRUE) #\<^sub>\<Gamma>
                    ?G   \<turnstile>\<^sub>w\<^sub>f ?c'  ==>
      supp ?c' <= atom_dom ?G Un supp ?x' Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_hole 6))),
                  template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 3))),
           template_app (template_hole 0, template_var 4))))),
    ("WellformedL.wfC_cons_switch",
     " ?\<Theta> ; ?\<B> ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                           ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c'  ==>
       ?\<Theta> ; ?\<B> ; (?x, ?b, ?c') #\<^sub>\<Gamma>
                           ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0))),
                 template_var 1)),
             template_var 2)
           ))),
    ("WellformedL.fun_typ_eq_body_unique",
     "AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1' ?s1' =
      AF_fun_typ ?x2.0 ?b2.0 ?c2.0 ?\<tau>2' ?s2' ==>
      ?s1'[?x1.0::=?v]\<^sub>s\<^sub>v = ?s2'[?x2.0::=?v]\<^sub>s\<^sub>v",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7),
            template_var 6),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 6),
             template_var 10),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 5),
           template_var 0)))),
    ("WellformedL.fun_typ_eq_ret_unique",
     "AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1' ?s1' =
      AF_fun_typ ?x2.0 ?b2.0 ?c2.0 ?\<tau>2' ?s2' ==>
      ?\<tau>1'[?x1.0::=?v]\<^sub>\<tau>\<^sub>v =
      ?\<tau>2'[?x2.0::=?v]\<^sub>\<tau>\<^sub>v",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7),
            template_var 6),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 7),
             template_var 10),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 5),
           template_var 0)))),
    ("WellformedL.wfG_cons_fresh2",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x', ?b',
           ?c') #\<^sub>\<Gamma>
          ?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>  ==>
      ?x' ~= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 9),
                template_var 8),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 7),
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5))),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_var 2),
                          template_var 1))),
                    template_var 0))))
            )],
       template_negation
        (template_equation (template_var 7, template_var 3)))),
    ("WellformedL.wf_intros",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_bitvec ;
           ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : B_bitvec  |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ ?v1.0 @@ ?v2.0 ]\<^sup>c\<^sup>e : B_bitvec ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("WellformedL.wfT_restrict2",
     "[|  ?\<Theta> ; ?\<B> ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         atom ?x \<sharp> ?\<tau> |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("WellformedL.wb_phi_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>' ;
         set ?\<Phi> <= set ?\<Phi>' |]
      ==>  ?\<Theta> ; ?\<Phi>' ; ?\<B> \<turnstile>\<^sub>w\<^sub>f ?ft ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfTh_td_eq",
     "[| ?td1.0 : set (?td2.0 # ?P);
            \<turnstile>\<^sub>w\<^sub>f ?td2.0 # ?P ;
         name_of_type ?td1.0 = name_of_type ?td2.0 |]
      ==> ?td1.0 = ?td2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation (template_var 2, template_var 1))),
    ("WellformedL.wfTh_lookup_supp_empty",
     "[| AF_typedef ?tid ?dclist : set ?\<Theta>; (?c, ?t) : set ?dclist;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  |]
      ==> supp ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d) =
      (?x \<sharp> ?a & ?x \<sharp> ?b & ?x \<sharp> ?c & ?x \<sharp> ?d)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 4),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0)))))),
    ("WellformedL.wfE_supp",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b  ==>
      supp ?e
      <= atom_dom ?\<Gamma> Un supp ?\<B> Un atom ` fst ` setD ?\<Delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 3)),
               template_app (template_hole 5, template_var 4))),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2))))))),
    ("WellformedL.wfS_supp",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b  ==>
      supp ?s
      <= atom_dom ?\<Gamma> Un atom ` fst ` setD ?\<Delta> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 3)),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 2))))),
           template_app (template_hole 0, template_var 4))))),
    ("WellformedL.wf_intros",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_int ;
           ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : B_int  |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ leq ?v1.0 ?v2.0 ]\<^sup>c\<^sup>e : B_bool ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_int ;
           ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : B_int  |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ plus ?v1.0 ?v2.0 ]\<^sup>c\<^sup>e : B_int ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1),
                 template_var 0)),
             template_hole 2)
           ))),
    ("WellformedL.wf_intros",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : ?b ;
           ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : ?b  |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ eq ?v1.0 ?v2.0 ]\<^sup>c\<^sup>e : B_bool ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2),
                 template_var 0)),
             template_hole 0)
           ))),
    ("WellformedL.wfPhi_f_simple_supp_b",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?b = {}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 7),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, template_var 5), template_hole 0))),
    ("WellformedL.wfTh_wfT",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?P ;
         AF_typedef ?tid ?dclist : set ?P; (?dc, ?t) : set ?dclist |]
      ==>  ?P ; {||} ; GNil   \<turnstile>\<^sub>w\<^sub>f ?t ",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_hole 1),
               template_hole 0),
             template_var 0)
           ))),
    ("WellformedL.wf_intros",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
         AF_typedef_poly ?s ?bv ?dclist : set ?\<Theta> |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f B_app ?s ?b ",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3))
           ))),
    ("WellformedL.wfC_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>'   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("WellformedL.wfD_weakning",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>' \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("WellformedL.wfT_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>'   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>   ?\<Theta>' ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 5),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 5),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfG_cons",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?z, ?b,
           ?c) #\<^sub>\<Gamma>
          ?\<Gamma>  ==>
       ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
      atom ?z \<sharp> ?\<Gamma> &
       ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3)),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 2)))
           ))),
    ("WellformedL.wfFT_poly_wfT",
     " ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f AF_fun_typ_some ?bv
                    (AF_fun_typ ?x ?b ?c ?\<tau> ?s)  ==>
       ?\<Theta> ; {|?bv|} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                             GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 7),
                 template_app
                  (template_app (template_hole 5, template_var 5),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2))),
                 template_hole 0)),
             template_var 1)
           ))),
    ("WellformedL.wfT_e_eq",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
         atom ?z \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | [ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e  ==  ?ce  \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0))),
                 template_var 2)))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : ?b1.0 ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : ?b2.0  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f [ ?v1.0 , ?v2.0 ]\<^sup>v : [ ?b1.0 , ?b2.0 ]\<^sup>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 5),
                 template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wfT_wf_cons",
     "[|  ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
         atom ?z \<sharp> ?\<Gamma> |]
      ==>  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?z, ?b,
               ?c) #\<^sub>\<Gamma>
              ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))),
               template_var 3))
           ))),
    ("WellformedL.wf_b_subst",
     "[|  ?\<Theta> ; ?B'  \<turnstile>\<^sub>w\<^sub>f ?b' ; {|?bv|} = ?B';
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b'[?bv::=?b]\<^sub>b\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_hole 1),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wf_b_subst",
     "[|  ?\<Theta> ; ?B'  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         {|?bv|} = ?B';  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_hole 2),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 5),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wfD_unique",
     "[|  ?P ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         (?u, ?\<tau>') : setD ?\<Delta>; (?u, ?\<tau>) : setD ?\<Delta> |]
      ==> ?\<tau>' = ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("WellformedL.wfTD_ctor_unique",
     "[|  ?\<Theta> \<turnstile>\<^sub>w\<^sub>f AF_typedef ?tid ?dclist ;
         (?c, ?t1.0) : set ?dclist; (?c, ?t2.0) : set ?dclist |]
      ==> ?t1.0 = ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("WellformedL.wfTs_ctor_unique",
     "[|  ?\<Theta> ; {||}  ; GNil \<turnstile>\<^sub>w\<^sub>f ?dclist ;
         (?c, ?t1.0) : set ?dclist; (?c, ?t2.0) : set ?dclist |]
      ==> ?t1.0 = ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_hole 5),
                template_hole 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("WellformedL.lookup_fun_weakening",
     "[| Some ?fd = lookup_fun ?\<Phi> ?f; set ?\<Phi> <= set ?\<Phi>';
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>'  |]
      ==> Some ?fd = lookup_fun ?\<Phi>' ?f",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 4, template_var 4),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 2)))),
    ("WellformedL.wfT_fresh_c",
     "[|  ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
         atom ?x \<sharp> ?\<Gamma>; ?x ~= ?z |]
      ==> atom ?x \<sharp> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 0, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wfTh_td_unique",
     "[| ?td1.0 : set ?P; ?td2.0 : set ?P;
            \<turnstile>\<^sub>w\<^sub>f ?P ;
         name_of_type ?td1.0 = name_of_type ?td2.0 |]
      ==> ?td1.0 = ?td2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 2, template_var 0))),
    ("WellformedL.wfE_wf",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
       ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  &
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 4),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 6)),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5))))
           ))),
    ("WellformedL.wfS_wf",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
       ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  &
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 4),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 6)),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5))))
           ))),
    ("WellformedL.wf_supp",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b  ==>
      supp ?css
      <= atom_dom ?\<Gamma> Un atom ` fst ` setD ?\<Delta> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 10, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 5)),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 4))))),
           template_app (template_hole 0, template_var 6))))),
    ("WellformedL.wfT_wfC",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
         atom ?z \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B> ; (?z, ?b, TRUE) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0))),
                 template_var 3)),
             template_var 0)
           ))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B>' ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 1, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 7, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_var 9),
                           template_var 8),
                         template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfPhi_f_poly_supp_b",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?b <= supp ?bv",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 8),
              template_app
               (template_app (template_hole 6, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 5),
         template_app (template_hole 0, template_var 7)))),
    ("WellformedL.wfTh_supp_b",
     "[| AF_typedef ?tid ?dclist : set ?\<Theta>;
         (?dc, \<lbrace> ?z : ?b  | ?c \<rbrace>) : set ?dclist;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  |]
      ==> supp ?b = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 5)),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1),
                    template_var 0))),
              template_app (template_hole 4, template_var 5))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_equation
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("WellformedL.wfCE_weakening",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma>' \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfV_weakening",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>' \<turnstile>\<^sub>w\<^sub>f ?v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_intros",
     "[| ?f ~: name_of_fun ` set ?\<Phi>;
          ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f ?ft ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==>  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f AF_fundef ?f ?ft #
             ?\<Phi> ",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app (template_hole 4, template_var 2)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2))
           ))),
    ("WellformedL.wfG_elim2",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
           ?c) #\<^sub>\<Gamma>
          ?\<Gamma>  ==>
       ?P ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                    ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  &
       ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 4),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_hole 1))),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 2))
           ))),
    ("WellformedL.wf_supp",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b  ==>
      supp ?cs
      <= atom_dom ?\<Gamma> Un atom ` fst ` setD ?\<Delta> Un supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 10, template_var 9),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 6)),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 5))))),
           template_app (template_hole 0, template_var 7))))),
    ("WellformedL.wf_intros",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b  ==>
       ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; [(?dc,
                                ?t)] \<turnstile>\<^sub>w\<^sub>f { ?cs } : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 5, template_var 9),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 4, template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2)),
                   template_hole 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wfG_cons_TRUE2",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?z, ?b,
              ?c) #\<^sub>\<Gamma>
             ?\<Gamma> ;
         atom ?z \<sharp> ?\<Gamma> |]
      ==>  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?z, ?b,
               TRUE) #\<^sub>\<Gamma>
              ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1))),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_hole 0))),
               template_var 0))
           ))),
    ("WellformedL.wfPhi_f_simple_supp_c",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?c <= {atom ?x}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 7),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 6)),
           template_hole 0)))),
    ("WellformedL.wfPhi_f_simple_supp_s",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?s <= {atom ?x}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 7),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 6)),
           template_hole 0)))),
    ("WellformedL.wfPhi_f_simple_supp_t",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?\<tau> <= {atom ?x}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 7),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 6)),
           template_hole 0)))),
    ("WellformedL.wfG_cons_TRUE",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?z \<sharp> ?\<Gamma>;
          ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?z, ?b,
               TRUE) #\<^sub>\<Gamma>
              ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0))),
               template_var 2))
           ))),
    ("WellformedL.wfTh_poly_lookup_supp",
     "[| AF_typedef_poly ?tid ?bv ?dclist : set ?\<Theta>;
         (?c, ?t) : set ?dclist;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  |]
      ==> supp ?t <= {atom ?bv}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 4)),
           template_hole 0)))),
    ("WellformedL.replace_in_g_fresh_single",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G[?x'\<longmapsto>?c''] ;
         atom ?x \<sharp> ?G;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==> atom ?x \<sharp> ?G[?x'\<longmapsto>?c'']",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("WellformedL.wfX_wfY",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
       ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  &
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 5, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 8),
                   template_var 6),
                 template_var 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 8),
                       template_var 6),
                     template_var 5),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 8)),
                 template_app
                  (template_app (template_hole 0, template_var 8),
                   template_var 7))))
           ))),
    ("WellformedL.wfC_e_eq",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  ?ce  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3))),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_var 2))
           ))),
    ("WellformedL.lookup_subst",
     "[| Some (?b, ?c) = lookup ?\<Gamma> ?x; ?x ~= ?x' |]
      ==> EX c'.
             Some (?b, c') =
             lookup ?\<Gamma>[?x'::=?v']\<^sub>\<Gamma>\<^sub>v ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("WellformedL.wb_b_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ;
         ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B>' ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 1, template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 8, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 1, template_var 10),
                             template_var 9),
                           template_var 0),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfT_subst_wfB",
     "[|  ?\<Theta> ; {|?bv|} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                                GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b'  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (b_of
                       ?\<tau>)[?bv::=?b']\<^sub>b\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_app
                   (template_app (template_hole 8, template_var 6),
                    template_hole 7)),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 3))),
                  template_hole 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 7),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 7),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 6),
               template_var 0))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ ?v ]\<^sup>e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_bitvec  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [| ?v1.0 |]\<^sup>e : B_int ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 3),
                  template_var 2),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [?v]\<^sup>s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("WellformedL.wfC_wfG",
     "[|  ?\<Theta> ; ?B ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                   ?c) #\<^sub>\<Gamma>
                  ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2))),
               template_var 3))
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 7),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 7),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfX_wfY",
     " ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  &
       ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  &
         \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  &
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 5, template_var 9),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 9),
                   template_var 7),
                 template_var 6)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 9),
                       template_var 7),
                     template_var 6),
                   template_var 5)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_var 9)),
                 template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 8))))
           ))),
    ("WellformedL.lookup_inside_wf",
     " ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
              (?x, ?b1.0, ?c1.0) #\<^sub>\<Gamma> ?\<Gamma>  ==>
      Some (?b1.0, ?c1.0) =
      lookup (?\<Gamma>' @ (?x, ?b1.0, ?c1.0) #\<^sub>\<Gamma> ?\<Gamma>)
       ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1))),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))),
                 template_var 0))),
           template_var 3)))),
    ("WellformedL.wfC_v_eq",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ ?v ]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3))),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_app (template_hole 1, template_var 2)))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s1.0 : B_bool ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s2.0 : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f WHILE ?s1.0 DO { ?s2.0 }  : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s1.0 : B_unit ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s2.0 : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f  ?s1.0 ;; ?s2.0  : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wfT_wfG",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                      ?c[?z::=[ ?x ]\<^sup>v]\<^sub>v) #\<^sub>\<Gamma>
                     ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 3),
                       template_app (template_hole 0, template_var 0))))),
               template_var 4))
           ))),
    ("WellformedL.wfG_wfT",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
              ?c[?z::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
             ?G ;
         atom ?x \<sharp> ?c |]
      ==>  ?P ; ?\<B> ; ?G   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_app
                       (template_app
                         (template_app (template_hole 5, template_var 2),
                          template_var 1),
                        template_app (template_hole 4, template_var 4))))),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 4)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 5),
               template_var 0),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2))
           ))),
    ("WellformedL.wfPhi_f_poly_supp_b_of_t",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp (b_of ?\<tau>) <= {atom ?bv}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 8),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 7)),
           template_hole 0)))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         (?u, ?\<tau>) : setD ?\<Delta> |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ ?u ]\<^sup>e : b_of
                                  ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("WellformedL.wfT_TRUE_aux",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?z \<sharp> (?P, ?\<B>, ?\<Gamma>);
          ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | TRUE \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))
           ))),
    ("WellformedL.wfG_fresh_x2",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
         atom ?z \<sharp> ?\<Gamma> |]
      ==> atom
           ?z \<sharp> (?\<Theta>, ?\<Phi>, ?\<B>, ?\<Gamma>, ?\<Delta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)))))
           ))),
    ("WellformedL.wb_phi_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>' ;
         set ?\<Phi> <= set ?\<Phi>' |]
      ==>  ?\<Theta> ; ?\<Phi>' ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 6),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 0),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wb_phi_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>' ;
         set ?\<Phi> <= set ?\<Phi>' |]
      ==>  ?\<Theta> ; ?\<Phi>' ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 6),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 0),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfTh_wfT2",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         AF_typedef ?s ?dclist : set ?\<Theta>;
         (?dc, ?\<tau>) : set ?dclist;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==> supp ?\<tau> = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4)),
              template_app (template_hole 7, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app (template_hole 4, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 2), template_hole 0))),
    ("WellformedL.wfT_weakening_all",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta> ; ?\<B>'  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>'; ?\<B> |\<subseteq>| ?\<B>' |]
      ==>  ?\<Theta> ; ?\<B>' ; ?\<Gamma>'   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 0)),
        template_inequation (less_equals, template_var 4, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b & ?x \<sharp> ?c & ?x \<sharp> ?d & ?x \<sharp> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 5),
         template_app
          (template_app (template_hole 9, template_var 4),
           template_app
            (template_app (template_hole 8, template_var 3),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0))))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 5),
               template_var 3)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0))))))),
    ("WellformedL.wfT_wfC2",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c[?z::=[ ?x ]\<^sup>v]\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_hole 2))),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : [ ?b1.0 , ?b2.0 ]\<^sup>b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [#1?v1.0 ]\<^sup>e : ?b1.0 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 5),
                  template_var 4),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : [ ?b1.0 , ?b2.0 ]\<^sup>b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [#2?v1.0 ]\<^sup>e : ?b2.0 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 5),
                  template_var 4),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("WellformedL.wf_restrict",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
         atom ?x \<sharp> ?\<Gamma>\<^sub>1 |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>\<^sub>1 @
                     ?\<Gamma>\<^sub>2 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 3)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 7),
               template_var 6),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 0))
           ))),
    ("WellformedL.wf_b_subst",
     "[|  ?\<Theta> ; ?B' ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
         {|?bv|} = ?B';  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?B ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b   \<turnstile>\<^sub>w\<^sub>f ?c[?bv::=?b]\<^sub>c\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3),
          template_var 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 6),
                 template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wf_b_subst",
     "[|  ?\<Theta> ; ?B' ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         {|?bv|} = ?B';  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?B ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile>\<^sub>w\<^sub>f ?\<Delta>[?bv::=?b]\<^sub>\<Delta>\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3),
          template_var 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 6),
                 template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wf_b_subst",
     "[|  ?\<Theta> ; ?B' ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         {|?bv|} = ?B';  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?B ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b   \<turnstile>\<^sub>w\<^sub>f ?\<tau>[?bv::=?b]\<^sub>\<tau>\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3),
          template_var 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 6),
                 template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wfTh_poly_supp_b",
     "[| AF_typedef_poly ?tid ?bv ?dclist : set ?\<Theta>;
         (?dc, \<lbrace> ?z : ?b  | ?c \<rbrace>) : set ?dclist;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  |]
      ==> supp ?b <= {atom ?bv}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6),
                  template_var 5)),
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1),
                    template_var 0))),
              template_app (template_hole 6, template_var 5))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 4))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 6)),
           template_hole 0)))),
    ("WellformedL.wfE_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>' ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 7),
                template_var 5),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfS_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>' ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 7),
                template_var 5),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfTh_wfT2",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         AF_typedef ?s ?dclist : set ?\<Theta>;
         (?dc, ?\<tau>) : set ?dclist;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==>  ?\<Theta> ; ?B ; ?G   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4)),
              template_app (template_hole 5, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("WellformedL.wfTh_ctor_unique",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         AF_typedef ?tid ?dclist : set ?\<Theta>; (?c, ?t1.0) : set ?dclist;
         (?c, ?t2.0) : set ?dclist |]
      ==> ?t1.0 = ?t2.0",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_app (template_hole 4, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)),
              template_app (template_hole 1, template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("WellformedL.wfT_wf_cons_flip",
     "[|  ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
         atom ?x \<sharp> (?c, ?\<Gamma>) |]
      ==>  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
               ?c[?z::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
              ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 3),
                       template_app (template_hole 0, template_var 0))))),
               template_var 4))
           ))),
    ("WellformedL.wfT_wf_cons3",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
         atom ?y \<sharp> (?c, ?\<Gamma>) |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?y, ?b,
                      ?c[?z::=[ ?y ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
                     ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 3),
                       template_app (template_hole 0, template_var 0))))),
               template_var 4))
           ))),
    ("WellformedL.wfPhi_f_simple_wfT",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==>  ?\<Theta> ; {||} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                              GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 7),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 6),
                     template_app
                      (template_app (template_hole 1, template_var 5),
                       template_var 4))),
                 template_hole 0)),
             template_var 3)
           ))),
    ("WellformedL.wfPhi_f_poly_supp_c",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?c <= {atom ?x, atom ?bv}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 8),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 4),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 6)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 7)),
             template_hole 0))))),
    ("WellformedL.wfPhi_f_poly_supp_s",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?s <= {atom ?x, atom ?bv}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 8),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 6)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 7)),
             template_hole 0))))),
    ("WellformedL.wfPhi_f_poly_supp_t",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==> supp ?\<tau> <= {atom ?x, atom ?bv}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 8),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 6)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 7)),
             template_hole 0))))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         ?u ~: fst ` setD ?\<Delta> |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f (?u,
                                 ?\<tau>) #\<^sub>\<Delta>
                                ?\<Delta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app (template_hole 2, template_var 2)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         ?dc ~: fst ` set ?ts;
          ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ts  |]
      ==>  ?\<Theta> ; ?\<B>  ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f (?dc,
                                  ?\<tau>) #
                                 ?ts ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 0)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("WellformedL.wf_d_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>' ;
         setD ?\<Delta> <= setD ?\<Delta>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta>' \<turnstile>\<^sub>w\<^sub>f ?e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 7),
                  template_var 5),
                template_var 4),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_d_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>' ;
         setD ?\<Delta> <= setD ?\<Delta>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta>' \<turnstile>\<^sub>w\<^sub>f ?s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 7),
                  template_var 5),
                template_var 4),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfTh_wfT2",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         AF_typedef ?s ?dclist : set ?\<Theta>;
         (?dc, ?\<tau>) : set ?dclist;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==> ?\<tau>[?x::=?v]\<^sub>\<tau>\<^sub>v = ?\<tau>",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6)),
              template_app (template_hole 6, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4)),
              template_app (template_hole 3, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 8),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_var 0),
         template_var 4))),
    ("WellformedL.subst_g_inside_simple",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>\<^sub>1 @
          (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2  ==>
      (?\<Gamma>\<^sub>1 @
       (?x, ?b, ?c) #\<^sub>\<Gamma>
       ?\<Gamma>\<^sub>2)[?x::=?v]\<^sub>\<Gamma>\<^sub>v =
      ?\<Gamma>\<^sub>1[?x::=?v]\<^sub>\<Gamma>\<^sub>v @
      ?\<Gamma>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2))),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2))),
                   template_var 1))),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 0)),
           template_var 1)))),
    ("WellformedL.wfT_v_eq",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         atom ?z \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | [ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ ?v ]\<^sup>c\<^sup>e  \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_var 2),
                template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0))),
                 template_app (template_hole 1, template_var 1))))
           ))),
    ("WellformedL.wf_g_unique",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         (?x, ?b, ?c) : toSet ?\<Gamma>; (?x, ?b', ?c') : toSet ?\<Gamma> |]
      ==> ?b = ?b' & ?c = ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app (template_hole 3, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))),
              template_app (template_hole 3, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 9),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 0),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfG_inside_x_neq",
     "[| ?G =
         ?\<Gamma>' @
         (?x, ?b, ?c[?z::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
         ?\<Gamma>;
         atom ?xa \<sharp> ?G;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==> ?xa ~= ?x",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 10, template_var 8),
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 7),
                  template_app
                   (template_app (template_hole 7, template_var 6),
                    template_app
                     (template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4),
                      template_app (template_hole 5, template_var 7))))),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_var 9)
            )],
       template_negation
        (template_equation (template_var 2, template_var 7)))),
    ("WellformedL.wfG_inside_x_fresh",
     "[| ?G =
         ?\<Gamma>' @
         (?x, ?b, ?c[?z::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
         ?\<Gamma>;
         atom ?xa \<sharp> ?G;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==> atom ?xa \<sharp> ?x",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 9, template_var 8),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 7),
                  template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app
                       (template_app (template_hole 5, template_var 5),
                        template_var 4),
                      template_app (template_hole 4, template_var 7))))),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_var 7)
           ))),
    ("WellformedL.lst_t_b_eq_iff",
     "[[atom ?bva1.0]]lst. \<lbrace> ?x1.0 : ?b1.0  | ?c1.0 \<rbrace> =
      [[atom ?bva2.0]]lst. \<lbrace> ?x2.0 : ?b2.0  | ?c2.0 \<rbrace> ==>
      [[atom ?bva1.0]]lst. ?b1.0 = [[atom ?bva2.0]]lst. ?b2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 7)),
                template_hole 3)),
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 5),
              template_var 4)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 3)),
                template_hole 3)),
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 7)),
               template_hole 3)),
           template_var 5),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_hole 3)),
           template_var 1)))),
    ("WellformedL.wfG_subst",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 8),
                    template_var 7),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 8),
               template_var 7),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 4),
               template_var 0))
           ))),
    ("WellformedL.wb_phi_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>' ;
         set ?\<Phi> <= set ?\<Phi>' |]
      ==>  ?\<Theta> ; ?\<Phi>' ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 9),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 8),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 9),
                           template_var 0),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wfFT_simple_wf",
     " ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f AF_fun_typ_none
                    (AF_fun_typ ?x ?b ?c ?\<tau> ?s)  ==>
       ?\<Theta> ; {||} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                          GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  &
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  &
      supp ?s <= {atom ?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, template_var 6),
                     template_hole 10),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 4),
                         template_app
                          (template_app (template_hole 7, template_var 3),
                           template_var 2))),
                     template_hole 6)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_var 5)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 4)),
                   template_hole 0))))
           ))),
    ("WellformedL.wfPhi_f_poly_wfT",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==>  ?\<Theta> ; {|?bv|} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                                 GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_equation
         (template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 8),
              template_app
               (template_app (template_hole 10, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 7),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 6),
                     template_app
                      (template_app (template_hole 1, template_var 5),
                       template_var 4))),
                 template_hole 0)),
             template_var 3)
           ))),
    ("WellformedL.wfG_subst_wfV",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                    (?x, ?b,
                     ?c0.0[?z0.0::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
                    ?\<Gamma> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>'[?x::=?v]\<^sub>\<Gamma>\<^sub>v @
                     ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 8),
                template_var 7),
              template_app
               (template_app (template_hole 7, template_var 6),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_app
                         (template_app
                           (template_app (template_hole 3, template_var 3),
                            template_var 2),
                          template_app
                           (template_hole 2, template_var 5))))),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 8),
                    template_var 7),
                  template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 8),
               template_var 7),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 5),
                   template_var 0)),
               template_var 1))
           ))),
    ("WellformedL.wfTh_dclist_poly_unique",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         AF_typedef_poly ?tid ?bva ?dclist1.0 : set ?\<Theta>;
         AF_typedef_poly ?tid ?bva2.0 ?dclist2.0 : set ?\<Theta> |]
      ==> [[atom ?bva]]lst. ?dclist1.0 = [[atom ?bva2.0]]lst. ?dclist2.0",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 5, template_var 5))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_hole 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_hole 0)),
           template_var 0)))),
    ("WellformedL.wf_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>' ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 9),
                template_var 7),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 6),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 0),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_theta_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>' ;
         set ?\<Theta> <= set ?\<Theta>' |]
      ==>  ?\<Theta>' ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 10),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 3, template_var 0),
                             template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.replace_in_g_inside",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
          (?x, ?b0.0, ?c0') #\<^sub>\<Gamma> ?\<Gamma>  ==>
      (?\<Gamma>' @
       (?x, ?b0.0, ?c0') #\<^sub>\<Gamma> ?\<Gamma>)[?x\<longmapsto>?c0.0] =
      ?\<Gamma>' @ (?x, ?b0.0, ?c0.0) #\<^sub>\<Gamma> ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2))),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2))),
                   template_var 1))),
             template_var 4),
           template_var 0),
         template_app
          (template_app (template_hole 5, template_var 5),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 0))),
             template_var 1))))),
    ("WellformedL.wfC_replace_cons",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
              ?c1.0) #\<^sub>\<Gamma>
             ?\<Gamma> ;
          ?P ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                       ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c2.0  |]
      ==>  ?P ; ?\<B> ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                        ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c2.0 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2))),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2))),
                 template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wbc_subst",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                              (?x, ?b, ?c') #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>'[?x::=?v]\<^sub>\<Gamma>\<^sub>v @
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c[?x::=?v]\<^sub>c\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 8),
                  template_var 7),
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 5),
                        template_app
                         (template_app (template_hole 3, template_var 4),
                          template_var 3))),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 8),
                    template_var 7),
                  template_var 2),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 8),
                 template_var 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 5),
                     template_var 0)),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 5),
               template_var 0))
           ))),
    ("WellformedL.wf_b_subst",
     "[|   ?\<Theta> ; ?B' ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b' ;
         {|?bv|} = ?B';  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>   ?\<Theta> ; ?B ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile>\<^sub>w\<^sub>f ?ce[?bv::=?b]\<^sub>c\<^sub>e\<^sub>b : ?b'[?bv::=?b]\<^sub>b\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_hole 4),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 7),
                   template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 2),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wf_b_subst",
     "[|  ?\<Theta> ; ?B' ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b' ;
         {|?bv|} = ?B';  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?B ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile>\<^sub>w\<^sub>f ?v[?bv::=?b]\<^sub>v\<^sub>b : ?b'[?bv::=?b]\<^sub>b\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_hole 4),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 7),
                   template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 2),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.wf_d_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>' ;
         setD ?\<Delta> <= setD ?\<Delta>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta>' ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 9),
                  template_var 7),
                template_var 6),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 5),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wb_phi_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>' ;
         set ?\<Phi> <= set ?\<Phi>' |]
      ==>  ?\<Theta> ; ?\<Phi>' ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 10),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 9),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3, template_var 10),
                             template_var 0),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c & ?x \<sharp> ?d & ?x \<sharp> ?e & ?x \<sharp> ?f)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 6),
         template_app
          (template_app (template_hole 11, template_var 5),
           template_app
            (template_app (template_hole 10, template_var 4),
             template_app
              (template_app (template_hole 9, template_var 3),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)))))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 6),
             template_var 5)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_var 6),
               template_var 4)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 0)))))))),
    ("WellformedL.wfT_wfT_if",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z2.0 : ?b  | [ ?v ]\<^sup>c\<^sup>e  ==  [ [ L_false ]\<^sup>v ]\<^sup>c\<^sup>e   IMP  ?c[?z::=[ ?z2.0 ]\<^sup>v]\<^sub>c\<^sub>v  \<rbrace> ;
         atom ?z2.0 \<sharp> (?c, ?\<Gamma>) |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_var 2)),
                      template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_hole 5)))),
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0),
                    template_app (template_hole 3, template_var 4)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 11, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_app (template_hole 10, template_var 0),
                 template_var 3),
               template_var 1))
           ))),
    ("WellformedL.wf_intros",
     "[| AF_typedef ?s ?dclist : set ?\<Theta>;
         (?dc, \<lbrace> ?x : ?b'  | ?c \<rbrace>) : set ?dclist;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b'  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f V_cons
                                 ?s ?dc ?v : B_id ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8)),
              template_app (template_hole 7, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4),
                    template_var 3))),
              template_app (template_hole 3, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 7),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 7),
                   template_var 2),
                 template_var 1),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 9),
                   template_var 6),
                 template_var 0)),
             template_app (template_hole 0, template_var 9))
           ))),
    ("WellformedL.wf_intros",
     "[| atom ?z \<sharp> (?\<Theta>, ?\<B>, ?\<Gamma>);
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
          ?\<Theta> ; ?\<B> ; (?z, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 5)),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_hole 2))),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1),
               template_var 0))
           ))),
    ("WellformedL.wf_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>' ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 10),
                template_var 8),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 7),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3, template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 0),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_intros",
     "[| ?c : {TRUE, FALSE};
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?x \<sharp> ?\<Gamma>;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                      ?c) #\<^sub>\<Gamma>
                     ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 10, template_hole 8),
                  template_hole 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5))),
               template_var 2))
           ))),
    ("WellformedL.lookup_weakening",
     "[| Some (?b, ?c) = lookup ?\<Gamma> ?x;
         toSet ?\<Gamma> <= toSet ?\<Gamma>';
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  |]
      ==> Some (?b, ?c) = lookup ?\<Gamma>' ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5)),
          template_app
           (template_app (template_hole 3, template_var 4),
            template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 4),
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 6),
             template_var 5)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 3)))),
    ("WellformedL.wfT_weakening_aux",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>'; atom ?z \<sharp> ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>'   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z : ?b  | ?c \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 4),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 6),
                 template_var 5),
               template_var 0),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("WellformedL.wfFT_wf_aux",
     " ?\<Theta> ; ?\<Phi> ; ?B \<turnstile>\<^sub>w\<^sub>f AF_fun_typ ?x
                        ?b ?c ?\<tau> ?s  ==>
       ?\<Theta> ; ?B ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                        GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  &
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  &
      supp ?s <= {atom ?x} Un supp ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, template_var 7),
                     template_var 5),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 4),
                         template_app
                          (template_app (template_hole 9, template_var 3),
                           template_var 2))),
                     template_hole 8)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 7, template_var 7),
                   template_var 6)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 4)),
                       template_hole 1)),
                   template_app (template_hole 0, template_var 5)))))
           ))),
    ("WellformedL.wfG_replace_inside2",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
             (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma> ;
          ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
              ?c) #\<^sub>\<Gamma>
             ?\<Gamma>  |]
      ==>  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
              (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 2))),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 0))),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 7),
               template_var 6),
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0))),
                 template_var 1)))
           ))),
    ("WellformedL.wf_d_weakening",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>' ;
         setD ?\<Delta> <= setD ?\<Delta>' |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta>' ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 10),
                  template_var 8),
                template_var 7),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 6),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3, template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 0),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_bitvec ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : B_bitvec  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ ?v1.0 @@ ?v2.0 ]\<^sup>e : B_bitvec ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 2)
           ))),
    ("WellformedL.wfT_fun_return_t",
     "[|  ?\<Theta> ; ?\<B> ; (?xa, ?b, ?ca) #\<^sub>\<Gamma>
                              GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>a' ;
         AF_fun_typ ?x ?b ?c ?\<tau>' ?s' =
         AF_fun_typ ?xa ?b ?ca ?\<tau>a' ?sa' |]
      ==>  ?\<Theta> ; ?\<B> ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                               GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 10),
                  template_var 9),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 8),
                      template_app
                       (template_app (template_hole 3, template_var 7),
                        template_var 6))),
                  template_hole 2)),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 7),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 10),
                 template_var 9),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_app (template_hole 3, template_var 7),
                       template_var 3))),
                 template_hole 2)),
             template_var 2)
           ))),
    ("WellformedL.wfC_subst",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v   \<turnstile>\<^sub>w\<^sub>f ?c[?x::=?v']\<^sub>c\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 9),
                    template_var 8),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 9),
                 template_var 8),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 4),
               template_var 0))
           ))),
    ("WellformedL.wf_subst",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v \<turnstile>\<^sub>w\<^sub>f ?\<Delta>[?x::=?v']\<^sub>\<Delta>\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 9),
                    template_var 8),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 9),
                 template_var 8),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 4),
               template_var 0))
           ))),
    ("WellformedL.wfT_subst",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v   \<turnstile>\<^sub>w\<^sub>f ?\<tau>[?x::=?v']\<^sub>\<tau>\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 9),
                    template_var 8),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 9),
                 template_var 8),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 4),
               template_var 0))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : B_bool ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s1.0 : ?b ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s2.0 : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f IF ?v THEN ?s1.0 ELSE ?s2.0 : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 8),
                        template_var 4),
                      template_var 7),
                    template_var 6),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 8),
                        template_var 4),
                      template_var 7),
                    template_var 6),
                  template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 8),
                       template_var 4),
                     template_var 7),
                   template_var 6),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wfV_weakening_cons",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         atom ?y \<sharp> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?y, ?b', TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B> ; (?y, ?b', ?c) #\<^sub>\<Gamma>
                               ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_hole 0))),
                  template_var 5)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 7),
                   template_var 6),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0))),
                   template_var 5)),
               template_var 4),
             template_var 3)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_int ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : B_int  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ leq ?v1.0 ?v2.0 ]\<^sup>e : B_bool ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_int ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : B_int  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ plus ?v1.0 ?v2.0 ]\<^sup>e : B_int ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1),
                 template_var 0)),
             template_hole 3)
           ))),
    ("WellformedL.wf_restrict",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
         atom ?x \<sharp> ?c; atom ?x \<sharp> ?\<Gamma>\<^sub>1 |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>1 @
                               ?\<Gamma>\<^sub>2   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app (template_hole 1, template_var 3)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 8),
                 template_var 7),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 0)),
             template_var 5)
           ))),
    ("WellformedL.wf_restrict",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
         atom ?x \<sharp> ?\<Gamma>\<^sub>1; atom ?x \<sharp> ?\<Delta> |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>1 @
                               ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app (template_hole 1, template_var 3)),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 8),
                 template_var 7),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 0)),
             template_var 5)
           ))),
    ("WellformedL.wf_restrict",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
         atom ?x \<sharp> ?\<tau>; atom ?x \<sharp> ?\<Gamma>\<^sub>1 |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>1 @
                               ?\<Gamma>\<^sub>2   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app (template_hole 1, template_var 3)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 8),
                 template_var 7),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 0)),
             template_var 5)
           ))),
    ("WellformedL.wf_intros",
     "[| (?u, ?\<tau>) : setD ?\<Delta>;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : b_of
                                     ?\<tau>  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?u ::= ?v : B_unit ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 7),
                  template_var 6)),
              template_app (template_hole 7, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 0),
              template_app (template_hole 3, template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 1),
                     template_var 3),
                   template_var 2),
                 template_var 5),
               template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 0)),
             template_hole 0)
           ))),
    ("WellformedL.wfTh_dc_t_unique2",
     "[| AF_typedef ?s ?dclist' : set ?P; (?dc, ?tc') : set ?dclist';
         AF_typedef ?s ?dclist : set ?P;
            \<turnstile>\<^sub>w\<^sub>f ?P ; (?dc, ?tc) : set ?dclist |]
      ==> ?tc = ?tc'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5)),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app (template_hole 2, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 1)),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate (template_app (template_hole 1, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 0)),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation (template_var 0, template_var 2))),
    ("WellformedL.wfG_replace_inside_full",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
             (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma> ;
          ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
             (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>  |]
      ==>  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
              (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 2))),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 0))),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 7),
               template_var 6),
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0))),
                 template_var 1)))
           ))),
    ("WellformedL.wfT_wfT_if_rev",
     "[|  ?P ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : base_for_lit
                              ?l ;
          ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?t ;
         atom ?z1.0 \<sharp> ?\<Gamma> |]
      ==>  ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z1.0 : b_of
        ?t  | [ ?v ]\<^sup>c\<^sup>e  ==  [ [ ?l ]\<^sup>v ]\<^sup>c\<^sup>e   IMP  c_of
         ?t ?z1.0  \<rbrace> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 6, template_var 0),
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 3)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("WellformedL.wfG_unique",
     "[|  ?B ; ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                  ?c) #\<^sub>\<Gamma>
                 ?\<Gamma> ;
         (?x1.0, ?b1.0, ?c1.0)
         : toSet ((?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>);
         ?x1.0 = ?x |]
      ==> ?b1.0 = ?b & ?c1.0 = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 8),
                template_var 7),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 6),
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4))),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 6),
                      template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4))),
                  template_var 3)))
            ),
        template_equation (template_var 2, template_var 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("WellformedL.wfG_cons_unique",
     "[| (?x1.0, ?b1.0, ?c1.0)
         : toSet ((?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>);
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                     ?c) #\<^sub>\<Gamma>
                    ?\<Gamma> ;
         ?x = ?x1.0 |]
      ==> ?b1.0 = ?b & ?c1.0 = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 8),
                  template_app
                   (template_app (template_hole 7, template_var 7),
                    template_var 6))),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3))),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 8, template_var 5),
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3))),
                template_var 2))
            ),
        template_equation (template_var 5, template_var 8)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 6),
               template_var 3))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : B_bitvec ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : B_int  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ ?v1.0 
          ?v2.0 ]\<^sup>e : [ B_bitvec , B_bitvec ]\<^sup>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_hole 4),
               template_hole 4))
           ))),
    ("WellformedL.subst_g_inside",
     " ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
          (?x, ?b, ?c[?z::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
          ?\<Gamma>  ==>
      (?\<Gamma>' @
       (?x, ?b, ?c[?z::=[ ?x ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
       ?\<Gamma>)[?x::=?v]\<^sub>\<Gamma>\<^sub>v =
      ?\<Gamma>'[?x::=?v]\<^sub>\<Gamma>\<^sub>v @ ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 8),
                template_var 7),
              template_app
               (template_app (template_hole 7, template_var 6),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_app
                         (template_app
                           (template_app (template_hole 3, template_var 3),
                            template_var 2),
                          template_app
                           (template_hole 2, template_var 5))))),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 6),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 5),
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_app
                          (template_app
                            (template_app (template_hole 3, template_var 3),
                             template_var 2),
                           template_app
                            (template_hole 2, template_var 5))))),
                   template_var 1))),
             template_var 5),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 5),
               template_var 0)),
           template_var 1)))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; (?dc,
                                   ?t) #
                                  ?dclist \<turnstile>\<^sub>w\<^sub>f  ?cs | ?css   : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 4, template_var 11),
                              template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 3, template_var 11),
                            template_var 10),
                          template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 5),
                       template_var 4)),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("WellformedL.td_lookup_eq_iff",
     "[| [[atom ?bva1.0]]lst. ?dclist1.0 = [[atom ?bva2.0]]lst. ?dclist2.0;
         (?dc, \<lbrace> ?x : ?b  | ?c \<rbrace>) : set ?dclist1.0 |]
      ==> EX x2 b2 c2.
             (?dc, \<lbrace> x2 : b2  | c2 \<rbrace>) : set ?dclist2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 7)),
                template_hole 7)),
            template_var 6),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 5)),
                template_hole 7)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1),
                    template_var 0))),
              template_app (template_hole 3, template_var 6))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("WellformedL.wfT_subst_wfT",
     "[|  ?\<Theta> ; {|?bv|} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                                GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b'  |]
      ==>  ?\<Theta> ; ?B ; (?x, ?b[?bv::=?b']\<^sub>b\<^sub>b,
                             ?c[?bv::=?b']\<^sub>c\<^sub>b) #\<^sub>\<Gamma>
                            GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>[?bv::=?b']\<^sub>\<tau>\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 7),
                  template_app
                   (template_app (template_hole 9, template_var 6),
                    template_hole 8)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3))),
                  template_hole 4)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_var 7),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 5),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app (template_hole 2, template_var 4),
                             template_var 6),
                           template_var 0)),
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 6),
                         template_var 0)))),
                 template_hole 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 6),
               template_var 0))
           ))),
    ("WellformedL.fun_ret_unique",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_none
              (AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1' ?s1'))) =
         lookup_fun ?\<Phi> ?f;
         Some
          (AF_fundef ?f
            (AF_fun_typ_none
              (AF_fun_typ ?x2.0 ?b2.0 ?c2.0 ?\<tau>2' ?s2'))) =
         lookup_fun ?\<Phi> ?f |]
      ==> ?\<tau>1'[?x1.0::=?v]\<^sub>\<tau>\<^sub>v =
          ?\<tau>2'[?x2.0::=?v]\<^sub>\<tau>\<^sub>v",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 12),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 11),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7)))),
          template_app
           (template_app (template_hole 2, template_var 6),
            template_var 12)),
        template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 12),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)))),
          template_app
           (template_app (template_hole 2, template_var 6),
            template_var 12))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 8),
             template_var 11),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 5),
           template_var 0)))),
    ("WellformedL.wfCE_subst",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v \<turnstile>\<^sub>w\<^sub>f ?ce[?x::=?v']\<^sub>c\<^sub>e\<^sub>v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 10),
                    template_var 9),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 10),
                   template_var 9),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 8),
                     template_var 4),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_var 6)
           ))),
    ("WellformedL.wfV_subst",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v \<turnstile>\<^sub>w\<^sub>f ?v[?x::=?v']\<^sub>v\<^sub>v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 10),
                    template_var 9),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 10),
                   template_var 9),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 8),
                     template_var 4),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_var 6)
           ))),
    ("WellformedL.wfG_consI",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?x \<sharp> ?\<Gamma>;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                      ?c) #\<^sub>\<Gamma>
                     ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_hole 0))),
                  template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_var 3))
           ))),
    ("WellformedL.wf_restrict",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
         atom ?x \<sharp> ?ce; atom ?x \<sharp> ?\<Gamma>\<^sub>1 |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>1 @
                                ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?ce : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app (template_hole 1, template_var 3)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 9),
                   template_var 8),
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_var 0)),
               template_var 6),
             template_var 5)
           ))),
    ("WellformedL.wf_restrict",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
         atom ?x \<sharp> ?v; atom ?x \<sharp> ?\<Gamma>\<^sub>1 |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>1 @
                               ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app (template_hole 1, template_var 3)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 9),
                   template_var 8),
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_var 0)),
               template_var 6),
             template_var 5)
           ))),
    ("WellformedL.wfG_cons_weakening",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                     ?c) #\<^sub>\<Gamma>
                    ?\<Gamma> ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>'; atom ?x \<sharp> ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                      ?c) #\<^sub>\<Gamma>
                     ?\<Gamma>' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2))),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2))),
               template_var 0))
           ))),
    ("WellformedL.wfT_replace_inside2",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                              (?x, ?b, ?c') #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?t ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                    (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                               (?x, ?b, ?c) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?t ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 8),
                  template_var 7),
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_app
                         (template_app (template_hole 1, template_var 4),
                          template_var 3))),
                    template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 8),
                template_var 7),
              template_app
               (template_app (template_hole 4, template_var 6),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 0))),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 8),
                 template_var 7),
               template_app
                (template_app (template_hole 4, template_var 6),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 0))),
                   template_var 2))),
             template_var 1)
           ))),
    ("WellformedL.wf_trans",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
         ?\<Gamma> = (?x, ?b, ?c2.0) #\<^sub>\<Gamma> ?G;
          ?\<Theta> ; ?\<B> ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                              ?G   \<turnstile>\<^sub>w\<^sub>f ?c2.0  |]
      ==>  ?\<Theta> ; ?\<B> ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                               ?G   \<turnstile>\<^sub>w\<^sub>f ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2))),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 8),
                  template_var 7),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 4),
                      template_app
                       (template_app (template_hole 0, template_var 3),
                        template_var 0))),
                  template_var 1)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 8),
                 template_var 7),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 0))),
                 template_var 1)),
             template_var 5)
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d & ?x \<sharp> ?e & ?x \<sharp> ?f & ?x \<sharp> ?g)",
     template_equation
      (template_app
        (template_app (template_hole 14, template_var 7),
         template_app
          (template_app (template_hole 13, template_var 6),
           template_app
            (template_app (template_hole 12, template_var 5),
             template_app
              (template_app (template_hole 11, template_var 4),
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0))))))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 7),
             template_var 6)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 5, template_var 7),
               template_var 5)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 4, template_var 7),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 3, template_var 7),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 2, template_var 7),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 0))))))))),
    ("WellformedL.wfFT_poly_wf",
     " ?\<Theta>  ; ?\<Phi> \<turnstile>\<^sub>w\<^sub>f AF_fun_typ_some ?bv
                    (AF_fun_typ ?x ?b ?c ?\<tau> ?s)  ==>
       ?\<Theta> ; {|?bv|} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                             GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  &
       ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  &
       ?\<Theta> ; ?\<Phi> ; {|?bv|} \<turnstile>\<^sub>w\<^sub>f AF_fun_typ
                             ?x ?b ?c ?\<tau> ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 7),
                     template_app
                      (template_app (template_hole 7, template_var 5),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 2))),
                     template_hole 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 6),
                   template_app
                    (template_app (template_hole 7, template_var 5),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("WellformedL.wf_b_subst",
     "[|  ?\<Theta> ; ?\<Phi> ; ?B' ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b' ;
         {|?bv|} = ?B';  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?B ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b ; ?\<Delta>[?bv::=?b]\<^sub>\<Delta>\<^sub>b \<turnstile>\<^sub>w\<^sub>f ?e[?bv::=?b]\<^sub>e\<^sub>b : ?b'[?bv::=?b]\<^sub>b\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_hole 5),
          template_var 7),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 9),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 8, template_var 9),
                       template_var 8),
                     template_var 1),
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 6),
                       template_var 2),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 2),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("WellformedL.lookup_iff",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  ==>
      (Some (?b, ?c) = lookup ?\<Gamma> ?x) =
      ((?x, ?b, ?c) : toSet ?\<Gamma> &
       (ALL b' c'. (?x, b', c') : toSet ?\<Gamma> --> b' = ?b & c' = ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 1))),
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_var 1))),
               template_app (template_hole 5, template_var 3))),
           template_app (template_hole 4, t_empty))))),
    ("WellformedL.wfG_replace_inside",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G ;
         ?G = ?\<Gamma>' @ (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                     (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 8),
                  template_var 7),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 8),
               template_var 7),
             template_app
              (template_app (template_hole 5, template_var 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0))),
                 template_var 1)))
           ))),
    ("WellformedL.wf_trans",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b' ;
         ?\<Gamma> = (?x, ?b, ?c2.0) #\<^sub>\<Gamma> ?G;
          ?\<Theta> ; ?\<B> ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                              ?G   \<turnstile>\<^sub>w\<^sub>f ?c2.0  |]
      ==>   ?\<Theta> ; ?\<B> ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                                ?G \<turnstile>\<^sub>w\<^sub>f ?ce : ?b' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2))),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 9),
                  template_var 8),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app
                       (template_app (template_hole 1, template_var 3),
                        template_var 0))),
                  template_var 1)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 9),
                   template_var 8),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 0))),
                   template_var 1)),
               template_var 6),
             template_var 5)
           ))),
    ("WellformedL.wf_trans",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b' ;
         ?\<Gamma> = (?x, ?b, ?c2.0) #\<^sub>\<Gamma> ?G;
          ?\<Theta> ; ?\<B> ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                              ?G   \<turnstile>\<^sub>w\<^sub>f ?c2.0  |]
      ==>  ?\<Theta> ; ?\<B> ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                               ?G \<turnstile>\<^sub>w\<^sub>f ?v : ?b' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2))),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 9),
                  template_var 8),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app
                       (template_app (template_hole 1, template_var 3),
                        template_var 0))),
                  template_var 1)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 9),
                   template_var 8),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 0))),
                   template_var 1)),
               template_var 6),
             template_var 5)
           ))),
    ("WellformedL.wfG_unique_full",
     "[|  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                 (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ;
         (?x1.0, ?b1.0, ?c1.0)
         : toSet (?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>);
         ?x1.0 = ?x |]
      ==> ?b1.0 = ?b & ?c1.0 = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 9),
                template_var 8),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 6),
                      template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4))),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 9, template_var 7),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 6),
                        template_app
                         (template_app (template_hole 6, template_var 5),
                          template_var 4))),
                    template_var 3))))
            ),
        template_equation (template_var 2, template_var 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("WellformedL.wfG_member_unique",
     "[| (?x1.0, ?b1.0, ?c1.0)
         : toSet (?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>);
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                    (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ;
         ?x = ?x1.0 |]
      ==> ?b1.0 = ?b & ?c1.0 = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 9),
                  template_app
                   (template_app (template_hole 8, template_var 8),
                    template_var 7))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 6),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 9, template_var 5),
                        template_app
                         (template_app (template_hole 8, template_var 4),
                          template_var 3))),
                    template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 9, template_var 5),
                      template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3))),
                  template_var 2)))
            ),
        template_equation (template_var 5, template_var 9)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 8),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 7),
               template_var 3))
           ))),
    ("WellformedL.lookup_if2",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         (?x, ?b, ?c) : toSet ?\<Gamma> &
         (ALL b' c'.
             (?x, b', c') : toSet ?\<Gamma> --> b' = ?b & c' = ?c) |]
      ==> Some (?b, ?c) = lookup ?\<Gamma> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_app
                       (template_app (template_hole 9, template_var 1),
                        template_var 0))),
                  template_app (template_hole 8, template_var 3))),
              template_app (template_hole 7, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("WellformedL.lookup_if1",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         Some (?b, ?c) = lookup ?\<Gamma> ?x |]
      ==> (?x, ?b, ?c) : toSet ?\<Gamma> &
          (ALL b' c'.
              (?x, b', c') : toSet ?\<Gamma> --> b' = ?b & c' = ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_var 1))),
                 template_app (template_hole 5, template_var 3))),
             template_app (template_hole 4, t_empty))
           ))),
    ("WellformedL.wfC_e_eq2",
     "[|   ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?e1.0 : ?b ;
           ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?e2.0 : ?b ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; ?\<B> ; (?x, ?b,
                                [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  ?e1.0 ) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  ?e2.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0, template_var 0))),
                         template_var 3)))),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_var 1))
           ))),
    ("WellformedL.fun_poly_arg_unique",
     "[[atom ?bv1.0]]lst. AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1.0 ?s1.0 =
      [[atom ?bv2.0]]lst. AF_fun_typ ?x2.0 ?b2.0 ?c2.0 ?\<tau>2.0 ?s2.0 ==>
      \<lbrace> ?x1.0 : ?b1.0[?bv1.0::=?b]\<^sub>b\<^sub>b  | ?c1.0[?bv1.0::=?b]\<^sub>c\<^sub>b \<rbrace> =
      \<lbrace> ?x2.0 : ?b2.0[?bv2.0::=?b]\<^sub>b\<^sub>b  | ?c2.0[?bv2.0::=?b]\<^sub>c\<^sub>b \<rbrace>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 12)),
                template_hole 5)),
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 11),
                    template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7)),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 6)),
                template_hole 5)),
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 11),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 10),
                 template_var 12),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 9),
               template_var 12),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 6),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 6),
             template_var 0))))),
    ("WellformedL.wfC_replace_inside",
     "[|  ?\<Theta> ; ?\<B> ; ?G   \<turnstile>\<^sub>w\<^sub>f ?c'' ;
         ?G = ?\<Gamma>' @ (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                               (?x, ?b, ?c) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c'' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 4, template_var 5),
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 9),
                  template_var 8),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app
                       (template_app (template_hole 1, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 9),
                 template_var 8),
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 0))),
                   template_var 1))),
             template_var 6)
           ))),
    ("WellformedL.wf_replace_inside",
     "[|  ?\<Theta> ; ?\<B> ; ?G \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         ?G = ?\<Gamma>' @ (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                               (?x, ?b, ?c) #\<^sub>\<Gamma>
                               ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 9),
                  template_var 8),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 9),
                 template_var 8),
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 0))),
                   template_var 1))),
             template_var 6)
           ))),
    ("WellformedL.wfT_replace_inside",
     "[|  ?\<Theta> ; ?\<B> ; ?G   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
         ?G = ?\<Gamma>' @ (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                               (?x, ?b, ?c) #\<^sub>\<Gamma>
                               ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 9),
                  template_var 8),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 9),
                 template_var 8),
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 0))),
                   template_var 1))),
             template_var 6)
           ))),
    ("WellformedL.*",
     "atom ?bv2.0 \<sharp> (?bv1.0, ?b1.0, ?c1.0, ?\<tau>1.0, ?s1.0) ==>
      AF_fun_typ_some ?bv2.0
       (AF_fun_typ ?x1.0 ((?bv1.0 \<leftrightarrow> ?bv2.0) \<bullet> ?b1.0)
         ((?bv1.0 \<leftrightarrow> ?bv2.0) \<bullet> ?c1.0)
         ((?bv1.0 \<leftrightarrow> ?bv2.0) \<bullet> ?\<tau>1.0)
         ((?bv1.0 \<leftrightarrow> ?bv2.0) \<bullet> ?s1.0)) =
      AF_fun_typ_some ?bv1.0
       (AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1.0 ?s1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 6)),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_app (template_hole 9, template_var 3),
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 1)))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 6),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 5),
                         template_var 6)),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 6)),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 6)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 6)),
               template_var 1))),
         template_app
          (template_app (template_hole 6, template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1))))),
    ("WellformedL.wfG_member_subst",
     "[| (?x1.0, ?b1.0, ?c1.0) : toSet (?\<Gamma>' @ ?\<Gamma>);
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                    (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ;
         ?x ~= ?x1.0 |]
      ==> EX c1'.
             (?x1.0, ?b1.0, c1')
             : toSet
                (?\<Gamma>'[?x::=?v]\<^sub>\<Gamma>\<^sub>v @ ?\<Gamma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 10),
                  template_app
                   (template_app (template_hole 8, template_var 9),
                    template_var 8))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 6, template_var 7),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 1))),
                  template_var 6)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 10))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         Some
          (AF_fundef ?f
            (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ ?f  ?v  ]\<^sup>e : b_of
 ?\<tau> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 11),
                  template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)))),
          template_app
           (template_app (template_hole 4, template_var 10),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 11),
                    template_var 9),
                  template_var 8),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 11),
                       template_var 10),
                     template_var 9),
                   template_var 8),
                 template_var 7),
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("WellformedL.wfCE_replace_inside",
     "[|   ?\<Theta> ; ?\<B> ; ?G \<turnstile>\<^sub>w\<^sub>f ?ce : ?b' ;
         ?G = ?\<Gamma>' @ (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>   ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                                (?x, ?b, ?c) #\<^sub>\<Gamma>
                                ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 10),
                  template_var 9),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 10),
                   template_var 9),
                 template_app
                  (template_app (template_hole 5, template_var 5),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_app
                          (template_app (template_hole 2, template_var 3),
                           template_var 0))),
                     template_var 1))),
               template_var 7),
             template_var 6)
           ))),
    ("WellformedL.wfV_replace_inside",
     "[|  ?\<Theta> ; ?\<B> ; ?G \<turnstile>\<^sub>w\<^sub>f ?v : ?b' ;
         ?G = ?\<Gamma>' @ (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma>' @
                               (?x, ?b, ?c) #\<^sub>\<Gamma>
                               ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 10),
                  template_var 9),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 10),
                   template_var 9),
                 template_app
                  (template_app (template_hole 5, template_var 5),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_app
                          (template_app (template_hole 2, template_var 3),
                           template_var 0))),
                     template_var 1))),
               template_var 7),
             template_var 6)
           ))),
    ("WellformedL.wf_subst",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v ; ?\<Delta>[?x::=?v']\<^sub>\<Delta>\<^sub>v \<turnstile>\<^sub>w\<^sub>f ?e[?x::=?v']\<^sub>e\<^sub>v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 12),
                    template_var 10),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 12),
                       template_var 11),
                     template_var 10),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 9),
                       template_var 4),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 8),
                     template_var 4),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_var 6)
           ))),
    ("WellformedL.wf_subst",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v ; ?\<Delta>[?x::=?v']\<^sub>\<Delta>\<^sub>v \<turnstile>\<^sub>w\<^sub>f ?s[?x::=?v']\<^sub>s\<^sub>v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 12),
                    template_var 10),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 12),
                       template_var 11),
                     template_var 10),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 9),
                       template_var 4),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 8),
                     template_var 4),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_var 6)
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e & ?x \<sharp> ?f & ?x \<sharp> ?g & ?x \<sharp> ?h)",
     template_equation
      (template_app
        (template_app (template_hole 16, template_var 8),
         template_app
          (template_app (template_hole 15, template_var 7),
           template_app
            (template_app (template_hole 14, template_var 6),
             template_app
              (template_app (template_hole 13, template_var 5),
               template_app
                (template_app (template_hole 12, template_var 4),
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_app
                      (template_app (template_hole 9, template_var 1),
                       template_var 0)))))))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 8),
             template_var 7)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 6, template_var 8),
               template_var 6)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_var 8),
                 template_var 5)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 4, template_var 8),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 2, template_var 8),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 1, template_var 8),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 0, template_var 8),
                       template_var 0)))))))))),
    ("WellformedL.fun_poly_body_unique",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv1.0
              (AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1' ?s1'))) =
         lookup_fun ?\<Phi> ?f;
         Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv2.0
              (AF_fun_typ ?x2.0 ?b2.0 ?c2.0 ?\<tau>2' ?s2'))) =
         lookup_fun ?\<Phi> ?f |]
      ==> ?s1'[?bv1.0::=?b]\<^sub>s\<^sub>b[?x1.0::=?v]\<^sub>s\<^sub>v =
          ?s2'[?bv2.0::=?b]\<^sub>s\<^sub>b[?x2.0::=?v]\<^sub>s\<^sub>v",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 15),
              template_app
               (template_app (template_hole 5, template_var 14),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 13),
                        template_var 12),
                      template_var 11),
                    template_var 10),
                  template_var 9)))),
          template_app
           (template_app (template_hole 3, template_var 8),
            template_var 15)),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 15),
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 3, template_var 8),
            template_var 15))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 14),
                 template_var 1)),
             template_var 13),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 7),
                 template_var 1)),
             template_var 6),
           template_var 0)))),
    ("WellformedL.fun_poly_ret_unique",
     "[| Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv1.0
              (AF_fun_typ ?x1.0 ?b1.0 ?c1.0 ?\<tau>1' ?s1'))) =
         lookup_fun ?\<Phi> ?f;
         Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv2.0
              (AF_fun_typ ?x2.0 ?b2.0 ?c2.0 ?\<tau>2' ?s2'))) =
         lookup_fun ?\<Phi> ?f |]
      ==> ?\<tau>1'[?bv1.0::=?b]\<^sub>\<tau>\<^sub>b[?x1.0::=?v]\<^sub>\<tau>\<^sub>v =
          ?\<tau>2'[?bv2.0::=?b]\<^sub>\<tau>\<^sub>b[?x2.0::=?v]\<^sub>\<tau>\<^sub>v",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 15),
              template_app
               (template_app (template_hole 5, template_var 14),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 13),
                        template_var 12),
                      template_var 11),
                    template_var 10),
                  template_var 9)))),
          template_app
           (template_app (template_hole 3, template_var 8),
            template_var 15)),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 15),
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)))),
          template_app
           (template_app (template_hole 3, template_var 8),
            template_var 15))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 10),
                   template_var 14),
                 template_var 1)),
             template_var 13),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 7),
                 template_var 1)),
             template_var 6),
           template_var 0)))),
    ("WellformedL.wfT_wfC_cons",
     "[|  ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z1.0 : ?b  | ?c1.0 \<rbrace> ;
          ?P ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?z2.0 : ?b  | ?c2.0 \<rbrace> ;
         atom ?x \<sharp> (?c1.0, ?c2.0, ?\<Gamma>) |]
      ==>  ?P ; ?\<B> ; (?x, ?b,
                         ?c1.0[?z1.0::=[ ?x ]\<^sup>v]\<^sub>v) #\<^sub>\<Gamma>
                        ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c2.0[?z2.0::=[ ?x ]\<^sup>v]\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 4),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 6)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 8),
                 template_var 7),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 5),
                         template_app (template_hole 0, template_var 0))))),
                 template_var 6)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v1.0 : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v2.0 : ?b ;
         ?b : {B_bool, B_int, B_unit} |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [ eq ?v1.0 ?v2.0 ]\<^sup>e : B_bool ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 7),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 7),
                    template_var 5),
                  template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 7),
                    template_var 5),
                  template_var 4),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 7, template_hole 5),
                  template_app
                   (template_app (template_hole 7, template_hole 4),
                    template_hole 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2),
                 template_var 0)),
             template_hole 6)
           ))),
    ("WellformedL.wfTh_dc_t_unique",
     "[| AF_typedef ?s ?dclist' : set ?P;
         (?dc, \<lbrace> ?x' : ?b'  | ?c' \<rbrace>) : set ?dclist';
         AF_typedef ?s ?dclist : set ?P;
            \<turnstile>\<^sub>w\<^sub>f ?P ;
         (?dc, \<lbrace> ?x : ?b  | ?c \<rbrace>) : set ?dclist |]
      ==> \<lbrace> ?x' : ?b'  | ?c' \<rbrace> =
          \<lbrace> ?x : ?b  | ?c \<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 10),
                  template_var 9)),
              template_app (template_hole 6, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 7),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5),
                    template_var 4))),
              template_app (template_hole 2, template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 10),
                  template_var 3)),
              template_app (template_hole 6, template_var 8))
            ),
        template_predicate (template_app (template_hole 1, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 7),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1),
                    template_var 0))),
              template_app (template_hole 2, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : B_id
                                     ?tid ;
         AF_typedef ?tid ?dclist : set ?\<Theta>;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?cs : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f MATCH ?v WITH { ?cs } : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_app (template_hole 8, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4)),
              template_app (template_hole 5, template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 9),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 2, template_var 9),
                            template_var 2),
                          template_var 8),
                        template_var 7),
                      template_var 3),
                    template_var 5),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 9),
                       template_var 2),
                     template_var 8),
                   template_var 7),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wf_intros",
     "[| ?c ~: {TRUE, FALSE};
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?x \<sharp> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                      ?c) #\<^sub>\<Gamma>
                     ?\<Gamma> ",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 5),
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app
                     (template_app (template_hole 11, template_hole 9),
                      template_hole 8)))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_app
                       (template_app (template_hole 1, template_var 0),
                        template_hole 10))),
                  template_var 2)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 5))),
               template_var 2))
           ))),
    ("WellformedL.wf_restrict",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
         atom ?x \<sharp> ?e; atom ?x \<sharp> ?\<Gamma>\<^sub>1;
         atom ?x \<sharp> ?\<Delta> |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>\<^sub>1 @
   ?\<Gamma>\<^sub>2 ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 11),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 2, template_var 3)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app (template_hole 2, template_var 3)),
              template_var 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 11),
                       template_var 10),
                     template_var 9),
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 0)),
                 template_var 7),
               template_var 6),
             template_var 5)
           ))),
    ("WellformedL.funtyp_eq_iff_equalities",
     "[[atom ?x']]lst. ((?c', ?\<tau>'), ?s') =
      [[atom ?x]]lst. ((?c, ?\<tau>), ?s) ==>
      \<lbrace> ?x' : ?b  | ?c' \<rbrace> =
      \<lbrace> ?x : ?b  | ?c \<rbrace> &
      ?s'[?x'::=?v]\<^sub>s\<^sub>v = ?s[?x::=?v]\<^sub>s\<^sub>v &
      ?\<tau>'[?x'::=?v]\<^sub>\<tau>\<^sub>v =
      ?\<tau>[?x::=?v]\<^sub>\<tau>\<^sub>v",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 9)),
                template_hole 8)),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_var 7)),
              template_var 6)),
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 5)),
                template_hole 8)),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 9),
                       template_var 1),
                     template_var 8)),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 1),
                   template_var 4))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 6),
                         template_var 9),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 5),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 7),
                       template_var 9),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 5),
                   template_var 0))))
           ))),
    ("WellformedL.wf_replace_inside",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?G ; ?D \<turnstile>\<^sub>w\<^sub>f ?e : ?b' ;
         ?G = ?\<Gamma>' @ (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>' @
   (?x, ?b, ?c) #\<^sub>\<Gamma>
   ?\<Gamma> ; ?D \<turnstile>\<^sub>w\<^sub>f ?e : ?b' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 12),
                  template_var 10),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 0))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 7, template_var 12),
                       template_var 11),
                     template_var 10),
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 4),
                           template_app
                            (template_app (template_hole 2, template_var 3),
                             template_var 0))),
                       template_var 1))),
                 template_var 8),
               template_var 7),
             template_var 6)
           ))),
    ("WellformedL.wf_subst",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f ?css : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v ; ?\<Delta>[?x::=?v']\<^sub>\<Delta>\<^sub>v ; ?tid ; ?dclist \<turnstile>\<^sub>w\<^sub>f subst_branchlv
                        ?css ?x ?v' : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 9, template_var 14),
                            template_var 13),
                          template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 11,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 14),
                    template_var 12),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 9, template_var 14),
                           template_var 13),
                         template_var 12),
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 11),
                           template_var 4),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 10),
                         template_var 4),
                       template_var 0)),
                   template_var 9),
                 template_var 8),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_var 6)
           ))),
    ("WellformedL.fresh_replace_inside",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>'' @
             (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ;
          ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>'' @
             (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>  |]
      ==> atom
           ?y \<sharp> ?\<Gamma>'' @
                       (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> =
          atom
           ?y \<sharp> ?\<Gamma>'' @
                       (?x, ?b, ?c') #\<^sub>\<Gamma> ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 8),
                template_var 7),
              template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 3))),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 8),
                template_var 7),
              template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_app
                       (template_app (template_hole 3, template_var 4),
                        template_var 1))),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3))),
               template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 1))),
               template_var 2)))))),
    ("WellformedL.wfG_member_subst2",
     "[| (?x1.0, ?b1.0, ?c1.0)
         : toSet (?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>);
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                    (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ;
         ?x ~= ?x1.0 |]
      ==> EX c1'.
             (?x1.0, ?b1.0, c1')
             : toSet
                (?\<Gamma>'[?x::=?v]\<^sub>\<Gamma>\<^sub>v @ ?\<Gamma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 10),
                  template_app
                   (template_app (template_hole 8, template_var 9),
                    template_var 8))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 7),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 9, template_var 6),
                        template_app
                         (template_app (template_hole 8, template_var 5),
                          template_var 4))),
                    template_var 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 6, template_var 7),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 9, template_var 6),
                      template_app
                       (template_app (template_hole 8, template_var 5),
                        template_var 4))),
                  template_var 3)))
            ),
        template_negation
         (template_equation (template_var 6, template_var 10))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("WellformedL.wfTh_typedef_poly_b_eq_iff",
     "[| AF_typedef_poly ?tyid ?bva1.0 ?dclist1.0 : set ?P;
         (?dc, \<lbrace> ?x1.0 : ?b1.0  | ?c1.0 \<rbrace>) : set ?dclist1.0;
         AF_typedef_poly ?tyid ?bva2.0 ?dclist2.0 : set ?P;
         (?dc, \<lbrace> ?x2.0 : ?b2.0  | ?c2.0 \<rbrace>) : set ?dclist2.0;
            \<turnstile>\<^sub>w\<^sub>f ?P  |]
      ==> ?b1.0[?bva1.0::=?b]\<^sub>b\<^sub>b =
          ?b2.0[?bva2.0::=?b]\<^sub>b\<^sub>b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 13),
                    template_var 12),
                  template_var 11)),
              template_app (template_hole 7, template_var 10))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 9),
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 6))),
              template_app (template_hole 3, template_var 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 13),
                    template_var 5),
                  template_var 4)),
              template_app (template_hole 7, template_var 10))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 9),
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2),
                    template_var 1))),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 10))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 7),
             template_var 12),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 5),
           template_var 0)))),
    ("WellformedL.wf_subst",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs : ?b ;
         ?\<Gamma> =
         ?\<Gamma>\<^sub>1 @
         (?x, ?b', ?c') #\<^sub>\<Gamma> ?\<Gamma>\<^sub>2;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>\<^sub>2 \<turnstile>\<^sub>w\<^sub>f ?v' : ?b'  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma>[?x::=?v']\<^sub>\<Gamma>\<^sub>v ; ?\<Delta>[?x::=?v']\<^sub>\<Delta>\<^sub>v ; ?tid ; ?dc ; ?t \<turnstile>\<^sub>w\<^sub>f ?cs[?x::=?v']\<^sub>s\<^sub>v : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 15),
                              template_var 14),
                            template_var 13),
                          template_var 12),
                        template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 7, template_var 5),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 15),
                    template_var 13),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 9, template_var 15),
                             template_var 14),
                           template_var 13),
                         template_app
                          (template_app
                            (template_app
                              (template_hole 2, template_var 12),
                             template_var 4),
                           template_var 0)),
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 11),
                           template_var 4),
                         template_var 0)),
                     template_var 10),
                   template_var 9),
                 template_var 8),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 4),
                 template_var 0)),
             template_var 6)
           ))),
    ("WellformedL.wfPhi_f_simple_wf",
     "[| AF_fundef ?f (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\<tau> ?s))
         : set ?\<Phi>;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
         set ?\<Phi> <= set ?\<Phi>';
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>'  |]
      ==>  ?\<Theta> ; {||} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                              GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  &
           ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  &
          supp ?s <= {atom ?x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 8),
                  template_app
                   (template_hole 16,
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 15, template_var 7),
                            template_var 6),
                          template_var 5),
                        template_var 4),
                      template_var 3)))),
              template_app (template_hole 14, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 2),
          template_app (template_hole 14, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 1),
                     template_hole 9),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 7),
                         template_app
                          (template_app (template_hole 6, template_var 6),
                           template_var 5))),
                     template_hole 5)),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 13, template_var 1),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 7)),
                   template_hole 0))))
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e &
       ?x \<sharp> ?f & ?x \<sharp> ?g & ?x \<sharp> ?h & ?x \<sharp> ?i)",
     template_equation
      (template_app
        (template_app (template_hole 18, template_var 9),
         template_app
          (template_app (template_hole 17, template_var 8),
           template_app
            (template_app (template_hole 16, template_var 7),
             template_app
              (template_app (template_hole 15, template_var 6),
               template_app
                (template_app (template_hole 14, template_var 5),
                 template_app
                  (template_app (template_hole 13, template_var 4),
                   template_app
                    (template_app (template_hole 12, template_var 3),
                     template_app
                      (template_app (template_hole 11, template_var 2),
                       template_app
                        (template_app (template_hole 10, template_var 1),
                         template_var 0))))))))),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 9),
             template_var 8)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 7, template_var 9),
               template_var 7)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 6, template_var 9),
                 template_var 6)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 5, template_var 9),
                   template_var 5)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 4, template_var 9),
                     template_var 4)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 3, template_var 9),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 2, template_var 9),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 1, template_var 9),
                           template_var 1)),
                       template_app
                        (template_app (template_hole 0, template_var 9),
                         template_var 0))))))))))),
    ("WellformedL.wfG_cons_append",
     " ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ((?x', ?b',
                   ?c') #\<^sub>\<Gamma>
                  ?\<Gamma>') @
                 (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>  ==>
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                 (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma>  &
      atom
       ?x' \<sharp> ?\<Gamma>' @ (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> &
       ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b'  & ?x' ~= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 9),
                template_var 8),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 7),
                        template_app
                         (template_app (template_hole 6, template_var 6),
                          template_var 5))),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_app
                       (template_app (template_hole 6, template_var 2),
                        template_var 1))),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 10, template_var 9),
                   template_var 8),
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 3),
                         template_app
                          (template_app (template_hole 6, template_var 2),
                           template_var 1))),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 7)),
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_var 3),
                           template_app
                            (template_app (template_hole 6, template_var 2),
                             template_var 1))),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 9),
                       template_var 8),
                     template_var 6)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 3)))))
           ))),
    ("WellformedL.wfG_supp_rig_eq",
     "[|  ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>'' @
             (?x, ?b0.0, ?c0.0) #\<^sub>\<Gamma> ?\<Gamma> ;
          ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>'' @
             (?x, ?b0.0, ?c0') #\<^sub>\<Gamma> ?\<Gamma>  |]
      ==> supp
           (?\<Gamma>'' @ (?x, ?b0.0, ?c0') #\<^sub>\<Gamma> ?\<Gamma>) Un
          supp ?\<B> =
          supp
           (?\<Gamma>'' @ (?x, ?b0.0, ?c0.0) #\<^sub>\<Gamma> ?\<Gamma>) Un
          supp ?\<B>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 7, template_var 5),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2))),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 7, template_var 5),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 0))),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 4),
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 0))),
                   template_var 1)))),
           template_app (template_hole 0, template_var 6)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 4),
                       template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 2))),
                   template_var 1)))),
           template_app (template_hole 0, template_var 6))))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?b ;
         supp ?s <= {atom ?x} Un supp ?B; supp ?c <= {atom ?x};
          ?\<Theta> ; ?B ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                           GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?B \<turnstile>\<^sub>w\<^sub>f AF_fun_typ
                            ?x ?b ?c ?\<tau> ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 4),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_hole 10)),
            template_app (template_hole 9, template_var 6))),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3)),
            template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app (template_hole 4, template_var 5),
                        template_var 2))),
                  template_hole 3)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 7),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 0),
               template_var 6),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 5),
                   template_var 2),
                 template_var 1),
               template_var 4))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; (?x, b_of ?\<tau>,
   TRUE) #\<^sub>\<Gamma>
  ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
         atom
          ?x \<sharp> (?\<Phi>, ?\<Theta>, ?\<B>, ?\<Gamma>, ?\<Delta>,
                       ?\<Gamma>, ?\<tau>);
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta>  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> ; ?tid ; ?dc ; ?\<tau> \<turnstile>\<^sub>w\<^sub>f  ?dc ?x \<Rightarrow> ?s  : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 10),
                        template_var 9),
                      template_var 8),
                    template_app
                     (template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 14, template_var 7),
                          template_app
                           (template_app
                             (template_hole 13,
                              template_app
                               (template_hole 12, template_var 6)),
                            template_hole 11))),
                      template_var 5)),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 7)),
              template_app
               (template_app (template_hole 8, template_var 9),
                template_app
                 (template_app (template_hole 7, template_var 10),
                  template_app
                   (template_app (template_hole 6, template_var 8),
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_app
                         (template_app (template_hole 3, template_var 5),
                          template_var 6)))))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 10),
                  template_var 8),
                template_var 5),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 1, template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 5),
                       template_var 4),
                     template_var 1),
                   template_var 0),
                 template_var 6),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 7),
                 template_var 3)),
             template_var 2)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; (?x, B_bool, ?c) #\<^sub>\<Gamma>
  ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         atom
          ?x \<sharp> (?\<Phi>, ?\<Theta>, ?\<B>, ?\<Gamma>, ?\<Delta>, ?c,
                       ?b, ?s) |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ASSERT ?c IN ?s  : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 8),
                        template_var 7),
                      template_var 6),
                    template_app
                     (template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 14, template_var 5),
                          template_app
                           (template_app
                             (template_hole 13, template_hole 12),
                            template_var 4))),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 6),
                template_var 3),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 8),
                  template_var 6),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)),
              template_app
               (template_app (template_hole 7, template_var 7),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_app
                   (template_app (template_hole 5, template_var 6),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_app
                         (template_app (template_hole 2, template_var 4),
                          template_app
                           (template_app (template_hole 1, template_var 0),
                            template_var 1))))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 16, template_var 8),
                       template_var 7),
                     template_var 6),
                   template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e &
       ?x \<sharp> ?f &
       ?x \<sharp> ?g & ?x \<sharp> ?h & ?x \<sharp> ?i & ?x \<sharp> ?j)",
     template_equation
      (template_app
        (template_app (template_hole 20, template_var 10),
         template_app
          (template_app (template_hole 19, template_var 9),
           template_app
            (template_app (template_hole 18, template_var 8),
             template_app
              (template_app (template_hole 17, template_var 7),
               template_app
                (template_app (template_hole 16, template_var 6),
                 template_app
                  (template_app (template_hole 15, template_var 5),
                   template_app
                    (template_app (template_hole 14, template_var 4),
                     template_app
                      (template_app (template_hole 13, template_var 3),
                       template_app
                        (template_app (template_hole 12, template_var 2),
                         template_app
                          (template_app (template_hole 11, template_var 1),
                           template_var 0)))))))))),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 10),
             template_var 9)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 8, template_var 10),
               template_var 8)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 7, template_var 10),
                 template_var 7)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 6, template_var 10),
                   template_var 6)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 5, template_var 10),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 4, template_var 10),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 3, template_var 10),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 2, template_var 10),
                           template_var 2)),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_hole 1, template_var 10),
                             template_var 1)),
                         template_app
                          (template_app (template_hole 0, template_var 10),
                           template_var 0)))))))))))),
    ("WellformedL.lookup_subst2",
     "[| Some (?b, ?c) =
         lookup
          (?\<Gamma>' @
           (?x', ?b\<^sub>1,
            ?c0.0[?z0.0::=[ ?x' ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
           ?\<Gamma>)
          ?x;
         ?x ~= ?x';
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                    (?x', ?b\<^sub>1,
                     ?c0.0[?z0.0::=[ ?x' ]\<^sup>v]\<^sub>c\<^sub>v) #\<^sub>\<Gamma>
                    ?\<Gamma>  |]
      ==> EX c'.
             Some (?b, c') =
             lookup
              (?\<Gamma>'[?x'::=?v']\<^sub>\<Gamma>\<^sub>v @ ?\<Gamma>)
              ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 11),
              template_var 10)),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 9),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 8),
                      template_app
                       (template_app (template_hole 11, template_var 7),
                        template_app
                         (template_app
                           (template_app (template_hole 6, template_var 6),
                            template_var 5),
                          template_app
                           (template_hole 5, template_var 8))))),
                  template_var 4))),
            template_var 3)),
        template_negation
         (template_equation (template_var 3, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 9, template_var 9),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 8),
                      template_app
                       (template_app (template_hole 11, template_var 7),
                        template_app
                         (template_app
                           (template_app (template_hole 6, template_var 6),
                            template_var 5),
                          template_app
                           (template_hole 5, template_var 8))))),
                  template_var 4)))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : b_of
                                     ?\<tau> ;
         atom
          ?u \<sharp> (?\<Phi>, ?\<Theta>, ?\<B>, ?\<Gamma>, ?\<Delta>,
                       ?\<tau>, ?v, ?b);
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; (?u,
               ?\<tau>) #\<^sub>\<Delta>
              ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f VAR ?u : ?\<tau> = ?v IN ?s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 14, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 5),
              template_app (template_hole 13, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 9),
                  template_app
                   (template_app (template_hole 8, template_var 8),
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_app
                       (template_app (template_hole 6, template_var 2),
                        template_app
                         (template_app (template_hole 5, template_var 6),
                          template_app
                           (template_app (template_hole 4, template_var 5),
                            template_var 1))))))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 3, template_var 9),
                        template_var 3),
                      template_var 8),
                    template_var 7),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 6)),
                    template_var 2)),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 9),
                       template_var 3),
                     template_var 8),
                   template_var 7),
                 template_var 2),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 6),
                   template_var 5),
                 template_var 0)),
             template_var 1)
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?e : ?b' ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; (?x, ?b', TRUE) #\<^sub>\<Gamma>
  ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s : ?b ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
         atom
          ?x \<sharp> (?\<Phi>, ?\<Theta>, ?\<B>, ?\<Gamma>, ?\<Delta>, ?e,
                       ?b) |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f LET ?x = ?e IN ?s : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 15, template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 14, template_var 9),
                        template_var 8),
                      template_var 7),
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app (template_hole 12, template_var 2),
                          template_app
                           (template_app (template_hole 11, template_var 3),
                            template_hole 10))),
                      template_var 6)),
                  template_var 5),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 9),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_app
               (template_app (template_hole 6, template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 9),
                  template_app
                   (template_app (template_hole 4, template_var 7),
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_app
                         (template_app (template_hole 1, template_var 4),
                          template_var 0)))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 14, template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.wfPhi_f_poly_wf",
     "[| AF_fundef ?f (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))
         : set ?\<Phi>;
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
         set ?\<Phi> <= set ?\<Phi>';
          ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>'  |]
      ==>  ?\<Theta> ; {|?bv|} ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                                 GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>  &
           ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi>'  &
           ?\<Theta> ; ?\<Phi>' ; {|?bv|} \<turnstile>\<^sub>w\<^sub>f AF_fun_typ
                                  ?x ?b ?c ?\<tau> ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 9),
                  template_app
                   (template_app (template_hole 13, template_var 8),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 12, template_var 7),
                            template_var 6),
                          template_var 5),
                        template_var 4),
                      template_var 3)))),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 2),
          template_app (template_hole 11, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, template_var 1),
                     template_app
                      (template_app (template_hole 6, template_var 8),
                       template_hole 5)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 7),
                         template_app
                          (template_app (template_hole 2, template_var 6),
                           template_var 5))),
                     template_hole 1)),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_app
                    (template_app (template_hole 6, template_var 8),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 12, template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3))))
           ))),
    ("WellformedL.wf_intros",
     "[| AF_typedef_poly ?s ?bv ?dclist : set ?\<Theta>;
         (?dc, \<lbrace> ?x : ?b'  | ?c \<rbrace>) : set ?dclist;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
         atom ?bv \<sharp> (?\<Theta>, ?\<B>, ?\<Gamma>, ?b, ?v);
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b'[?bv::=?b]\<^sub>b\<^sub>b  |]
      ==>  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f V_consp
                                 ?s ?dc ?b ?v : B_app ?s ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 11),
                    template_var 10),
                  template_var 9)),
              template_app (template_hole 15, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 7),
                  template_app
                   (template_app
                     (template_app (template_hole 12, template_var 6),
                      template_var 5),
                    template_var 4))),
              template_app (template_hole 11, template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 8),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 10)),
              template_app
               (template_app (template_hole 7, template_var 8),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 0)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_var 3),
                  template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 10),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 8),
                   template_var 3),
                 template_var 1),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 11),
                     template_var 7),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 11),
               template_var 2))
           ))),
    ("WellformedL.wfG_cons_splitI",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?x \<sharp> ?\<Gamma>;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b ;
         ?c : {TRUE, FALSE} -->
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         ?c ~: {TRUE, FALSE} -->
          ?\<Theta> ; ?\<B> ; (?x, ?b, TRUE) #\<^sub>\<Gamma>
                              ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==>  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                      ?c) #\<^sub>\<Gamma>
                     ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_app
                     (template_app (template_hole 8, template_hole 6),
                      template_hole 5)))),
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 9, template_var 0),
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_app
                       (template_app (template_hole 8, template_hole 6),
                        template_hole 5))))),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_app
                         (template_app (template_hole 0, template_var 1),
                          template_hole 7))),
                    template_var 3)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))),
               template_var 3))
           ))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s1.0 : b_of
                        ?\<tau> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?\<tau> ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; (?x, b_of ?\<tau>,
   TRUE) #\<^sub>\<Gamma>
  ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s2.0 : ?b ;
         atom
          ?x \<sharp> (?\<Phi>, ?\<Theta>, ?\<B>, ?\<Gamma>, ?\<Delta>,
                       ?s1.0, ?b, ?\<tau>) |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f LET ?x : ?\<tau> = ?s1.0 IN ?s2.0 : ?b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 9),
                  template_var 7),
                template_var 6),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 9),
                        template_var 8),
                      template_var 7),
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app (template_hole 12, template_var 2),
                          template_app
                           (template_app
                             (template_hole 11,
                              template_app
                               (template_hole 15, template_var 3)),
                            template_hole 10))),
                      template_var 6)),
                  template_var 5),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 8),
                template_app
                 (template_app (template_hole 6, template_var 9),
                  template_app
                   (template_app (template_hole 5, template_var 7),
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_app
                       (template_app (template_hole 3, template_var 5),
                        template_app
                         (template_app (template_hole 2, template_var 4),
                          template_app
                           (template_app (template_hole 1, template_var 0),
                            template_var 3))))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 16, template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 4),
                 template_var 1)),
             template_var 0)
           ))),
    ("WellformedL.freshers",
     "?x \<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l) =
      (?x \<sharp> ?a &
       ?x \<sharp> ?b &
       ?x \<sharp> ?c &
       ?x \<sharp> ?d &
       ?x \<sharp> ?e &
       ?x \<sharp> ?f &
       ?x \<sharp> ?g &
       ?x \<sharp> ?h &
       ?x \<sharp> ?i & ?x \<sharp> ?j & ?x \<sharp> ?k & ?x \<sharp> ?l)",
     template_equation
      (template_app
        (template_app (template_hole 24, template_var 12),
         template_app
          (template_app (template_hole 23, template_var 11),
           template_app
            (template_app (template_hole 22, template_var 10),
             template_app
              (template_app (template_hole 21, template_var 9),
               template_app
                (template_app (template_hole 20, template_var 8),
                 template_app
                  (template_app (template_hole 19, template_var 7),
                   template_app
                    (template_app (template_hole 18, template_var 6),
                     template_app
                      (template_app (template_hole 17, template_var 5),
                       template_app
                        (template_app (template_hole 16, template_var 4),
                         template_app
                          (template_app (template_hole 15, template_var 3),
                           template_app
                            (template_app
                              (template_hole 14, template_var 2),
                             template_app
                              (template_app
                                (template_hole 13, template_var 1),
                               template_var 0)))))))))))),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 12),
             template_var 11)),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 10, template_var 12),
               template_var 10)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 9, template_var 12),
                 template_var 9)),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 8, template_var 12),
                   template_var 8)),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 7, template_var 12),
                     template_var 7)),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 6, template_var 12),
                       template_var 6)),
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 5, template_var 12),
                         template_var 5)),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app (template_hole 4, template_var 12),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_app
                              (template_hole 3, template_var 12),
                             template_var 3)),
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_app
                                (template_hole 2, template_var 12),
                               template_var 2)),
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_app
                                  (template_hole 1, template_var 12),
                                 template_var 1)),
                             template_app
                              (template_app
                                (template_hole 0, template_var 12),
                               template_var 0)))))))))))))),
    ("WellformedL.wfT_eq_imp",
     "[| base_for_lit ?ll = B_bool;
          ?\<Theta> ; {||} ; GNil   \<turnstile>\<^sub>w\<^sub>f ?\<tau>' ;
          ?\<Theta> ; {||}  \<turnstile>\<^sub>w\<^sub>f (?x,
                    b_of \<lbrace> ?z' : B_bool  | TRUE \<rbrace>,
                    c_of \<lbrace> ?z' : B_bool  | TRUE \<rbrace>
                     ?x) #\<^sub>\<Gamma>
                   GNil ;
         atom ?zz \<sharp> ?x |]
      ==>  ?\<Theta> ; {||} ; (?x,
                               b_of
                                \<lbrace> ?z' : B_bool  | TRUE \<rbrace>,
                               c_of \<lbrace> ?z' : B_bool  | TRUE \<rbrace>
                                ?x) #\<^sub>\<Gamma>
                              GNil   \<turnstile>\<^sub>w\<^sub>f \<lbrace> ?zz : b_of
       ?\<tau>'  | [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ ?ll ]\<^sup>v ]\<^sup>c\<^sup>e   IMP  c_of
                           ?\<tau>' ?zz  \<rbrace> ",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 5),
          template_hole 18),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 4),
                  template_hole 16),
                template_hole 15),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 4),
                template_hole 16),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_var 2),
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 1),
                              template_hole 18),
                            template_hole 8))),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_app
                             (template_app
                               (template_hole 9, template_var 1),
                              template_hole 18),
                            template_hole 8)),
                        template_var 2)))),
                template_hole 15))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 17, template_var 4),
                 template_hole 16),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_var 2),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 9, template_var 1),
                               template_hole 18),
                             template_hole 8))),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 9, template_var 1),
                               template_hole 18),
                             template_hole 8)),
                         template_var 2)))),
                 template_hole 15)),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 0),
                 template_app (template_hole 10, template_var 3)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 2))),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 0, template_var 5)))),
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 0))))
           ))),
    ("WellformedL.wf_strong_elim",
     " ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f V_consp
                             ?tyid ?dc ?b ?v : ?b''  ==>
      EX bv dclist x b' c.
         ?b'' = B_app ?tyid ?b &
         AF_typedef_poly ?tyid bv dclist : set ?\<Theta> &
         (?dc, \<lbrace> x : b'  | c \<rbrace>) : set dclist &
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b  &
         atom bv \<sharp> (?\<Theta>, ?\<B>, ?\<Gamma>, ?b, ?v) &
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : b'[bv::=?b]\<^sub>b\<^sub>b  &
         atom bv \<sharp> ?tm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 25, template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 24, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 23, t_empty)))),
    ("WellformedL.wfTh_b_eq_iff",
     "[| (?dc, \<lbrace> ?x1.0 : ?b1.0  | ?c1.0 \<rbrace>) : set ?dclist1.0;
         (?dc, \<lbrace> ?x2.0 : ?b2.0  | ?c2.0 \<rbrace>) : set ?dclist2.0;
          ?P ; {|?bva1.0|}  ; GNil \<turnstile>\<^sub>w\<^sub>f ?dclist1.0 ;
          ?P ; {|?bva2.0|}  ; GNil \<turnstile>\<^sub>w\<^sub>f ?dclist2.0 ;
         [[atom ?bva1.0]]lst. ?dclist1.0 =
         [[atom ?bva2.0]]lst. ?dclist2.0 |]
      ==> [[atom
             ?bva1.0]]lst. (?dc,
                            \<lbrace> ?x1.0 : ?b1.0  | ?c1.0 \<rbrace>) =
          [[atom
             ?bva2.0]]lst. (?dc,
                            \<lbrace> ?x2.0 : ?b2.0  | ?c2.0 \<rbrace>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 11),
                  template_app
                   (template_app
                     (template_app (template_hole 12, template_var 10),
                      template_var 9),
                    template_var 8))),
              template_app (template_hole 11, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 11),
                  template_app
                   (template_app
                     (template_app (template_hole 12, template_var 6),
                      template_var 5),
                    template_var 4))),
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 2),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_hole 8)),
                template_hole 7),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 2),
                  template_app
                   (template_app (template_hole 9, template_var 0),
                    template_hole 8)),
                template_hole 7),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_hole 2)),
            template_var 7),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0)),
                template_hole 2)),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_hole 2)),
           template_app
            (template_app (template_hole 13, template_var 11),
             template_app
              (template_app
                (template_app (template_hole 12, template_var 10),
                 template_var 9),
               template_var 8))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_hole 2)),
           template_app
            (template_app (template_hole 13, template_var 11),
             template_app
              (template_app
                (template_app (template_hole 12, template_var 6),
                 template_var 5),
               template_var 4)))))),
    ("WellformedL.wf_intros",
     "[|  ?\<Theta>  \<turnstile>\<^sub>w\<^sub>f ?\<Phi> ;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?b' ;
         atom
          ?bv \<sharp> (?\<Phi>, ?\<Theta>, ?\<B>, ?\<Gamma>, ?\<Delta>,
                        ?b', ?v, (b_of ?\<tau>)[?bv::=?b']\<^sub>b);
         Some
          (AF_fundef ?f
            (AF_fun_typ_some ?bv (AF_fun_typ ?x ?b ?c ?\<tau> ?s))) =
         lookup_fun ?\<Phi> ?f;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b[?bv::=?b']\<^sub>b  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f [?f [ ?b' ]  ?v ]\<^sup>e : (b_of
        ?\<tau>)[?bv::=?b']\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 13),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 21, template_var 13),
                  template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 13),
                template_var 11),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 7)),
              template_app
               (template_app (template_hole 17, template_var 12),
                template_app
                 (template_app (template_hole 16, template_var 13),
                  template_app
                   (template_app (template_hole 15, template_var 11),
                    template_app
                     (template_app (template_hole 14, template_var 10),
                      template_app
                       (template_app (template_hole 13, template_var 9),
                        template_app
                         (template_app (template_hole 12, template_var 8),
                          template_app
                           (template_app (template_hole 11, template_var 6),
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_hole 9, template_var 5)),
                                template_var 7),
                              template_var 8)))))))))
            ),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 2),
                      template_var 1),
                    template_var 5),
                  template_var 0)))),
          template_app
           (template_app (template_hole 3, template_var 12),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 13),
                    template_var 11),
                  template_var 10),
                template_var 6),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 7),
                template_var 8))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 13),
                       template_var 12),
                     template_var 11),
                   template_var 10),
                 template_var 9),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 8),
                 template_var 6)),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 5)),
                 template_var 7),
               template_var 8))
           ))),
    ("WellformedL.wfS_flip_eq",
     "[| [[atom ?x1.0]]lst. ?s1.0 = [[atom ?x2.0]]lst. ?s2.0;
         [[atom ?x1.0]]lst. ?t1.0 = [[atom ?x2.0]]lst. ?t2.0;
         [[atom ?x1.0]]lst. ?c1.0 = [[atom ?x2.0]]lst. ?c2.0;
         atom ?x2.0 \<sharp> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?\<Delta> ;
          ?\<Theta> ; ?\<Phi> ; ?\<B> ; (?x1.0, ?b, ?c1.0) #\<^sub>\<Gamma>
  ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s1.0 : b_of ?t1.0  |]
      ==>  ?\<Theta> ; ?\<Phi> ; ?\<B> ; (?x2.0, ?b, ?c2.0) #\<^sub>\<Gamma>
   ?\<Gamma> ; ?\<Delta> \<turnstile>\<^sub>w\<^sub>f ?s2.0 : b_of ?t2.0 ",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 13)),
                template_hole 11)),
            template_var 12),
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 11)),
                template_hole 11)),
            template_var 10)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 13)),
                template_hole 11)),
            template_var 9),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 11)),
                template_hole 11)),
            template_var 8)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 13)),
                template_hole 11)),
            template_var 7),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 11)),
                template_hole 11)),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 12, template_var 11)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 1),
                      template_var 3),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 13),
                          template_app
                           (template_app (template_hole 1, template_var 0),
                            template_var 7))),
                      template_var 5)),
                  template_var 2),
                template_var 12),
              template_app (template_hole 0, template_var 9))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 4),
                       template_var 1),
                     template_var 3),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 11),
                         template_app
                          (template_app (template_hole 1, template_var 0),
                           template_var 6))),
                     template_var 5)),
                 template_var 2),
               template_var 10),
             template_app (template_hole 0, template_var 8))
           )))]:
   (string * thm * template) list
### theory "Draft.WellformedLTemplates"
### 1.052s elapsed time, 1.171s cpu time, 0.000s GC time
val it = (): unit
