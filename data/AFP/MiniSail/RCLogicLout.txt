Loading theory "Draft.Nominal-Utils" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL" via "Draft.RCLogic" via "Draft.Wellformed" via "Draft.IVSubst" via "Draft.Syntax")
Loading theory "Draft.Templates" (required by "Draft.RCLogicLTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RCLogicLTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.115s cpu time, 0.087s GC time
### theory "Draft.Nominal-Utils"
### 0.649s elapsed time, 1.318s cpu time, 0.087s GC time
Loading theory "Draft.Syntax" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL" via "Draft.RCLogic" via "Draft.Wellformed" via "Draft.IVSubst")
### Ambiguous input (line 265 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.not_member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" z)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" l))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 290 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit) ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 475 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" v)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" v))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 499 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 552 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" e)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" e))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 592 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" z) ("_position" d))
###         ("_position" c)))
###     ("\<^const>Set.union"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" supp) ("_position" c))
###         ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 601 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 606 of "$AFP/MiniSail/Syntax.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))
###         ("_position" e)))
###     ("\<^const>Syntax.T_refined_type" ("_position" z') ("_position" b')
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" z')))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  \<Delta> :: pt
  permute_\<Delta> == permute :: perm => \<Delta> => \<Delta>
consts
  permute_\<Delta> :: "perm => \<Delta> => \<Delta>"
instantiation
  \<Gamma> :: pt
  permute_\<Gamma> == permute :: perm => \<Gamma> => \<Gamma>
consts
  permute_\<Gamma> :: "perm => \<Gamma> => \<Gamma>"
### Ambiguous input (line 782 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("_applC" ("_position" GCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" toSet) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 790 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^const>List.append" ("_position" g1) ("_position" g2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" append_g)
###       ("_cargs"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###           ("_position" g1))
###         ("_position" g2)))
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" xbc)
###       ("\<^fixed>append_g" ("_position" g1) ("_position" g2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" GNil) ("_position" G))
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### GNil @ ?y == ?y
### Ambiguous input (line 816 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" G1) ("_position" G2)))
###     ("\<^const>Set.union" ("_applC" ("_position" toSet) ("_position" G1))
###       ("_applC" ("_position" toSet) ("_position" G2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 834 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>List.append" ("_position" \<Gamma>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 838 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>Set.union"
###       ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" atom_dom) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 857 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 862 of "$AFP/MiniSail/Syntax.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys))
###       ("_position" zs))
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 867 of "$AFP/MiniSail/Syntax.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.append_g" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>List.append"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g" ("_position" xs)
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" ys)))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>List.append" ("_position" xs)
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###           ("_position" GNil)))
###       ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 919 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" xs))
###       ("\<^const>Nominal2_Base.pt_class.fresh" ("_position" a)
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 932 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.append_g" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>List.append" ("_position" xs) ("_position" ys)))
###     ("\<^const>Set.union" ("_applC" ("_position" supp) ("_position" xs))
###       ("_applC" ("_position" supp) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 937 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b0)
###               ("_tuple_arg" ("_position" c0))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Set.not_member"
###       ("_applC" ("_position" atom) ("_position" x'))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union"
###             ("\<^const>Set.union"
###               ("_applC" ("_position" supp) ("_position" \<Gamma>'))
###               ("_applC" ("_position" supp) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" b0)))
###           ("_applC" ("_position" supp) ("_position" c0)))
###         ("_applC" ("_position" supp) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 948 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" x))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 964 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 965 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1086 of "$AFP/MiniSail/Syntax.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("_Finset" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" setD)
###       ("_applC" ("_position" DCons)
###         ("_cargs" ("_position" xbc) ("_position" G))))
###     ("\<^const>Set.union" ("\<^const>Syntax.AS_final" ("_position" xbc))
###       ("_applC" ("_position" setD) ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "split"
  Proving monotonicity ...
### theory "Draft.Syntax"
### 24.741s elapsed time, 26.319s cpu time, 2.556s GC time
Loading theory "Draft.BTVSubst" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL" via "Draft.RCLogic" via "Draft.Wellformed")
Loading theory "Draft.IVSubst" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL" via "Draft.RCLogic" via "Draft.Wellformed")
### Ambiguous input (line 20 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" c))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" c))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subst_v"
###         ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###           ("\<^const>Syntax.V_var" ("_position" x)))
###         ("_position" x) ("_position" b))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subst_v"
###         ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###           ("\<^const>Syntax.V_lit" ("_position" x)))
###         ("_position" x) ("_position" b))
###       ("\<^fixed>subst_v" ("_position" c) ("_position" z)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class has_subst_b = fs +
  fixes subst_b :: "'a => bv => b => 'a"
  assumes
    "fresh_subst_if":
      "!!j t i x.
          j \<sharp> t[i::=x]\<^sub>b =
          (atom i \<sharp> t & j \<sharp> t |
           j \<sharp> x & (j \<sharp> t | j = atom i))"
    and
    "forget_subst":
      "!!a tm x. atom a \<sharp> tm ==> tm[a::=x]\<^sub>b = tm"
    and "subst_id": "!!tm a. tm[a::=B_var a]\<^sub>b = tm"
    and
    "eqvt":
      "!!p t1 x1 v.
          p \<bullet> t1[x1::=v]\<^sub>b =
          (p \<bullet> t1)[p \<bullet> x1::=p \<bullet> v]\<^sub>b"
    and
    "flip_subst":
      "!!bv c z.
          atom bv \<sharp> c ==>
          (bv \<leftrightarrow> z) \<bullet> c = c[z::=B_var bv]\<^sub>b"
    and
    "flip_subst_subst":
      "!!bv c z v.
          atom bv \<sharp> c ==>
          ((bv \<leftrightarrow> z) \<bullet> c)[bv::=v]\<^sub>b =
          c[z::=v]\<^sub>b"
class has_subst_v = fs +
  fixes subst_v :: "'a => x => v => 'a"
  assumes
    "fresh_subst_v_if":
      "!!y a x v.
          y \<sharp> a[x::=v]\<^sub>v =
          (atom x \<sharp> a & y \<sharp> a |
           y \<sharp> v & (y \<sharp> a | y = atom x))"
    and
    "forget_subst_v": "!!x a v. atom x \<sharp> a ==> a[x::=v]\<^sub>v = a"
    and "subst_v_id": "!!a x. a[x::=[ x ]\<^sup>v]\<^sub>v = a"
    and
    "eqvt":
      "!!p a x v.
          p \<bullet> a[x::=v]\<^sub>v =
          (p \<bullet> a)[p \<bullet> x::=p \<bullet> v]\<^sub>v"
    and
    "flip_subst_v":
      "!!x c z.
          atom x \<sharp> c ==>
          (x \<leftrightarrow> z) \<bullet> c =
          c[z::=[ x ]\<^sup>v]\<^sub>v"
    and
    "subst_v_simple_commute":
      "!!x c z b.
          atom x \<sharp> c ==>
          c[z::=[ x ]\<^sup>v]\<^sub>v[x::=b]\<^sub>v = c[z::=b]\<^sub>v"
### Ambiguous input (line 28 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_lit" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_lit" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_var" ("_position" x1)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x1)))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c2)
###       ("_position" z2) ("\<^const>Syntax.V_var" ("_position" x1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_var" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_var" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_lit" ("_position" x')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" x'))
###       ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1)
###         ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x))))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c1')
###       ("_position" z1') ("\<^const>Syntax.V_lit" ("_position" x')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  b :: has_subst_b
  subst_b_b == subst_b :: b => bv => b => b
instantiation
  v :: has_subst_v
  subst_v_v == subst_v :: v => x => v => v
instantiation
  v :: has_subst_b
  subst_b_v == subst_b :: v => bv => b => v
### Ambiguous input (line 209 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_ev_abbrev"
###       ("_applC" ("_position" AE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("_applC" ("_position" AE_val)
###       ("_applC" ("_position" V_var) ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_ev_abbrev"
###       ("_applC" ("_position" AE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("_applC" ("_position" AE_val)
###       ("_applC" ("_position" V_var) ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  e :: has_subst_v
  subst_v_e == subst_v :: e => x => v => e
instantiation
  ce :: has_subst_b
  subst_b_ce == subst_b :: ce => bv => b => ce
### Ambiguous input (line 330 of "$AFP/MiniSail/IVSubst.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_var" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cev_abbrev"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("_position" x) ("\<^const>Syntax.V_lit" ("_position" z)))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" z)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  ce :: has_subst_v
  subst_v_ce == subst_v :: ce => x => v => ce
### Ambiguous input (line 388 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Syntax.C_eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Pure.eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Syntax.C_eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subst_cv)
###       ("_cargs" ("\<^const>Pure.eq" ("_position" e1) ("_position" e2))
###         ("_cargs" ("_position" x) ("_position" v))))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" subst_cev)
###         ("_cargs" ("_position" e2)
###           ("_cargs" ("_position" x) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  c :: has_subst_b
  subst_b_c == subst_b :: c => bv => b => c
instantiation
  \<tau> :: has_subst_b
  subst_b_\<tau> == subst_b :: \<tau> => bv => b => \<tau>
instantiation
  c :: has_subst_v
  subst_v_c == subst_v :: c => x => v => c
### Ambiguous input (line 470 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_var" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_var" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_lit" ("_position" z1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" z1) ("_position" z1'))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" z1))))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###       ("\<^const>Syntax.V_lit" ("_position" z1')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x)))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x)))
###     ("\<^const>Pure.eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_var" ("_position" x)))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_cv_abbrev"
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z1)))
###         ("_position" e1))
###       ("_position" z1) ("\<^const>Syntax.V_lit" ("_position" x)))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 558 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" xa))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" xa))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 559 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" xa))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("\<^const>Syntax.V_var" ("_position" x))))))
###         ("_position" \<Gamma>)))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" xa))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.permute"
###       ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" xa))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("\<^const>Syntax.V_lit" ("_position" x))))))
###         ("_position" \<Gamma>)))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" xa))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  e :: has_subst_b
  subst_b_e == subst_b :: e => bv => b => e
instantiation
  \<tau> :: has_subst_v
  subst_v_\<tau> == subst_v :: \<tau> => x => v => \<tau>
### Ambiguous input (line 711 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" c_of)
###         ("_cargs"
###           ("_applC" ("_position" T_refined_type)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b) ("_position" c))))
###           ("_position" x)))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" c_of)
###         ("_cargs"
###           ("_applC" ("_position" T_refined_type)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b) ("_position" c))))
###           ("_position" x)))
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 827 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))
###     ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))
###     ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 854 of "$AFP/MiniSail/IVSubst.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_var" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_imp"
###           ("\<^const>Syntax.C_eq"
###             ("_applC" ("_position" CE_val) ("_position" v'))
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l))))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" z') ("\<^const>Syntax.V_var" ("_position" z1)))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###               ("_position" x) ("_position" v)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l))))
###         ("\<^const>IVSubst.subst_cv_abbrev"
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###             ("_position" x) ("_position" v))
###           ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1)))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_lit" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v')
###             ("_position" x) ("_position" v)))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" l)))
###           ("\<^const>IVSubst.subst_cv_abbrev"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v))
###             ("_position" z') ("\<^const>Syntax.V_lit" ("_position" z1))))))
###     ("\<^const>IVSubst.subst_tv_abbrev"
###       ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v'))
###           ("\<^const>Syntax.C_imp"
###             ("_applC" ("_position" CE_val)
###               ("_applC" ("_position" V_lit) ("_position" l)))
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" z')
###               ("\<^const>Syntax.V_lit" ("_position" z1))))))
###       ("_position" x) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c1))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  s :: has_subst_b
  subst_b_s == subst_b :: s => bv => b => s
instantiation
  fun_typ :: has_subst_b
  subst_b_fun_typ == subst_b :: fun_typ => bv => b => fun_typ
instantiation
  fun_typ_q :: has_subst_b
  subst_b_fun_typ_q == subst_b :: fun_typ_q => bv => b => fun_typ_q
instantiation
  \<Gamma> :: has_subst_b
  subst_b_\<Gamma> == subst_b :: \<Gamma> => bv => b => \<Gamma>
instantiation
  \<Delta> :: has_subst_b
  subst_b_\<Delta> == subst_b :: \<Delta> => bv => b => \<Delta>
### Ambiguous input (line 1073 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst_branchv_abbrev" ("_position" s) ("_position" x)
###     ("_position" v))
###   ("_applC" ("_position" subst_branchv)
###     ("_cargs" ("_position" s) ("_cargs" ("_position" x) ("_position" v)))))
### ("\<^const>Pure.eq"
###   ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###     ("_position" v))
###   ("_applC" ("_position" subst_branchv)
###     ("_cargs" ("_position" s) ("_cargs" ("_position" x) ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1160 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" sa)
###       ("_position" xa) ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" sa)
###       ("_position" xa) ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" sa) ("_position" xa)
###       ("_position" v'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###       ("_position" v'))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" sa) ("_position" xa)
###       ("_position" v'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BTVSubst"
### 3.392s elapsed time, 8.221s cpu time, 3.219s GC time
### Ambiguous input (line 1177 of "$AFP/MiniSail/IVSubst.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_var" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_var" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                 ("_position" za)
###                 ("\<^const>Syntax.V_var" ("_position" z1))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_lit" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                   ("_position" za)
###                   ("\<^const>Syntax.V_lit" ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" z1'))
###     ("_tuple" ("_position" v)
###       ("_tuple_args" ("_position" ca)
###         ("_tuple_args"
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" ll))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###                 ("_position" za)
###                 ("\<^const>Syntax.V_lit" ("_position" z1))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1179 of "$AFP/MiniSail/IVSubst.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_lit" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za)
###             ("\<^const>Syntax.V_lit" ("_position" z1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val) ("_position" v))
###         ("\<^const>Syntax.C_imp"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll)))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###             ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1'))))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.T_refined_type" ("_position" z1') ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1')))))
###     ("\<^const>Syntax.T_refined_type" ("_position" z1) ("_position" ba)
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val) ("_position" v))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_lit) ("_position" ll))))
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" ca)
###           ("_position" za) ("\<^const>Syntax.V_var" ("_position" z1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1200 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###         ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" z)
###         ("\<^const>Syntax.V_var" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###         ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" s))
###       ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" z)
###         ("\<^const>Syntax.V_lit" ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" cs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" cs))
###       ("_applC" ("_position" subst_branchv)
###         ("_cargs" ("_position" cs)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_lit" ("_position" x))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" cs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" cs))
###       ("_applC" ("_position" subst_branchv)
###         ("_cargs" ("_position" cs)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_var" ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1202 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" css)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" css))
###       ("_applC" ("_position" subst_branchlv)
###         ("_cargs" ("_position" css)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_lit" ("_position" x))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" x)) ("_position" css)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Nominal2_Base.pt_class.permute"
###         ("\<^const>Nominal2_Base.flip" ("_position" x) ("_position" z))
###         ("_position" css))
###       ("_applC" ("_position" subst_branchlv)
###         ("_cargs" ("_position" css)
###           ("_cargs" ("_position" z)
###             ("\<^const>Syntax.V_var" ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  s :: has_subst_v
  subst_v_s == subst_v :: s => x => v => s
### Ambiguous input (line 1253 of "$AFP/MiniSail/IVSubst.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" subst_ft_v)
###         ("_cargs"
###           ("_applC" ("_position" AF_fun_typ)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" t)
###                     ("_constrain" ("_position" s) ("_type_name" s)))))))
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" z)
###           ("_cargs" ("_position" b)
###             ("_cargs"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" x) ("_position" v))
###               ("_cargs"
###                 ("\<^const>IVSubst.subst_tv_abbrev" ("_position" t)
###                   ("_position" x) ("_position" v))
###                 ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###                   ("_position" x) ("_position" v))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" z))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" v)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" subst_ft_v)
###         ("_cargs"
###           ("_applC" ("_position" AF_fun_typ)
###             ("_cargs" ("_position" z)
###               ("_cargs" ("_position" b)
###                 ("_cargs" ("_position" c)
###                   ("_cargs" ("_position" t)
###                     ("_constrain" ("_position" s) ("_type_name" s)))))))
###           ("_cargs" ("_position" x) ("_position" v))))
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" z)
###           ("_cargs" ("_position" b)
###             ("_cargs"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" x) ("_position" v))
###               ("_cargs"
###                 ("\<^const>IVSubst.subst_tv_abbrev" ("_position" t)
###                   ("_position" x) ("_position" v))
###                 ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s)
###                   ("_position" x) ("_position" v))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun_typ :: has_subst_v
  subst_v_fun_typ == subst_v :: fun_typ => x => v => fun_typ
instantiation
  fun_typ_q :: has_subst_v
  subst_v_fun_typ_q == subst_v :: fun_typ_q => x => v => fun_typ_q
### Ambiguous input (line 1443 of "$AFP/MiniSail/IVSubst.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>List.append"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>List.append"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>Syntax.append_g"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>'))
###         ("_position" x) ("_position" v))
###       ("_position" G))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c')
###               ("_position" x) ("_position" v)))))
###       ("\<^const>Syntax.append_g"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###           ("_position" x) ("_position" v))
###         ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.IVSubst"
### 3.622s elapsed time, 8.508s cpu time, 3.253s GC time
Loading theory "Draft.Wellformed" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL" via "Draft.RCLogic")
Loading theory "Draft.SyntaxL" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL" via "Draft.WellformedL")
### Ambiguous input (line 19 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" z)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" x))))))
###     ("\<^const>Set.union"
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" supp) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("\<^const>Syntax.C_eq"
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" z)))
###           ("_applC" ("_position" CE_val)
###             ("_applC" ("_position" V_var) ("_position" x))))))
###     ("\<^const>Set.union"
###       ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###       ("_applC" ("_position" supp) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 131 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>Syntax.append_g" ("_position" xs1)
###             ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>List.append" ("_position" xs1) ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>Syntax.append_g" ("_position" xs1)
###             ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs1))
###         ("_position" ys)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" xs)
###           ("\<^const>List.append" ("_position" xs1) ("_position" zs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" toSet) ("_position" xs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ys) ("_position" zs))
###       ("\<^const>HOL.eq" ("_position" xs)
###         ("\<^const>List.append" ("_position" ys)
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" zs)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" toSet) ("_position" xs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ys) ("_position" zs))
###       ("\<^const>HOL.eq" ("_position" xs)
###         ("\<^const>Syntax.append_g" ("_position" ys)
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" zs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" G) ("_position" G'))
###     ("\<^const>HOL.eq" ("_position" \<Gamma>)
###       ("\<^const>List.append" ("_position" G')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" G))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" G) ("_position" G'))
###     ("\<^const>HOL.eq" ("_position" \<Gamma>)
###       ("\<^const>Syntax.append_g" ("_position" G')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" G))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 160 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("\<^const>Syntax.AS_final"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("\<^const>Syntax.AS_final"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("_Finset"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###           ("_Finset"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_Ball"
###       ("_pattern" ("_position" x')
###         ("_patterns" ("_position" b') ("_position" c')))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x')
###           ("_cargs" ("_position" b') ("_position" c')))))
###     ("\<^const>HOL.conj"
###       ("_Ball"
###         ("_pattern" ("_position" x')
###           ("_patterns" ("_position" b') ("_position" c')))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x')
###             ("_cargs" ("_position" b') ("_position" c')))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("_Ball"
###           ("_pattern" ("_position" x')
###             ("_patterns" ("_position" b') ("_position" c')))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" x')
###               ("_cargs" ("_position" b') ("_position" c')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_Ball"
###       ("_pattern" ("_position" x')
###         ("_patterns" ("_position" b') ("_position" c')))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x')
###           ("_cargs" ("_position" b') ("_position" c')))))
###     ("\<^const>HOL.conj"
###       ("_Ball"
###         ("_pattern" ("_position" x')
###           ("_patterns" ("_position" b') ("_position" c')))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>'))
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x')
###             ("_cargs" ("_position" b') ("_position" c')))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" P)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b) ("_position" c))))
###         ("_Ball"
###           ("_pattern" ("_position" x')
###             ("_patterns" ("_position" b') ("_position" c')))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" x')
###               ("_cargs" ("_position" b') ("_position" c')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b') ("_tuple_arg" ("_position" c'))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/SyntaxL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" GNil)
###     ("\<^const>List.append" ("_position" G1) ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" GNil)
###     ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/MiniSail/SyntaxL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>List.append" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>List.append" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>List.append" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>Syntax.append_g" ("_position" ys')
###               ("_position" zs))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x) ("_position" xs))
###       ("\<^const>Syntax.append_g" ("_position" ys) ("_position" zs)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" ys) ("_position" GNil))
###         ("\<^const>HOL.eq"
###           ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###             ("_position" xs))
###           ("_position" zs)))
###       ("\<^const>HOL.Ex_binder" ("_position" ys')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("\<^const>Syntax.\<Gamma>.GCons" ("_position" x)
###               ("_position" ys'))
###             ("_position" ys))
###           ("\<^const>HOL.eq" ("_position" xs)
###             ("\<^const>Syntax.append_g" ("_position" ys')
###               ("_position" zs))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SyntaxL"
### 0.217s elapsed time, 0.461s cpu time, 0.050s GC time
### Ambiguous input (line 31 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_int))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_int))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bool))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bool))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_unit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_unit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bitvec))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" B_bitvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/MiniSail/Wellformed.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Gamma>)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfB)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/MiniSail/Wellformed.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.not_member"
###           ("_applC" ("_position" name_of_type) ("_position" tdef))
###           ("\<^const>Set.image" ("_position" name_of_type)
###             ("_applC" ("_position" set) ("_position" \<Theta>))))
###         ("\<^fixed>wfTh" ("_position" \<Theta>)) ("_position" \<Theta>)
###         ("_position" tdef))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.not_member"
###           ("_applC" ("_position" name_of_type) ("_position" tdef))
###           ("\<^const>Set.image" ("_position" name_of_type)
###             ("_applC" ("_position" set) ("_position" \<Theta>))))
###         ("\<^fixed>wfTh" ("_position" \<Theta>)) ("_position" \<Theta>)
###         ("_position" tdef))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.not_member"
###           ("_applC" ("_position" name_of_type) ("_position" tdef))
###           ("\<^const>Set.image" ("_position" name_of_type)
###             ("_applC" ("_position" set) ("_position" \<Theta>))))
###         ("\<^fixed>wfTh" ("_position" \<Theta>)) ("_position" \<Theta>)
###         ("_position" tdef))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("\<^fixed>wfTh" ("_position" \<Theta>))
###           ("_position" \<Theta>) ("_position" tdef)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("\<^fixed>wfTh" ("_position" \<Theta>))
###           ("_position" \<Theta>) ("_position" tdef)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTh"
###           ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<Theta>)
###             ("_position" tdef))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTh"
###           ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<Theta>)
###             ("_position" tdef))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" name_of_type) ("_position" tdef))
###         ("\<^const>Set.image" ("_position" name_of_type)
###           ("_applC" ("_position" set) ("_position" \<Theta>)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Theta>) ("_position" tdef))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTh"
###       ("\<^const>List.list.Cons" ("_position" tdef)
###         ("_position" \<Theta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###         ("_position" GNil) ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###         ("_position" GNil) ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###         ("_position" GNil) ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("\<^const>FSet.fempty") ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("\<^const>FSet.fempty") ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("\<^const>FSet.fempty"))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" GNil) ("_position" lst))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef)
###         ("_cargs" ("_position" s) ("_position" lst))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>)
###         ("_insert_fset" ("_position" bv)) ("_position" GNil)
###         ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>)
###         ("_insert_fset" ("_position" bv)) ("_position" GNil)
###         ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>)
###         ("_insert_fset" ("_position" bv)) ("_position" GNil)
###         ("_position" lst))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_insert_fset" ("_position" bv)) ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_insert_fset" ("_position" bv)) ("_position" GNil)
###           ("_position" lst)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_insert_fset" ("_position" bv)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" GNil) ("_position" lst))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTD" ("_position" \<Theta>)
###       ("_applC" ("_position" AF_typedef_poly)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" bv) ("_position" lst)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/MiniSail/Wellformed.thy") produces 54 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b1))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b1))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b1))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTs"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b1))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^fixed>wfC" ("_position" b1) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" s) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_id) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" s) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_id) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/MiniSail/Wellformed.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_constrain" ("\<^const>List.list.Nil")
###         ("_tapp"
###           ("\<^type>Product_Type.prod" ("_type_name" string)
###             ("_type_name" \<tau>))
###           ("_type_name" list))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("_constrain"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("\<^const>List.list.Nil"))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfTD" ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("_position" b')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" v) ("_position" b'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" v) ("_position" b'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef)
###           ("_cargs" ("_position" s) ("_position" dclist)))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" B_id) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/MiniSail/Wellformed.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("\<^fixed>wfTh" ("_position" \<Theta>))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("\<^fixed>wfTh" ("_position" \<Theta>))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("\<^fixed>wfTh" ("_position" \<Theta>))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_applC" ("_position" AF_typedef_poly)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" bv) ("_position" dclist))))
###               ("_applC" ("_position" set) ("_position" \<Theta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTh"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef_poly)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" bv) ("_position" dclist))))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" lookup)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_applC" ("_position" lookup)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/MiniSail/Wellformed.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###         ("_applC" ("_position" base_for_lit) ("_position" l))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###       ("_applC" ("_position" base_for_lit) ("_position" l)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" z)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" z)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" z)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_tuple" ("_position" \<Theta>)
###             ("_tuple_args" ("_position" \<B>)
###               ("_tuple_arg" ("_position" \<Gamma>)))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" z)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" C_true))))
###             ("_position" \<Gamma>))
###           ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_tuple" ("_position" \<Theta>)
###           ("_tuple_args" ("_position" \<B>)
###             ("_tuple_arg" ("_position" \<Gamma>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" b)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" z)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/MiniSail/Wellformed.thy") produces 198 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" dc)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" set) ("_position" ts)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_constrain"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" ts))
###               ("_tapp"
###                 ("\<^type>Product_Type.prod" ("_type_name" string)
###                   ("_type_name" \<tau>))
###                 ("_type_name" list))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" dc)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" set) ("_position" ts)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_constrain"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" ts))
###               ("_tapp"
###                 ("\<^type>Product_Type.prod" ("_type_name" string)
###                   ("_type_name" \<tau>))
###                 ("_type_name" list))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" dc)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" set) ("_position" ts)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_constrain"
###                 ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" ts))
###                 ("_tapp"
###                   ("\<^type>Product_Type.prod" ("_type_name" string)
###                     ("_type_name" \<tau>))
###                   ("_type_name" list)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<tau>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" dc)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" set) ("_position" ts)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" ts))
###             ("_tapp"
###               ("\<^type>Product_Type.prod" ("_type_name" string)
###                 ("_type_name" \<tau>))
###               ("_type_name" list)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" dc)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" set) ("_position" ts)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_constrain"
###               ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" ts))
###               ("_tapp"
###                 ("\<^type>Product_Type.prod" ("_type_name" string)
###                   ("_type_name" \<tau>))
###                 ("_type_name" list))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/MiniSail/Wellformed.thy") produces 192 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" e2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" e2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" e2) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" e1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" e2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_true))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" C_false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/MiniSail/Wellformed.thy") produces 240 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTs"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" b)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" bv))
###               ("_tuple" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" v))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" b)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" bv))
###               ("_tuple" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" v))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfTD" ("_position" \<B>) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_tuple" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" b)
###                         ("_tuple_arg" ("_position" v))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>)
###                   ("\<^const>Set.member" ("_position" v)
###                     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                       ("_position" bv) ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfTs"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" dc)
###               ("_tuple_arg"
###                 ("\<^const>Syntax.T_refined_type" ("_position" x)
###                   ("_position" b') ("_position" c))))
###             ("_applC" ("_position" set) ("_position" dclist)))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Theta>)
###               ("_tuple_args" ("_position" \<B>)
###                 ("_tuple_args" ("_position" \<Gamma>)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" v))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                   ("_position" bv) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" bv) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" \<Theta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x)
###                 ("_position" b') ("_position" c))))
###           ("_applC" ("_position" set) ("_position" dclist))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" b)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" bv))
###               ("_tuple" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" v))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" B_app)
###           ("_cargs" ("_position" s) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/MiniSail/Wellformed.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_not) ("_position" c1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/MiniSail/Wellformed.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>) ("_position" c1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" c1)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" c2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" GNil))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^fixed>wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" GNil))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/MiniSail/Wellformed.thy") produces 72 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<B>) ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" c)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" wfB)
###                   ("_cargs" ("_position" \<Theta>)
###                     ("_cargs" ("_position" \<B>) ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs"
###         ("\<^const>Set.not_member" ("_position" c)
###           ("_Finset"
###             ("_args" ("\<^const>Syntax.C_true")
###               ("\<^const>Syntax.C_false"))))
###         ("_position" \<Theta>) ("_position" \<B>) ("_position" \<Gamma>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" c)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wfB)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>) ("_position" b)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member" ("_position" c)
###         ("_Finset"
###           ("_args" ("\<^const>Syntax.C_true")
###             ("\<^const>Syntax.C_false")))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" c)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" wfB)
###                 ("_cargs" ("_position" \<Theta>)
###                   ("_cargs" ("_position" \<B>) ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 80 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Plus)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_int)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_int)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_int)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" B_int))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" b)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2) ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" Eq)
###             ("_cargs" ("_position" v1) ("_position" v2))))
###         ("_position" B_bool)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_fst) ("_position" v1))
###         ("_position" b1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_applC" ("_position" B_pair)
###               ("_cargs" ("_position" b1) ("_position" b2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1)
###         ("_applC" ("_position" B_pair)
###           ("_cargs" ("_position" b1) ("_position" b2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1)
###           ("_applC" ("_position" B_pair)
###             ("_cargs" ("_position" b1) ("_position" b2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_snd) ("_position" v1))
###         ("_position" b2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 108 of "$AFP/MiniSail/Wellformed.thy") produces 320 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v2)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v2)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_concat)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" B_bitvec)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v1)
###             ("_position" B_bitvec))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfV" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfCE" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" v1) ("_position" B_bitvec))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v1) ("_position" B_bitvec)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" CE_len) ("_position" v1))
###         ("_position" B_int)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfV", "wfC", "wfG", "wfT", "wfTs", "wfTh", "wfB", "wfCE", "wfTD"
  Proving monotonicity ...
### Ambiguous input (line 174 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" C_false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 177 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" C_not) ("_position" c1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" C_not) ("_position" c1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" C_not) ("_position" c1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_var) ("_position" x))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_var) ("_position" x))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_var) ("_position" x))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" V_lit) ("_position" l))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" V_lit) ("_position" l))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_pair)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_pair)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_pair)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_cons)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc) ("_position" v))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_cons)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc) ("_position" v))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_cons)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc) ("_position" v))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_cons)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" v))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_cons)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" v))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_consp)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc)
###           ("_cargs" ("_position" b) ("_position" v)))))
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" V_consp)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc)
###           ("_cargs" ("_position" b) ("_position" v)))))
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_fst) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_fst) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_fst) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_fst) ("_position" v1))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_fst) ("_position" v1))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_snd) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_snd) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_snd) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_snd) ("_position" v1))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_snd) ("_position" v1))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_len) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_len) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_len) ("_position" v1))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_len) ("_position" v1))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_len) ("_position" v1))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 197 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member"
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 201 of "$AFP/MiniSail/Wellformed.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_constrain" ("_position" \<tau>) ("_type_name" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_constrain" ("_position" \<tau>) ("_type_name" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("_constrain" ("_position" \<tau>) ("_type_name" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))
###     ("_type_name" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))
###     ("_type_name" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))
###     ("_type_name" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 208 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_false"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_false"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain" ("\<^const>List.list.Nil")
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain" ("\<^const>List.list.Nil")
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain" ("\<^const>List.list.Nil")
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" t) ("_position" ts))
###       ("_tapp"
###         ("\<^type>Product_Type.prod" ("_type_name" string)
###           ("_type_name" \<tau>))
###         ("_type_name" list)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_pair)
###       ("_cargs" ("_position" b1) ("_position" b2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_pair)
###       ("_cargs" ("_position" b1) ("_position" b2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 224 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_id) ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_id) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_app)
###       ("_cargs" ("_position" s) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_applC" ("_position" B_app)
###       ("_cargs" ("_position" s) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 466 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_insert_fset" ("_position" bv)) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_some)
###         ("_cargs" ("_position" bv) ("_position" ft))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 260 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/MiniSail/Wellformed.thy") produces 440 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_unit))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ" ("_position" \<Gamma>) ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_unit))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_unit))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_unit))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_unit))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_unit))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_seq" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/MiniSail/Wellformed.thy") produces 340 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef)
###               ("_cargs" ("_position" tid) ("_position" dclist)))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>)))))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                     ("_position" dclist)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFTQ"
###             ("_applC" ("_position" wfD)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_position" \<Delta>)))))
###             ("_position" \<Theta>) ("_position" \<Phi>)))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                       ("_position" dclist)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfB"
###             ("_applC" ("_position" wfD)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_position" \<Delta>)))))
###             ("_position" \<Theta>) ("_position" \<Phi>)))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                       ("_position" dclist)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfG"
###             ("_applC" ("_position" wfD)
###               ("_cargs" ("_position" \<Theta>)
###                 ("_cargs" ("_position" \<B>)
###                   ("_cargs" ("_position" \<Gamma>)
###                     ("_position" \<Delta>)))))
###             ("_position" \<Theta>) ("_position" \<Phi>)))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<Delta>) ("_position" tid)
###                       ("_position" dclist)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<Delta>)
###                         ("_position" tid) ("_position" dclist)
###                         ("\<^const>Set.member" ("_position" cs)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfV)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>)
###               ("_cargs" ("_position" v)
###                 ("_applC" ("_position" B_id) ("_position" tid))))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" AF_typedef)
###             ("_cargs" ("_position" tid) ("_position" dclist)))
###           ("_applC" ("_position" set) ("_position" \<Theta>))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" wfD)
###             ("_cargs" ("_position" \<Theta>)
###               ("_cargs" ("_position" \<B>)
###                 ("_cargs" ("_position" \<Gamma>) ("_position" \<Delta>))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###               ("_position" \<Phi>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<Delta>)
###                         ("_position" tid) ("_position" dclist)
###                         ("\<^const>Set.member" ("_position" cs)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_match)
###         ("_cargs" ("_position" v) ("_position" cs)))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 429 of "$AFP/MiniSail/Wellformed.thy") produces 140 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_arg" ("_position" \<tau>))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args"
###                     ("_applC" ("_position" b_of) ("_position" \<tau>))
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" x))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_arg" ("_position" \<tau>))))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args"
###                     ("_applC" ("_position" b_of) ("_position" \<tau>))
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" x))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_arg" ("_position" \<tau>))))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args"
###                     ("_applC" ("_position" b_of) ("_position" \<tau>))
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" x))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_arg" ("_position" \<tau>))))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_arg" ("_position" \<tau>))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args"
###                   ("_applC" ("_position" b_of) ("_position" \<tau>))
###                   ("_tuple_arg" ("_position" C_true))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_arg" ("_position" \<tau>))))))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" \<tau>)
###       ("\<^const>Syntax.AS_branch" ("_position" dc) ("_position" x)
###         ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 436 of "$AFP/MiniSail/Wellformed.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfFT" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfTs" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfT" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfC" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfFTQ" ("_position" dc) ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfB" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfG" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfPhi" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Wellformed.wfTD" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("_list" ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t))))
###       ("_applC" ("_position" AS_final) ("_position" cs)) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 441 of "$AFP/MiniSail/Wellformed.thy") produces 272 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfFT" ("_position" tid) ("_position" dc)
###                   ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfTs" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfT" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfC" ("_position" tid)
###                   ("_position" dc) ("_position" t)
###                   ("\<^const>Set.member" ("_position" cs) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^fixed>wfD" ("_position" \<Delta>)
###                             ("_position" tid) ("_position" dclist)
###                             ("\<^const>Set.member" ("_position" css)
###                               ("_position" b)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfFTQ" ("_position" dc) ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b))))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^fixed>wfD" ("_position" \<Delta>)
###                               ("_position" tid) ("_position" dclist)
###                               ("\<^const>Set.member" ("_position" css)
###                                 ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfB" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b))))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^fixed>wfD" ("_position" \<Delta>)
###                               ("_position" tid) ("_position" dclist)
###                               ("\<^const>Set.member" ("_position" css)
###                                 ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Wellformed.wfG" ("_position" dc)
###                     ("_position" t)
###                     ("\<^const>Set.member" ("_position" cs)
###                       ("_position" b))))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^fixed>wfD" ("_position" \<Delta>)
###                               ("_position" tid) ("_position" dclist)
###                               ("\<^const>Set.member" ("_position" css)
###                                 ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfPhi" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^fixed>wfD" ("_position" \<Delta>)
###                                 ("_position" tid) ("_position" dclist)
###                                 ("\<^const>Set.member" ("_position" css)
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Delta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" tid))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" dc))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Wellformed.wfTD" ("_position" t)
###                       ("\<^const>Set.member" ("_position" cs)
###                         ("_position" b))))
###                   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^fixed>wfD" ("_position" \<Delta>)
###                                 ("_position" tid) ("_position" dclist)
###                                 ("\<^const>Set.member" ("_position" css)
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid)
###       ("\<^const>List.list.Cons"
###         ("_tuple" ("_position" dc) ("_tuple_arg" ("_position" t)))
###         ("_position" dclist))
###       ("_applC" ("_position" AS_cons)
###         ("_cargs" ("_position" cs) ("_position" css)))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 447 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("\<^const>Syntax.\<Delta>.DNil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 449 of "$AFP/MiniSail/Wellformed.thy") produces 900 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_constrain"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_type_name" \<Delta>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<tau>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" u)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_constrain"
###           ("\<^fixed>wfFTQ" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>))
###           ("_type_name" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" u)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" setD) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_constrain"
###           ("\<^const>Wellformed.wfB" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_type_name" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" u)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" setD) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_constrain"
###           ("\<^const>Wellformed.wfG" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_type_name" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<tau>)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.not_member" ("_position" u)
###               ("\<^const>Set.image" ("_position" fst)
###                 ("_applC" ("_position" setD) ("_position" \<Delta>)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^fixed>wfPhi" ("_position" \<Gamma>) ("_position" \<Delta>))
###             ("_type_name" \<Delta>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.not_member" ("_position" u)
###                 ("\<^const>Set.image" ("_position" fst)
###                   ("_applC" ("_position" setD)
###                     ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_constrain"
###             ("\<^const>Wellformed.wfTD" ("_position" \<Gamma>)
###               ("_position" \<Delta>))
###             ("_type_name" \<Delta>)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.not_member" ("_position" u)
###                 ("\<^const>Set.image" ("_position" fst)
###                   ("_applC" ("_position" setD)
###                     ("_position" \<Delta>))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 456 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfPhi" ("_position" \<Theta>) ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 458 of "$AFP/MiniSail/Wellformed.thy") produces 210 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG"
###         ("\<^fixed>wfD"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG"
###         ("\<^fixed>wfFT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ"
###         ("\<^const>Wellformed.wfT"
###           ("\<^const>Set.not_member" ("_position" f)
###             ("\<^const>Set.image" ("_position" name_of_fun)
###               ("_applC" ("_position" set) ("_position" \<Phi>))))
###           ("_position" \<Theta>) ("_position" \<Phi>) ("_position" ft))
###         ("_position" \<Theta>) ("_position" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("\<^const>List.list.Cons"
###         ("_applC" ("_position" AF_fundef)
###           ("_cargs" ("_position" f) ("_position" ft)))
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 465 of "$AFP/MiniSail/Wellformed.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("\<^const>FSet.fempty") ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_applC" ("_position" AF_fun_typ_none) ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_int))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 468 of "$AFP/MiniSail/Wellformed.thy") produces 13000 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfPhi" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFTQ" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("\<^const>Syntax.AS_final"
###               ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("\<^const>Syntax.AS_final"
###               ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###         ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" supp) ("_position" s))
###           ("\<^const>Set.union"
###             ("\<^const>Syntax.AS_final"
###               ("_applC" ("_position" atom) ("_position" x)))
###             ("_applC" ("_position" supp) ("_position" B)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" supp) ("_position" c))
###               ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" GNil))
###               ("_position" \<tau>))
###             ("_position" \<Theta>) ("_position" \<Phi>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfPhi" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("\<^const>Syntax.AS_final"
###                 ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" B) ("_position" b)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" supp) ("_position" s))
###             ("\<^const>Set.union"
###               ("\<^const>Syntax.AS_final"
###                 ("_applC" ("_position" atom) ("_position" x)))
###               ("_applC" ("_position" supp) ("_position" B)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD"
###               ("\<^const>Set.subset_eq"
###                 ("_applC" ("_position" supp) ("_position" c))
###                 ("_Finset" ("_applC" ("_position" atom) ("_position" x))))
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" B)
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b)
###                       ("_tuple_arg" ("_position" c))))
###                   ("_position" GNil))
###                 ("_position" \<tau>))
###               ("_position" \<Theta>) ("_position" \<Phi>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/MiniSail/Wellformed.thy") produces 9980 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<B>) ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bv))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" b')
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg"
###                             ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_position" bv) ("_position" b'))))))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" AF_fundef)
###                   ("_cargs" ("_position" f)
###                     ("_applC" ("_position" AF_fun_typ_some)
###                       ("_cargs" ("_position" bv)
###                         ("_applC" ("_position" AF_fun_typ)
###                           ("_cargs" ("_position" x)
###                             ("_cargs" ("_position" b)
###                               ("_cargs" ("_position" c)
###                                 ("_cargs" ("_position" \<tau>)
###                                   ("_position" s)))))))))))
###               ("_applC" ("_position" lookup_fun)
###                 ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###                     ("_position" b) ("_position" bv)
###                     ("_position" b'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_appP)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" b') ("_position" v))))
###       ("\<^const>BTVSubst.has_subst_b_class.subst_b"
###         ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 347 of "$AFP/MiniSail/Wellformed.thy") produces 40 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###             ("_applC" ("_position" setD) ("_position" \<Delta>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_mvar) ("_position" u))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 354 of "$AFP/MiniSail/Wellformed.thy") produces 480 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" b))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AS_val) ("_position" v)) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 361 of "$AFP/MiniSail/Wellformed.thy") produces 280 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFT" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfT" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfC" ("_position" \<B>)
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" e)
###                               ("_tuple_arg" ("_position" b))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfFTQ"
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b')
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" e)
###                                 ("_tuple_arg"
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfB"
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b')
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" e)
###                                 ("_tuple_arg"
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfG"
###                 ("\<^const>Syntax.\<Gamma>.GCons"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" b')
###                       ("_tuple_arg" ("_position" C_true))))
###                   ("_position" \<Gamma>))
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" e)
###                                 ("_tuple_arg"
###                                   ("_position" b)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s) ("_position" b))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" e)
###                                   ("_tuple_arg"
###                                     ("_position" b))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfE)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<Phi>)
###             ("_cargs" ("_position" \<B>)
###               ("_cargs" ("_position" \<Gamma>)
###                 ("_cargs" ("_position" \<Delta>)
###                   ("_cargs" ("_position" e) ("_position" b')))))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" b')
###                     ("_tuple_arg" ("_position" C_true))))
###                 ("_position" \<Gamma>)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s) ("_position" b))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" e)
###                                   ("_tuple_arg"
###                                     ("_position" b))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let" ("_position" x) ("_position" e)
###         ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" B_int))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 369 of "$AFP/MiniSail/Wellformed.thy") produces 2800 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" c)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<Delta>)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal2_Base.pt_class.fresh"
###                   ("_applC" ("_position" atom) ("_position" x))
###                   ("_tuple" ("_position" \<Phi>)
###                     ("_tuple_args" ("_position" \<Theta>)
###                       ("_tuple_args" ("_position" \<B>)
###                         ("_tuple_args" ("_position" \<Gamma>)
###                           ("_tuple_args" ("_position" \<Delta>)
###                             ("_tuple_args" ("_position" c)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg"
###                                   ("_position" s)))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" B_bool)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" c)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" c)
###                                 ("_tuple_args" ("_position" b)
###                                   ("_tuple_arg"
###                                     ("_position" s))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" B_bool)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" c)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" c)
###                                 ("_tuple_args" ("_position" b)
###                                   ("_tuple_arg"
###                                     ("_position" s))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG"
###               ("\<^const>Syntax.\<Gamma>.GCons"
###                 ("_tuple" ("_position" x)
###                   ("_tuple_args" ("_position" B_bool)
###                     ("_tuple_arg" ("_position" c))))
###                 ("_position" \<Gamma>))
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s) ("_position" b))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" c)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<Delta>)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal2_Base.pt_class.fresh"
###                     ("_applC" ("_position" atom) ("_position" x))
###                     ("_tuple" ("_position" \<Phi>)
###                       ("_tuple_args" ("_position" \<Theta>)
###                         ("_tuple_args" ("_position" \<B>)
###                           ("_tuple_args" ("_position" \<Gamma>)
###                             ("_tuple_args" ("_position" \<Delta>)
###                               ("_tuple_args" ("_position" c)
###                                 ("_tuple_args" ("_position" b)
###                                   ("_tuple_arg"
###                                     ("_position" s))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" c)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" c)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" s)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" B_bool)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s) ("_position" b))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" c)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                     ("_position" \<Gamma>) ("_position" \<Delta>)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" c)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" s)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assert" ("_position" c) ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 283 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1) ("_position" b))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2) ("_position" b))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" b)
###                 ("_Finset"
###                   ("_args" ("_position" B_bool)
###                     ("_args" ("_position" B_int)
###                       ("_position" B_unit)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_position" B_bool))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 299 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_applC" ("_position" B_pair)
###                 ("_cargs" ("_position" b1) ("_position" b2)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 377 of "$AFP/MiniSail/Wellformed.thy") produces 9368 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>) ("_position" \<tau>)))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>)
###                     ("\<^const>Syntax.\<Gamma>.GCons"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args"
###                           ("_applC" ("_position" b_of) ("_position" \<tau>))
###                           ("_tuple_arg" ("_position" C_true))))
###                       ("_position" \<Gamma>))
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b))))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal2_Base.pt_class.fresh"
###                       ("_applC" ("_position" atom) ("_position" x))
###                       ("_tuple" ("_position" \<Phi>)
###                         ("_tuple_args" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" \<Delta>)
###                                 ("_tuple_args" ("_position" s1)
###                                   ("_tuple_args" ("_position" b)
###                                     ("_tuple_arg"
### ("_position" \<tau>)))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ" ("_position" \<Gamma>) ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<tau>)))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("\<^const>Syntax.\<Gamma>.GCons"
###                         ("_tuple" ("_position" x)
###                           ("_tuple_args"
###                             ("_applC" ("_position" b_of)
###                               ("_position" \<tau>))
###                             ("_tuple_arg" ("_position" C_true))))
###                         ("_position" \<Gamma>))
###                       ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" x))
###                         ("_tuple" ("_position" \<Phi>)
###                           ("_tuple_args" ("_position" \<Theta>)
###                             ("_tuple_args" ("_position" \<B>)
###                               ("_tuple_args" ("_position" \<Gamma>)
###                                 ("_tuple_args" ("_position" \<Delta>)
###                                   ("_tuple_args" ("_position" s1)
###                                     ("_tuple_args" ("_position" b)
### ("_tuple_arg" ("_position" \<tau>))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<tau>)))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("\<^const>Syntax.\<Gamma>.GCons"
###                         ("_tuple" ("_position" x)
###                           ("_tuple_args"
###                             ("_applC" ("_position" b_of)
###                               ("_position" \<tau>))
###                             ("_tuple_arg" ("_position" C_true))))
###                         ("_position" \<Gamma>))
###                       ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" x))
###                         ("_tuple" ("_position" \<Phi>)
###                           ("_tuple_args" ("_position" \<Theta>)
###                             ("_tuple_args" ("_position" \<B>)
###                               ("_tuple_args" ("_position" \<Gamma>)
###                                 ("_tuple_args" ("_position" \<Delta>)
###                                   ("_tuple_args" ("_position" s1)
###                                     ("_tuple_args" ("_position" b)
### ("_tuple_arg" ("_position" \<tau>))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                 ("_position" \<Gamma>) ("_position" \<tau>)))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("\<^const>Syntax.\<Gamma>.GCons"
###                         ("_tuple" ("_position" x)
###                           ("_tuple_args"
###                             ("_applC" ("_position" b_of)
###                               ("_position" \<tau>))
###                             ("_tuple_arg" ("_position" C_true))))
###                         ("_position" \<Gamma>))
###                       ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" x))
###                         ("_tuple" ("_position" \<Phi>)
###                           ("_tuple_args" ("_position" \<Theta>)
###                             ("_tuple_args" ("_position" \<B>)
###                               ("_tuple_args" ("_position" \<Gamma>)
###                                 ("_tuple_args" ("_position" \<Delta>)
###                                   ("_tuple_args" ("_position" s1)
###                                     ("_tuple_args" ("_position" b)
### ("_tuple_arg" ("_position" \<tau>))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<tau>)))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("\<^const>Syntax.\<Gamma>.GCons"
###                           ("_tuple" ("_position" x)
###                             ("_tuple_args"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_tuple_arg" ("_position" C_true))))
###                           ("_position" \<Gamma>))
###                         ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal2_Base.pt_class.fresh"
###                           ("_applC" ("_position" atom) ("_position" x))
###                           ("_tuple" ("_position" \<Phi>)
###                             ("_tuple_args" ("_position" \<Theta>)
###                               ("_tuple_args" ("_position" \<B>)
###                                 ("_tuple_args" ("_position" \<Gamma>)
###                                   ("_tuple_args" ("_position" \<Delta>)
###                                     ("_tuple_args" ("_position" s1)
### ("_tuple_args" ("_position" b)
###   ("_tuple_arg" ("_position" \<tau>)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###                   ("_position" \<Gamma>) ("_position" \<tau>)))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("\<^const>Syntax.\<Gamma>.GCons"
###                           ("_tuple" ("_position" x)
###                             ("_tuple_args"
###                               ("_applC" ("_position" b_of)
###                                 ("_position" \<tau>))
###                               ("_tuple_arg" ("_position" C_true))))
###                           ("_position" \<Gamma>))
###                         ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal2_Base.pt_class.fresh"
###                           ("_applC" ("_position" atom) ("_position" x))
###                           ("_tuple" ("_position" \<Phi>)
###                             ("_tuple_args" ("_position" \<Theta>)
###                               ("_tuple_args" ("_position" \<B>)
###                                 ("_tuple_args" ("_position" \<Gamma>)
###                                   ("_tuple_args" ("_position" \<Delta>)
###                                     ("_tuple_args" ("_position" s1)
### ("_tuple_args" ("_position" b)
###   ("_tuple_arg" ("_position" \<tau>)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_let2" ("_position" x) ("_position" \<tau>)
###         ("_position" s1) ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_bitvec))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_position" B_bitvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 385 of "$AFP/MiniSail/Wellformed.thy") produces 5596 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>)
###         ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFTQ" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                 ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfPhi" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("_position" \<Gamma>) ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTD" ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s1) ("_position" b))))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###                 ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^fixed>wfD" ("_position" \<B>)
###                         ("_position" \<Gamma>) ("_position" \<Delta>)
###                         ("\<^const>Set.member" ("_position" s2)
###                           ("_position" b)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_if" ("_position" v) ("_position" s1)
###         ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 392 of "$AFP/MiniSail/Wellformed.thy") produces 408 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" u))
###             ("_tuple" ("_position" \<Phi>)
###               ("_tuple_args" ("_position" \<Theta>)
###                 ("_tuple_args" ("_position" \<B>)
###                   ("_tuple_args" ("_position" \<Gamma>)
###                     ("_tuple_args" ("_position" \<Delta>)
###                       ("_tuple_args" ("_position" \<tau>)
###                         ("_tuple_args" ("_position" v)
###                           ("_tuple_arg" ("_position" b)))))))))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("\<^const>Syntax.\<Delta>.DCons"
###                     ("_tuple" ("_position" u)
###                       ("_tuple_arg" ("_position" \<tau>)))
###                     ("_position" \<Delta>))
###                   ("\<^const>Set.member" ("_position" s)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFTQ" ("_position" \<B>) ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" u))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<tau>)
###                           ("_tuple_args" ("_position" v)
###                             ("_tuple_arg" ("_position" b)))))))))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("\<^const>Syntax.\<Delta>.DCons"
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" \<tau>)))
###                       ("_position" \<Delta>))
###                     ("\<^const>Set.member" ("_position" s)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfB" ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" u))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<tau>)
###                           ("_tuple_args" ("_position" v)
###                             ("_tuple_arg" ("_position" b)))))))))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("\<^const>Syntax.\<Delta>.DCons"
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" \<tau>)))
###                       ("_position" \<Delta>))
###                     ("\<^const>Set.member" ("_position" s)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfG" ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" u))
###               ("_tuple" ("_position" \<Phi>)
###                 ("_tuple_args" ("_position" \<Theta>)
###                   ("_tuple_args" ("_position" \<B>)
###                     ("_tuple_args" ("_position" \<Gamma>)
###                       ("_tuple_args" ("_position" \<Delta>)
###                         ("_tuple_args" ("_position" \<tau>)
###                           ("_tuple_args" ("_position" v)
###                             ("_tuple_arg" ("_position" b)))))))))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("\<^const>Syntax.\<Delta>.DCons"
###                       ("_tuple" ("_position" u)
###                         ("_tuple_arg" ("_position" \<tau>)))
###                       ("_position" \<Delta>))
###                     ("\<^const>Set.member" ("_position" s)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfPhi" ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" u))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<tau>)
###                             ("_tuple_args" ("_position" v)
###                               ("_tuple_arg" ("_position" b)))))))))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>)
###                       ("\<^const>Syntax.\<Delta>.DCons"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" \<tau>)))
###                         ("_position" \<Delta>))
###                       ("\<^const>Set.member" ("_position" s)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wfT)
###         ("_cargs" ("_position" \<Theta>)
###           ("_cargs" ("_position" \<B>)
###             ("_cargs" ("_position" \<Gamma>) ("_position" \<tau>))))))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfTD" ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" b_of) ("_position" \<tau>)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" u))
###                 ("_tuple" ("_position" \<Phi>)
###                   ("_tuple_args" ("_position" \<Theta>)
###                     ("_tuple_args" ("_position" \<B>)
###                       ("_tuple_args" ("_position" \<Gamma>)
###                         ("_tuple_args" ("_position" \<Delta>)
###                           ("_tuple_args" ("_position" \<tau>)
###                             ("_tuple_args" ("_position" v)
###                               ("_tuple_arg" ("_position" b)))))))))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>)
###                       ("\<^const>Syntax.\<Delta>.DCons"
###                         ("_tuple" ("_position" u)
###                           ("_tuple_arg" ("_position" \<tau>)))
###                         ("_position" \<Delta>))
###                       ("\<^const>Set.member" ("_position" s)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_var" ("_position" u) ("_position" \<tau>)
###         ("_position" v) ("_position" s))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 400 of "$AFP/MiniSail/Wellformed.thy") produces 3672 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfD"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFT"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_applC" ("_position" setD) ("_position" \<Delta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFTQ"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_applC" ("_position" setD) ("_position" \<Delta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_applC" ("_position" setD) ("_position" \<Delta>))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>))
###           ("_position" \<Theta>) ("_position" \<Phi>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v)
###               ("_applC" ("_position" b_of) ("_position" \<tau>))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfD"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfFT"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###           ("_applC" ("_position" setD) ("_position" \<Delta>)))
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>))
###         ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>)
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("_position" b_of) ("_position" \<tau>)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_assign" ("_position" u) ("_position" v))
###       ("_position" B_unit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/MiniSail/Wellformed.thy") produces 440 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfFT" ("_position" \<B>) ("_position" \<Gamma>)
###             ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfTs" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfT" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<B>)
###             ("_position" \<Gamma>) ("_position" \<Delta>)
###             ("\<^const>Set.member" ("_position" s1) ("_position" B_bool))))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                   ("_position" \<Delta>)
###                   ("\<^const>Set.member" ("_position" s2)
###                     ("_position" b))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfFTQ" ("_position" \<Gamma>) ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_bool))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfB" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_bool))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfG" ("_position" \<Gamma>)
###               ("_position" \<Delta>)
###               ("\<^const>Set.member" ("_position" s1)
###                 ("_position" B_bool))))
###           ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^fixed>wfD" ("_position" \<B>) ("_position" \<Gamma>)
###                     ("_position" \<Delta>)
###                     ("\<^const>Set.member" ("_position" s2)
###                       ("_position" b)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>wfPhi" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_bool))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###     ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###       ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<B>))
###         ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Gamma>))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Wellformed.wfTD" ("_position" \<Delta>)
###                 ("\<^const>Set.member" ("_position" s1)
###                   ("_position" B_bool))))
###             ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Theta>))
###               ("_asms" ("\<^const>HOL.Trueprop" ("_position" \<Phi>))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^fixed>wfD" ("_position" \<B>)
###                       ("_position" \<Gamma>) ("_position" \<Delta>)
###                       ("\<^const>Set.member" ("_position" s2)
###                         ("_position" b))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("\<^const>Syntax.AS_while" ("_position" s1) ("_position" s2))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 314 of "$AFP/MiniSail/Wellformed.thy") produces 9932 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v2)
###                 ("_position" B_int))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_split)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" B_bitvec) ("_position" B_bitvec))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/MiniSail/Wellformed.thy") produces 616 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###             ("_position" \<Gamma>)
###             ("\<^const>Set.member" ("_position" v1)
###               ("_position" B_bitvec)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_len) ("_position" v1))
###       ("_position" B_int))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 329 of "$AFP/MiniSail/Wellformed.thy") produces 688 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>wfFT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>) ("_position" \<Delta>)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" AF_fundef)
###                 ("_cargs" ("_position" f)
###                   ("_applC" ("_position" AF_fun_typ_none)
###                     ("_applC" ("_position" AF_fun_typ)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("_position" b)
###                           ("_cargs" ("_position" c)
###                             ("_cargs" ("_position" \<tau>)
###                               ("_position" s))))))))))
###             ("_applC" ("_position" lookup_fun)
###               ("_cargs" ("_position" \<Phi>) ("_position" f)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>wfD" ("_position" \<Theta>) ("_position" \<B>)
###               ("_position" \<Gamma>)
###               ("\<^const>Set.member" ("_position" v) ("_position" b))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_applC" ("_position" AE_app)
###         ("_cargs" ("_position" f) ("_position" v)))
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfE", "wfS", "wfCS", "wfCSS", "wfPhi", "wfD", "wfFTQ", "wfFT"
  Proving monotonicity ...
### Ambiguous input (line 488 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_mvar) ("_position" u)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_mvar) ("_position" u)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 478 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_val) ("_position" v)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 489 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 479 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 480 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 481 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_fst) ("_position" v1)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 482 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_snd) ("_position" v1)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 483 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 484 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_len) ("_position" v1)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_len) ("_position" v1)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 485 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_op)
###       ("_cargs" ("_position" opp)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 486 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_app)
###       ("_cargs" ("_position" f) ("_position" v)))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_app)
###       ("_cargs" ("_position" f) ("_position" v)))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 487 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_appP)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" b') ("_position" v))))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_applC" ("_position" AE_appP)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" b') ("_position" v))))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 496 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("\<^const>List.list.Nil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 497 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" AF_fundef)
###         ("_cargs" ("_position" f) ("_position" ft)))
###       ("_position" \<Pi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("\<^const>List.list.Cons"
###       ("_applC" ("_position" AF_fundef)
###         ("_cargs" ("_position" f) ("_position" ft)))
###       ("_position" \<Pi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 498 of "$AFP/MiniSail/Wellformed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" fd) ("_position" \<Phi>))
###       ("_type_name" \<Phi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_constrain"
###       ("\<^const>List.list.Cons" ("_position" fd) ("_position" \<Phi>))
###       ("_type_name" \<Phi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 503 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none) ("_position" ft))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none) ("_position" ft))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none) ("_position" ft))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 504 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv) ("_position" ft)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv) ("_position" ft)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv) ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/MiniSail/Wellformed.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 508 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 513 of "$AFP/MiniSail/Wellformed.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("\<^const>Syntax.\<Delta>.DNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 514 of "$AFP/MiniSail/Wellformed.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Pi>) ("_position" \<B>)
###     ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###     ("_constrain"
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>))
###       ("_type_name" \<Delta>))))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfC" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfT" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfD" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("_constrain"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Pi>) ("_position" \<B>)
###       ("_constrain" ("_position" \<Gamma>) ("_type_name" \<Gamma>))
###       ("\<^const>Syntax.\<Delta>.DCons"
###         ("_tuple" ("_position" u) ("_tuple_arg" ("_position" \<tau>)))
###         ("_position" \<Delta>)))
###     ("_type_name" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfVDs"
  Proving monotonicity ...
### theory "Draft.Wellformed"
### 74.516s elapsed time, 201.185s cpu time, 64.488s GC time
Loading theory "Draft.RCLogic" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL")
Loading theory "Draft.WellformedL" (required by "Draft.RCLogicLTemplates" via "Draft.RCLogicL")
### Ambiguous input (line 30 of "$AFP/MiniSail/WellformedL.thy") produces 1323 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfFT"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfD"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("_applC" ("_position" V_consp)
###         ("_cargs" ("_position" tyid)
###           ("_cargs" ("_position" dc)
###             ("_cargs" ("_position" b) ("_position" v)))))
###       ("_position" b'')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfD"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member"
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_position" b''))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" bv)
###         ("_idts" ("_position" dclist)
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b') ("_position" c)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" b'')
###           ("_applC" ("_position" B_app)
###             ("_cargs" ("_position" tyid) ("_position" b))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" AF_typedef_poly)
###               ("_cargs" ("_position" tyid)
###                 ("_cargs" ("_position" bv) ("_position" dclist))))
###             ("_applC" ("_position" set) ("_position" \<Theta>)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" dc)
###                 ("_tuple_arg"
###                   ("\<^const>Syntax.T_refined_type" ("_position" x)
###                     ("_position" b') ("_position" c))))
###               ("_applC" ("_position" set) ("_position" dclist)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Wellformed.wfD"
###                 ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###                   ("_position" \<B>)
###                   ("\<^const>HOL.conj" ("_position" b)
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Nominal2_Base.pt_class.fresh"
###                         ("_applC" ("_position" atom) ("_position" bv))
###                         ("_tuple" ("_position" \<Theta>)
###                           ("_tuple_args" ("_position" \<B>)
###                             ("_tuple_args" ("_position" \<Gamma>)
###                               ("_tuple_args" ("_position" b)
###                                 ("_tuple_arg" ("_position" v)))))))
###                       ("_position" \<Theta>))))
###                 ("_position" \<B>) ("_position" \<Gamma>)
###                 ("\<^const>Set.member" ("_position" v)
###                   ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###                     ("_position" bv) ("_position" b))))
###               ("\<^const>Nominal2_Base.pt_class.fresh"
###                 ("_applC" ("_position" atom) ("_position" bv))
###                 ("_position" tm)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))
###         ("_applC" ("_position" wfB)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" \<B>) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))
###         ("_applC" ("_position" wfB)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" \<B>) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" z))
###           ("_position" \<Gamma>))
###         ("_applC" ("_position" wfB)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" \<B>) ("_position" b))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" z))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" zbc)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" zbc)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons" ("_position" zbc)
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/MiniSail/WellformedL.thy") produces 42 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 197 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/MiniSail/WellformedL.thy") produces 190 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" \<Gamma>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_applC" ("_position" b_of) ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/MiniSail/WellformedL.thy") produces 42 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/MiniSail/WellformedL.thy") produces 1626 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/MiniSail/WellformedL.thy") produces 1626 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/MiniSail/WellformedL.thy") produces 813 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/MiniSail/WellformedL.thy") produces 813 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" \<Gamma>)
###             ("_position" \<Theta>)))
###         ("_position" \<B>) ("_position" \<Gamma>)
###         ("\<^const>HOL.conj" ("_position" \<Delta>)
###           ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 235 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 236 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>Wellformed.wfTh" ("_position" \<Theta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 238 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>))
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 270 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_pattern" ("_position" u) ("_position" \<tau>))
###     ("_applC" ("_position" setD) ("_position" \<Delta>))
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Set.not_member" ("_position" c)
###       ("_Finset"
###         ("_args" ("\<^const>Syntax.C_true") ("\<^const>Syntax.C_false"))))
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("_position" C_true))))
###         ("_position" \<Gamma>))
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 303 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" C_true))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 305 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 311 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>HOL.conj" ("_position" c)
###       ("_applC" ("_position" wfB)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" \<B>) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###         ("_position" \<Gamma>))
###       ("_position" c))
###     ("_applC" ("_position" wfB)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" \<B>) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 325 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 349 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 349 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 350 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 354 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 373 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 374 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_applC" ("_position" CE_val) ("_position" v))
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_applC" ("_position" CE_val) ("_position" v))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 386 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" v))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 387 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 388 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<tau>))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ts))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 392 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ce))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 394 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" td))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" td))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" e))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("_applC" ("_position" supp) ("_position" \<B>)))
###         ("\<^const>Set.image" ("_position" atom)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" e))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("_applC" ("_position" supp) ("_position" \<B>)))
###         ("\<^const>Set.image" ("_position" atom)
###           ("\<^const>Set.image" ("_position" fst)
###             ("_applC" ("_position" setD) ("_position" \<Delta>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 503 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>)))))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>)))))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 506 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" \<Phi>))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" \<Phi>))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 507 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" supp) ("_position" \<Delta>))
###       ("\<^const>Set.union"
###         ("\<^const>Set.union"
###           ("\<^const>Set.image" ("_position" atom)
###             ("\<^const>Set.image" ("_position" fst)
###               ("_applC" ("_position" setD) ("_position" \<Delta>))))
###           ("_applC" ("_position" atom_dom) ("_position" \<Gamma>)))
###         ("_applC" ("_position" supp) ("_position" \<B>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 508 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" ftq))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" ftq))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" supp) ("_position" ftq))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" ft))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 677 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 707 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x')
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" G))
###     ("_position" c')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 790 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 791 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 866 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("\<^const>Syntax.AS_final"
###         ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("\<^const>Groups.minus_class.minus"
###       ("_applC" ("_position" supp) ("_position" c))
###       ("_Finset" ("_applC" ("_position" atom) ("_position" z))))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" atom_dom) ("_position" \<Gamma>))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 896 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 902 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 910 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 917 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" \<B>)
###     ("_position" G)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 928 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z2) ("_position" b)
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" L_false)))
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" z2)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z2) ("_position" b)
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" L_false))))
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" z2))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 981 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 981 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 992 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" e) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" e) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1017 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1030 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" s) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###     ("_position" s) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1060 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1079 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_applC" ("_position" atom) ("_position" x))
###     ("_applC" ("_position" atom_dom)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1084 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1084 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1094 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                 ("_position" z)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1094 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1100 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1108 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c'))))
###         ("_position" \<Gamma>'))
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1109 of "$AFP/MiniSail/WellformedL.thy") produces 340 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" b')
###         ("\<^const>HOL.not_equal" ("_position" x') ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" b')
###         ("\<^const>HOL.not_equal" ("_position" x') ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>HOL.conj" ("_position" b')
###         ("\<^const>HOL.not_equal" ("_position" x') ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" x'))
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" b')
###           ("\<^const>HOL.not_equal" ("_position" x') ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" x'))
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" b')
###           ("\<^const>HOL.not_equal" ("_position" x') ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Nominal2_Base.pt_class.fresh"
###         ("_applC" ("_position" atom) ("_position" x'))
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>))))
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("\<^const>HOL.conj" ("_position" b')
###           ("\<^const>HOL.not_equal" ("_position" x') ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>HOL.conj"
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x'))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>HOL.conj" ("_position" b')
###             ("\<^const>HOL.not_equal" ("_position" x')
###               ("_position" x))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1123 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1155 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1156 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal2_Base.pt_class.fresh"
###     ("_applC" ("_position" atom) ("_position" y))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1168 of "$AFP/MiniSail/WellformedL.thy") produces 196 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" v)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" v) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1170 of "$AFP/MiniSail/WellformedL.thy") produces 100 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" c)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" c)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1171 of "$AFP/MiniSail/WellformedL.thy") produces 36 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###             ("_position" \<Gamma>\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1172 of "$AFP/MiniSail/WellformedL.thy") produces 100 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<tau>)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<tau>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1173 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1176 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1178 of "$AFP/MiniSail/WellformedL.thy") produces 196 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" ce)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfV" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" ce) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1179 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1322 of "$AFP/MiniSail/WellformedL.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x)) ("_position" e)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Gamma>\<^sub>1)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" x))
###               ("_position" \<Delta>)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###               ("_position" \<Phi>) ("_position" \<B>)
###               ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###                 ("_position" \<Gamma>\<^sub>2))
###               ("_position" \<Delta>) ("_position" e) ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1323 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1326 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1327 of "$AFP/MiniSail/WellformedL.thy") produces 100 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal2_Base.pt_class.fresh"
###           ("_applC" ("_position" atom) ("_position" x))
###           ("_position" \<Gamma>\<^sub>1)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" x))
###             ("_position" \<Delta>)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###             ("_position" \<B>)
###             ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###               ("_position" \<Gamma>\<^sub>2))
###             ("_position" \<Delta>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1328 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1329 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1405 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1429 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" v)
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1430 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1431 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1432 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1433 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ts))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1435 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1436 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>) ("_position" ce)
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1437 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_position" td))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_position" td))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_position" td))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_position" td))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1478 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1479 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1482 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTD" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>')
###           ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1483 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1484 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" ftq))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1485 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTh" ("_position" \<Theta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Theta>))
###           ("_applC" ("_position" set) ("_position" \<Theta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>')
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" ft))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1571 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1607 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1630 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###     ("_applC" ("_position" AF_typedef)
###       ("_cargs" ("_position" tid) ("_position" dclist)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_applC" ("_position" AF_typedef)
###       ("_cargs" ("_position" tid) ("_position" dclist)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1641 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1721 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P)
###     ("_insert_fset" ("_position" bva)) ("_position" GNil)
###     ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1763 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" t))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" bv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" t))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" bv)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1779 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" bv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" b))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" bv)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1784 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                     ("_position" z)
###                     ("_applC" ("_position" V_var) ("_position" x))))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                     ("_position" z)
###                     ("_applC" ("_position" V_var) ("_position" x))))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1785 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b)
###               ("_tuple_arg"
###                 ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###                   ("_position" z)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("_position" \<Gamma>)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1840 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1879 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" dclist)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1880 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" GNil) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1892 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1964 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<Delta>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1965 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s1)
###     ("_applC" ("_position" b_of) ("_position" t1))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s1)
###     ("_applC" ("_position" b_of) ("_position" t1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1966 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x2)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s2)
###     ("_applC" ("_position" b_of) ("_position" t2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x2)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("_position" \<Delta>) ("_position" s2)
###     ("_applC" ("_position" b_of) ("_position" t2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1993 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2013 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2014 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b1)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2019 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2019 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2032 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2047 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_position" \<Phi>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2092 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" v) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2093 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2094 of "$AFP/MiniSail/WellformedL.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###         ("_position" \<B>') ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###         ("_position" \<B>') ("_position" \<Gamma>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###         ("_position" \<B>') ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2095 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2096 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2099 of "$AFP/MiniSail/WellformedL.thy") produces 49 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" ce) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2100 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2126 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" e) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2127 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" \<Gamma>) ("_position" \<Delta>)
###         ("_position" s) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2130 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2131 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###         ("_position" \<Gamma>) ("_position" \<Delta>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2132 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2133 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2274 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2275 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2280 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2281 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2286 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv)) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv)) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2286 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2287 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b) ("_position" bv)
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2333 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2333 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2334 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev"
###       ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev"
###       ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>BTVSubst.subst_bb_abbrev"
###       ("_applC" ("_position" b_of) ("_position" \<tau>)) ("_position" bv)
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2355 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2355 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2372 of "$AFP/MiniSail/WellformedL.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2373 of "$AFP/MiniSail/WellformedL.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2374 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2375 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2376 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2377 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2378 of "$AFP/MiniSail/WellformedL.thy") produces 18 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" ftq))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2379 of "$AFP/MiniSail/WellformedL.thy") produces 50 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###         ("_position" \<Phi>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" set) ("_position" \<Phi>))
###           ("_applC" ("_position" set) ("_position" \<Phi>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###           ("_position" \<Phi>') ("_position" \<B>) ("_position" ft))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2491 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" xa)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" ca))))
###       ("_position" GNil))
###     ("_position" \<tau>a')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2492 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2511 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_position" B)
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2512 of "$AFP/MiniSail/WellformedL.thy") produces 168 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("_position" \<tau>))
###       ("_position" \<Theta>))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Set.union"
###           ("\<^const>Syntax.AS_final"
###             ("_applC" ("_position" atom) ("_position" x)))
###           ("_applC" ("_position" supp) ("_position" B)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2531 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_none)
###       ("_applC" ("_position" AF_fun_typ)
###         ("_cargs" ("_position" x)
###           ("_cargs" ("_position" b)
###             ("_cargs" ("_position" c)
###               ("_cargs" ("_position" \<tau>) ("_position" s)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2532 of "$AFP/MiniSail/WellformedL.thy") produces 168 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("_position" \<tau>))
###       ("_position" \<Theta>))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2540 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2541 of "$AFP/MiniSail/WellformedL.thy") produces 580 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>) ("_position" \<Theta>)))
###     ("_position" \<Phi>) ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2568 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###     ("_applC" ("_position" AF_fun_typ_some)
###       ("_cargs" ("_position" bv)
###         ("_applC" ("_position" AF_fun_typ)
###           ("_cargs" ("_position" x)
###             ("_cargs" ("_position" b)
###               ("_cargs" ("_position" c)
###                 ("_cargs" ("_position" \<tau>) ("_position" s))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2569 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2581 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2581 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_position" \<Phi>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2582 of "$AFP/MiniSail/WellformedL.thy") produces 168 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfG" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfB" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>Wellformed.wfFTQ" ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" GNil))
###       ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTD"
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("_position" \<tau>))
###       ("_position" \<Theta>))
###     ("\<^const>HOL.conj" ("_position" \<Phi>)
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" supp) ("_position" s))
###         ("\<^const>Syntax.AS_final"
###           ("_applC" ("_position" atom) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2610 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2611 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2616 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2625 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2626 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp) ("_position" \<tau>))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp) ("_position" \<tau>))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2631 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2632 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" c))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2640 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2641 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq" ("_applC" ("_position" supp) ("_position" s))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2651 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2651 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###     ("_position" \<Phi>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2652 of "$AFP/MiniSail/WellformedL.thy") produces 580 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>)
###       ("\<^const>Wellformed.wfG" ("_insert_fset" ("_position" bv))
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" GNil))
###         ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" \<Theta>)))
###       ("\<^const>HOL.conj" ("_position" \<Phi>') ("_position" \<Theta>)))
###     ("_position" \<Phi>') ("_insert_fset" ("_position" bv))
###     ("_applC" ("_position" AF_fun_typ)
###       ("_cargs" ("_position" x)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c)
###             ("_cargs" ("_position" \<tau>) ("_position" s))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2682 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2683 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2716 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2725 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2732 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2733 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))
###     ("\<^const>Syntax.AS_final"
###       ("_applC" ("_position" atom) ("_position" bv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))
###     ("_Finset" ("_applC" ("_position" atom) ("_position" bv)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2743 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2753 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" \<Phi>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" \<Phi>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2778 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s1')
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s2')
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s1') ("_position" x1)
###       ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s2')
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s1')
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s2') ("_position" x2)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s1') ("_position" x1)
###       ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s2') ("_position" x2)
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2826 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_branchv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s1')
###         ("_position" bv1) ("_position" b))
###       ("_position" x1) ("_position" v))
###     ("\<^const>IVSubst.subst_sv_abbrev"
###       ("\<^const>BTVSubst.subst_sb_abbrev" ("_position" s2')
###         ("_position" bv2) ("_position" b))
###       ("_position" x2) ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2845 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###           ("_position" x) ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###           ("_position" x) ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###           ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.T_refined_type" ("_position" x') ("_position" b)
###         ("_position" c'))
###       ("\<^const>Syntax.T_refined_type" ("_position" x) ("_position" b)
###         ("_position" c)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_sv_abbrev" ("_position" s) ("_position" x)
###           ("_position" v)))
###       ("\<^const>HOL.eq"
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>')
###           ("_position" x') ("_position" v))
###         ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###           ("_position" x) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2858 of "$AFP/MiniSail/WellformedL.thy") produces 21 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2859 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2860 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2861 of "$AFP/MiniSail/WellformedL.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_applC" ("_position" b_of) ("_position" \<tau>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2862 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2864 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2865 of "$AFP/MiniSail/WellformedL.thy") produces 21 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2866 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2918 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2919 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2920 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2921 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2922 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2923 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2924 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2925 of "$AFP/MiniSail/WellformedL.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FSet.fsubset_eq" ("_position" \<B>) ("_position" \<B>')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###         ("_position" \<B>') ("_position" ft)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3032 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" v) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3033 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3034 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3035 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3036 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3039 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" ce) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3040 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfRCV"
### Ambiguous input (line 3072 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 3073 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3074 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3075 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>')
###           ("_position" \<Delta>) ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3076 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3077 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###           ("_applC" ("_position" toSet) ("_position" \<Gamma>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>') ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3078 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3079 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3160 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3160 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b')
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3161 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b') ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3170 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3170 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3171 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3193 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3193 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3194 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>')
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3215 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3215 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3216 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3221 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3221 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3222 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>')
###     ("_position" \<Gamma>') ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3229 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3254 of "$AFP/MiniSail/WellformedL.thy") produces 20 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" e) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3255 of "$AFP/MiniSail/WellformedL.thy") produces 20 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" s) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3256 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dc)
###           ("_position" t) ("_position" cs) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3257 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###         ("_position" \<Gamma>) ("_position" \<Delta>')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" setD) ("_position" \<Delta>))
###           ("_applC" ("_position" setD) ("_position" \<Delta>'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>) ("_position" \<Gamma>)
###           ("_position" \<Delta>') ("_position" tid) ("_position" dclist)
###           ("_position" css) ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3258 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3259 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3260 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3261 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3402 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3403 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" ce))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3423 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e1) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e1) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3423 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e2) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" e2) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e2) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3424 of "$AFP/MiniSail/WellformedL.thy") produces 30 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3443 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z1)
###             ("_applC" ("_position" b_of) ("_position" t))
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val) ("_position" v))
###               ("\<^const>Syntax.C_imp"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" l)))
###                 ("_applC" ("_position" c_of)
###                   ("_cargs" ("_position" t) ("_position" z1)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs" ("_position" \<Gamma>)
###           ("\<^const>Syntax.T_refined_type" ("_position" z1)
###             ("_applC" ("_position" b_of) ("_position" t))
###             ("\<^const>Syntax.C_imp"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val) ("_position" v))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit) ("_position" l))))
###               ("_applC" ("_position" c_of)
###                 ("_cargs" ("_position" t) ("_position" z1))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3464 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" GNil) ("_position" \<tau>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" GNil) ("_position" \<tau>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3465 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3466 of "$AFP/MiniSail/WellformedL.thy") produces 40 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("_applC" ("_position" b_of)
###             ("\<^const>Syntax.T_refined_type" ("_position" z')
###               ("_position" B_bool) ("\<^const>Syntax.C_true")))
###           ("_tuple_arg"
###             ("_applC" ("_position" c_of)
###               ("_cargs"
###                 ("\<^const>Syntax.T_refined_type" ("_position" z')
###                   ("_position" B_bool) ("\<^const>Syntax.C_true"))
###                 ("_position" x))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.T_refined_type" ("_position" zz)
###       ("_applC" ("_position" b_of) ("_position" \<tau>'))
###       ("\<^const>Syntax.C_imp"
###         ("\<^const>Syntax.C_eq"
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" x)))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" ll))))
###         ("_applC" ("_position" c_of)
###           ("_cargs" ("_position" \<tau>') ("_position" zz)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3480 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3481 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val) ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3486 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3487 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("\<^const>Syntax.C_eq"
###         ("_applC" ("_position" CE_val)
###           ("_applC" ("_position" V_var) ("_position" z)))
###         ("_position" ce)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3503 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3503 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3504 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3515 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x')
###             ("_tuple_args" ("_position" b')
###               ("_tuple_arg" ("_position" c'))))
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3526 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3527 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" replace_in_g)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))
###         ("_cargs" ("_position" x) ("_position" c0))))
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3540 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3540 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3541 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" supp)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>))))
###       ("_applC" ("_position" supp) ("_position" \<B>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3560 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3560 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>'')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3561 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))
###     ("\<^const>Nominal2_Base.pt_class.fresh"
###       ("_applC" ("_position" atom) ("_position" y))
###       ("\<^const>List.append" ("_position" \<Gamma>'')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3568 of "$AFP/MiniSail/WellformedL.thy") produces 980 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" v) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3569 of "$AFP/MiniSail/WellformedL.thy") produces 500 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" c'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" c''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3570 of "$AFP/MiniSail/WellformedL.thy") produces 180 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wfRCV_subst"
  Proving monotonicity ...
### Ambiguous input (line 3571 of "$AFP/MiniSail/WellformedL.thy") produces 500 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3572 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3574 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3575 of "$AFP/MiniSail/WellformedL.thy") produces 980 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" ce) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3576 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3656 of "$AFP/MiniSail/WellformedL.thy") produces 80 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" G) ("_position" D) ("_position" e)
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" D) ("_position" e) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3657 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3660 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_position" \<Phi>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3661 of "$AFP/MiniSail/WellformedL.thy") produces 500 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" G) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" G)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###             ("_position" \<Gamma>))
###           ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" \<Delta>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3662 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3663 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3771 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3772 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" y))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" y))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" y)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###               ("_position" z)
###               ("_applC" ("_position" V_var) ("_position" y))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3795 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3796 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_var" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg" ("\<^const>Syntax.C_true"))))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###       ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3812 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.T_refined_type" ("_position" z) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3813 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_lit" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>IVSubst.has_subst_v_class.subst_v" ("_position" c)
###               ("_position" z) ("\<^const>Syntax.V_var" ("_position" x))))))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3821 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3822 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3830 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3830 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3831 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3838 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3838 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3839 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfT)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_position" \<Gamma>)))
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3877 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.replace_in_g" ("_position" G) ("_position" x')
###       ("_position" c''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.replace_in_g" ("_position" G) ("_position" x')
###       ("_position" c''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.replace_in_g" ("_position" G) ("_position" x')
###       ("_position" c''))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3877 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3885 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" \<Gamma>))
###     ("_position" c')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3886 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_position" \<Gamma>))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3908 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3909 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>IVSubst.subst_gv_abbrev"
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>\<^sub>2)))
###       ("_position" x) ("_position" v))
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>\<^sub>1)
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3960 of "$AFP/MiniSail/WellformedL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_var" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_var" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_lit" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c))))
###     ("_applC" ("_position" lookup)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x')
###               ("_tuple_args" ("_position" b\<^sub>1)
###                 ("_tuple_arg"
###                   ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                     ("_position" z0)
###                     ("\<^const>Syntax.V_lit" ("_position" x'))))))
###             ("_position" \<Gamma>)))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3961 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_lit" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x')
###           ("_tuple_args" ("_position" b\<^sub>1)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("\<^const>Syntax.V_var" ("_position" x'))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3962 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c')
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" lookup)
###         ("_cargs"
###           ("\<^const>List.append"
###             ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###               ("_position" x') ("_position" v'))
###             ("_position" \<Gamma>))
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c')
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Some)
###         ("_tuple" ("_position" b) ("_tuple_arg" ("_position" c'))))
###       ("_applC" ("_position" lookup)
###         ("_cargs"
###           ("\<^const>Syntax.append_g"
###             ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###               ("_position" x') ("_position" v'))
###             ("_position" \<Gamma>))
###           ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3967 of "$AFP/MiniSail/WellformedL.thy") produces 686 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval_b"
  Proving monotonicity ...
### Ambiguous input (line 3968 of "$AFP/MiniSail/WellformedL.thy") produces 350 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3969 of "$AFP/MiniSail/WellformedL.thy") produces 126 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_position" i))
###     ("_Ball"
###       ("_pattern" ("_position" x)
###         ("_patterns" ("_position" b) ("_position" c)))
###       ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###       ("\<^const>HOL.Ex_binder" ("_position" s)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" Some) ("_position" s))
###             ("_applC" ("_position" i) ("_position" x)))
###           ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###             ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###     ("\<^const>HOL.eq" ("_position" i)
###       ("_Ball"
###         ("_pattern" ("_position" x)
###           ("_patterns" ("_position" b) ("_position" c)))
###         ("_applC" ("_position" toSet) ("_position" \<Gamma>))
###         ("\<^const>HOL.Ex_binder" ("_position" s)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" Some) ("_position" s))
###               ("_applC" ("_position" i) ("_position" x)))
###             ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###               ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>eval_v" ("_position" i)
###     ("_applC" ("_position" V_lit) ("_position" l))
###     ("\<^const>RCLogic.eval_l" ("_position" l))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" V_lit) ("_position" l))
###     ("\<^const>RCLogic.eval_l" ("_position" l))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Some) ("_position" sv))
###       ("_applC" ("_position" i) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i)
###       ("_applC" ("_position" V_var) ("_position" x)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Some) ("_position" sv))
###       ("_applC" ("_position" i) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i)
###       ("_applC" ("_position" V_var) ("_position" x)) ("_position" sv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/MiniSail/RCLogic.thy") produces 24 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_v" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_v" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_v" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_v" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_v" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_v" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_v" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_v" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_applC" ("_position" SPair) ("_position" s1)))
###       ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" SPair))
###       ("_cargs" ("_position" s1) ("_position" s2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_v" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_pair)
###           ("_cargs" ("_position" v1) ("_position" v2)))
###         ("_position" SPair))
###       ("_cargs" ("_position" s1) ("_position" s2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/MiniSail/RCLogic.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons) ("_position" tyid)))
###       ("_cargs" ("_position" dc) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons) ("_position" tyid)))
###       ("_cargs" ("_position" dc) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons) ("_position" tyid)))
###       ("_cargs" ("_position" dc) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_applC" ("_position" SCons) ("_position" tyid)))
###       ("_cargs" ("_position" dc) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_position" SCons))
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" s))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_cons)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" v))))
###         ("_position" SCons))
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3970 of "$AFP/MiniSail/WellformedL.thy") produces 350 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_tv_abbrev" ("_position" \<tau>)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3971 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3973 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/MiniSail/RCLogic.thy") produces 20 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" b)))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" b)))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" b)))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc) ("_position" b)))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_cargs" ("_position" b) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_cargs" ("_position" b) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_cargs" ("_position" b) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>eval_v" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp)
###           ("_cargs" ("_position" tyid) ("_position" dc))))
###       ("_cargs" ("_position" b) ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_v" ("_position" i) ("_position" v) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp) ("_position" tyid)))
###       ("_cargs" ("_position" dc)
###         ("_cargs" ("_position" b) ("_position" s))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>RCLogic.eval_b" ("_position" i)
###         ("_applC" ("_position" V_consp)
###           ("_cargs" ("_position" tyid)
###             ("_cargs" ("_position" dc)
###               ("_cargs" ("_position" b) ("_position" v)))))
###         ("_applC" ("_position" SConsp) ("_position" tyid)))
###       ("_cargs" ("_position" dc)
###         ("_cargs" ("_position" b) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval_v"
  Proving monotonicity ...
### Ambiguous input (line 3974 of "$AFP/MiniSail/WellformedL.thy") produces 686 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_cev_abbrev" ("_position" ce)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3975 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4142 of "$AFP/MiniSail/WellformedL.thy") produces 56 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_ev_abbrev" ("_position" e)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4143 of "$AFP/MiniSail/WellformedL.thy") produces 112 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_branchv_abbrev" ("_position" s)
###             ("_position" x) ("_position" v'))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4144 of "$AFP/MiniSail/WellformedL.thy") produces 14 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dc) ("_position" t) ("_position" cs)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dc) ("_position" t)
###           ("_applC" ("_position" subst_branchv)
###             ("_cargs" ("_position" cs)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4145 of "$AFP/MiniSail/WellformedL.thy") produces 14 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCE" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2) ("_position" v')
###           ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" tid) ("_position" dclist) ("_position" css)
###       ("_position" b)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###           ("_position" \<B>) ("_position" \<Gamma>\<^sub>2)
###           ("\<^const>Set.member" ("_position" v') ("_position" b'))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfCSS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v'))
###           ("_position" tid) ("_position" dclist)
###           ("_applC" ("_position" subst_branchlv)
###             ("_cargs" ("_position" css)
###               ("_cargs" ("_position" x) ("_position" v'))))
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4146 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4147 of "$AFP/MiniSail/WellformedL.thy") produces 350 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>List.append" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>\<^sub>1)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b')
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>\<^sub>2)))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("_position" \<Gamma>\<^sub>2) ("_position" v') ("_position" b')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>)
###             ("_position" x) ("_position" v'))
###           ("\<^const>IVSubst.subst_dv_abbrev" ("_position" \<Delta>)
###             ("_position" x) ("_position" v')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4148 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4149 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4353 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c0)
###                 ("_position" z0)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4354 of "$AFP/MiniSail/WellformedL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4358 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("_position" \<Gamma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("_position" \<Gamma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4358 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4359 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4375 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" x1)
###       ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1))))
###     ("_applC" ("_position" toSet)
###       ("\<^const>List.append" ("_position" \<Gamma>')
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4375 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4376 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>Syntax.append_g"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c1')
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" x1)
###         ("_tuple_args" ("_position" b1) ("_tuple_arg" ("_position" c1'))))
###       ("_applC" ("_position" toSet)
###         ("\<^const>List.append"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4393 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfC)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" c))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfC)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("_cargs"
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4393 of "$AFP/MiniSail/WellformedL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4394 of "$AFP/MiniSail/WellformedL.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4401 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" B)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" B)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" V_lit) ("_position" l)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" V_lit) ("_position" l)) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" V_var) ("_position" x)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" V_var) ("_position" x)) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" V_pair)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" V_pair)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" V_cons)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" v))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" V_cons)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc) ("_position" v))))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/MiniSail/RCLogic.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" V_consp)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc)
###           ("_cargs" ("_position" b) ("_position" v)))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" V_consp)
###       ("_cargs" ("_position" tyid)
###         ("_cargs" ("_position" dc)
###           ("_cargs" ("_position" b) ("_position" v)))))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/MiniSail/RCLogic.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i) ("_position" v) ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###       ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i) ("_position" v) ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###       ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i) ("_position" v) ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###       ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("_position" sv)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i)
###       ("_applC" ("_position" CE_val) ("_position" v)) ("_position" sv))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4414 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/MiniSail/RCLogic.thy") produces 108 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###           ("_position" SNum))
###         ("_position" n1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###             ("_position" SNum))
###           ("_position" n2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###             ("_position" SNum))
###           ("_position" n2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###             ("_position" SNum))
###           ("_position" n2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###             ("_position" SNum))
###           ("_position" n2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###           ("_position" SNum))
###         ("_position" n1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###             ("_position" SNum))
###           ("_position" n2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###           ("_position" SNum))
###         ("_position" n1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###             ("_position" SNum))
###           ("_position" n2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###           ("_position" SNum))
###         ("_position" n1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SNum)
###         ("\<^const>Groups.plus_class.plus" ("_position" n1)
###           ("_position" n2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4415 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/MiniSail/RCLogic.thy") produces 27 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SNum) ("_position" n1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SNum) ("_position" n2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###           ("_position" n2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4416 of "$AFP/MiniSail/WellformedL.thy") produces 27 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 148 of "$AFP/MiniSail/RCLogic.thy") produces 27 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs" ("_position" v1) ("_position" v2))))
###       ("_applC" ("_position" SBool)
###         ("\<^const>HOL.eq" ("_position" s1) ("_position" s2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/MiniSail/RCLogic.thy") produces 54 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("_applC"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("_applC"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" v1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4417 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4418 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 150 of "$AFP/MiniSail/RCLogic.thy") produces 54 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("_applC"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SPair)
###           ("_cargs" ("_position" v1) ("_position" v2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("_applC"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###           ("_position" SPair))
###         ("_cargs" ("_position" v1) ("_position" v2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" v2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4420 of "$AFP/MiniSail/WellformedL.thy") produces 27 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B')
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 151 of "$AFP/MiniSail/RCLogic.thy") produces 54 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval_e" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v1)
###         ("_applC" ("_position" SBitvec) ("_position" bv1))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v2)
###           ("_applC" ("_position" SBitvec) ("_position" bv2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_concat)
###         ("_cargs" ("_position" v1) ("_position" v2)))
###       ("_applC" ("_position" SBitvec)
###         ("\<^const>List.append" ("_position" bv1) ("_position" bv2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/MiniSail/RCLogic.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^fixed>eval_e" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_e" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###         ("_applC" ("_position" SBitvec) ("_position" bv)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i)
###       ("_applC" ("_position" CE_len) ("_position" v))
###       ("_applC" ("_position" SNum)
###         ("_applC" ("_position" int)
###           ("_applC" ("_position" List.length) ("_position" bv)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval_e"
  Proving monotonicity ...
### Ambiguous input (line 4421 of "$AFP/MiniSail/WellformedL.thy") produces 147 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" ce)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4422 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4562 of "$AFP/MiniSail/WellformedL.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfE" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" B') ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" e) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfS" ("_position" \<Theta>)
###           ("_position" \<Phi>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_eb_abbrev" ("_position" e)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b')
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4563 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfE" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfS" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" \<Gamma>) ("_position" \<Delta>)
###       ("_position" s) ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4566 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>)
###       ("_constrain" ("_position" \<Phi>) ("_type_name" \<Phi>))))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4567 of "$AFP/MiniSail/WellformedL.thy") produces 75 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B')
###       ("_position" \<Gamma>) ("_position" \<Delta>)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_insert_fset" ("_position" bv))
###         ("_position" B')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###           ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" \<Gamma>)
###             ("_position" bv) ("_position" b))
###           ("\<^const>BTVSubst.subst_db_abbrev" ("_position" \<Delta>)
###             ("_position" bv) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4568 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" ftq)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4569 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<Phi>)
###       ("_position" \<B>) ("_position" ft)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4706 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>)
###     ("_insert_fset" ("_position" bv))
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" GNil))
###     ("_position" \<tau>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4706 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4707 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args"
###           ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b)
###             ("_position" bv) ("_position" b'))
###           ("_tuple_arg"
###             ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c)
###               ("_position" bv) ("_position" b')))))
###       ("_position" GNil))
###     ("\<^const>BTVSubst.subst_tb_abbrev" ("_position" \<tau>)
###       ("_position" bv) ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4717 of "$AFP/MiniSail/WellformedL.thy") produces 245 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" v) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" v) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" v) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4718 of "$AFP/MiniSail/WellformedL.thy") produces 125 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4719 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4720 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" \<tau>)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4721 of "$AFP/MiniSail/WellformedL.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ts)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4723 of "$AFP/MiniSail/WellformedL.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" b)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4724 of "$AFP/MiniSail/WellformedL.thy") produces 245 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce) ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>)
###       ("\<^const>Set.member" ("_position" ce) ("_position" b'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<Gamma>)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###           ("_position" G))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" c2)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c1))))
###             ("_position" G))
###           ("_position" ce) ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4725 of "$AFP/MiniSail/WellformedL.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfTD" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Wellformed.wfPhi" ("_position" \<Theta>) ("_position" td)))
###   ("\<^const>HOL.Trueprop" ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellformedL"
### 11.216s elapsed time, 28.881s cpu time, 2.008s GC time
### Ambiguous input (line 157 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_val) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_val) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_val) ("_position" v)) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Plus)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" LEq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 160 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_op)
###       ("_cargs" ("_position" Eq)
###         ("_cargs" ("_position" v1) ("_position" v2))))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 161 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_fst) ("_position" v)) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_snd) ("_position" v)) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_concat)
###       ("_cargs" ("_position" v1) ("_position" v2)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" CE_len) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" CE_len) ("_position" v)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" CE_len) ("_position" v)) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>eval_c" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>eval_c" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/MiniSail/RCLogic.thy") produces 64 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_conj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj" ("_position" b1) ("_position" b2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/MiniSail/RCLogic.thy") produces 64 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_disj)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.disj" ("_position" b1) ("_position" b2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/MiniSail/RCLogic.thy") produces 64 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c1) ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###         ("_position" b1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###           ("_position" b2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_imp)
###         ("_cargs" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.implies" ("_position" b1) ("_position" b2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 172 of "$AFP/MiniSail/RCLogic.thy") produces 64 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" c) ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_e" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_l"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###         ("_position" b))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_e" ("_position" i)
###       ("_applC" ("_position" C_not) ("_position" c))
###       ("\<^const>HOL.Not" ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/MiniSail/RCLogic.thy") produces 64 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval_c" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e1)
###         ("_position" sv1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e2)
###           ("_position" sv2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval_c" ("_position" i)
###       ("_applC" ("_position" C_eq)
###         ("_cargs" ("_position" e1) ("_position" e2)))
###       ("\<^const>HOL.eq" ("_position" sv1) ("_position" sv2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval_c"
  Proving monotonicity ...
### Ambiguous input (line 178 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" C_true)
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" C_false)
###     ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" C_disj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 182 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" C_imp)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("_applC" ("_position" C_not) ("_position" c)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" C_not) ("_position" c)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" C_not) ("_position" c)) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" C_not) ("_position" c)) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" C_eq)
###       ("_cargs" ("_position" e1) ("_position" e2)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" C_true)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" C_true)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" C_true)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" C_true)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" C_false)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" C_false)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" C_false)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" C_false)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###       ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>is_satis" ("_position" i) ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###       ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>is_satis" ("_position" i) ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###       ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>is_satis" ("_position" i) ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###       ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>is_satis" ("_position" i) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "is_satis"
  Proving monotonicity ...
### Ambiguous input (line 196 of "$AFP/MiniSail/RCLogic.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" GNil))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>is_satis_g" ("_position" i) ("_position" GNil))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.eq" ("_position" GNil) ("_position" True))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>is_satis_g" ("_position" i)
###     ("\<^const>HOL.eq" ("_position" GNil) ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 197 of "$AFP/MiniSail/RCLogic.thy") produces 80 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^fixed>is_satis_g"
###       ("\<^const>HOL.conj"
###         ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###         ("_position" i))
###       ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>is_satis_g" ("_position" i)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^fixed>is_satis_g"
###       ("\<^const>HOL.conj"
###         ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###         ("_position" i))
###       ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G))
###       ("\<^fixed>is_satis_g"
###         ("\<^const>HOL.conj"
###           ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###           ("_position" i))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>is_satis_g" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G))
###       ("\<^fixed>is_satis_g"
###         ("\<^const>HOL.conj"
###           ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###           ("_position" i))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.conj"
###         ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###         ("_position" i))
###       ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>is_satis_g" ("_position" i)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.conj"
###         ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###         ("_position" i))
###       ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G))
###       ("\<^const>RCLogic.is_satis"
###         ("\<^const>HOL.conj"
###           ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###           ("_position" i))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>is_satis_g" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G))
###       ("\<^const>RCLogic.is_satis"
###         ("\<^const>HOL.conj"
###           ("\<^fixed>is_satis_g" ("_position" i) ("_position" c))
###           ("_position" i))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^fixed>is_satis_g"
###       ("\<^fixed>is_satis_g" ("_position" i)
###         ("\<^const>HOL.conj" ("_position" c) ("_position" i)))
###       ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>is_satis_g" ("_position" i)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###         ("_position" G)))
###     ("\<^fixed>is_satis_g"
###       ("\<^fixed>is_satis_g" ("_position" i)
###         ("\<^const>HOL.conj" ("_position" c) ("_position" i)))
###       ("_position" G))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/MiniSail/RCLogic.thy") produces 840 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###       ("_position" c))
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###         ("_position" G) ("_position" c))
###       ("\<^const>HOL.All_binder" ("_position" i)
###         ("\<^const>RCLogic.is_satis"
###           ("\<^const>HOL.conj"
###             ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###               ("_position" i))
###             ("_position" i))
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###             ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###     ("\<^const>HOL.eq" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###           ("_position" G) ("_position" c))
###         ("\<^const>HOL.All_binder" ("_position" i)
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.conj"
###               ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###                 ("_position" i))
###               ("_position" i))
###             ("\<^const>RCLogic.is_satis"
###               ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###               ("_position" c))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###       ("_position" c))
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###         ("_position" G) ("_position" c))
###       ("\<^const>HOL.All_binder" ("_position" i)
###         ("\<^const>RCLogic.is_satis"
###           ("\<^const>HOL.conj"
###             ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###               ("_position" i))
###             ("_position" i))
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###             ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###     ("\<^const>HOL.eq" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###           ("_position" G) ("_position" c))
###         ("\<^const>HOL.All_binder" ("_position" i)
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.conj"
###               ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###                 ("_position" i))
###               ("_position" i))
###             ("\<^const>RCLogic.is_satis"
###               ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###               ("_position" c))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###       ("_position" c))
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###         ("_position" G) ("_position" c))
###       ("\<^const>HOL.All_binder" ("_position" i)
###         ("\<^const>RCLogic.is_satis"
###           ("\<^const>HOL.conj"
###             ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###               ("_position" i))
###             ("_position" i))
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###             ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###     ("\<^const>HOL.eq" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###           ("_position" G) ("_position" c))
###         ("\<^const>HOL.All_binder" ("_position" i)
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.conj"
###               ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###                 ("_position" i))
###               ("_position" i))
###             ("\<^const>RCLogic.is_satis"
###               ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###               ("_position" c))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###       ("_position" c))
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###         ("_position" G) ("_position" c))
###       ("\<^const>HOL.All_binder" ("_position" i)
###         ("\<^const>RCLogic.is_satis"
###           ("\<^const>HOL.conj"
###             ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###               ("_position" i))
###             ("_position" i))
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###             ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###     ("\<^const>HOL.eq" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###           ("_position" G) ("_position" c))
###         ("\<^const>HOL.All_binder" ("_position" i)
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.conj"
###               ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###                 ("_position" i))
###               ("_position" i))
###             ("\<^const>RCLogic.is_satis"
###               ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###               ("_position" c))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###       ("_position" c))
###     ("\<^const>HOL.conj"
###       ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###         ("_position" G) ("_position" c))
###       ("\<^const>HOL.All_binder" ("_position" i)
###         ("\<^const>RCLogic.is_satis"
###           ("\<^const>HOL.conj"
###             ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###               ("_position" i))
###             ("_position" i))
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###             ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid" ("_position" P) ("_position" B) ("_position" G)
###     ("\<^const>HOL.eq" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###           ("_position" G) ("_position" c))
###         ("\<^const>HOL.All_binder" ("_position" i)
###           ("\<^const>RCLogic.is_satis"
###             ("\<^const>HOL.conj"
###               ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###                 ("_position" i))
###               ("_position" i))
###             ("\<^const>RCLogic.is_satis"
###               ("\<^const>HOL.implies" ("_position" G) ("_position" i))
###               ("_position" c))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/MiniSail/RCLogic.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" B)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.RCLogic"
### 14.008s elapsed time, 32.039s cpu time, 2.033s GC time
Loading theory "Draft.RCLogicL" (required by "Draft.RCLogicLTemplates")
### Ambiguous input (line 20 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" B)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("\<^const>List.append" ("_position" G') ("_position" G))
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" P)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" G') ("_position" G))
###         ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" B)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c'))))
###             ("_position" \<Gamma>)))
###         ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/MiniSail/RCLogicL.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###         ("_position" s))
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###         ("_position" s))
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 186 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 250 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" B_bitvec)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" B_bitvec)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_bitvec))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_bitvec))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_bitvec))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_bitvec))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_bitvec))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 260 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v)
###     ("_applC" ("_position" B_pair)
###       ("_cargs" ("_position" b1) ("_position" b2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v)
###     ("_applC" ("_position" B_pair)
###       ("_cargs" ("_position" b1) ("_position" b2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" B_pair)
###         ("_cargs" ("_position" b1) ("_position" b2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 270 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" B_int)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" B_int)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_int))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_int))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_int))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_int))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" B_int))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/MiniSail/RCLogicL.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###         ("_position" s))
###       ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" v)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###         ("_position" s))
###       ("\<^const>RCLogic.wfRCV" ("_position" \<Theta>) ("_position" s)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 288 of "$AFP/MiniSail/RCLogicL.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###         ("_position" s))
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" s)
###         ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e)
###     ("\<^const>HOL.conj" ("_position" s)
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###         ("_position" s))
###       ("\<^const>RCLogic.wfRCV" ("_position" P) ("_position" s)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 363 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" e) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" e) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 364 of "$AFP/MiniSail/RCLogicL.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" e) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 422 of "$AFP/MiniSail/RCLogicL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("_position" \<Gamma>) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 423 of "$AFP/MiniSail/RCLogicL.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 449 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 449 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 477 of "$AFP/MiniSail/RCLogicL.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s)
###     ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("\<^const>HOL.Ex_binder" ("_position" s) ("_position" i))
###     ("_position" c) ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 485 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c))))
###       ("_position" G))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 486 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 491 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 491 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 492 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/MiniSail/RCLogicL.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis"
###     ("\<^const>HOL.implies"
###       ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c1))
###       ("_position" i))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g"
###     ("\<^const>HOL.implies"
###       ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c1))
###       ("_position" i))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c1))
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.implies" ("_position" c1)
###       ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.implies" ("_position" c1)
###       ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c1))
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c1))
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.implies" ("_position" c1)
###       ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.implies" ("_position" c1)
###       ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c1))
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c1)
###     ("_position" b1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###     ("_position" b1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###     ("_position" b1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###     ("_position" b1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c2)
###     ("_position" b2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###     ("_position" b2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###     ("_position" b2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###     ("_position" b2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 506 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 519 of "$AFP/MiniSail/RCLogicL.thy") produces 40 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G))
###     ("\<^const>RCLogic.is_satis_g"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" toSet) ("_position" G)))
###           ("_position" i)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G))
###     ("\<^const>RCLogic.is_satis_g"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" toSet) ("_position" G)))
###           ("_position" i)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.eq" ("_position" G)
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b) ("_position" c)))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_applC" ("_position" toSet) ("_position" G)))
###             ("_position" i)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.eq" ("_position" G)
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b) ("_position" c)))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_applC" ("_position" toSet) ("_position" G)))
###             ("_position" i)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G))
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" toSet) ("_position" G)))
###           ("_position" i)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G))
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" x) ("_idts" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" toSet) ("_position" G)))
###           ("_position" i)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.eq" ("_position" G)
###       ("\<^const>RCLogic.is_satis"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b) ("_position" c)))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_applC" ("_position" toSet) ("_position" G)))
###             ("_position" i)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.eq" ("_position" G)
###       ("\<^const>RCLogic.is_satis"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" x)
###             ("_idts" ("_position" b) ("_position" c)))
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c))))
###               ("_applC" ("_position" toSet) ("_position" G)))
###             ("_position" i)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" x) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" toSet) ("_position" G)))
###           ("_position" i))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" x) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_applC" ("_position" toSet) ("_position" G)))
###           ("_position" i))
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 523 of "$AFP/MiniSail/RCLogicL.thy") produces 160 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("\<^const>HOL.conj"
###         ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###         ("_position" i))
###       ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("\<^const>HOL.conj"
###         ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###         ("_position" i))
###       ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2))
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.conj"
###           ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###           ("_position" i))
###         ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2))
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.conj"
###           ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###           ("_position" i))
###         ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>List.append" ("_position" G1) ("_position" G2)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("\<^const>HOL.conj"
###         ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###         ("_position" i))
###       ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>List.append" ("_position" G1) ("_position" G2)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("\<^const>HOL.conj"
###         ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###         ("_position" i))
###       ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>List.append" ("_position" G1) ("_position" G2))
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.conj"
###           ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###           ("_position" i))
###         ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.eq"
###       ("\<^const>List.append" ("_position" G1) ("_position" G2))
###       ("\<^const>RCLogic.is_satis_g"
###         ("\<^const>HOL.conj"
###           ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###           ("_position" i))
###         ("_position" G2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.conj"
###         ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###         ("_position" i))
###       ("_position" G2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>Syntax.append_g" ("_position" G1) ("_position" G2)))
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.conj"
###         ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G1))
###         ("_position" i))
###       ("_position" G2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 530 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 566 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 567 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" e) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" e) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" e) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" e) ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 573 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 574 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 582 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 582 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v') ("_position" x)
###       ("_position" v))
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v') ("_position" x)
###       ("_position" v))
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v') ("_position" x)
###       ("_position" v))
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>IVSubst.subst_vv_abbrev" ("_position" v') ("_position" x)
###       ("_position" v))
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 583 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" v') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" v') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" v') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" v') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 620 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e')
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e')
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e')
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e')
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 620 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 621 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" y) ("_position" s)))
###     ("_position" e) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" y) ("_position" s)))
###     ("_position" e) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" y) ("_position" s)))
###     ("_position" e) ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" y) ("_position" s)))
###     ("_position" e) ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 686 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 686 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))
###     ("_position" s1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))
###     ("_position" s1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))
###     ("_position" s1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###       ("_position" v))
###     ("_position" s1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 687 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c) ("_position" s2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 766 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>Syntax.append_g"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G)
###     ("\<^const>List.append"
###       ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###         ("_position" x) ("_position" v))
###       ("_position" \<Gamma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 766 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 766 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 767 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c))))
###             ("_position" \<Gamma>)))
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 795 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 795 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 796 of "$AFP/MiniSail/RCLogicL.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis"
###     ("\<^const>HOL.iff"
###       ("\<^const>RCLogic.is_satis" ("_position" i)
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###           ("_position" v)))
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s))))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g"
###     ("\<^const>HOL.iff"
###       ("\<^const>RCLogic.is_satis" ("_position" i)
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###           ("_position" v)))
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s))))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis_g"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis_g"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 811 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" v)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" v)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 811 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfC)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" c))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfC)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("_cargs"
###           ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###             ("\<^const>Syntax.\<Gamma>.GCons"
###               ("_tuple" ("_position" x)
###                 ("_tuple_args" ("_position" b)
###                   ("_tuple_arg" ("_position" c'))))
###               ("_position" \<Gamma>)))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 811 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>List.append"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>Syntax.append_g"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" \<Gamma>')
###             ("_position" x) ("_position" v))
###           ("_position" \<Gamma>))
###         ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 811 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>) ("_position" v) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" v) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 812 of "$AFP/MiniSail/RCLogicL.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis"
###     ("\<^const>HOL.iff"
###       ("\<^const>RCLogic.is_satis" ("_position" i)
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###           ("_position" v)))
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s))))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g"
###     ("\<^const>HOL.iff"
###       ("\<^const>RCLogic.is_satis" ("_position" i)
###         ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###           ("_position" v)))
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s))))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis_g"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>HOL.iff"
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v))
###       ("\<^const>RCLogic.is_satis_g"
###         ("_MapUpd" ("_position" i)
###           ("_maplet" ("_position" x) ("_position" s)))
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>IVSubst.subst_cv_abbrev" ("_position" c) ("_position" x)
###         ("_position" v)))
###     ("\<^const>RCLogic.is_satis_g"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 829 of "$AFP/MiniSail/RCLogicL.thy") produces 384 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.conj"
###         ("\<^const>RCLogic.wfI"
###           ("\<^const>HOL.All_binder" ("_position" i) ("_position" P))
###           ("_position" G) ("_position" i))
###         ("_position" i))
###       ("_position" G))
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis"
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.wfI"
###         ("\<^const>HOL.All_binder" ("_position" i) ("_position" P))
###         ("_position" G) ("_position" i))
###       ("_position" i))
###     ("\<^const>HOL.implies" ("_position" G)
###       ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g"
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.wfI"
###         ("\<^const>HOL.All_binder" ("_position" i) ("_position" P))
###         ("_position" G) ("_position" i))
###       ("_position" i))
###     ("\<^const>HOL.implies" ("_position" G)
###       ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>RCLogic.wfI"
###       ("\<^const>HOL.All_binder" ("_position" i) ("_position" P))
###       ("_position" G) ("_position" i))
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.wfI"
###     ("\<^const>HOL.All_binder" ("_position" i) ("_position" P))
###     ("_position" G)
###     ("\<^const>HOL.conj" ("_position" i)
###       ("\<^const>RCLogic.is_satis" ("_position" i)
###         ("\<^const>HOL.implies" ("_position" G)
###           ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" i)
###     ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("\<^const>RCLogic.is_satis" ("_position" i)
###           ("\<^const>HOL.implies" ("_position" G)
###             ("\<^const>RCLogic.is_satis" ("_position" i)
###               ("_position" c))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" i)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###         ("_position" i))
###       ("\<^const>RCLogic.is_satis" ("_position" i)
###         ("\<^const>HOL.implies" ("_position" G)
###           ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>RCLogic.wfI"
###       ("\<^const>HOL.All_binder" ("_position" i) ("_position" P))
###       ("_position" G) ("_position" i))
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>HOL.implies" ("_position" G)
###         ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.wfI"
###     ("\<^const>HOL.All_binder" ("_position" i) ("_position" P))
###     ("_position" G)
###     ("\<^const>HOL.conj" ("_position" i)
###       ("\<^const>RCLogic.is_satis_g" ("_position" i)
###         ("\<^const>HOL.implies" ("_position" G)
###           ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" i)
###     ("\<^const>RCLogic.wfI" ("_position" P) ("_position" G)
###       ("\<^const>HOL.conj" ("_position" i)
###         ("\<^const>RCLogic.is_satis_g" ("_position" i)
###           ("\<^const>HOL.implies" ("_position" G)
###             ("\<^const>RCLogic.is_satis" ("_position" i)
###               ("_position" c))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 836 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" P) ("_position" B)
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" P) ("_position" B)
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 841 of "$AFP/MiniSail/RCLogicL.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" P) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" G))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" P) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" G))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" P) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" G))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" P) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" G))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" P) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c1))))
###       ("_position" G))
###     ("_position" c1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 851 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 852 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 890 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 891 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 927 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 928 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" e)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 965 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" e)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 966 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" e)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" e)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1003 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1012 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1013 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1021 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1022 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1028 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1029 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1035 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1036 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1054 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1054 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1055 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1080 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" \<Gamma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" \<Gamma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1080 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1081 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1088 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1089 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1094 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1095 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g"
###     ("_MapUpd" ("_position" i) ("_maplet" ("_position" x) ("_position" s)))
###     ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1143 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.append_g" ("_position" G') ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.append_g" ("_position" G') ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>List.append" ("_position" G') ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>List.append" ("_position" G') ("_position" G))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1144 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1158 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0'))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1159 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>List.append" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))
###     ("_position" c0')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b0) ("_tuple_arg" ("_position" c0))))
###         ("_position" \<Gamma>)))
###     ("_position" c0')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1160 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>Syntax.append_g" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" B)
###         ("\<^const>List.append" ("_position" \<Gamma>')
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b0)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" \<Gamma>)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1212 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1213 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1235 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1236 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1265 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1292 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1293 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1298 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1299 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "boxed_b"
  Proving monotonicity ...
Proofs for inductive predicate(s) "boxed_i"
  Proving monotonicity ...
### Ambiguous input (line 1441 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" b)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" typid) ("_position" bdc))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" typid)
###             ("_cargs" ("_position" bva) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" T)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x1)
###                 ("_position" b1) ("_position" c1))))
###           ("_applC" ("_position" set) ("_position" dclist)))
###         ("\<^const>RCLogic.wfRCV" ("_position" T) ("_position" s)
###           ("\<^const>HOL.conj"
###             ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b1)
###               ("_position" bva) ("_position" bdc))
###             ("\<^const>Nominal2_Base.pt_class.fresh"
###               ("_applC" ("_position" atom) ("_position" bva))
###               ("_position" tm))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_position" b)
###       ("_applC" ("_position" B_app)
###         ("_cargs" ("_position" typid) ("_position" bdc))))
###     ("\<^const>HOL.conj"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" AF_typedef_poly)
###           ("_cargs" ("_position" typid)
###             ("_cargs" ("_position" bva) ("_position" dclist))))
###         ("_applC" ("_position" set) ("_position" T)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" dc)
###             ("_tuple_arg"
###               ("\<^const>Syntax.T_refined_type" ("_position" x1)
###                 ("_position" b1) ("_position" c1))))
###           ("_applC" ("_position" set) ("_position" dclist)))
###         ("\<^const>HOL.conj"
###           ("\<^const>RCLogic.wfRCV" ("_position" T) ("_position" s)
###             ("\<^const>BTVSubst.subst_bb_abbrev" ("_position" b1)
###               ("_position" bva) ("_position" bdc)))
###           ("\<^const>Nominal2_Base.pt_class.fresh"
###             ("_applC" ("_position" atom) ("_position" bva))
###             ("_position" tm)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1713 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>BTVSubst.subst_vb_abbrev" ("_position" v) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1713 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" v)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" v)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1789 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" e)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" e)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1789 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" e) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" e) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" e) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>BTVSubst.subst_ceb_abbrev" ("_position" e) ("_position" bv)
###       ("_position" b'))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1880 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1880 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i') ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i') ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i') ("_position" c)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i') ("_position" c)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1923 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_cb_abbrev"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c))
###     ("_position" bv) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_cb_abbrev"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c))
###     ("_position" bv) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1924 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1934 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" c)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1935 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_cb_abbrev"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" c))
###     ("_position" bv) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>BTVSubst.subst_cb_abbrev" ("_position" c) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_cb_abbrev"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" c))
###     ("_position" bv) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1989 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G1)
###     ("\<^const>Syntax.append_g" ("_position" G2) ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" G1)
###     ("\<^const>List.append" ("_position" G2) ("_position" G))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1990 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_gb_abbrev"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G))
###     ("_position" bv) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" G) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" G) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_gb_abbrev"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G))
###     ("_position" bv) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1991 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2009 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_gb_abbrev"
###     ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" G))
###     ("_position" bv) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" G) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>BTVSubst.subst_gb_abbrev" ("_position" G) ("_position" bv)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BTVSubst.subst_gb_abbrev"
###     ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" G))
###     ("_position" bv) ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2010 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" G)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" G)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2016 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2054 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("_applC" ("_position" L_num)
###             ("_applC" ("_position" int)
###               ("_applC" ("_position" length) ("_position" v)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("_applC" ("_position" L_num)
###             ("_applC" ("_position" int)
###               ("_applC" ("_position" length) ("_position" v)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2055 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_len)
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit)
###             ("_applC" ("_position" L_bitvec) ("_position" v))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_len)
###         ("\<^const>Syntax.CE_val"
###           ("_applC" ("_position" V_lit)
###             ("_applC" ("_position" L_bitvec) ("_position" v))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2068 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("_applC" ("_position" L_num)
###             ("\<^const>Groups.plus_class.plus" ("_position" n1)
###               ("_position" n2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("_applC" ("_position" L_num)
###             ("\<^const>Groups.plus_class.plus" ("_position" n1)
###               ("_position" n2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2069 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n1))))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Plus)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n1))))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n2))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2082 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("\<^const>HOL.If"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###               ("_position" n2))
###             ("_position" L_true) ("_position" L_false)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("\<^const>HOL.If"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" n1)
###               ("_position" n2))
###             ("_position" L_true) ("_position" L_false)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2083 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n1))))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" LEq)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n1))))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n2))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2136 of "$AFP/MiniSail/RCLogicL.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n1)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n1)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n1)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n1)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n1)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n1)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n1)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n1)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2136 of "$AFP/MiniSail/RCLogicL.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" n2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n2)))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" n2)))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2141 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" n1) ("_position" n2))
###             ("_position" L_true) ("_position" L_false)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_lit)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" n1) ("_position" n2))
###             ("_position" L_true) ("_position" L_false)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2142 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" n1)))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" n2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i)
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" n1)))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" n2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2169 of "$AFP/MiniSail/RCLogicL.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_position" e2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_eq"
###     ("\<^const>RCLogic.valid" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>Pure.eq"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_position" e1)))))
###         ("_position" GNil))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x))))
###     ("_position" e2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_eq"
###     ("\<^const>RCLogic.valid" ("_position" P) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b)
###             ("_tuple_arg"
###               ("\<^const>Syntax.C_eq"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_position" e1)))))
###         ("_position" GNil))
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x))))
###     ("_position" e2)))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" GNil))
###     ("_applC" ("_position" CE_val)
###       ("_applC" ("_position" V_var) ("_position" x))))
###   ("_position" e2))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" P) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_position" e1)))))
###       ("_position" GNil))
###     ("_applC" ("_position" CE_val)
###       ("_applC" ("_position" V_var) ("_position" x))))
###   ("_position" e2))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2203 of "$AFP/MiniSail/RCLogicL.thy") produces 96 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit"
###                   ("_applC" ("_position" L_num)
###                     ("_applC" ("_position" int)
###                       ("_applC" ("_position" length)
###                         ("_position" v))))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("_applC" ("_position" CE_len)
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_var"
###         ("_applC" ("_position" L_bitvec) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2224 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit) ("_position" ll)))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n1))))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit) ("_position" ll)))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" opp)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n1))))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit)
###                 ("_applC" ("_position" L_num) ("_position" n2))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2248 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_bool)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("\<^const>HOL.If"
###                     ("\<^const>HOL.eq" ("_position" l1) ("_position" l2))
###                     ("_position" L_true) ("_position" L_false))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" l1)))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" l2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_bool)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("\<^const>HOL.If"
###                     ("\<^const>HOL.eq" ("_position" l1) ("_position" l2))
###                     ("_position" L_true) ("_position" L_false))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_op)
###         ("_cargs" ("_position" Eq)
###           ("_cargs"
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" l1)))
###             ("\<^const>Syntax.CE_val"
###               ("_applC" ("_position" V_lit) ("_position" l2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2274 of "$AFP/MiniSail/RCLogicL.thy") produces 24 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_fst"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("\<^const>Syntax.CE_fst"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###             ("_position" v\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>1)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>1))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("\<^const>Syntax.CE_fst"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###             ("_position" v\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2297 of "$AFP/MiniSail/RCLogicL.thy") produces 24 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_lit" ("_position" x))))
###   ("\<^const>Syntax.CE_snd"
###     ("\<^const>Syntax.CE_val"
###       ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###         ("_position" v\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("\<^const>Syntax.CE_snd"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###             ("_position" v\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b\<^sub>2)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" x)))
###               ("\<^const>Syntax.CE_val" ("_position" v\<^sub>2))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("\<^const>Syntax.CE_val" ("\<^const>Syntax.V_var" ("_position" x)))
###       ("\<^const>Syntax.CE_snd"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_pair" ("_position" v\<^sub>1)
###             ("_position" v\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2320 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Pi>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_bitvec)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_bitvec)
###                     ("\<^const>Syntax.append_g" ("_position" v1)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_concat)
###         ("_cargs"
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v1))))
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Pi>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_bitvec)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_bitvec)
###                     ("\<^const>Syntax.append_g" ("_position" v1)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_concat)
###         ("_cargs"
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v1))))
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Pi>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_bitvec)
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_bitvec)
###                     ("\<^const>List.append" ("_position" v1)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_concat)
###         ("_cargs"
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v1))))
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Pi>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_bitvec)
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_bitvec)
###                     ("\<^const>List.append" ("_position" v1)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_eq"
###       ("_applC" ("_position" CE_val)
###         ("_applC" ("_position" V_var) ("_position" x)))
###       ("_applC" ("_position" CE_concat)
###         ("_cargs"
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v1))))
###           ("\<^const>Syntax.CE_val"
###             ("_applC" ("_position" V_lit)
###               ("_applC" ("_position" L_bitvec) ("_position" v2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2349 of "$AFP/MiniSail/RCLogicL.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfV" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfCE" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce) ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Set.member" ("_position" ce) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2350 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>)
###     ("\<^const>Syntax.C_eq" ("_position" ce) ("_position" ce))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_eq"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###       ("_position" \<Gamma>) ("_position" ce))
###     ("_position" ce)))
### ("\<^const>Pure.eq"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("_position" \<Gamma>) ("_position" ce))
###   ("_position" ce))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2363 of "$AFP/MiniSail/RCLogicL.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_imp"
###     ("\<^const>Wellformed.wfC" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###         ("_position" \<Gamma>))
###       ("_position" c1))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_imp"
###     ("\<^const>Wellformed.wfT" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###         ("_position" \<Gamma>))
###       ("_position" c1))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_imp"
###     ("\<^const>Wellformed.wfTs" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###         ("_position" \<Gamma>))
###       ("_position" c1))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_imp"
###     ("\<^const>Wellformed.wfD" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###         ("_position" \<Gamma>))
###       ("_position" c1))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_imp"
###     ("\<^const>Wellformed.wfFT" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###         ("_position" \<Gamma>))
###       ("_position" c1))
###     ("_position" c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2364 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_imp" ("_position" c1) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_imp"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" \<B>)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c2))))
###         ("_position" \<Gamma>))
###       ("_position" c1))
###     ("_position" c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2385 of "$AFP/MiniSail/RCLogicL.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_num)
###                     ("\<^const>Groups.zero_class.zero"))))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_num)
###                     ("\<^const>Groups.zero_class.zero"))))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_num)
###                     ("\<^const>Groups.zero_class.zero"))))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" m)))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_lit)
###                   ("_applC" ("_position" L_num)
###                     ("\<^const>Groups.zero_class.zero"))))
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" L_true)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2388 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" ?G)
###     ("\<^const>Syntax.C_conj" ("_position" ?c1) ("_position" ?c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty") ("_position" ?G) ("_position" ?c1))
###     ("_position" ?c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2439 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>)
###     ("\<^const>FSet.fempty") ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2440 of "$AFP/MiniSail/RCLogicL.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_var"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_var"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" L_true)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2444 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" ?G)
###     ("\<^const>Syntax.C_conj" ("_position" ?c1) ("_position" ?c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty") ("_position" ?G) ("_position" ?c1))
###     ("_position" ?c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2498 of "$AFP/MiniSail/RCLogicL.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_var"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_var"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty")
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" GNil))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" L_true)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2502 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" ?G)
###     ("\<^const>Syntax.C_conj" ("_position" ?c1) ("_position" ?c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty") ("_position" ?G) ("_position" ?c1))
###     ("_position" ?c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2549 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis" ("_position" i') ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g" ("_position" i') ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2572 of "$AFP/MiniSail/RCLogicL.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfG" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfB" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Wellformed.wfFTQ" ("_position" \<Theta>) ("_position" B)
###     ("_position" \<Gamma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2572 of "$AFP/MiniSail/RCLogicL.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.wfI"
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.is_satis"
###         ("\<^const>HOL.Ex_binder" ("_position" i) ("_position" i))
###         ("_position" \<Gamma>))
###       ("_position" \<Theta>))
###     ("_position" \<Gamma>) ("_position" i)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.Ex_binder" ("_position" i) ("_position" i))
###       ("_position" \<Gamma>))
###     ("\<^const>RCLogic.wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis"
###     ("\<^const>HOL.Ex_binder" ("_position" i) ("_position" i))
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>RCLogic.wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.is_satis_g"
###     ("\<^const>HOL.Ex_binder" ("_position" i) ("_position" i))
###     ("\<^const>HOL.conj" ("_position" \<Gamma>)
###       ("\<^const>RCLogic.wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" i)
###     ("\<^const>RCLogic.is_satis" ("_position" i)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>RCLogic.wfI" ("_position" \<Theta>)
###           ("_position" \<Gamma>) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" i)
###     ("\<^const>RCLogic.is_satis_g" ("_position" i)
###       ("\<^const>HOL.conj" ("_position" \<Gamma>)
###         ("\<^const>RCLogic.wfI" ("_position" \<Theta>)
###           ("_position" \<Gamma>) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>RCLogic.is_satis_g"
###       ("\<^const>HOL.Ex_binder" ("_position" i) ("_position" i))
###       ("_position" \<Gamma>))
###     ("\<^const>RCLogic.wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###       ("_position" i))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" i)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.is_satis" ("_position" i) ("_position" \<Gamma>))
###       ("\<^const>RCLogic.wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" i)
###     ("\<^const>HOL.conj"
###       ("\<^const>RCLogic.is_satis_g" ("_position" i) ("_position" \<Gamma>))
###       ("\<^const>RCLogic.wfI" ("_position" \<Theta>) ("_position" \<Gamma>)
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.wfI"
###     ("\<^const>RCLogic.is_satis"
###       ("\<^const>HOL.Ex_binder" ("_position" i) ("_position" i))
###       ("\<^const>HOL.conj" ("_position" \<Gamma>) ("_position" \<Theta>)))
###     ("_position" \<Gamma>) ("_position" i)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2573 of "$AFP/MiniSail/RCLogicL.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_var"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_var"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit" ("_position" L_true)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" x)
###         ("_tuple_args" ("_position" B_int)
###           ("_tuple_arg"
###             ("_applC" ("_position" C_eq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num) ("_position" n)))))))))
###       ("_position" \<Gamma>))
###     ("\<^const>Syntax.C_conj"
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true)))))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x)))
###                 ("\<^const>Syntax.CE_len"
###                   ("\<^const>Syntax.CE_val"
###                     ("\<^const>Syntax.V_lit"
###                       ("_applC" ("_position" L_bitvec)
###                         ("_position" v))))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_var" ("_position" L_true))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" B)
###       ("\<^const>Syntax.\<Gamma>.GCons"
###         ("_tuple" ("_position" x)
###           ("_tuple_args" ("_position" B_int)
###             ("_tuple_arg"
###               ("_applC" ("_position" C_eq)
###                 ("_cargs"
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_var) ("_position" x)))
###                   ("_applC" ("_position" CE_val)
###                     ("_applC" ("_position" V_lit)
###                       ("_applC" ("_position" L_num) ("_position" n)))))))))
###         ("_position" \<Gamma>))
###       ("_applC" ("_position" C_eq)
###         ("_cargs"
###           ("_applC" ("_position" CE_op)
###             ("_cargs" ("_position" LEq)
###               ("_cargs"
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_lit)
###                     ("_applC" ("_position" L_num)
###                       ("\<^const>Groups.zero_class.zero"))))
###                 ("_applC" ("_position" CE_val)
###                   ("_applC" ("_position" V_var) ("_position" x))))))
###           ("\<^const>Syntax.CE_val"
###             ("\<^const>Syntax.V_lit" ("_position" L_true))))))
###     ("_applC" ("_position" C_eq)
###       ("_cargs"
###         ("_applC" ("_position" CE_op)
###           ("_cargs" ("_position" LEq)
###             ("_cargs"
###               ("_applC" ("_position" CE_val)
###                 ("_applC" ("_position" V_var) ("_position" x)))
###               ("\<^const>Syntax.CE_len"
###                 ("\<^const>Syntax.CE_val"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v))))))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_var" ("_position" L_true)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2577 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" ?B)
###     ("_position" ?G)
###     ("\<^const>Syntax.C_conj" ("_position" ?c1) ("_position" ?c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("_position" ?B)
###       ("_position" ?G) ("_position" ?c1))
###     ("_position" ?c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2631 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c1)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c1)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c1)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c1)
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2631 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i) ("_position" c2)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i) ("_position" c2)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i) ("_position" c2)
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i) ("_position" c2)
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2632 of "$AFP/MiniSail/RCLogicL.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_c" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_e" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_v" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" True)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.eval_b" ("_position" i)
###     ("_applC" ("_position" C_conj)
###       ("_cargs" ("_position" c1) ("_position" c2)))
###     ("_position" True)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2637 of "$AFP/MiniSail/RCLogicL.thy") produces 1024 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Pure.eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_lit" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("\<^const>Syntax.\<Gamma>.GCons"
###       ("_tuple" ("_position" z)
###         ("_tuple_args"
###           ("\<^const>Syntax.B_pair" ("_position" B_bitvec)
###             ("_position" B_bitvec))
###           ("_tuple_arg"
###             ("\<^const>Syntax.C_eq"
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_var" ("_position" z)))
###               ("\<^const>Syntax.CE_val"
###                 ("\<^const>Syntax.V_pair"
###                   ("\<^const>Syntax.V_var"
###                     ("_applC" ("_position" L_bitvec) ("_position" v1)))
###                   ("\<^const>Syntax.V_lit"
###                     ("_applC" ("_position" L_bitvec)
###                       ("_position" v2)))))))))
###       ("_position" GNil))
###     ("\<^const>Syntax.C_conj"
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_bitvec) ("_position" v))))
###         ("\<^const>Syntax.CE_concat"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))
###           ("\<^const>Syntax.CE_snd"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z))))))
###       ("\<^const>Syntax.C_eq"
###         ("\<^const>Syntax.CE_len"
###           ("\<^const>Syntax.CE_fst"
###             ("\<^const>Syntax.CE_val"
###               ("\<^const>Syntax.V_lit" ("_position" z)))))
###         ("\<^const>Syntax.CE_val"
###           ("\<^const>Syntax.V_lit"
###             ("_applC" ("_position" L_num) ("_position" n))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2639 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>RCLogic.valid" ("_position" \<Theta>) ("\<^const>FSet.fempty")
###     ("_position" ?G)
###     ("\<^const>Syntax.C_conj" ("_position" ?c1) ("_position" ?c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Syntax.C_conj"
###     ("\<^const>RCLogic.valid" ("_position" \<Theta>)
###       ("\<^const>FSet.fempty") ("_position" ?G) ("_position" ?c1))
###     ("_position" ?c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2686 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_satis)
###     ("_cargs" ("_position" i)
###       ("\<^const>Pure.eq" ("_position" e) ("_position" e)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_satis)
###     ("_cargs" ("_position" i)
###       ("\<^const>Syntax.C_eq" ("_position" e) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2693 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>Syntax.append_g" ("_position" G3)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" G)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfG)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs" ("_position" \<B>)
###         ("\<^const>List.append" ("_position" G3)
###           ("\<^const>Syntax.\<Gamma>.GCons"
###             ("_tuple" ("_position" x)
###               ("_tuple_args" ("_position" b)
###                 ("_tuple_arg" ("_position" c0))))
###             ("_position" G)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2693 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>List.append"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" G3)
###             ("_position" x) ("_position" v))
###           ("_position" G))
###         ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wfI)
###     ("_cargs" ("_position" \<Theta>)
###       ("_cargs"
###         ("\<^const>Syntax.append_g"
###           ("\<^const>IVSubst.subst_gv_abbrev" ("_position" G3)
###             ("_position" x) ("_position" v))
###           ("_position" G))
###         ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2694 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_satis_g)
###     ("_cargs" ("_position" i)
###       ("\<^const>Syntax.append_g"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" G3) ("_position" x)
###           ("_position" v))
###         ("_position" G)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_satis_g)
###     ("_cargs" ("_position" i)
###       ("\<^const>List.append"
###         ("\<^const>IVSubst.subst_gv_abbrev" ("_position" G3) ("_position" x)
###           ("_position" v))
###         ("_position" G)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2695 of "$AFP/MiniSail/RCLogicL.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_satis_g)
###     ("_cargs"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("\<^const>Syntax.append_g" ("_position" G3)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c0))))
###           ("_position" G))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_satis_g)
###     ("_cargs"
###       ("_MapUpd" ("_position" i)
###         ("_maplet" ("_position" x) ("_position" s)))
###       ("\<^const>List.append" ("_position" G3)
###         ("\<^const>Syntax.\<Gamma>.GCons"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" b) ("_tuple_arg" ("_position" c0))))
###           ("_position" G))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.RCLogicL"
### 4.244s elapsed time, 5.056s cpu time, 0.422s GC time
Loading theory "Draft.RCLogicLTemplates"
val templateLemmas =
   [("RCLogicL.eval_l_base",
     " ?\<Theta>  \<turnstile> \<lbrakk> ?l \<rbrakk>  : base_for_lit ?l",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("RCLogicL.is_satis_g_suffix",
     " ?i \<Turnstile> ?G' @ ?G  ==>  ?i \<Turnstile> ?G ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("RCLogicL.valid_g_wf",
     "?P ; ?B ; ?G  \<Turnstile> ?c  ==>
       ?P ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("RCLogicL.is_satis_g_append",
     " ?i \<Turnstile> ?G1.0 @ ?G2.0  =
      ( ?i \<Turnstile> ?G1.0  &  ?i \<Turnstile> ?G2.0 )",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("RCLogicL.wfI_domi",
     " ?\<Theta> ; ?\<Gamma> \<turnstile> ?i ==>
      fst ` toSet ?\<Gamma> <= dom ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("RCLogicL.eval_l_boxed_b",
     "\<lbrakk> ?l \<rbrakk>  = ?s ==>
       ?\<Theta>  \<turnstile> ?s ~ base_for_lit
                                     ?l [ ?bv ::= ?b' ] \<setminus> ?s ",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 4), template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 3),
                   template_app (template_hole 0, template_var 4)),
                 template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("RCLogicL.satis_reflI",
     " ?i \<Turnstile> (?x, ?b, ?c) #\<^sub>\<Gamma> ?G  ==>
       ?i \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 1)
           ))),
    ("RCLogicL.valid_ce_eq",
     "  ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?ce : ?b  ==>
      ?\<Theta> ; ?\<B> ; ?\<Gamma>  \<Turnstile> ?ce  ==  ?ce  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))
           ))),
    ("RCLogicL.eval_lit_inj",
     "[| \<lbrakk> ?n1.0 \<rbrakk>  = ?s; \<lbrakk> ?n2.0 \<rbrakk>  = ?s |]
      ==> ?n1.0 = ?n2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2), template_var 1),
        template_equation
         (template_app (template_hole 1, template_var 0), template_var 1)],
       template_equation (template_var 2, template_var 0))),
    ("RCLogicL.eval_c_uniqueness",
     "[|  ?i \<lbrakk> ?c \<rbrakk> ~ ?s ;
          ?i \<lbrakk> ?c \<rbrakk> ~ ?s'  |]
      ==> ?s = ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("RCLogicL.eval_e_uniqueness",
     "[| ?i \<lbrakk> ?e \<rbrakk> ~ ?s ;
         ?i \<lbrakk> ?e \<rbrakk> ~ ?s'  |]
      ==> ?s = ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("RCLogicL.eval_v_uniqueness",
     "[| ?i \<lbrakk> ?v \<rbrakk> ~ ?s ;
         ?i \<lbrakk> ?v \<rbrakk> ~ ?s'  |]
      ==> ?s = ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("RCLogicL.is_satis_g_restrict1",
     "[| toSet ?\<Gamma> <= toSet ?\<Gamma>';
          ?i \<Turnstile> ?\<Gamma>'  |]
      ==>  ?i \<Turnstile> ?\<Gamma> ",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("RCLogicL.is_satis_mp",
     "[|  ?i \<Turnstile> ?c1.0  IMP  ?c2.0  ;  ?i \<Turnstile> ?c1.0  |]
      ==>  ?i \<Turnstile> ?c2.0 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("RCLogicL.is_satis_c_i_upd",
     "[| atom ?x \<sharp> ?c;  ?i \<Turnstile> ?c  |]
      ==>  ?i(?x |-> ?s) \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3),
                 template_app (template_hole 0, template_var 0))),
             template_var 2)
           ))),
    ("RCLogicL.is_satis_g_i_upd",
     "[| atom ?x \<sharp> ?G;  ?i \<Turnstile> ?G  |]
      ==>  ?i(?x |-> ?s) \<Turnstile> ?G ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3),
                 template_app (template_hole 0, template_var 0))),
             template_var 2)
           ))),
    ("RCLogicL.eval_c_conj2I",
     "[|  ?i \<lbrakk> ?c1.0 \<rbrakk> ~ True ;
          ?i \<lbrakk> ?c2.0 \<rbrakk> ~ True  |]
      ==>  ?i \<lbrakk> ?c1.0  AND  ?c2.0  \<rbrakk> ~ True ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("RCLogicL.wfI_suffix",
     "[|  ?P ; ?G' @ ?G \<turnstile> ?i;
          ?P ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==>  ?P ; ?G \<turnstile> ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_var 1)
           ))),
    ("RCLogicL.boxed_i_elims",
     "[|  ?\<Theta>  ; GNil ; ?b , ?bv \<turnstile> ?i \<approx> ?i';
         ?i' = ?i ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_hole 1),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("RCLogicL.eval_c_exist",
     "[|  ?P ; ?\<Gamma> \<turnstile> ?i;
          ?P ; ?B ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c  |]
      ==> EX s.  ?i \<lbrakk> ?c \<rbrakk> ~ s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RCLogicL.is_satis_eq",
     "[|  ?\<Theta> ; ?G \<turnstile> ?i;
           ?\<Theta> ; ?\<B> ; ?G \<turnstile>\<^sub>w\<^sub>f ?e : ?b  |]
      ==>  ?i \<Turnstile> ?e  ==  ?e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 2),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))
           ))),
    ("RCLogicL.wfI_wfC_eval_c",
     "[|  ?P ; ?B ; ?G   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?P ; ?G \<turnstile> ?i |]
      ==> EX s.  ?i \<lbrakk> ?c \<rbrakk> ~ s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RCLogicL.eval_e_lit_inj",
     "[| ?i \<lbrakk> [ [ ?n1.0 ]\<^sup>v ]\<^sup>c\<^sup>e \<rbrakk> ~ ?s ;
         ?i \<lbrakk> [ [ ?n2.0 ]\<^sup>v ]\<^sup>c\<^sup>e \<rbrakk> ~ ?s  |]
      ==> ?n1.0 = ?n2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0))),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("RCLogicL.eval_v_i_upd",
     "[| atom ?x \<sharp> ?v; ?i \<lbrakk> ?v \<rbrakk> ~ ?s'  |]
      ==> ?i(?x |-> ?s) \<lbrakk> ?v \<rbrakk> ~ ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4),
                   template_app (template_hole 0, template_var 0))),
               template_var 3),
             template_var 1)
           ))),
    ("RCLogicL.eval_c_i_upd",
     "[|  ?i \<lbrakk> ?c \<rbrakk> ~ ?s' ; atom ?x \<sharp> ?c |]
      ==>  ?i(?x |-> ?s) \<lbrakk> ?c \<rbrakk> ~ ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1),
                   template_app (template_hole 0, template_var 0))),
               template_var 3),
             template_var 2)
           ))),
    ("RCLogicL.eval_e_i_upd",
     "[| ?i \<lbrakk> ?e \<rbrakk> ~ ?s' ; atom ?x \<sharp> ?e |]
      ==> ?i(?x |-> ?s) \<lbrakk> ?e \<rbrakk> ~ ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1),
                   template_app (template_hole 0, template_var 0))),
               template_var 3),
             template_var 2)
           ))),
    ("RCLogicL.eval_e_exist",
     "[|  ?P ; ?\<Gamma> \<turnstile> ?i;
           ?P ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?e : ?b  |]
      ==> EX s. ?i \<lbrakk> ?e \<rbrakk> ~ s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 2),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RCLogicL.wfV_eval_bitvec",
     "[|  ?P ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : B_bitvec ;
          ?P ; ?\<Gamma> \<turnstile> ?i |]
      ==> EX bv. ?i \<lbrakk> ?v \<rbrakk> ~ SBitvec bv ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("RCLogicL.wfV_eval_int",
     "[|  ?P ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : B_int ;
          ?P ; ?\<Gamma> \<turnstile> ?i |]
      ==> EX n. ?i \<lbrakk> ?v \<rbrakk> ~ SNum n ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("RCLogicL.is_satis_iff",
     " ?i \<Turnstile> ?G  =
      (ALL x b c. (x, b, c) : toSet ?G -->  ?i \<Turnstile> c )",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty))),
    ("RCLogicL.boxed_i_ex",
     "[|  ?T ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile> ?i;
            \<turnstile>\<^sub>w\<^sub>f ?T  |]
      ==> EX i'.  ?T  ; ?\<Gamma> ; ?b , ?bv \<turnstile> ?i \<approx> i'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 4))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RCLogicL.boxed_b_ex",
     "[|  ?T  \<turnstile> ?s : ?b[?bv::=?b']\<^sub>b\<^sub>b;
            \<turnstile>\<^sub>w\<^sub>f ?T  |]
      ==> EX s'.  ?T  \<turnstile> ?s ~ ?b [ ?bv ::= ?b' ] \<setminus> s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 4))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RCLogicL.subst_v_eval_v",
     "[| ?i \<lbrakk> ?v \<rbrakk> ~ ?s ;
         ?i \<lbrakk> ?v'[?x::=?v]\<^sub>v\<^sub>v \<rbrakk> ~ ?s'  |]
      ==> ?i(?x |-> ?s) \<lbrakk> ?v' \<rbrakk> ~ ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1),
                  template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 1),
                   template_app (template_hole 0, template_var 3))),
               template_var 2),
             template_var 0)
           ))),
    ("RCLogicL.is_satis_weakening_x",
     "[|  ?i' \<Turnstile> ?c ; atom ?x \<sharp> ?c; ?i = ?i'(?x |-> ?s) |]
      ==>  ?i \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 3)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), template_var 3)
           ))),
    ("RCLogicL.is_satis_g_weakening_x",
     "[|  ?i' \<Turnstile> ?G ; atom ?x \<sharp> ?G; ?i = ?i'(?x |-> ?s) |]
      ==>  ?i \<Turnstile> ?G ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 3)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), template_var 3)
           ))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ B_bitvec [ ?bv ::= ?b ] \<setminus> ?s' ;
         [| ?s' = ?s;  ?P  \<turnstile> ?s : B_bitvec |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_hole 2),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 4)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_hole 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ B_bool [ ?bv ::= ?b ] \<setminus> ?s' ;
         [| ?s' = ?s;  ?P  \<turnstile> ?s : B_bool |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_hole 2),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 4)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_hole 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ B_int [ ?bv ::= ?b ] \<setminus> ?s' ;
         [| ?s' = ?s;  ?P  \<turnstile> ?s : B_int |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_hole 2),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 4)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_hole 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ B_unit [ ?bv ::= ?b ] \<setminus> ?s' ;
         [| ?s' = ?s;  ?P  \<turnstile> ?s : B_unit |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_hole 2),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 4)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_hole 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("RCLogicL.eval_v_base",
     "[|  ?P ; ?\<Gamma> \<turnstile> ?i;
          ?P ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
         ?i \<lbrakk> ?v \<rbrakk> ~ ?s  |]
      ==>  ?P  \<turnstile> ?s : ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 3),
                  template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 0),
             template_var 1)
           ))),
    ("RCLogicL.is_satis_len_imp",
     " ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_num
                              (int (length
                                     ?v)) ]\<^sup>v ]\<^sup>c\<^sup>e   ==>
       ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [| [ [ L_bitvec
                                 ?v ]\<^sup>v ]\<^sup>c\<^sup>e |]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 1))),
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 0)))))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("RCLogicL.eval_v_exist",
     "[|  ?P ; ?\<Gamma> \<turnstile> ?i;
          ?P ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==> EX s. ?i \<lbrakk> ?v \<rbrakk> ~ s  &  ?P  \<turnstile> s : ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 2),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("RCLogicL.wfI_wfCE_eval_e",
     "[|   ?P ; ?B ; ?G \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
          ?P ; ?G \<turnstile> ?i |]
      ==> EX s. ?i \<lbrakk> ?e \<rbrakk> ~ s  &  ?P  \<turnstile> s : ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 3),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("RCLogicL.wfI_wfV_eval_v",
     "[|  ?\<Theta> ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i |]
      ==> EX s. ?i \<lbrakk> ?v \<rbrakk> ~ s  &
                 ?\<Theta>  \<turnstile> s : ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 3),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("RCLogicL.boxed_b_wfRCV",
     "[|  ?P  \<turnstile> ?s ~ ?b [ ?bv ::= ?b' ] \<setminus> ?s' ;
            \<turnstile>\<^sub>w\<^sub>f ?P  |]
      ==>  ?P  \<turnstile> ?s : ?b[?bv::=?b']\<^sub>b\<^sub>b &
           ?P  \<turnstile> ?s' : ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 0),
               template_var 3))
           ))),
    ("RCLogicL.eval_c_weakening_x",
     "[|  ?i' \<lbrakk> ?c \<rbrakk> ~ ?s ; atom ?x \<sharp> ?c;
         ?i = ?i'(?x |-> ?s') |]
      ==>  ?i \<lbrakk> ?c \<rbrakk> ~ ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 4)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 5),
              template_var 2),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_var 4),
             template_var 3)
           ))),
    ("RCLogicL.eval_e_weakening_x",
     "[| ?i' \<lbrakk> ?c \<rbrakk> ~ ?s ; atom ?x \<sharp> ?c;
         ?i = ?i'(?x |-> ?s') |]
      ==> ?i \<lbrakk> ?c \<rbrakk> ~ ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 4)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 5),
              template_var 2),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_var 4),
             template_var 3)
           ))),
    ("RCLogicL.eval_v_weakening_x",
     "[| ?i' \<lbrakk> ?c \<rbrakk> ~ ?s ; atom ?x \<sharp> ?c;
         ?i = ?i'(?x |-> ?s') |]
      ==> ?i \<lbrakk> ?c \<rbrakk> ~ ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 4)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 5),
              template_var 2),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_var 4),
             template_var 3)
           ))),
    ("RCLogicL.valid_weakening",
     "[| ?\<Theta> ; ?B ; ?\<Gamma>  \<Turnstile> ?c ;
         toSet ?\<Gamma> <= toSet ?\<Gamma>';
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>'  |]
      ==> ?\<Theta> ; ?B ; ?\<Gamma>'  \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("RCLogicL.wfI_replace_inside",
     " ?\<Theta> ; ?\<Gamma>' @
                   (?x, ?b, ?c) #\<^sub>\<Gamma>
                   ?\<Gamma> \<turnstile> ?i ==>
       ?\<Theta> ; ?\<Gamma>' @
                   (?x, ?b, ?c') #\<^sub>\<Gamma>
                   ?\<Gamma> \<turnstile> ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_app
                 (template_app (template_hole 3, template_var 6),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 5),
                        template_app
                         (template_app (template_hole 0, template_var 4),
                          template_var 3))),
                    template_var 2))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 7),
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 5),
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 0))),
                   template_var 2))),
             template_var 1)
           ))),
    ("RCLogicL.wfV_eval_pair",
     "[|  ?P ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : [ ?b1.0 , ?b2.0 ]\<^sup>b ;
          ?P ; ?\<Gamma> \<turnstile> ?i |]
      ==> EX s1 s2. ?i \<lbrakk> ?v \<rbrakk> ~ SPair s1 s2 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 4),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("RCLogicL.is_satis_i_weakening",
     "[| ?i = ?i' |` ?d; supp ?c <= atom ` ?d Un supp ?B;
          ?i \<Turnstile> ?c  |]
      ==>  ?i' \<Turnstile> ?c ",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 2)),
            template_app (template_hole 1, template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("RCLogicL.is_satis_i_restrict",
     "[| ?i = ?i' |` ?d; supp ?c <= atom ` ?d Un supp ?B;
          ?i' \<Turnstile> ?c  |]
      ==>  ?i \<Turnstile> ?c ",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 2)),
            template_app (template_hole 1, template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 1)
           ))),
    ("RCLogicL.is_satis_imp",
     "[|  ?i \<Turnstile> ?c1.0  -->  ?i \<Turnstile> ?c2.0 ;
          ?i \<lbrakk> ?c1.0 \<rbrakk> ~ ?b1.0 ;
          ?i \<lbrakk> ?c2.0 \<rbrakk> ~ ?b2.0  |]
      ==>  ?i \<Turnstile> ?c1.0  IMP  ?c2.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("RCLogicL.wfI_restrict_weakening",
     "[|  ?\<Theta> ; ?\<Gamma>' \<turnstile> ?i';
         ?i = ?i' |` (fst ` toSet ?\<Gamma>);
         toSet ?\<Gamma> <= toSet ?\<Gamma>' |]
      ==>  ?\<Theta> ; ?\<Gamma> \<turnstile> ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 0)))),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 0),
          template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 0),
             template_var 1)
           ))),
    ("RCLogicL.subst_b_var",
     "B_var ?bv2.0 = ?b[?bv::=?b']\<^sub>b\<^sub>b ==>
      ?b = B_var ?bv & ?b' = B_var ?bv2.0 |
      ?b = B_var ?bv2.0 & ?bv ~= ?bv2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app (template_hole 5, template_var 1))),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app (template_hole 5, template_var 3)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app (template_hole 5, template_var 3))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3))))
           ))),
    ("RCLogicL.valid_eq_imp",
     " ?\<Theta> ; ?\<B> ; (?x, ?b, ?c2.0) #\<^sub>\<Gamma>
                           ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c1.0  IMP  ?c2.0   ==>
      ?\<Theta> ; ?\<B> ; (?x, ?b, ?c2.0) #\<^sub>\<Gamma>
                          ?\<Gamma>  \<Turnstile> ?c1.0  IMP  ?c2.0  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2))),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))
           ))),
    ("RCLogicL.validI",
     "[|  ?P ; ?B ; ?G   \<turnstile>\<^sub>w\<^sub>f ?c ;
         ALL i.
             ?P ; ?G \<turnstile> i &  i \<Turnstile> ?G  -->
             i \<Turnstile> ?c  |]
      ==> ?P ; ?B ; ?G  \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("RCLogicL.eval_c_i_weakening",
     "[|  ?i \<lbrakk> ?c \<rbrakk> ~ ?s ; ?i = ?i' |` ?d;
         supp ?c <= atom ` ?d Un supp ?B |]
      ==>  ?i' \<lbrakk> ?c \<rbrakk> ~ ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 4),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1)),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_var 4),
             template_var 3)
           ))),
    ("RCLogicL.eval_c_i_restrict",
     "[|  ?i' \<lbrakk> ?c \<rbrakk> ~ ?s ; ?i = ?i' |` ?d;
         supp ?c <= atom ` ?d Un supp ?B |]
      ==>  ?i \<lbrakk> ?c \<rbrakk> ~ ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 4),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1)),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_var 4),
             template_var 3)
           ))),
    ("RCLogicL.eval_e_weakening",
     "[| ?i \<lbrakk> ?e \<rbrakk> ~ ?s ; ?i = ?i' |` ?d;
         supp ?e <= atom ` ?d Un supp ?B |]
      ==> ?i' \<lbrakk> ?e \<rbrakk> ~ ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 4),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1)),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_var 4),
             template_var 3)
           ))),
    ("RCLogicL.subst_e_eval_v",
     "[| ?i \<lbrakk> ?e' \<rbrakk> ~ ?s' ;
         ?e' = ?e[?y::=?v]\<^sub>c\<^sub>e\<^sub>v;
         ?i \<lbrakk> ?v \<rbrakk> ~ ?s  |]
      ==> ?i(?y |-> ?s) \<lbrakk> ?e \<rbrakk> ~ ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 2),
                   template_app (template_hole 0, template_var 0))),
               template_var 3),
             template_var 4)
           ))),
    ("RCLogicL.eval_e_restrict",
     "[| ?i' \<lbrakk> ?e \<rbrakk> ~ ?s ; ?i = ?i' |` ?d;
         supp ?e <= atom ` ?d Un supp ?B |]
      ==> ?i \<lbrakk> ?e \<rbrakk> ~ ?s ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_var 5),
            template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 4),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1)),
            template_app (template_hole 0, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_var 4),
             template_var 3)
           ))),
    ("RCLogicL.subst_c_eval_v",
     "[| ?i \<lbrakk> ?v \<rbrakk> ~ ?s ;
          ?i \<lbrakk> ?c[?x::=?v]\<^sub>c\<^sub>v \<rbrakk> ~ ?s1.0 ;
          ?i(?x |-> ?s) \<lbrakk> ?c \<rbrakk> ~ ?s2.0  |]
      ==> ?s1.0 = ?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 5)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 2),
                    template_app (template_hole 1, template_var 4))),
                template_var 3),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("RCLogicL.eval_v_weakening",
     "[| ?i = ?i' |` ?d; supp ?c <= atom ` ?d Un supp ?B;
         ?i \<lbrakk> ?c \<rbrakk> ~ ?s  |]
      ==> ?i' \<lbrakk> ?c \<rbrakk> ~ ?s ",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 3)),
            template_app (template_hole 1, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 5),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0)
           ))),
    ("RCLogicL.eval_v_restrict",
     "[| ?i = ?i' |` ?d; supp ?c <= atom ` ?d Un supp ?B;
         ?i' \<lbrakk> ?c \<rbrakk> ~ ?s  |]
      ==> ?i \<lbrakk> ?c \<rbrakk> ~ ?s ",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 3)),
            template_app (template_hole 1, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2),
             template_var 0)
           ))),
    ("RCLogicL.valid_reflI",
     "[|  ?P ; ?B ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                    ?G   \<turnstile>\<^sub>w\<^sub>f ?c1.0 ;
         ?c1.0 = ?c2.0 |]
      ==> ?P ; ?B ; (?x, ?b, ?c1.0) #\<^sub>\<Gamma>
                    ?G  \<Turnstile> ?c2.0 ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_var 2)
            ),
        template_equation (template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2))),
                 template_var 1)),
             template_var 0)
           ))),
    ("RCLogicL.is_satis_g_restrict2",
     "[|  ?i \<Turnstile> ?\<Gamma> ; ?i' = ?i |` ?d;
         atom_dom ?\<Gamma> <= atom ` ?d;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  |]
      ==>  ?i' \<Turnstile> ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 5, template_var 5),
            template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 4),
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 3), template_var 4)
           ))),
    ("RCLogicL.is_satis_plus_imp",
     " ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_num
                              (?n1.0 +
                               ?n2.0) ]\<^sup>v ]\<^sup>c\<^sup>e   ==>
       ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ plus [ [ L_num
                                     ?n1.0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ L_num
?n2.0 ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 2))),
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 1),
                        template_var 0))))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 3),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)))),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0))))))
           ))),
    ("RCLogicL.is_satis_eq_imp",
     " ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ if ?n1.0 =
                                ?n2.0
                             then L_true
                             else L_false ]\<^sup>v ]\<^sup>c\<^sup>e   ==>
       ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ eq [ [ ?n1.0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ ?n2.0 ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 2))),
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 1),
                            template_var 0)),
                        template_hole 3),
                      template_hole 2)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 3),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2))),
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_hole 8,
                     template_app (template_hole 6, template_var 1))),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 6, template_var 0)))))
           ))),
    ("RCLogicL.is_satis_g_restrict",
     "[| toSet ?\<Gamma> <= toSet ?\<Gamma>';  ?i' \<Turnstile> ?\<Gamma>' ;
         ?i = ?i' |` (fst ` toSet ?\<Gamma>);
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  |]
      ==>  ?i \<Turnstile> ?\<Gamma> ",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 5),
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 4)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app (template_hole 6, template_var 5)))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), template_var 5)
           ))),
    ("RCLogicL.valid_len",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  ==>
      ?\<Theta> ; ?\<B> ; (?x, B_int,
                           [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_num
                                  (int (length
   ?v)) ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                          GNil  \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [| [ [ L_bitvec
                 ?v ]\<^sup>v ]\<^sup>c\<^sup>e |]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 14, template_var 3),
                 template_var 2),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_var 1),
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_var 1))),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3, template_var 0))))))))),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("RCLogicL.is_satis_leq_imp",
     " ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ if ?n1.0
                                <= ?n2.0
                             then L_true
                             else L_false ]\<^sup>v ]\<^sup>c\<^sup>e   ==>
       ?i \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ leq [ [ L_num
                                    ?n1.0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ L_num
                                     ?n2.0 ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 2))),
                template_app
                 (template_hole 9,
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 1),
                            template_var 0)),
                        template_hole 4),
                      template_hole 3)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 3),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 2))),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 0, template_var 1)))),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("RCLogicL.bs_boxed_wfi_aux",
     "[|  ?\<Theta>  ; ?\<Gamma> ; ?b , ?bv \<turnstile> ?i \<approx> ?i';
          ?\<Theta> ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile> ?i;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>  |]
      ==>  ?\<Theta> ; ?\<Gamma> \<turnstile> ?i'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 3),
                  template_var 4)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 6),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_var 5),
             template_var 1)
           ))),
    ("RCLogicL.subst_b_valid",
     "[|  ?\<Theta> ; {||}  \<turnstile>\<^sub>w\<^sub>f ?b ; ?B = {|?bv|};
         ?\<Theta> ; {|?bv|} ; ?\<Gamma>  \<Turnstile> ?c  |]
      ==> ?\<Theta> ; {||} ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b  \<Turnstile> ?c[?bv::=?b]\<^sub>c\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_hole 5),
              template_var 4)
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_hole 5)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_hole 5),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 4))
           ))),
    ("RCLogicL.boxed_b_eq",
     "[|  ?\<Theta>  \<turnstile> ?s1.0 ~ ?b [ ?bv ::= ?b' ] \<setminus> ?s1' ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
          ?\<Theta>  \<turnstile> ?s2.0 ~ ?b [ ?bv ::= ?b' ] \<setminus> ?s2'  |]
      ==> (?s1.0 = ?s2.0) = (?s1' = ?s2')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, template_var 7)),
        template_predicate (template_app (template_hole 2, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 7),
                      template_var 1),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_bimplication
        (template_equation (template_var 6, template_var 1),
         template_equation (template_var 2, template_var 0)))),
    ("RCLogicL.wfI_lookup",
     "[| Some (?b, ?c) = lookup ?G ?x;  ?P ; ?G \<turnstile> ?i;
         Some ?s = ?i ?x;  ?P ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G  |]
      ==>  ?P  \<turnstile> ?s : ?b",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 7),
              template_var 6)),
          template_app
           (template_app (template_hole 5, template_var 5),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 5),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_var 2, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 7)
           ))),
    ("RCLogicL.valid_concat",
     "   \<turnstile>\<^sub>w\<^sub>f ?\<Pi>  ==>
      ?\<Pi> ; ?\<B> ; (?x, B_bitvec,
                        [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_bitvec
                               (?v1.0 @
                                ?v2.0) ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                       GNil  \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ [ L_bitvec
             ?v1.0 ]\<^sup>v ]\<^sup>c\<^sup>e @@ [ [ L_bitvec
                 ?v2.0 ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 12, template_var 4),
                 template_var 3),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 2),
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_var 2))),
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_app
                                  (template_hole 2, template_var 1),
                                 template_var 0)))))))),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)))),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0))))))
           ))),
    ("RCLogicL.wfI_upd",
     "[|  ?\<Theta> ; ?\<Gamma> \<turnstile> ?i;
          ?\<Theta>  \<turnstile> ?s : ?b;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f (?x, ?b,
                  ?c) #\<^sub>\<Gamma>
                 ?\<Gamma>  |]
      ==>  ?\<Theta> ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                       ?\<Gamma> \<turnstile> ?i
          (?x |-> ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 7),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 0))),
                template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 7),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 0))),
                 template_var 6)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 1),
               template_app (template_hole 0, template_var 4)))
           ))),
    ("RCLogicL.valid_fst",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
          ?\<Theta> ; ?\<B> ; GNil \<turnstile>\<^sub>w\<^sub>f [ ?v\<^sub>1 , ?v\<^sub>2 ]\<^sup>v : [ ?b\<^sub>1 , ?b\<^sub>2 ]\<^sup>b  |]
      ==> ?\<Theta> ; ?\<B> ; (?x, ?b\<^sub>1,
                               [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ ?v\<^sub>1 ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                              GNil  \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [#1[ [ ?v\<^sub>1 , ?v\<^sub>2 ]\<^sup>v ]\<^sup>c\<^sup>e]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_var 5),
                  template_hole 10),
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 0))),
                         template_app (template_hole 2, template_var 4))))),
                 template_hole 10)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_var 3)))))
           ))),
    ("RCLogicL.valid_snd",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
          ?\<Theta> ; ?\<B> ; GNil \<turnstile>\<^sub>w\<^sub>f [ ?v\<^sub>1 , ?v\<^sub>2 ]\<^sup>v : [ ?b\<^sub>1 , ?b\<^sub>2 ]\<^sup>b  |]
      ==> ?\<Theta> ; ?\<B> ; (?x, ?b\<^sub>2,
                               [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ ?v\<^sub>2 ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                              GNil  \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [#2[ [ ?v\<^sub>1 , ?v\<^sub>2 ]\<^sup>v ]\<^sup>c\<^sup>e]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_var 5),
                  template_hole 10),
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_var 0))),
                         template_app (template_hole 2, template_var 3))))),
                 template_hole 10)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_var 3)))))
           ))),
    ("RCLogicL.bs_boxed_var",
     "[|  ?\<Theta>  ; ?\<Gamma> ; ?b' , ?bv \<turnstile> ?i \<approx> ?i';
         Some (?b, ?c) = lookup ?\<Gamma> ?x; Some ?s = ?i ?x;
         Some ?s' = ?i' ?x |]
      ==>  ?\<Theta>  \<turnstile> ?s ~ ?b [ ?bv ::= ?b' ] \<setminus> ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)),
          template_app
           (template_app (template_hole 3, template_var 9),
            template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_var 6, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 0),
          template_app (template_var 5, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 10),
                     template_var 1),
                   template_var 4),
                 template_var 7),
               template_var 8),
             template_var 0)
           ))),
    ("RCLogicL.wfG_inside_valid2",
     "[|  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                 (?x, ?b0.0, ?c0') #\<^sub>\<Gamma> ?\<Gamma> ;
         ?\<Theta> ; ?B ; ?\<Gamma>' @
                          (?x, ?b0.0, ?c0.0) #\<^sub>\<Gamma>
                          ?\<Gamma>  \<Turnstile> ?c0'  |]
      ==>  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                  (?x, ?b0.0, ?c0.0) #\<^sub>\<Gamma> ?\<Gamma> ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_var 6),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app
                       (template_app (template_hole 1, template_var 3),
                        template_var 2))),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 7),
                  template_var 6),
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 4),
                        template_app
                         (template_app (template_hole 1, template_var 3),
                          template_var 0))),
                    template_var 1))),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 7),
               template_var 6),
             template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 0))),
                 template_var 1)))
           ))),
    ("RCLogicL.boxed_b_eq_eq",
     "[|  ?\<Theta>  \<turnstile> ?n1.0 ~ ?b1.0 [ ?bv ::= ?b' ] \<setminus> ?n1' ;
          ?\<Theta>  \<turnstile> ?n2.0 ~ ?b1.0 [ ?bv ::= ?b' ] \<setminus> ?n2' ;
         ?s = SBool (?n1.0 = ?n2.0);
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         ?s' = SBool (?n1' = ?n2') |]
      ==> ?s = ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 3),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 2)
            ),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate
           (
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 2, template_var 8),
                  template_var 3))
              )),
        template_predicate (template_app (template_hole 0, template_var 9)),
        template_implication
         ([template_predicate (template_var 0)],
          template_predicate
           (
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2))
              ))],
       template_equation (template_var 1, template_var 0))),
    ("RCLogicL.is_satis_g_bs_boxed",
     "[|  ?\<Theta>  ; ?G ; ?b , ?bv \<turnstile> ?i \<approx> ?i';
          ?\<Theta> ; ?G[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile> ?i;
          ?\<Theta> ; ?G \<turnstile> ?i';
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G ;
          ?i \<Turnstile> ?G[?bv::=?b]\<^sub>\<Gamma>\<^sub>b  |]
      ==>  ?i' \<Turnstile> ?G ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 3),
                  template_var 4)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 6),
                template_var 0),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 3),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 5)
           ))),
    ("RCLogicL.wfI_cons",
     "[|  ?i' \<Turnstile> ?\<Gamma> ;
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i'; ?i = ?i'(?x |-> ?s);
          ?\<Theta>  \<turnstile> ?s : ?b; atom ?x \<sharp> ?\<Gamma> |]
      ==>  ?\<Theta> ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                       ?\<Gamma> \<turnstile> ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 5),
                template_var 6),
              template_var 7)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app (template_hole 7, template_var 7),
              template_var 3),
            template_app (template_hole 6, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))),
                 template_var 6)),
             template_var 4)
           ))),
    ("RCLogicL.is_satis_bs_boxed",
     "[|  ?\<Theta>  ; ?\<Gamma> ; ?b , ?bv \<turnstile> ?i \<approx> ?i';
          ?\<Theta> ; ?B ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile> ?i;
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i';
          ?i \<Turnstile> ?c[?bv::=?b]\<^sub>c\<^sub>b  |]
      ==>  ?i' \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 1),
                template_var 6),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 4),
                  template_var 5)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 4),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("RCLogicL.valid_trans",
     "[| ?\<Theta> ; ?\<B> ; ?\<Gamma>  \<Turnstile> ?c0.0[?z::=?v]\<^sub>v ;
         ?\<Theta> ; ?\<B> ; (?z, ?b, ?c0.0) #\<^sub>\<Gamma>
                             ?\<Gamma>  \<Turnstile> ?c1.0 ;
         atom ?z \<sharp> ?\<Gamma>;
          ?\<Theta> ; ?\<B> ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==> ?\<Theta> ; ?\<B> ; ?\<Gamma>  \<Turnstile> ?c1.0[?z::=?v]\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_var 4))),
                  template_var 5)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 3),
               template_var 2))
           ))),
    ("RCLogicL.boxed_i_eval_ce_boxed_b",
     "[| ?i' \<lbrakk> ?e \<rbrakk> ~ ?s' ;
         ?i \<lbrakk> ?e[?bv::=?b']\<^sub>c\<^sub>e\<^sub>b \<rbrakk> ~ ?s ;
           ?\<Theta> ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?e : ?b ;
          ?\<Theta>  ; ?\<Gamma> ; ?b' , ?bv \<turnstile> ?i \<approx> ?i';
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i' |]
      ==>  ?\<Theta>  \<turnstile> ?s ~ ?b [ ?bv ::= ?b' ] \<setminus> ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 7),
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 9),
                    template_var 6),
                  template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 9),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 1),
                    template_var 5),
                  template_var 6),
                template_var 7),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4),
                   template_var 0),
                 template_var 6),
               template_var 5),
             template_var 8)
           ))),
    ("RCLogicL.boxed_i_eval_v_boxed_b",
     "[|  ?\<Theta>  ; ?\<Gamma> ; ?b' , ?bv \<turnstile> ?i \<approx> ?i';
         ?i \<lbrakk> ?v[?bv::=?b']\<^sub>v\<^sub>b \<rbrakk> ~ ?s ;
         ?i' \<lbrakk> ?v \<rbrakk> ~ ?s' ;
          ?\<Theta> ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i' |]
      ==>  ?\<Theta>  \<turnstile> ?s ~ ?b [ ?bv ::= ?b' ] \<setminus> ?s' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 7),
                  template_var 8)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 10),
                    template_var 1),
                  template_var 9),
                template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 10),
                template_var 9),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 10),
                     template_var 3),
                   template_var 0),
                 template_var 7),
               template_var 8),
             template_var 2)
           ))),
    ("RCLogicL.subst_c_satis",
     "[| ?i \<lbrakk> ?v \<rbrakk> ~ ?s ;
          ?\<Theta> ; ?B ; (?x, ?b, ?c') #\<^sub>\<Gamma>
                           ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i;
          ?\<Theta> ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==>  ?i \<Turnstile> ?c[?x::=?v]\<^sub>c\<^sub>v  =  ?i(?x |->
          ?s) \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 1),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 5),
                  template_var 1),
                template_var 8),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 9),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 4),
             template_var 8)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 9),
                 template_var 4),
               template_app (template_hole 0, template_var 7))),
           template_var 0)))),
    ("RCLogicL.is_satis_g_bs_boxed_aux",
     "[|  ?\<Theta>  ; ?G1.0 ; ?b , ?bv \<turnstile> ?i \<approx> ?i';
          ?\<Theta> ; ?G1.0[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile> ?i;
          ?\<Theta> ; ?G1.0 \<turnstile> ?i'; ?G1.0 = ?G2.0 @ ?G;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?G1.0 ;
          ?i \<Turnstile> ?G[?bv::=?b]\<^sub>\<Gamma>\<^sub>b  |]
      ==>  ?i' \<Turnstile> ?G ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 8),
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 5),
                  template_var 6)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 8),
                template_var 7),
              template_var 3)
            ),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 8),
                template_var 0),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 5),
                template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("RCLogicL.eval_c_eq_bs_boxed",
     "[|  ?i \<lbrakk> ?c[?bv::=?b]\<^sub>c\<^sub>b \<rbrakk> ~ ?s ;
          ?i' \<lbrakk> ?c \<rbrakk> ~ ?s' ;
          ?\<Theta> ; ?B ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i';
          ?\<Theta> ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile> ?i;
          ?\<Theta>  ; ?\<Gamma> ; ?b , ?bv \<turnstile> ?i \<approx> ?i' |]
      ==> ?s = ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 9),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 8),
                    template_var 7),
                  template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 8),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 0),
                    template_var 7),
                  template_var 6)),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 0),
                    template_var 6),
                  template_var 7),
                template_var 9),
              template_var 4)
            )],
       template_equation (template_var 5, template_var 3))),
    ("RCLogicL.obtain_fresh_bv_dclist",
     "[| (?dc, \<lbrace> ?x : ?b  | ?c \<rbrace>) : set ?dclist;
         !!bv1 dclist1 x1 b1 c1.
            AF_typedef_poly ?tyid ?bv ?dclist =
            AF_typedef_poly ?tyid bv1 dclist1 &
            (?dc, \<lbrace> x1 : b1  | c1 \<rbrace>) : set dclist1 &
            atom bv1 \<sharp> ?tm ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 8),
                  template_app
                   (template_app
                     (template_app (template_hole 11, template_var 7),
                      template_var 6),
                    template_var 5))),
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("RCLogicL.valid_eq_bop",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?x \<sharp> ?\<Gamma>;
         base_for_lit ?l1.0 = base_for_lit ?l2.0 |]
      ==> ?\<Theta> ; ?\<B> ; (?x, B_bool,
                               [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ if ?l1.0 =
  ?l2.0
                                     then L_true
                                     else L_false ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                              ?\<Gamma>  \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ eq [ [ ?l1.0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ ?l2.0 ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 2)),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 15, template_var 1),
          template_app (template_hole 15, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 14, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_var 2),
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_var 2))),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 5,
                                   template_app
                                    (template_app
(template_hole 4, template_var 1),
                                     template_var 0)),
                                 template_hole 3),
                               template_hole 2))))))),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2))),
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_hole 8,
                     template_app (template_hole 6, template_var 1))),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 6, template_var 0)))))
           ))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ B_var ?bv [ ?bv' ::= ?b ] \<setminus> ?s' ;
         [| ?bv' = ?bv; ?s' = SUt ?s;  ?P  \<turnstile> ?s : ?b |] ==> ?Pa;
         [| ?s' = ?s; ?bv' ~= ?bv;  ?P  \<turnstile> ?s : B_var ?bv |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5),
                    template_app (template_hole 5, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 3, template_var 4)],
          template_implication
           ([template_equation
              (template_var 1,
               template_app (template_hole 2, template_var 5))],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 5),
                     template_var 2)
                   )],
              template_predicate (template_var 0)))),
        template_implication
         ([template_equation (template_var 1, template_var 5)],
          template_implication
           ([template_negation
              (template_equation (template_var 3, template_var 4))],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 5),
                     template_app (template_hole 5, template_var 4))
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("RCLogicL.subst_c_satis_full",
     "[| ?i \<lbrakk> ?v \<rbrakk> ~ ?s ;
          ?\<Theta> ; ?B ; ?\<Gamma>' @
                           (?x, ?b, ?c') #\<^sub>\<Gamma>
                           ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<Gamma>'[?x::=?v]\<^sub>\<Gamma>\<^sub>v @
                      ?\<Gamma> \<turnstile> ?i;
          ?\<Theta> ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==>  ?i \<Turnstile> ?c[?x::=?v]\<^sub>c\<^sub>v  =  ?i(?x |->
          ?s) \<Turnstile> ?c ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 7),
                  template_var 6),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 4),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2))),
                    template_var 1))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 7),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4),
                      template_var 9)),
                  template_var 1)),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6),
                  template_var 1),
                template_var 9),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 10),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 4),
             template_var 9)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 10),
                 template_var 4),
               template_app (template_hole 0, template_var 8))),
           template_var 0)))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ [ ?b1.0 , ?b2.0 ]\<^sup>b [ ?bv ::= ?b ] \<setminus> ?s' ;
         !!s1 s1' s2 s2'.
            [| ?s = SPair s1 s2; ?s' = SPair s1' s2';
                ?P  \<turnstile> s1 ~ ?b1.0 [ ?bv ::= ?b ] \<setminus> s1' ;
                ?P  \<turnstile> s2 ~ ?b2.0 [ ?bv ::= ?b ] \<setminus> s2'  |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 7),
                      template_var 6),
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("RCLogicL.is_satis_bs_boxed_rev",
     "[|  ?\<Theta>  ; ?\<Gamma> ; ?b , ?bv \<turnstile> ?i \<approx> ?i';
          ?\<Theta> ; ?B ; ?\<Gamma>   \<turnstile>\<^sub>w\<^sub>f ?c ;
          ?\<Theta> ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b \<turnstile> ?i;
          ?\<Theta> ; ?\<Gamma> \<turnstile> ?i';
          ?\<Theta> ; {||} ; ?\<Gamma>[?bv::=?b]\<^sub>\<Gamma>\<^sub>b   \<turnstile>\<^sub>w\<^sub>f ?c[?bv::=?b]\<^sub>c\<^sub>b ;
          ?i' \<Turnstile> ?c  |]
      ==>  ?i \<Turnstile> ?c[?bv::=?b]\<^sub>c\<^sub>b ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 1),
                template_var 6),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 4),
                  template_var 5)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_var 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_hole 2),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 4),
                  template_var 5)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 4),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 4),
               template_var 5))
           ))),
    ("RCLogicL.valid_range",
     "[| 0 <= ?n & ?n <= ?m;    \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  |]
      ==> ?\<Theta> ; {||} ; (?x, B_int,
                              [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_num
                                     ?n ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                             GNil  \<Turnstile> [ leq [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e [ [ L_num
                  ?m ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e   AND  [ leq [ [ L_num
               0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e   ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_var 3)),
              template_app
               (template_app (template_hole 18, template_var 3),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 15, template_var 1),
                 template_hole 14),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_var 0),
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_var 0))),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_var 3))))))),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_app
                          (template_hole 8,
                           template_app (template_hole 7, template_var 0))),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5, template_var 2))))),
                   template_app
                    (template_hole 8,
                     template_app (template_hole 6, template_hole 0)))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5, template_hole 17)))),
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 0)))),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 6, template_hole 0)))))
           ))),
    ("RCLogicL.boxed_i_elims",
     "[|  ?\<Theta>  ; (?x, ?b, ?c) #\<^sub>\<Gamma>
                       ?\<Gamma> ; ?b' , ?bv \<turnstile> ?i \<approx> ?i';
         !!s s' i'.
            [| ?i' = i'(?x |-> s'); Some s = ?i ?x;
                ?\<Theta>  \<turnstile> s ~ ?b [ ?bv ::= ?b' ] \<setminus> s' ;
                ?\<Theta>  ; ?\<Gamma> ; ?b' , ?bv \<turnstile> ?i \<approx> i' |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 9),
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 8),
                            template_app
                             (template_app
                               (template_hole 7, template_var 7),
                              template_var 6))),
                        template_var 5)),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("RCLogicL.valid_range_length_inv_gnil",
     "[|    \<turnstile>\<^sub>w\<^sub>f ?\<Theta> ;
         ?\<Theta> ; {||} ; (?x, B_int,
                             [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_num
                                    ?n ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                            GNil  \<Turnstile> [ leq [ [ L_num
                    0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e   AND  [ leq [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e [| [ [ L_bitvec
             ?v ]\<^sup>v ]\<^sup>c\<^sup>e |]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e    |]
      ==> 0 <= ?n & ?n <= int (length ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 22, template_var 3),
                  template_hole 21),
                template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 19, template_var 2),
                      template_app
                       (template_app (template_hole 18, template_hole 17),
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_hole 15,
                              template_app
                               (template_hole 14, template_var 2))),
                          template_app
                           (template_hole 15,
                            template_app
                             (template_hole 13,
                              template_app
                               (template_hole 12, template_var 1))))))),
                  template_hole 11)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_app
                         (template_app (template_hole 9, template_hole 8),
                          template_app
                           (template_hole 15,
                            template_app
                             (template_hole 13,
                              template_app
                               (template_hole 12, template_hole 7)))),
                        template_app
                         (template_hole 15,
                          template_app
                           (template_hole 14, template_var 2)))),
                    template_app
                     (template_hole 15,
                      template_app (template_hole 13, template_hole 6)))),
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_hole 8),
                        template_app
                         (template_hole 15,
                          template_app (template_hole 14, template_var 2))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 15,
                          template_app
                           (template_hole 13,
                            template_app
                             (template_hole 4, template_var 0)))))),
                  template_app
                   (template_hole 15,
                    template_app (template_hole 13, template_hole 6)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 7),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("RCLogicL.valid_split",
     "[| split ?n ?v (?v1.0, ?v2.0);
            \<turnstile>\<^sub>w\<^sub>f ?\<Theta>  |]
      ==> ?\<Theta> ; {||} ; (?z, [ B_bitvec , B_bitvec ]\<^sup>b,
                              [ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ [ L_bitvec
 ?v1.0 ]\<^sup>v , [ L_bitvec
                      ?v2.0 ]\<^sup>v ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                             GNil  \<Turnstile> [ [ L_bitvec
               ?v ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [#1[ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e]\<^sup>c\<^sup>e @@ [#2[ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e   AND  [| [#1[ [ ?z ]\<^sup>v ]\<^sup>c\<^sup>e]\<^sup>c\<^sup>e |]\<^sup>c\<^sup>e  ==  [ [ L_num
            ?n ]\<^sup>v ]\<^sup>c\<^sup>e   ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 21, template_var 3),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 20, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 19, template_var 1),
                 template_hole 18),
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app (template_hole 16, template_var 0),
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app
                          (template_app
                            (template_hole 14, template_hole 13),
                           template_hole 13)),
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_var 0))),
                         template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 7, template_var 3))),
                             template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7, template_var 2)))))))),
                 template_hole 6)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_var 4)))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10, template_var 0)))),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10, template_var 0)))))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10, template_var 0))))),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 0, template_var 5))))))
           ))),
    ("RCLogicL.wfI_upd_full",
     "[|  ?\<Theta> ; ?G \<turnstile> ?i;
         ?G = ?\<Gamma>'[?x::=?v]\<^sub>\<Gamma>\<^sub>v @ ?\<Gamma>;
          ?\<Theta>  \<turnstile> ?s : ?b;
          ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma>' @
                 (?x, ?b, ?c) #\<^sub>\<Gamma> ?\<Gamma> ;
          ?\<Theta> ; ?B ; ?\<Gamma> \<turnstile>\<^sub>w\<^sub>f ?v : ?b  |]
      ==>  ?\<Theta> ; ?\<Gamma>' @
                       (?x, ?b, ?c) #\<^sub>\<Gamma>
                       ?\<Gamma> \<turnstile> ?i
          (?x |-> ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 7),
                  template_var 6),
                template_var 5)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 10),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 10),
                template_var 1),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 6),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 0))),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 10),
                    template_var 1),
                  template_var 4),
                template_var 5),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_var 10),
               template_app
                (template_app (template_hole 9, template_var 7),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 6),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 0))),
                   template_var 4))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 8),
                 template_var 6),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("RCLogicL.valid_trans_full",
     "[| ?\<Theta> ; ?\<B> ; (?x, ?b,
                              ?c1.0[?z1.0::=[ ?x ]\<^sup>v]\<^sub>v) #\<^sub>\<Gamma>
                             ?\<Gamma>  \<Turnstile> ?c2.0[?z2.0::=[ ?x ]\<^sup>v]\<^sub>v ;
         ?\<Theta> ; ?\<B> ; (?x, ?b,
                              ?c2.0[?z2.0::=[ ?x ]\<^sup>v]\<^sub>v) #\<^sub>\<Gamma>
                             ?\<Gamma>  \<Turnstile> ?c3.0[?z3.0::=[ ?x ]\<^sup>v]\<^sub>v  |]
      ==> ?\<Theta> ; ?\<B> ; (?x, ?b,
                               ?c1.0[?z1.0::=[ ?x ]\<^sup>v]\<^sub>v) #\<^sub>\<Gamma>
                              ?\<Gamma>  \<Turnstile> ?c3.0[?z3.0::=[ ?x ]\<^sup>v]\<^sub>v ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 10),
                  template_var 9),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 8),
                      template_app
                       (template_app (template_hole 2, template_var 7),
                        template_app
                         (template_app
                           (template_app (template_hole 1, template_var 6),
                            template_var 5),
                          template_app
                           (template_hole 0, template_var 8))))),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_app (template_hole 0, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 10),
                  template_var 9),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 8),
                      template_app
                       (template_app (template_hole 2, template_var 7),
                        template_app
                         (template_app
                           (template_app (template_hole 1, template_var 3),
                            template_var 2),
                          template_app
                           (template_hole 0, template_var 8))))),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0),
                template_app (template_hole 0, template_var 8)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 10),
                 template_var 9),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_app
                      (template_app (template_hole 2, template_var 7),
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 6),
                           template_var 5),
                         template_app (template_hole 0, template_var 8))))),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_app (template_hole 0, template_var 8)))
           ))),
    ("RCLogicL.wfRCV_poly_elims",
     "[|  ?T  \<turnstile> SConsp ?typid ?dc ?bdc ?s : ?b;
         !!bva dclist x1 b1 c1.
            ?b = B_app ?typid ?bdc &
            AF_typedef_poly ?typid bva dclist : set ?T &
            (?dc, \<lbrace> x1 : b1  | c1 \<rbrace>) : set dclist &
             ?T  \<turnstile> ?s : b1[bva::=?bdc]\<^sub>b\<^sub>b &
            atom bva \<sharp> ?tm ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 7),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 18, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate (template_var 0))),
    ("RCLogicL.valid_eq_e",
     "[| ALL i s1 s2.
             ?P ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f GNil  &
             ?P ; GNil \<turnstile> i &
            i \<lbrakk> ?e1.0 \<rbrakk> ~ s1  &
            i \<lbrakk> ?e2.0 \<rbrakk> ~ s2  -->
            s1 = s2;
           ?P ; ?\<B> ; GNil \<turnstile>\<^sub>w\<^sub>f ?e1.0 : ?b ;
           ?P ; ?\<B> ; GNil \<turnstile>\<^sub>w\<^sub>f ?e2.0 : ?b  |]
      ==> ?P ; ?\<B> ; (?x, ?b,
                        [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  ?e1.0 ) #\<^sub>\<Gamma>
                       GNil  \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  ?e2.0  ",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_hole 11),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_hole 11),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 5),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0, template_var 0))),
                         template_var 3)))),
                 template_hole 11)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_var 2))
           ))),
    ("RCLogicL.valid_range_length",
     "[| 0 <= ?n & ?n <= int (length ?v);
          ?\<Theta> ; {||}  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?x \<sharp> ?\<Gamma> |]
      ==> ?\<Theta> ; {||} ; (?x, B_int,
                              [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_num
                                     ?n ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                             ?\<Gamma>  \<Turnstile> [ leq [ [ L_num
                          0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e   AND  [ leq [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e [| [ [ L_bitvec
                   ?v ]\<^sup>v ]\<^sup>c\<^sup>e |]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e   ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app (template_hole 23, template_hole 22),
                  template_var 4)),
              template_app
               (template_app (template_hole 23, template_var 4),
                template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 2),
                template_hole 18),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 15, template_var 2),
                 template_hole 18),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 0),
                     template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8, template_var 0))),
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_var 4))))))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_hole 22)))),
                       template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_var 0)))),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 7, template_hole 2)))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_var 0))),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 0, template_var 3)))))),
                 template_app
                  (template_hole 9,
                   template_app (template_hole 7, template_hole 2)))))
           ))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ B_id ?dc [ ?bv ::= ?b ] \<setminus> ?s' ;
         !!dclist dc x b c s1 s1'.
            [| ?s = RCLogic.SCons ?dc dc s1; ?s' = RCLogic.SCons ?dc dc s1';
               AF_typedef ?dc dclist : set ?P;
               (dc, \<lbrace> x : b  | c \<rbrace>) : set dclist;
                ?P  \<turnstile> s1 ~ b [ ?bv ::= ?b ] \<setminus> s1'  |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 16, template_var 6),
                      template_var 5),
                    template_app (template_hole 15, template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("RCLogicL.obtain_fresh_bv_dclist_b_iff",
     "[| (?dc, \<lbrace> ?x : ?b  | ?c \<rbrace>) : set ?dclist;
         AF_typedef_poly ?tyid ?bv ?dclist : set ?P;
            \<turnstile>\<^sub>w\<^sub>f ?P ;
         !!bv1 dclist1 x1 b1 c1.
            AF_typedef_poly ?tyid ?bv ?dclist =
            AF_typedef_poly ?tyid bv1 dclist1 &
            (?dc, \<lbrace> x1 : b1  | c1 \<rbrace>) : set dclist1 &
            atom bv1 \<sharp> ?tm &
            ?b[?bv::=?b']\<^sub>b\<^sub>b =
            b1[bv1::=?b']\<^sub>b\<^sub>b ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 10),
                  template_app
                   (template_app
                     (template_app (template_hole 16, template_var 9),
                      template_var 8),
                    template_var 7))),
              template_app (template_hole 15, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4),
                  template_var 6)),
              template_app (template_hole 12, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("RCLogicL.is_satis_g_i_upd2",
     "[| ?i \<lbrakk> ?v \<rbrakk> ~ ?s ;
          ?i(?x |-> ?s) \<Turnstile> ?c0.0 ; atom ?x \<sharp> ?G;
          ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?G3.0 @
                    (?x, ?b, ?c0.0) #\<^sub>\<Gamma> ?G ;
          ?\<Theta> ; ?\<B> ; ?G \<turnstile>\<^sub>w\<^sub>f ?v : ?b ;
          ?\<Theta> ; ?G3.0[?x::=?v]\<^sub>\<Gamma>\<^sub>v @
                      ?G \<turnstile> ?i;
          ?i \<Turnstile> ?G3.0[?x::=?v]\<^sub>\<Gamma>\<^sub>v @ ?G  |]
      ==>  ?i(?x |->
          ?s) \<Turnstile> ?G3.0 @ (?x, ?b, ?c0.0) #\<^sub>\<Gamma> ?G ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 9),
                template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 9),
                    template_var 6),
                  template_app (template_hole 11, template_var 7))),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 6)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_app
                       (template_app (template_hole 4, template_var 0),
                        template_var 5))),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 4),
                template_var 8),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 1),
                        template_var 6),
                      template_var 8)),
                  template_var 4)),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 9),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 6),
                    template_var 8)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 12, template_var 9),
                   template_var 6),
                 template_app (template_hole 11, template_var 7))),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 6),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 5))),
                 template_var 4)))
           ))),
    ("RCLogicL.valid_range_length_inv",
     "[|  ?\<Theta> ; ?B  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         atom ?x \<sharp> ?\<Gamma>;
         EX i.  i \<Turnstile> ?\<Gamma>  &
                ?\<Theta> ; ?\<Gamma> \<turnstile> i;
         ?\<Theta> ; ?B ; (?x, B_int,
                           [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ L_num
                                  ?n ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                          ?\<Gamma>  \<Turnstile> [ leq [ [ L_num
                       0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e   AND  [ leq [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e [| [ [ L_bitvec
                ?v ]\<^sup>v ]\<^sup>c\<^sup>e |]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ==  [ [ L_true ]\<^sup>v ]\<^sup>c\<^sup>e    |]
      ==> 0 <= ?n & ?n <= int (length ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 26, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_var 2)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 5),
                  template_var 4),
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app (template_hole 17, template_var 2),
                      template_app
                       (template_app (template_hole 16, template_hole 15),
                        template_app
                         (template_app
                           (template_hole 14,
                            template_app
                             (template_hole 13,
                              template_app
                               (template_hole 12, template_var 2))),
                          template_app
                           (template_hole 13,
                            template_app
                             (template_hole 11,
                              template_app
                               (template_hole 10, template_var 1))))))),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_app (template_hole 8, template_hole 7),
                          template_app
                           (template_hole 13,
                            template_app
                             (template_hole 11,
                              template_app
                               (template_hole 10, template_hole 6)))),
                        template_app
                         (template_hole 13,
                          template_app
                           (template_hole 12, template_var 2)))),
                    template_app
                     (template_hole 13,
                      template_app (template_hole 11, template_hole 5)))),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_app (template_hole 8, template_hole 7),
                        template_app
                         (template_hole 13,
                          template_app (template_hole 12, template_var 2))),
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 13,
                          template_app
                           (template_hole 11,
                            template_app
                             (template_hole 3, template_var 0)))))),
                  template_app
                   (template_hole 13,
                    template_app (template_hole 11, template_hole 5)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 22,
               template_app
                (template_app (template_hole 2, template_hole 6),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("RCLogicL.valid_arith_bop",
     "[|  ?\<Theta> ; ?\<B>  \<turnstile>\<^sub>w\<^sub>f ?\<Gamma> ;
         ?opp = plus & ?ll = L_num (?n1.0 + ?n2.0) |
         ?opp = leq & ?ll = (if ?n1.0 <= ?n2.0 then L_true else L_false);
         (?opp = plus --> ?b = B_int) & (?opp = leq --> ?b = B_bool);
         atom ?x \<sharp> ?\<Gamma> |]
      ==> ?\<Theta> ; ?\<B> ; (?x, ?b,
                               [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ [ ?ll ]\<^sup>v ]\<^sup>c\<^sup>e ) #\<^sub>\<Gamma>
                              ?\<Gamma>  \<Turnstile> [ [ ?x ]\<^sup>v ]\<^sup>c\<^sup>e  ==  [ ?opp [ [ L_num
                              ?n1.0 ]\<^sup>v ]\<^sup>c\<^sup>e [ [ L_num
                               ?n2.0 ]\<^sup>v ]\<^sup>c\<^sup>e ]\<^sup>c\<^sup>e  ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 27, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app
                   (template_hole 25,
                    template_app
                     (template_app (template_hole 24, template_var 5),
                      template_hole 23)),
                  template_app
                   (template_app (template_hole 22, template_var 4),
                    template_app
                     (template_hole 21,
                      template_app
                       (template_app (template_hole 20, template_var 3),
                        template_var 2))))),
              template_app
               (template_app
                 (template_hole 25,
                  template_app
                   (template_app (template_hole 24, template_var 5),
                    template_hole 19)),
                template_app
                 (template_app (template_hole 22, template_var 4),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 18,
                        template_app
                         (template_app (template_hole 17, template_var 3),
                          template_var 2)),
                      template_hole 16),
                    template_hole 15))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 24, template_var 5),
                      template_hole 23)),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 12))),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 24, template_var 5),
                    template_hole 19)),
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_hole 11)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 8),
                 template_var 7),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 0))),
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 1, template_var 4)))))),
                 template_var 6)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0))),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 1,
                       template_app (template_hole 21, template_var 3)))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 21, template_var 2))))))
           ))),
    ("RCLogicL.boxed_b_elims",
     "[|  ?P  \<turnstile> ?s ~ B_app ?dc
                                 ?b' [ ?bv ::= ?b ] \<setminus> ?s' ;
         !!bva dclist s1 s1' dc x b c.
            [| ?s = SConsp ?dc dc ?b'[?bv::=?b]\<^sub>b\<^sub>b s1;
               ?s' = SConsp ?dc dc ?b' s1';
               AF_typedef_poly ?dc bva dclist : set ?P;
               atom bva \<sharp> (?b', ?bv, ?b, s1, s1');
               (dc, \<lbrace> x : b  | c \<rbrace>) : set dclist;
                ?P  \<turnstile> s1 ~ b[bva::=?b']\<^sub>b\<^sub>b [ ?bv ::= ?b ] \<setminus> s1'  |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 24, template_var 7),
                      template_var 6),
                    template_app
                     (template_app (template_hole 23, template_var 5),
                      template_var 4)),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.RCLogicLTemplates"
### 0.998s elapsed time, 1.233s cpu time, 0.129s GC time
val it = (): unit
