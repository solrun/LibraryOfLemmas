   [("Conversion_IEEE_Float.is_finite_of_finite_Float",
     "is_finite (of_finite_Float ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Conversion_IEEE_Float.is_finite_Float_of_finite",
     "is_finite_Float TYPE((?'e, ?'f) IEEE.float) (of_finite ?x)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Conversion_IEEE_Float.exponent_denormal_of_Float",
     "IEEE.exponent (denormal_of_Float ?x) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Conversion_IEEE_Float.is_denormal_denormal_of_Float",
     "is_denormal_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      is_denormal (denormal_of_Float ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Conversion_IEEE_Float.is_normal_normal_of_Float",
     "is_normal_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      is_normal (normal_of_Float ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Conversion_IEEE_Float.Float_eq_zero_iff",
     "(Float ?m ?e = 0) = (?m = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Conversion_IEEE_Float.sign_denormal_of_Float",
     "sign (denormal_of_Float ?x) = (if 0 <= ?x then 0 else 1)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Conversion_IEEE_Float.sign_normal_of_Float",
     "sign (normal_of_Float ?x) = (if 0 < ?x then 0 else 1)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Conversion_IEEE_Float.float_val_of_finite",
     "is_finite ?x ==> real_of_float (of_finite ?x) = valof ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Conversion_IEEE_Float.is_denormal_FloatD",
     "is_denormal_Float ?x ?f ==> mantissa ?f ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Conversion_IEEE_Float.is_denormal_Float_denormal",
     "is_denormal ?x ==>
      is_denormal_Float TYPE((?'e, ?'f) IEEE.float)
       (Float (denormal_mantissa ?x)
         (denormal_exponent TYPE((?'e, ?'f) IEEE.float)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_hole 3)))
           ))),
    ("Conversion_IEEE_Float.is_normal_Float_normal",
     "is_normal ?x ==>
      is_normal_Float TYPE((?'e, ?'f) IEEE.float)
       (Float (normal_mantissa ?x) (normal_exponent ?x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Conversion_IEEE_Float.valof_denormal_of_Float",
     "is_denormal_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      valof (denormal_of_Float ?x) = real_of_float ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Conversion_IEEE_Float.valof_of_finite_Float",
     "is_finite_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      valof (of_finite_Float ?x) = real_of_float ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Conversion_IEEE_Float.valof_normal_of_Float",
     "is_normal_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      valof (normal_of_Float ?x) = real_of_float ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Conversion_IEEE_Float.uint_word_of_int_bitlen_eq",
     "[| bitlen ?x <= int LENGTH(?'a); 0 <= ?x |]
      ==> uint (word_of_int ?x) = ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4))),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Conversion_IEEE_Float.exponent_Float",
     "Float.exponent (Float ?m ?e) =
      (if ?m = 0 then 0 else bitlen \<bar>?m\<bar> + ?e) -
      bitlen \<bar>mantissa (Float ?m ?e)\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_var 1),
                       template_hole 4)),
                   template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1))),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_var 0)))))
           ))),
    ("Conversion_IEEE_Float.bitlen_mantissa_Float",
     "bitlen \<bar>mantissa (Float ?m ?e)\<bar> =
      (if ?m = 0 then 0 else bitlen \<bar>?m\<bar> + ?e) -
      Float.exponent (Float ?m ?e)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 9, template_var 1),
                       template_hole 2)),
                   template_hole 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 1))),
                   template_var 0))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))
           ))),
    ("Conversion_IEEE_Float.exponent_normal_of_Float",
     "is_normal_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      IEEE.exponent (normal_of_Float ?x) =
      nat (Float.exponent ?x + int (bias TYPE((?'e, ?'f) IEEE.float)) +
           bitlen \<bar>mantissa ?x\<bar> -
           1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 0)),
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 13)))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0))))),
             template_hole 0))))),
    ("Conversion_IEEE_Float.fraction_denormal_of_Float",
     "is_denormal_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      fraction (denormal_of_Float ?x) =
      nat \<bar>mantissa ?x\<bar> *
      2 ^
      nat (Float.exponent ?x + int (bias TYPE((?'e, ?'f) IEEE.float)) +
           int LENGTH(?'f) -
           1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 17,
           template_app (template_hole 16, template_var 0)),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 0)))),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8))),
             template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 0)),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 19)))),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 2, template_hole 1)))),
                 template_hole 0))))))),
    ("Conversion_IEEE_Float.fraction_normal_of_Float",
     "is_normal_Float TYPE((?'e, ?'f) IEEE.float) ?x ==>
      fraction (normal_of_Float ?x) =
      nat \<bar>mantissa ?x\<bar> *
      2 ^ (Suc LENGTH(?'f) - nat (bitlen \<bar>mantissa ?x\<bar>)) -
      2 ^ LENGTH(?'f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 14,
           template_app (template_hole 13, template_var 0)),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0)))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_app
                    (template_hole 10,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 8, template_var 0)))))))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_app (template_hole 2, template_hole 1)))))),
    ("Conversion_IEEE_Float.is_denormal_FloatD",
     "is_denormal_Float ?x ?f ==>
      bitlen \<bar>mantissa ?f\<bar>
      <= 1 - Float.exponent ?f - int (bias ?x) &
      1 - 2 ^ (LENGTH(?'e) - 1) - int LENGTH(?'f) < Float.exponent ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20,
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_hole 18,
                     template_app
                      (template_hole 17,
                       template_app (template_hole 16, template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app (template_hole 15, template_hole 14),
                       template_app (template_hole 13, template_var 0))),
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_var 1))))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app (template_hole 15, template_hole 14),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_hole 6))),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4, template_hole 3)),
                           template_hole 2)))),
                   template_app
                    (template_hole 12,
                     template_app (template_hole 1, template_hole 0)))),
               template_app (template_hole 13, template_var 0)))
           ))),
    ("Conversion_IEEE_Float.is_finite_Float_eq",
     "is_finite_Float TYPE((?'e, ?'f) IEEE.float) ?f =
      (let e = Float.exponent ?f; bm = bitlen \<bar>mantissa ?f\<bar>
       in bm <= int (Suc LENGTH(?'f)) &
          bm <= 2 ^ (LENGTH(?'e) - 1) - e &
          1 - 2 ^ (LENGTH(?'e) - 1) - int LENGTH(?'f) < e)",
     template_equation
      (template_app
        (template_app (template_hole 23, template_hole 22), template_var 0),
       template_app
        (template_app
          (template_hole 21,
           template_app (template_hole 20, template_var 0)),
         t_empty)))]
