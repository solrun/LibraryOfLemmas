Loading theory "Draft.Word" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.SHA1" via "Draft.SHA1Padding" via "Draft.WordOperations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "Draft.Mod" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "Draft.Crypt")
Loading theory "HOL-Library.FuncSet" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
### theory "Draft.Mod"
### 0.038s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "Draft.Crypt" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts")
### theory "Draft.Crypt"
### 0.032s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RSAPSSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.107s elapsed time, 0.416s cpu time, 0.052s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
consts
  bitval :: "bit => nat"
consts
  bitnot :: "bit => bit"
consts
  bitand :: "bit => bit => bit"
consts
  bitor :: "bit => bit => bit"
consts
  bitxor :: "bit => bit => bit"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
consts
  rem_initial :: "bit => bit list => bit list"
### theory "HOL-Library.FuncSet"
### 0.378s elapsed time, 1.509s cpu time, 0.131s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.447s elapsed time, 1.773s cpu time, 0.210s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.Infinite_Set"
### 0.273s elapsed time, 1.066s cpu time, 0.158s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RSAPSSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  norm_signed :: "bit list => bit list"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.454s elapsed time, 1.665s cpu time, 0.623s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RSAPSSMoreTemplates" via "Draft.ExtrEqs")
consts
  fast_bv_to_nat_helper :: "bit list => num => num"
### theory "Draft.Word"
### 0.988s elapsed time, 3.762s cpu time, 0.833s GC time
Loading theory "Draft.WordOperations" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.SHA1" via "Draft.SHA1Padding")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Algebra.Congruence"
### 0.821s elapsed time, 3.107s cpu time, 0.837s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  shift :: "'a list => 'a stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.Stream"
### 0.851s elapsed time, 3.344s cpu time, 0.411s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RSAPSSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  mset :: "'a list => 'a multiset"
### theory "HOL-Library.Set_Algebras"
### 0.497s elapsed time, 1.802s cpu time, 0.906s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RSAPSSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
consts
  last :: "bit list => bit"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
consts
  dellast :: "'a list => 'a list"
### theory "HOL-Algebra.Order"
### 1.191s elapsed time, 4.512s cpu time, 1.245s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
consts
  zerolist :: "nat => bit list"
consts
  hextobv :: "HEX => bit list"
consts
  hexvtobv :: "HEX list => bit list"
### theory "Draft.WordOperations"
### 1.853s elapsed time, 7.123s cpu time, 1.638s GC time
Loading theory "Draft.SHA1Padding" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.SHA1")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.SHA1Padding"
### 0.046s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Draft.SHA1" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS")
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
Found termination order: "size <*mlex*> {}"
consts
  sha1compress ::
    "nat
     => bit list
        => bit list
           => bit list => bit list => bit list => bit list => bit list"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.245s elapsed time, 4.687s cpu time, 1.485s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SHA1"
### 0.976s elapsed time, 3.623s cpu time, 1.376s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RSAPSSMoreTemplates" via "Draft.ExtrEqs")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Found termination order: "size <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 0.742s elapsed time, 2.935s cpu time, 0.333s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.880s elapsed time, 3.479s cpu time, 0.418s GC time
### theory "HOL-Library.Tree"
### 2.512s elapsed time, 9.684s cpu time, 2.114s GC time
Loading theory "Draft.Templates" (required by "Draft.RSAPSSMoreTemplates" via "Draft.ExtrEqs")
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.097s elapsed time, 0.321s cpu time, 0.107s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RSAPSSMoreTemplates")
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### theory "HOL-Library.Multiset"
### 4.491s elapsed time, 17.047s cpu time, 4.162s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.676s elapsed time, 2.202s cpu time, 0.268s GC time
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 1.521s elapsed time, 4.739s cpu time, 0.678s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.454s elapsed time, 1.400s cpu time, 0.191s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Coset"
### 1.134s elapsed time, 3.471s cpu time, 0.430s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.616s elapsed time, 1.876s cpu time, 0.155s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.499s elapsed time, 1.519s cpu time, 0.168s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.450s elapsed time, 6.823s cpu time, 0.618s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.310s elapsed time, 3.980s cpu time, 0.348s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.902s elapsed time, 16.382s cpu time, 1.605s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Algebra.AbelCoset"
### 2.280s elapsed time, 6.077s cpu time, 0.495s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Algebra.Ideal"
### 1.518s elapsed time, 3.132s cpu time, 0.220s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
### theory "HOL-Algebra.RingHom"
### 0.652s elapsed time, 1.360s cpu time, 0.133s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.132s elapsed time, 14.905s cpu time, 1.283s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS" via "Draft.Wordarith")
### theory "HOL-Computational_Algebra.Primes"
### 0.231s elapsed time, 0.539s cpu time, 0.124s GC time
Loading theory "Draft.Pdifference" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "Draft.Productdivides")
Loading theory "Draft.Wordarith" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.EMSAPSS")
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues")
### theory "Draft.Pdifference"
### 1.056s elapsed time, 3.804s cpu time, 2.952s GC time
Loading theory "Draft.Productdivides" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts")
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
### theory "Draft.Productdivides"
### 0.045s elapsed time, 0.182s cpu time, 0.000s GC time
consts
  remzero :: "bit list => bit list"
### theory "Draft.Wordarith"
### 1.237s elapsed time, 4.408s cpu time, 3.011s GC time
Loading theory "Draft.EMSAPSS" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS")
consts
  MGF2 :: "bit list => nat => bit list"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
### theory "HOL-Number_Theory.Cong"
### 1.774s elapsed time, 6.036s cpu time, 3.198s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "Draft.EMSAPSS"
### 0.619s elapsed time, 1.882s cpu time, 0.188s GC time
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Number_Theory.Totient"
### 0.464s elapsed time, 1.102s cpu time, 0.118s GC time
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Algebra.UnivPoly"
### 8.706s elapsed time, 21.217s cpu time, 7.371s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts" via "HOL-Number_Theory.Residues")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.025s elapsed time, 2.641s cpu time, 0.394s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS" via "Draft.Cryptinverts")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 1.206s elapsed time, 1.381s cpu time, 0.198s GC time
Loading theory "Draft.Cryptinverts" (required by "Draft.RSAPSSMoreTemplates" via "Draft.RSAPSS")
consts
  pred :: "nat => nat"
### theory "Draft.Cryptinverts"
### 0.552s elapsed time, 0.646s cpu time, 0.128s GC time
Loading theory "Draft.RSAPSS" (required by "Draft.RSAPSSMoreTemplates")
### theory "Draft.RSAPSS"
### 0.496s elapsed time, 0.496s cpu time, 0.000s GC time
Loading theory "Draft.RSAPSSMoreTemplates"
val templateLemmas =
   [("RSAPSS.MGFLen_helper",
     "MGF ?z ?l ~= [] ==> ?l <= 2 ^ 32 * length (sha1 ?z)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3, template_hole 2)))))))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("RSAPSS.length_emsapss_encode",
     "emsapss_encode ?m ?x ~= [] ==>
      length (emsapss_encode ?m ?x) = roundup ?x 8 * 8",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 1, template_hole 0)))))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("RSAPSS.bv_to_nat_emsapss_encode_le",
     "emsapss_encode ?m ?x ~= [] ==>
      bv_to_nat (emsapss_encode ?m ?x) < 2 ^ (roundup ?x 8 * 8)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 3, template_hole 2)))))),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 3, template_hole 2))))))))),
    ("RSAPSS.emBits_roundup_cancel",
     "?emBits mod 8 ~= 0 ==>
      roundup ?emBits 8 * 8 - ?emBits = 8 - ?emBits mod 8",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 5, template_hole 4))))),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5, template_hole 4)))))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 5, template_hole 4)))))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 5, template_hole 4))))),
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 5, template_hole 4))))))))),
    ("RSAPSS.emBits_roundup_cancel2",
     "?emBits mod 8 ~= 0 ==>
      roundup ?emBits 8 * 8 - (8 - ?emBits mod 8) = ?emBits",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 5, template_hole 4))))),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5, template_hole 4)))))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 5, template_hole 4)))))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 5, template_hole 4))))),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 5, template_hole 4))))))),
         template_var 0))),
    ("RSAPSS.bv_to_nat_emsapss_smaller_pq",
     "[| prime ?p; prime ?q; ?p ~= ?q;
         emsapss_encode ?m (length (nat_to_bv (?p * ?q)) - Suc 0) ~= [] |]
      ==> bv_to_nat
           (emsapss_encode ?m (length (nat_to_bv (?p * ?q)) - Suc 0))
          < ?p * ?q",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_var 2),
                          template_var 1)))),
                  template_app (template_hole 4, template_hole 3))),
              template_hole 2)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 9, template_var 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1)))),
               template_app (template_hole 4, template_hole 3)))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 1)))),
    ("RSAPSS.length_bound2",
     "8 <= length
            (bvxor
              (generate_DB
                (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                  (length (sha1 (generate_M' (sha1 ?m) salt)))))
              (MGF (sha1 (generate_M' (sha1 ?m) salt))
                (length
                  (generate_DB
                    (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                      (length (sha1 (generate_M' (sha1 ?m) salt))))))))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 15,
         template_app
          (template_hole 14,
           template_app
            (template_hole 14,
             template_app (template_hole 14, template_hole 13)))),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 12,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 2),
                             template_var 1)))),
                     template_app (template_hole 5, template_hole 4))),
                 template_app
                  (template_hole 12,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 3, template_var 0)),
                       template_hole 1)))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 0)),
                   template_hole 1))),
             template_app
              (template_hole 12,
               template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_hole 12,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 2),
                               template_var 1)))),
                       template_app (template_hole 5, template_hole 4))),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 3, template_var 0)),
                         template_hole 1))))))))))),
    ("RSAPSS.length_bound",
     "[| ?emBits mod 8 ~= 0; 8 <= length ?maskedDB |]
      ==> length (remzero (maskedDB_zero ?maskedDB ?emBits @ ?a @ ?b))
          <= length (?maskedDB @ ?a @ ?b) - (8 - ?emBits mod 8)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 8, template_hole 7))))),
              template_hole 6)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_hole 8,
              template_app
               (template_hole 8,
                template_app (template_hole 8, template_hole 7)))),
          template_app (template_hole 4, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 8, template_hole 7))))),
             template_app
              (template_app (template_hole 10, template_var 3),
               template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 8, template_hole 7)))))))))),
    ("RSAPSS.rsa_pss_verify",
     "[| prime ?p; prime ?q; ?p ~= ?q; ?n = ?p * ?q;
         ?e * ?d mod (pred ?p * pred ?q) = 1; rsapss_sign ?m ?e ?n ~= [];
         ?s = rsapss_sign ?m ?e ?n |]
      ==> rsapss_verify ?m ?s ?d ?n = True",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_predicate
         (template_app (template_hole 12, template_var 5)),
        template_negation
         (template_equation (template_var 6, template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2)),
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 7, template_var 6)),
              template_app (template_hole 7, template_var 5))),
          template_hole 6),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 3),
                template_var 4),
              template_hole 3)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2),
           template_var 4),
         template_hole 0))),
    ("RSAPSS.length_emsapss_smaller_pq",
     "[| prime ?p; prime ?q;
         emsapss_encode ?m (length (nat_to_bv (?p * ?q)) - Suc 0) ~= [];
         (length (nat_to_bv (?p * ?q)) - Suc 0) mod 8 ~= 0 |]
      ==> length
           (remzero
             (emsapss_encode ?m (length (nat_to_bv (?p * ?q)) - Suc 0)))
          < length (nat_to_bv (?p * ?q))",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 14, template_var 0),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_var 2),
                          template_var 1)))),
                  template_app (template_hole 9, template_hole 8))),
              template_hole 7)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_hole 12,
                        template_app
                         (template_hole 11,
                          template_app
                           (template_app (template_hole 10, template_var 2),
                            template_var 1)))),
                    template_app (template_hole 9, template_hole 8))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 3, template_hole 2))))),
              template_hole 8)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 12,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 14, template_var 0),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 2),
                         template_var 1)))),
                 template_app (template_hole 9, template_hole 8))))),
         template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 2),
               template_var 1)))))),
    ("RSAPSS.length_helper1",
     "length
       (bvxor
         (generate_DB
           (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
             (length (sha1 (generate_M' (sha1 ?m) salt)))))
         (MGF (sha1 (generate_M' (sha1 ?m) salt))
           (length
             (generate_DB
               (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                 (length (sha1 (generate_M' (sha1 ?m) salt))))))) @
        sha1 (generate_M' (sha1 ?m) salt) @ BC) =
      length
       (bvxor
         (generate_DB
           (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
             (length (sha1 (generate_M' (sha1 ?m) salt)))))
         (MGF (sha1 (generate_M' (sha1 ?m) salt))
           (length
             (generate_DB
               (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                 (length (sha1 (generate_M' (sha1 ?m) salt)))))))) +
      168",
     template_equation
      (template_app
        (template_hole 19,
         template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 14,
                           template_app
                            (template_hole 19,
                             template_app
                              (template_hole 13,
                               template_app
                                (template_app
                                  (template_hole 12, template_var 2),
                                 template_var 1)))),
                         template_app
                          (template_hole 11, template_hole 10))),
                     template_app
                      (template_hole 19,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 9, template_var 0)),
                           template_hole 7)))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 9, template_var 0)),
                       template_hole 7))),
                 template_app
                  (template_hole 19,
                   template_app
                    (template_hole 16,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_hole 19,
                               template_app
                                (template_hole 13,
                                 template_app
                                  (template_app
                                    (template_hole 12, template_var 2),
                                   template_var 1)))),
                           template_app
                            (template_hole 11, template_hole 10))),
                       template_app
                        (template_hole 19,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 9, template_var 0)),
                             template_hole 7))))))))),
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 9, template_var 0)),
                   template_hole 7))),
             template_hole 5))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 19,
             template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_hole 16,
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 14,
                           template_app
                            (template_hole 19,
                             template_app
                              (template_hole 13,
                               template_app
                                (template_app
                                  (template_hole 12, template_var 2),
                                 template_var 1)))),
                         template_app
                          (template_hole 11, template_hole 10))),
                     template_app
                      (template_hole 19,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 9, template_var 0)),
                           template_hole 7)))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 9, template_var 0)),
                       template_hole 7))),
                 template_app
                  (template_hole 19,
                   template_app
                    (template_hole 16,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_hole 19,
                               template_app
                                (template_hole 13,
                                 template_app
                                  (template_app
                                    (template_hole 12, template_var 2),
                                   template_var 1)))),
                           template_app
                            (template_hole 11, template_hole 10))),
                       template_app
                        (template_hole 19,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 9, template_var 0)),
                             template_hole 7)))))))))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2, template_hole 0))))))))))),
    ("RSAPSS.length_helper2",
     "[| prime ?p; prime ?q;
         MGF (sha1 (generate_M' (sha1 ?m) salt))
          (length
            (generate_DB
              (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                (length (sha1 (generate_M' (sha1 ?m) salt)))))) ~=
         [];
         length (sha1 ?M) + sLen + 16
         <= length (nat_to_bv (?p * ?q)) - Suc 0 |]
      ==> length
           (bvxor
             (generate_DB
               (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                 (length (sha1 (generate_M' (sha1 ?m) salt)))))
             (MGF (sha1 (generate_M' (sha1 ?m) salt))
               (length
                 (generate_DB
                   (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                     (length (sha1 (generate_M' (sha1 ?m) salt)))))))) =
          roundup (length (nat_to_bv (?p * ?q)) - Suc 0) 8 * 8 - 168",
     template_implication
      ([template_predicate
         (template_app (template_hole 25, template_var 3)),
        template_predicate
         (template_app (template_hole 25, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_hole 21,
                    template_app
                     (template_app
                       (template_hole 20,
                        template_app (template_hole 21, template_var 1)),
                      template_hole 19))),
                template_app
                 (template_hole 18,
                  template_app
                   (template_hole 17,
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app
                           (template_hole 15,
                            template_app
                             (template_hole 18,
                              template_app
                               (template_hole 14,
                                template_app
                                 (template_app
                                   (template_hole 13, template_var 3),
                                  template_var 2)))),
                          template_app
                           (template_hole 12, template_hole 11))),
                      template_app
                       (template_hole 18,
                        template_app
                         (template_hole 21,
                          template_app
                           (template_app
                             (template_hole 20,
                              template_app
                               (template_hole 21, template_var 1)),
                            template_hole 19))))))),
              template_hole 10)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 18,
                    template_app (template_hole 21, template_var 0))),
                template_hole 7)),
            template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 5, template_hole 4)))))),
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_hole 18,
                template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 3),
                    template_var 2)))),
            template_app (template_hole 12, template_hole 11)))],
       template_equation
        (template_app
          (template_hole 18,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 17,
                 template_app
                  (template_app
                    (template_hole 16,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app
                          (template_hole 18,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_app
                                (template_hole 13, template_var 3),
                               template_var 2)))),
                       template_app (template_hole 12, template_hole 11))),
                   template_app
                    (template_hole 18,
                     template_app
                      (template_hole 21,
                       template_app
                        (template_app
                          (template_hole 20,
                           template_app (template_hole 21, template_var 1)),
                         template_hole 19)))))),
             template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_hole 21,
                   template_app
                    (template_app
                      (template_hole 20,
                       template_app (template_hole 21, template_var 1)),
                     template_hole 19))),
               template_app
                (template_hole 18,
                 template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app
                          (template_hole 15,
                           template_app
                            (template_hole 18,
                             template_app
                              (template_hole 14,
                               template_app
                                (template_app
                                  (template_hole 13, template_var 3),
                                 template_var 2)))),
                         template_app
                          (template_hole 12, template_hole 11))),
                     template_app
                      (template_hole 18,
                       template_app
                        (template_hole 21,
                         template_app
                          (template_app
                            (template_hole 20,
                             template_app
                              (template_hole 21, template_var 1)),
                           template_hole 19))))))))),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 15,
                         template_app
                          (template_hole 18,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_app
                                (template_hole 13, template_var 3),
                               template_var 2)))),
                       template_app (template_hole 12, template_hole 11))),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 5, template_hole 4)))))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 5, template_hole 4)))))),
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 5, template_hole 4)))))))))))),
    ("RSAPSS.length_helper",
     "[| prime ?p; prime ?q;
         (length (nat_to_bv (?p * ?q)) - Suc 0) mod 8 ~= 0;
         MGF (sha1 (generate_M' (sha1 ?m) salt))
          (length
            (generate_DB
              (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                (length (sha1 (generate_M' (sha1 ?m) salt)))))) ~=
         [];
         length (sha1 ?M) + sLen + 16
         <= length (nat_to_bv (?p * ?q)) - Suc 0 |]
      ==> length
           (remzero
             (maskedDB_zero
               (bvxor
                 (generate_DB
                   (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                     (length (sha1 (generate_M' (sha1 ?m) salt)))))
                 (MGF (sha1 (generate_M' (sha1 ?m) salt))
                   (length
                     (generate_DB
                       (generate_PS (length (nat_to_bv (?p * ?q)) - Suc 0)
                         (length (sha1 (generate_M' (sha1 ?m) salt))))))))
               (length (nat_to_bv (?p * ?q)) - Suc 0) @
              sha1 (generate_M' (sha1 ?m) salt) @ BC))
          < length (nat_to_bv (?p * ?q))",
     template_implication
      ([template_predicate
         (template_app (template_hole 29, template_var 3)),
        template_predicate
         (template_app (template_hole 29, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_app
                     (template_hole 25,
                      template_app
                       (template_hole 24,
                        template_app
                         (template_hole 23,
                          template_app
                           (template_app (template_hole 22, template_var 3),
                            template_var 2)))),
                    template_app (template_hole 21, template_hole 20))),
                template_app
                 (template_hole 19,
                  template_app
                   (template_hole 18,
                    template_app
                     (template_hole 18,
                      template_app (template_hole 18, template_hole 17))))),
              template_hole 20)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 14, template_var 1)),
                      template_hole 12))),
                template_app
                 (template_hole 24,
                  template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_hole 25,
                            template_app
                             (template_hole 24,
                              template_app
                               (template_hole 23,
                                template_app
                                 (template_app
                                   (template_hole 22, template_var 3),
                                  template_var 2)))),
                          template_app
                           (template_hole 21, template_hole 20))),
                      template_app
                       (template_hole 24,
                        template_app
                         (template_hole 14,
                          template_app
                           (template_app
                             (template_hole 13,
                              template_app
                               (template_hole 14, template_var 1)),
                            template_hole 12))))))),
              template_hole 9)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 24,
                    template_app (template_hole 14, template_var 0))),
                template_hole 6)),
            template_app
             (template_hole 19,
              template_app
               (template_hole 18,
                template_app
                 (template_hole 18,
                  template_app
                   (template_hole 18,
                    template_app (template_hole 18, template_hole 17)))))),
          template_app
           (template_app
             (template_hole 25,
              template_app
               (template_hole 24,
                template_app
                 (template_hole 23,
                  template_app
                   (template_app (template_hole 22, template_var 3),
                    template_var 2)))),
            template_app (template_hole 21, template_hole 20)))],
       template_inequation
        (less_than,
         template_app
          (template_hole 24,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_hole 25,
                                   template_app
                                    (template_hole 24,
                                     template_app
(template_hole 23,
 template_app
  (template_app (template_hole 22, template_var 3), template_var 2)))),
                                 template_app
                                  (template_hole 21, template_hole 20))),
                             template_app
                              (template_hole 24,
                               template_app
                                (template_hole 14,
                                 template_app
                                  (template_app
                                    (template_hole 13,
                                     template_app
(template_hole 14, template_var 1)),
                                   template_hole 12)))))),
                       template_app
                        (template_app
                          (template_hole 15,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_app
                                (template_hole 13,
                                 template_app
                                  (template_hole 14, template_var 1)),
                               template_hole 12))),
                         template_app
                          (template_hole 24,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_app
                                (template_hole 10,
                                 template_app
                                  (template_app
                                    (template_hole 25,
                                     template_app
(template_hole 24,
 template_app
  (template_hole 23,
   template_app
    (template_app (template_hole 22, template_var 3), template_var 2)))),
                                   template_app
                                    (template_hole 21, template_hole 20))),
                               template_app
                                (template_hole 24,
                                 template_app
                                  (template_hole 14,
                                   template_app
                                    (template_app
(template_hole 13, template_app (template_hole 14, template_var 1)),
                                     template_hole 12))))))))),
                   template_app
                    (template_app
                      (template_hole 25,
                       template_app
                        (template_hole 24,
                         template_app
                          (template_hole 23,
                           template_app
                            (template_app
                              (template_hole 22, template_var 3),
                             template_var 2)))),
                     template_app (template_hole 21, template_hole 20)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app (template_hole 14, template_var 1)),
                       template_hole 12))),
                 template_hole 0)))),
         template_app
          (template_hole 24,
           template_app
            (template_hole 23,
             template_app
              (template_app (template_hole 22, template_var 3),
               template_var 2))))))]:
   (string * thm * template) list
### theory "Draft.RSAPSSMoreTemplates"
### 0.640s elapsed time, 1.034s cpu time, 0.207s GC time
val it = (): unit
