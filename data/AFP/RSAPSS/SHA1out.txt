Loading theory "Draft.Word" (required by "Draft.SHA1MoreTemplates" via "Draft.SHA1" via "Draft.SHA1Padding" via "Draft.WordOperations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SHA1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SHA1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SHA1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.655s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SHA1MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.855s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SHA1MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
consts
  bitval :: "bit => nat"
consts
  bitnot :: "bit => bit"
consts
  bitand :: "bit => bit => bit"
consts
  bitor :: "bit => bit => bit"
consts
  bitxor :: "bit => bit => bit"
### theory "HOL-Library.Nat_Bijection"
### 0.372s elapsed time, 1.492s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SHA1MoreTemplates" via "Draft.ExtrEqs")
consts
  rem_initial :: "bit => bit list => bit list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm_signed :: "bit list => bit list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  fast_bv_to_nat_helper :: "bit list => num => num"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Draft.Word"
### 1.017s elapsed time, 3.904s cpu time, 0.969s GC time
Loading theory "Draft.WordOperations" (required by "Draft.SHA1MoreTemplates" via "Draft.SHA1" via "Draft.SHA1Padding")
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.916s elapsed time, 3.499s cpu time, 0.962s GC time
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.988s elapsed time, 3.585s cpu time, 0.951s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  last :: "bit list => bit"
consts
  dellast :: "'a list => 'a list"
### theory "HOL-Library.Tree"
### 1.864s elapsed time, 5.847s cpu time, 1.232s GC time
Loading theory "Draft.Templates" (required by "Draft.SHA1MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.187s cpu time, 0.072s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SHA1MoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
consts
  zerolist :: "nat => bit list"
consts
  hextobv :: "HEX => bit list"
consts
  hexvtobv :: "HEX list => bit list"
### theory "Draft.WordOperations"
### 1.263s elapsed time, 3.085s cpu time, 0.386s GC time
Loading theory "Draft.SHA1Padding" (required by "Draft.SHA1MoreTemplates" via "Draft.SHA1")
### theory "Draft.SHA1Padding"
### 0.058s elapsed time, 0.153s cpu time, 0.072s GC time
Loading theory "Draft.SHA1" (required by "Draft.SHA1MoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  sha1compress ::
    "nat
     => bit list
        => bit list
           => bit list => bit list => bit list => bit list => bit list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.566s elapsed time, 1.206s cpu time, 0.127s GC time
### theory "Draft.SHA1"
### 0.430s elapsed time, 0.760s cpu time, 0.055s GC time
Loading theory "Draft.SHA1MoreTemplates"
val templateLemmas =
   [("SHA1Padding.sha1padd",
     "sha1padd ?x = helppadd ?x (nat_to_bv (length ?x)) (length ?x)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("SHA1.fxor", "fxor ?x ?y ?z = bvxor (bvxor ?x ?y) ?z",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("SHA1.sha1len", "length (sha1 ?m) = 160",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2, template_hole 0)))))))))),
    ("SHA1.fif", "fif ?x ?y ?z = bvor (bvand ?x ?y) (bvand (bv_not ?x) ?z)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("SHA1.delblock", "delblock ?x = delblockhelp ?x 512",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1, template_hole 0))))))))))))),
    ("SHA1.getblock", "getblock ?x = select ?x 0 511",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 0), template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1, template_hole 0)))))))))))),
    ("SHA1.fmaj",
     "fmaj ?x ?y ?z =
      bvor (bvor (bvand ?x ?y) (bvand ?x ?z)) (bvand ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SHA1.sha1",
     "sha1 ?x =
      (let y = sha1padd ?x
       in sha1block (getblock y) (delblock y) IV1 IV2 IV3 IV4 IV5)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         t_empty))),
    ("SHA1.sha1blocklen", "length (sha1block ?b ?x ?A ?B ?C ?D ?E) = 160",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 2,
             template_app
              (template_hole 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 2, template_hole 0)))))))))),
    ("SHA1.sha1compressstart",
     "sha1compressstart ?r ?b ?A ?B ?C ?D ?E =
      sha1compress ?r (sha1expand ?b 79) ?A ?B ?C ?D ?E",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 6),
                   template_app
                    (template_app (template_hole 4, template_var 5),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 1,
                                   template_hole 0))))))))),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("SHA1.kselect",
     "kselect ?r =
      (if ?r < 20 then K1
       else if ?r < 40 then K2 else if ?r < 60 then K3 else K4)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 6, template_hole 4))))))),
           template_hole 3),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 6, template_hole 4)))))))),
             template_hole 2),
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 5, template_hole 4)))))))),
               template_hole 1),
             template_hole 0))))),
    ("SHA1Padding.zerocount",
     "zerocount ?n = ((?n + 64) div 512 + 1) * 512 - ?n - 65",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 6, template_var 0),
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3, template_app (template_hole 3, template_hole 2))))))))),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 3,
 template_app
  (template_hole 3,
   template_app
    (template_hole 3,
     template_app (template_hole 3, template_hole 2)))))))))))),
                     template_hole 1)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 3,
                                     template_hole 2)))))))))))),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3, template_hole 2)))))))))),
    ("SHA1.fselect",
     "fselect ?r ?x ?y ?z =
      (if ?r < 20 then fif ?x ?y ?z
       else if ?r < 40 then fxor ?x ?y ?z
            else if ?r < 60 then fmaj ?x ?y ?z else fxor ?x ?y ?z)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 3),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 5, template_hole 3))))))),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 5, template_hole 3)))))))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4, template_hole 3)))))))),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.SHA1MoreTemplates"
### 0.336s elapsed time, 0.485s cpu time, 0.051s GC time
val it = (): unit
