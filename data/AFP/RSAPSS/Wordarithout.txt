Loading theory "Draft.Word" (required by "Draft.WordarithMoreTemplates" via "Draft.Wordarith" via "Draft.WordOperations")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WordarithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Cancellation" (required by "Draft.WordarithMoreTemplates" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WordarithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.089s elapsed time, 0.383s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WordarithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.802s cpu time, 0.077s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WordarithMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.295s elapsed time, 1.184s cpu time, 0.077s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WordarithMoreTemplates" via "Draft.ExtrEqs")
consts
  bitval :: "bit => nat"
consts
  bitnot :: "bit => bit"
consts
  bitand :: "bit => bit => bit"
consts
  bitor :: "bit => bit => bit"
consts
  bitxor :: "bit => bit => bit"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
consts
  rem_initial :: "bit => bit list => bit list"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.456s elapsed time, 1.824s cpu time, 0.150s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.WordarithMoreTemplates" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm_signed :: "bit list => bit list"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  fast_bv_to_nat_helper :: "bit list => num => num"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Word"
### 1.119s elapsed time, 4.254s cpu time, 0.953s GC time
Loading theory "Draft.WordOperations" (required by "Draft.WordarithMoreTemplates" via "Draft.Wordarith")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.159s elapsed time, 4.414s cpu time, 1.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WordarithMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
### theory "HOL-Library.BigO"
### 1.149s elapsed time, 4.353s cpu time, 1.225s GC time
consts
  last :: "bit list => bit"
consts
  dellast :: "'a list => 'a list"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 2.527s elapsed time, 9.454s cpu time, 2.317s GC time
Loading theory "Draft.Templates" (required by "Draft.WordarithMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.254s cpu time, 0.063s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WordarithMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
consts
  zerolist :: "nat => bit list"
consts
  hextobv :: "HEX => bit list"
consts
  hexvtobv :: "HEX list => bit list"
### theory "Draft.WordOperations"
### 1.905s elapsed time, 6.958s cpu time, 1.557s GC time
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.587s elapsed time, 1.366s cpu time, 0.107s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.701s elapsed time, 11.096s cpu time, 2.535s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.WordarithMoreTemplates" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.290s elapsed time, 4.562s cpu time, 0.332s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.WordarithMoreTemplates" via "Draft.Wordarith" via "HOL-Computational_Algebra.Primes")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 5.954s elapsed time, 6.242s cpu time, 0.336s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.WordarithMoreTemplates" via "Draft.Wordarith")
### theory "HOL-Computational_Algebra.Primes"
### 0.175s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Draft.Wordarith" (required by "Draft.WordarithMoreTemplates")
consts
  remzero :: "bit list => bit list"
### theory "Draft.Wordarith"
### 0.251s elapsed time, 0.251s cpu time, 0.000s GC time
Loading theory "Draft.WordarithMoreTemplates"
val templateLemmas =
   [("Wordarith.remzeroeq", "bv_to_nat ?a = bv_to_nat (remzero ?a)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Wordarith.bv_to_nat_zero_prepend",
     "bv_to_nat ?a = bv_to_nat (\<zero> # ?a)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Wordarith.remzero_replicate",
     "remzero (replicate ?n \<zero> @ ?l) = remzero ?l",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("Wordarith.len_nat_to_bv_pos", "1 < ?a ==> 0 < length (nat_to_bv ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Wordarith.nat_to_bv_non_empty", "0 < ?n ==> nat_to_bv ?n ~= []",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Wordarith.hd_one", "0 < ?n ==> hd (nat_to_bv_helper ?n []) = \<one>",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Wordarith.rnddvd", "?b dvd ?a ==> roundup ?a ?b * ?b = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Wordarith.length_bvxor_bound",
     "?a <= length ?l ==> ?a <= length (bvxor ?l ?l2.0)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Wordarith.hd_append", "?x ~= [] ==> hd (?x @ ?xs) = hd ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Wordarith.two_dvd_exp", "0 < ?x ==> even (2 ^ ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0))
           ))),
    ("Wordarith.length_nat_to_bv_length",
     "nat_to_bv_length ?x ?y ~= [] ==>
      length (nat_to_bv_length ?x ?y) = ?y",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Wordarith.bv_to_nat_nat_to_bv_length",
     "nat_to_bv_length ?x ?y ~= [] ==>
      bv_to_nat (nat_to_bv_length ?x ?y) = ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Wordarith.nat_to_bv_length",
     "nat_to_bv_length ?n ?l =
      (if length (nat_to_bv ?n) <= ?l
       then bv_extend ?l \<zero> (nat_to_bv ?n) else [])",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1))),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_app (template_hole 3, template_var 1))),
         template_hole 0))),
    ("Wordarith.prime_hd_non_zero",
     "[| prime ?p; prime ?q |] ==> hd (nat_to_bv (?p * ?q)) ~= \<zero>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("Wordarith.len_lower_bound",
     "0 < ?n ==> 2 ^ (length (nat_to_bv ?n) - Suc 0) <= ?n",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_hole 9))),
         template_var 0))),
    ("Wordarith.roundup",
     "roundup ?x ?y = (if ?x mod ?y = 0 then ?x div ?y else ?x div ?y + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0)),
                   template_hole 3)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Wordarith.nat_to_bv_length_bv_to_nat",
     "[| length ?xs = ?n; ?xs ~= [] |]
      ==> nat_to_bv_length (bv_to_nat ?xs) ?n = ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 1))),
    ("Wordarith.length_lower",
     "[| length ?a < length ?b; hd ?b ~= \<zero> |]
      ==> bv_to_nat ?a < bv_to_nat ?b",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Wordarith.primerew",
     "[| ?m dvd ?p; ?m ~= 1; ?m ~= ?p |] ==> ~ prime ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Wordarith.nat_to_bv_helper_legacy_induct",
     "(!!n. n ~= 0 --> ?P (n div 2) ==> ?P n) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Wordarith.prime_equal",
     "[| prime ?p; prime ?q; 2 ^ ?x = ?p * ?q |] ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 0),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_equation (template_var 2, template_var 1))),
    ("Wordarith.exp_prod2", "[| 1 < ?a; 2 ^ ?x = ?a * 2 |] ==> even ?a",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)
           ))),
    ("Wordarith.exp_prod1", "[| 1 < ?b; 2 ^ ?x = 2 * ?b |] ==> even ?b",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)
           ))),
    ("Wordarith.odd_mul_odd", "[| odd ?p; odd ?q |] ==> odd (?p * ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.WordarithMoreTemplates"
### 0.427s elapsed time, 0.661s cpu time, 0.085s GC time
val it = (): unit
