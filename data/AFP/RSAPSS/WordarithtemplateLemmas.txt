   [("Wordarith.remzeroeq", "bv_to_nat ?a = bv_to_nat (remzero ?a)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Wordarith.bv_to_nat_zero_prepend",
     "bv_to_nat ?a = bv_to_nat (\<zero> # ?a)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Wordarith.remzero_replicate",
     "remzero (replicate ?n \<zero> @ ?l) = remzero ?l",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("Wordarith.len_nat_to_bv_pos", "1 < ?a ==> 0 < length (nat_to_bv ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Wordarith.nat_to_bv_non_empty", "0 < ?n ==> nat_to_bv ?n ~= []",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Wordarith.hd_one", "0 < ?n ==> hd (nat_to_bv_helper ?n []) = \<one>",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Wordarith.rnddvd", "?b dvd ?a ==> roundup ?a ?b * ?b = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Wordarith.length_bvxor_bound",
     "?a <= length ?l ==> ?a <= length (bvxor ?l ?l2.0)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Wordarith.hd_append", "?x ~= [] ==> hd (?x @ ?xs) = hd ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Wordarith.two_dvd_exp", "0 < ?x ==> even (2 ^ ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0))
           ))),
    ("Wordarith.length_nat_to_bv_length",
     "nat_to_bv_length ?x ?y ~= [] ==>
      length (nat_to_bv_length ?x ?y) = ?y",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Wordarith.bv_to_nat_nat_to_bv_length",
     "nat_to_bv_length ?x ?y ~= [] ==>
      bv_to_nat (nat_to_bv_length ?x ?y) = ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Wordarith.nat_to_bv_length",
     "nat_to_bv_length ?n ?l =
      (if length (nat_to_bv ?n) <= ?l
       then bv_extend ?l \<zero> (nat_to_bv ?n) else [])",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1))),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_app (template_hole 3, template_var 1))),
         template_hole 0))),
    ("Wordarith.prime_hd_non_zero",
     "[| prime ?p; prime ?q |] ==> hd (nat_to_bv (?p * ?q)) ~= \<zero>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("Wordarith.len_lower_bound",
     "0 < ?n ==> 2 ^ (length (nat_to_bv ?n) - Suc 0) <= ?n",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_hole 9))),
         template_var 0))),
    ("Wordarith.roundup",
     "roundup ?x ?y = (if ?x mod ?y = 0 then ?x div ?y else ?x div ?y + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0)),
                   template_hole 3)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Wordarith.nat_to_bv_length_bv_to_nat",
     "[| length ?xs = ?n; ?xs ~= [] |]
      ==> nat_to_bv_length (bv_to_nat ?xs) ?n = ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 1))),
    ("Wordarith.length_lower",
     "[| length ?a < length ?b; hd ?b ~= \<zero> |]
      ==> bv_to_nat ?a < bv_to_nat ?b",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Wordarith.primerew",
     "[| ?m dvd ?p; ?m ~= 1; ?m ~= ?p |] ==> ~ prime ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Wordarith.nat_to_bv_helper_legacy_induct",
     "(!!n. n ~= 0 --> ?P (n div 2) ==> ?P n) ==> ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Wordarith.prime_equal",
     "[| prime ?p; prime ?q; 2 ^ ?x = ?p * ?q |] ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 0),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 1))],
       template_equation (template_var 2, template_var 1))),
    ("Wordarith.exp_prod2", "[| 1 < ?a; 2 ^ ?x = ?a * 2 |] ==> even ?a",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)
           ))),
    ("Wordarith.exp_prod1", "[| 1 < ?b; 2 ^ ?x = 2 * ?b |] ==> even ?b",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)
           ))),
    ("Wordarith.odd_mul_odd", "[| odd ?p; odd ?q |] ==> odd (?p * ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           )))]
