   [("Pdifference.addconst", "?a = ?b ==> ?c + ?a = ?c + ?b",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Pdifference.invers", "?a <= ?x ==> ?x = ?x - ?a + ?a",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1)))),
    ("Pdifference.timesdistributesoverpdifference",
     "?m * pdifference ?a ?b = pdifference (?m * ?a) (?m * ?b)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pdifference.diff_add_assoc",
     "?b <= ?c ==> ?c - (?c - ?b) = ?c - ?c + ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 0)),
           template_var 1)))),
    ("Pdifference.diff_add_diff",
     "?x <= ?b ==> ?b - ?x + ?y - ?b = ?y - ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Pdifference.modadd", "?b = ?a + ?p * ?q ==> ?a mod ?p = ?b mod ?p",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Pdifference.equalmodstrick2",
     "?a mod ?p = ?b mod ?p ==> pdifference ?a ?b mod ?p = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Pdifference.equalmodstrick1",
     "pdifference ?a ?b mod ?p = 0 ==> ?a mod ?p = ?b mod ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1)),
            template_var 0),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Pdifference.multzero", "[| 0 < ?m mod ?p; ?m * ?a = 0 |] ==> ?a = 0",
     template_implication
      ([template_inequation
         (less_than, template_hole 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 0),
          template_hole 3)],
       template_equation (template_var 0, template_hole 3))),
    ("Pdifference.diff_add_assoc2",
     "?a <= ?c ==> ?c - (?c - ?a + ?b) = ?c - ?c + ?a - ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("Pdifference.primekeyrewrite",
     "[| prime ?p; ?p dvd ?a * ?b; ~ ?p dvd ?a |] ==> ?p dvd ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("Pdifference.invers2",
     "[| ?a <= ?b; ?b - ?a = ?p * ?q |] ==> ?b = ?a + ?p * ?q",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 3),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Pdifference.primekeytrick",
     "[| ?M * ?A mod ?P = ?M * ?B mod ?P; ?M mod ?P ~= 0; prime ?P |]
      ==> ?A mod ?P = ?B mod ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 0)),
            template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_hole 1)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_var 1))))]
